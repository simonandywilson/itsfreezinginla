var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var ReactVersion = "18.2.0", REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactCurrentDispatcher = {
        current: null
      }, ReactCurrentBatchConfig = {
        transition: null
      }, ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1
      }, ReactCurrentOwner = {
        current: null
      }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
      }
      ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
      }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = "";
        currentExtraStackFrame && (stack += currentExtraStackFrame);
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        return impl && (stack += impl() || ""), stack;
      };
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame, ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning2("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey])
            return;
          error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return !1;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      }, assign = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      function Component3(props, context2, updater) {
        this.props = props, this.context = context2, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      Component3.prototype.isReactComponent = {}, Component3.prototype.setState = function(partialState, callback) {
        if (typeof partialState != "object" && typeof partialState != "function" && partialState != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      }, Component3.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component3.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
          });
        };
        for (var fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component3.prototype;
      function PureComponent(props, context2, updater) {
        this.props = props, this.context = context2, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent, assign(pureComponentPrototype, Component3.prototype), pureComponentPrototype.isPureReactComponent = !0;
      function createRef() {
        var refObject = {
          current: null
        };
        return Object.seal(refObject), refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a4) {
        return isArrayImpl(a4);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: !0
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          specialPropRefWarningShown || (specialPropRefWarningShown = !0, error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: !0
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function createElement8(type, config2, children) {
        var propName, props = {}, key = null, ref = null, self2 = null, source = null;
        if (config2 != null) {
          hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2)), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), self2 = config2.__self === void 0 ? null : config2.__self, source = config2.__source === void 0 ? null : config2.__source;
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i7 = 0; i7 < childrenLength; i7++)
            childArray[i7] = arguments[i7 + 2];
          Object.freeze && Object.freeze(childArray), props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
        }
        if (key || ref) {
          var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
          key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config2, children) {
        if (element == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName, props = assign({}, element.props), key = element.key, ref = element.ref, self2 = element._self, source = element._source, owner = element._owner;
        if (config2 != null) {
          hasValidRef(config2) && (ref = config2.ref, owner = ReactCurrentOwner.current), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key);
          var defaultProps;
          element.type && element.type.defaultProps && (defaultProps = element.type.defaultProps);
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config2[propName] === void 0 && defaultProps !== void 0 ? props[propName] = defaultProps[propName] : props[propName] = config2[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i7 = 0; i7 < childrenLength; i7++)
            childArray[i7] = arguments[i7 + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".", SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g, escaperLookup = {
          "=": "=0",
          ":": "=2"
        }, escapedString = key.replace(escapeRegex, function(match2) {
          return escaperLookup[match2];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text2) {
        return text2.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        return typeof element == "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
      }
      function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        (type === "undefined" || type === "boolean") && (children = null);
        var invokeCallback = !1;
        if (children === null)
          invokeCallback = !0;
        else
          switch (type) {
            case "string":
            case "number":
              invokeCallback = !0;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = !0;
              }
          }
        if (invokeCallback) {
          var _child = children, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c5) {
              return c5;
            });
          } else
            mappedChild != null && (isValidElement2(mappedChild) && (mappedChild.key && (!_child || _child.key !== mappedChild.key) && checkKeyStringCoercion(mappedChild.key), mappedChild = cloneAndReplaceKey(
              mappedChild,
              escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
            )), array2.push(mappedChild));
          return 1;
        }
        var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children))
          for (var i7 = 0; i7 < children.length; i7++)
            child = children[i7], nextName = nextNamePrefix + getElementKey(child, i7), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
        else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn == "function") {
            var iterableChildren = children;
            iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            for (var iterator = iteratorFn.call(iterableChildren), step, ii = 0; !(step = iterator.next()).done; )
              child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context2) {
        if (children == null)
          return children;
        var result = [], count2 = 0;
        return mapIntoArray(children, result, "", "", function(child) {
          return func.call(context2, child, count2++);
        }), result;
      }
      function countChildren(children) {
        var n4 = 0;
        return mapChildren(children, function() {
          n4++;
        }), n4;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement2(children))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
      function createContext5(defaultValue) {
        var context2 = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context2.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context2
        };
        var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context2
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context2.Provider;
              },
              set: function(_Provider) {
                context2.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context2._currentValue;
              },
              set: function(_currentValue) {
                context2._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context2._currentValue2;
              },
              set: function(_currentValue2) {
                context2._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context2._threadCount;
              },
              set: function(_threadCount) {
                context2._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context2.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context2.displayName;
              },
              set: function(displayName) {
                hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
              }
            }
          }), context2.Consumer = Consumer;
        }
        return context2._currentRenderer = null, context2._currentRenderer2 = null, context2;
      }
      var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result, thenable = ctor();
          if (thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved, resolved._result = moduleObject2;
            }
          }, function(error3) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected, rejected._result = error3;
            }
          }), payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending, pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          return moduleObject === void 0 && error2(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, moduleObject), "default" in moduleObject || error2(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject), moduleObject.default;
        } else
          throw payload._result;
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        }, lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps, propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: !0,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: !0
                });
              }
            },
            propTypes: {
              configurable: !0,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                  enumerable: !0
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef5(render) {
        render != null && render.$$typeof === REACT_MEMO_TYPE ? error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render != "function" ? error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render != null && (render.defaultProps != null || render.propTypes != null) && error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !render.name && !render.displayName && (render.displayName = name);
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function memo(type, compare) {
        isValidElementType(type) || error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !type.name && !type.displayName && (type.displayName = name);
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        return dispatcher === null && error2(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), dispatcher;
      }
      function useContext7(Context) {
        var dispatcher = resolveDispatcher();
        if (Context._context !== void 0) {
          var realContext = Context._context;
          realContext.Consumer === Context ? error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
      }
      function useState9(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer2(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef7(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect11(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect5(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback3(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo9(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue2(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition2() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x2) {
              var match2 = x2.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x2) {
                control = x2;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x2) {
                control = x2;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x2) {
              control = x2;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s10 = sampleLines.length - 1, c5 = controlLines.length - 1; s10 >= 1 && c5 >= 0 && sampleLines[s10] !== controlLines[c5]; )
              c5--;
            for (; s10 >= 1 && c5 >= 0; s10--, c5--)
              if (sampleLines[s10] !== controlLines[c5]) {
                if (s10 !== 1 || c5 !== 1)
                  do
                    if (s10--, c5--, c5 < 0 || sampleLines[s10] !== controlLines[c5]) {
                      var _frame = `
` + sampleLines[s10].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s10 >= 1 && c5 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component4) {
        var prototype = Component4.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else
          setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name)
            return `

Check the render method of \`` + name + "`.";
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
          parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!(!element._store || element._store.validated || element.key != null)) {
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
            var childOwner = "";
            element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node == "object") {
          if (isArray(node))
            for (var i7 = 0; i7 < node.length; i7++) {
              var child = node[i7];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i7 = 0; i7 < keys.length; i7++) {
            var key = keys[i7];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error2("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
          var typeString;
          type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement8.apply(this, arguments);
        if (element == null)
          return element;
        if (validType)
          for (var i7 = 2; i7 < arguments.length; i7++)
            validateChildKeys(arguments[i7], type);
        return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
      }
      var didWarnAboutDeprecatedCreateFactory = !1;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        return validatedFactory.type = type, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
          enumerable: !1,
          get: function() {
            return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: type
            }), type;
          }
        }), validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        for (var newElement = cloneElement.apply(this, arguments), i7 = 2; i7 < arguments.length; i7++)
          validateChildKeys(arguments[i7], newElement.type);
        return validatePropTypes(newElement), newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          scope();
        } finally {
          if (ReactCurrentBatchConfig.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      var didWarnAboutMessageChannel = !1, enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7), nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch {
            enqueueTaskImpl = function(callback) {
              didWarnAboutMessageChannel === !1 && (didWarnAboutMessageChannel = !0, typeof MessageChannel > "u" && error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback, channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0, didWarnNoAwaitAct = !1;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++, ReactCurrentActQueue.current === null && (ReactCurrentActQueue.current = []);
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy, result;
          try {
            if (ReactCurrentActQueue.isBatchingLegacy = !0, result = callback(), !prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              queue !== null && (ReactCurrentActQueue.didScheduleLegacyUpdate = !1, flushActQueue(queue));
            }
          } catch (error3) {
            throw popActScope(prevActScopeDepth), error3;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result == "object" && typeof result.then == "function") {
            var thenableResult = result, wasAwaited = !1, thenable = {
              then: function(resolve, reject) {
                wasAwaited = !0, thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth), actScopeDepth === 0 ? recursivelyFlushAsyncActWork(returnValue2, resolve, reject) : resolve(returnValue2);
                }, function(error3) {
                  popActScope(prevActScopeDepth), reject(error3);
                });
              }
            };
            return !didWarnNoAwaitAct && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              wasAwaited || (didWarnNoAwaitAct = !0, error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), thenable;
          } else {
            var returnValue = result;
            if (popActScope(prevActScopeDepth), actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              _queue !== null && (flushActQueue(_queue), ReactCurrentActQueue.current = null);
              var _thenable = {
                then: function(resolve, reject) {
                  ReactCurrentActQueue.current === null ? (ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject)) : resolve(returnValue);
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null)
            try {
              flushActQueue(queue), enqueueTask(function() {
                queue.length === 0 ? (ReactCurrentActQueue.current = null, resolve(returnValue)) : recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
            } catch (error3) {
              reject(error3);
            }
          else
            resolve(returnValue);
        }
      }
      var isFlushing = !1;
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = !0;
          var i7 = 0;
          try {
            for (; i7 < queue.length; i7++) {
              var callback = queue[i7];
              do
                callback = callback(!0);
              while (callback !== null);
            }
            queue.length = 0;
          } catch (error3) {
            throw queue = queue.slice(i7 + 1), error3;
          } finally {
            isFlushing = !1;
          }
        }
      }
      var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children2 = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children2, exports.Component = Component3, exports.Fragment = REACT_FRAGMENT_TYPE, exports.Profiler = REACT_PROFILER_TYPE, exports.PureComponent = PureComponent, exports.StrictMode = REACT_STRICT_MODE_TYPE, exports.Suspense = REACT_SUSPENSE_TYPE, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.cloneElement = cloneElement$1, exports.createContext = createContext5, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef, exports.forwardRef = forwardRef5, exports.isValidElement = isValidElement2, exports.lazy = lazy, exports.memo = memo, exports.startTransition = startTransition, exports.unstable_act = act, exports.useCallback = useCallback3, exports.useContext = useContext7, exports.useDebugValue = useDebugValue2, exports.useDeferredValue = useDeferredValue, exports.useEffect = useEffect11, exports.useId = useId, exports.useImperativeHandle = useImperativeHandle, exports.useInsertionEffect = useInsertionEffect, exports.useLayoutEffect = useLayoutEffect5, exports.useMemo = useMemo9, exports.useReducer = useReducer2, exports.useRef = useRef7, exports.useState = useState9, exports.useSyncExternalStore = useSyncExternalStore3, exports.useTransition = useTransition2, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    module.exports = require_react_development();
  }
});

// node_modules/@remix-run/router/dist/router.js
var router_exports = {};
__export(router_exports, {
  AbortedDeferredError: () => AbortedDeferredError,
  Action: () => Action,
  ErrorResponse: () => ErrorResponse,
  IDLE_BLOCKER: () => IDLE_BLOCKER,
  IDLE_FETCHER: () => IDLE_FETCHER,
  IDLE_NAVIGATION: () => IDLE_NAVIGATION,
  UNSAFE_DEFERRED_SYMBOL: () => UNSAFE_DEFERRED_SYMBOL,
  UNSAFE_DeferredData: () => DeferredData,
  UNSAFE_convertRoutesToDataRoutes: () => convertRoutesToDataRoutes,
  UNSAFE_getPathContributingMatches: () => getPathContributingMatches,
  createBrowserHistory: () => createBrowserHistory,
  createHashHistory: () => createHashHistory,
  createMemoryHistory: () => createMemoryHistory,
  createPath: () => createPath,
  createRouter: () => createRouter,
  createStaticHandler: () => createStaticHandler,
  defer: () => defer,
  generatePath: () => generatePath,
  getStaticContextFromError: () => getStaticContextFromError,
  getToPathname: () => getToPathname,
  invariant: () => invariant,
  isRouteErrorResponse: () => isRouteErrorResponse,
  joinPaths: () => joinPaths,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  normalizePathname: () => normalizePathname,
  parsePath: () => parsePath,
  redirect: () => redirect,
  resolvePath: () => resolvePath,
  resolveTo: () => resolveTo,
  stripBasename: () => stripBasename,
  warning: () => warning
});
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends.apply(this, arguments);
}
function createMemoryHistory(options) {
  options === void 0 && (options = {});
  let {
    initialEntries = ["/"],
    initialIndex,
    v5Compat = !1
  } = options, entries;
  entries = initialEntries.map((entry2, index2) => createMemoryLocation(entry2, typeof entry2 == "string" ? null : entry2.state, index2 === 0 ? "default" : void 0));
  let index = clampIndex(initialIndex ?? entries.length - 1), action4 = Action.Pop, listener = null;
  function clampIndex(n4) {
    return Math.min(Math.max(n4, 0), entries.length - 1);
  }
  function getCurrentLocation() {
    return entries[index];
  }
  function createMemoryLocation(to, state, key) {
    state === void 0 && (state = null);
    let location2 = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
    return warning$1(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to)), location2;
  }
  function createHref(to) {
    return typeof to == "string" ? to : createPath(to);
  }
  return {
    get index() {
      return index;
    },
    get action() {
      return action4;
    },
    get location() {
      return getCurrentLocation();
    },
    createHref,
    createURL(to) {
      return new URL(createHref(to), "http://localhost");
    },
    encodeLocation(to) {
      let path2 = typeof to == "string" ? parsePath(to) : to;
      return {
        pathname: path2.pathname || "",
        search: path2.search || "",
        hash: path2.hash || ""
      };
    },
    push(to, state) {
      action4 = Action.Push;
      let nextLocation = createMemoryLocation(to, state);
      index += 1, entries.splice(index, entries.length, nextLocation), v5Compat && listener && listener({
        action: action4,
        location: nextLocation,
        delta: 1
      });
    },
    replace(to, state) {
      action4 = Action.Replace;
      let nextLocation = createMemoryLocation(to, state);
      entries[index] = nextLocation, v5Compat && listener && listener({
        action: action4,
        location: nextLocation,
        delta: 0
      });
    },
    go(delta2) {
      action4 = Action.Pop;
      let nextIndex = clampIndex(index + delta2), nextLocation = entries[nextIndex];
      index = nextIndex, listener && listener({
        action: action4,
        location: nextLocation,
        delta: delta2
      });
    },
    listen(fn) {
      return listener = fn, () => {
        listener = null;
      };
    }
  };
}
function createBrowserHistory(options) {
  options === void 0 && (options = {});
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search,
      hash
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to == "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function createHashHistory(options) {
  options === void 0 && (options = {});
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substr(1));
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base"), href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href, hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to == "string" ? to : createPath(to));
  }
  function validateHashLocation(location2, to) {
    warning$1(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value, message) {
  if (value === !1 || value === null || typeof value > "u")
    throw new Error(message);
}
function warning$1(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location2, index) {
  return {
    usr: location2.state,
    key: location2.key,
    idx: index
  };
}
function createLocation(current, to, state, key) {
  return state === void 0 && (state = null), _extends({
    pathname: typeof current == "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to == "string" ? parsePath(to) : to, {
    state,
    key: to && to.key || key || createKey()
  });
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  return search && search !== "?" && (pathname += search.charAt(0) === "?" ? search : "?" + search), hash && hash !== "#" && (pathname += hash.charAt(0) === "#" ? hash : "#" + hash), pathname;
}
function parsePath(path2) {
  let parsedPath = {};
  if (path2) {
    let hashIndex = path2.indexOf("#");
    hashIndex >= 0 && (parsedPath.hash = path2.substr(hashIndex), path2 = path2.substr(0, hashIndex));
    let searchIndex = path2.indexOf("?");
    searchIndex >= 0 && (parsedPath.search = path2.substr(searchIndex), path2 = path2.substr(0, searchIndex)), path2 && (parsedPath.pathname = path2);
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  options === void 0 && (options = {});
  let {
    window: window2 = document.defaultView,
    v5Compat = !1
  } = options, globalHistory = window2.history, action4 = Action.Pop, listener = null, index = getIndex();
  index == null && (index = 0, globalHistory.replaceState(_extends({}, globalHistory.state, {
    idx: index
  }), ""));
  function getIndex() {
    return (globalHistory.state || {
      idx: null
    }).idx;
  }
  function handlePop() {
    action4 = Action.Pop;
    let nextIndex = getIndex(), delta2 = nextIndex == null ? null : nextIndex - index;
    index = nextIndex, listener && listener({
      action: action4,
      location: history.location,
      delta: delta2
    });
  }
  function push(to, state) {
    action4 = Action.Push;
    let location2 = createLocation(history.location, to, state);
    validateLocation && validateLocation(location2, to), index = getIndex() + 1;
    let historyState = getHistoryState(location2, index), url = history.createHref(location2);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch {
      window2.location.assign(url);
    }
    v5Compat && listener && listener({
      action: action4,
      location: history.location,
      delta: 1
    });
  }
  function replace(to, state) {
    action4 = Action.Replace;
    let location2 = createLocation(history.location, to, state);
    validateLocation && validateLocation(location2, to), index = getIndex();
    let historyState = getHistoryState(location2, index), url = history.createHref(location2);
    globalHistory.replaceState(historyState, "", url), v5Compat && listener && listener({
      action: action4,
      location: history.location,
      delta: 0
    });
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href, href = typeof to == "string" ? to : createPath(to);
    return invariant(base, "No window.location.(origin|href) available to create URL for href: " + href), new URL(href, base);
  }
  let history = {
    get action() {
      return action4;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener)
        throw new Error("A history only accepts one active listener");
      return window2.addEventListener(PopStateEventType, handlePop), listener = fn, () => {
        window2.removeEventListener(PopStateEventType, handlePop), listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n4) {
      return globalHistory.go(n4);
    }
  };
  return history;
}
function isIndexRoute(route) {
  return route.index === !0;
}
function convertRoutesToDataRoutes(routes2, parentPath, allIds) {
  return parentPath === void 0 && (parentPath = []), allIds === void 0 && (allIds = /* @__PURE__ */ new Set()), routes2.map((route, index) => {
    let treePath = [...parentPath, index], id = typeof route.id == "string" ? route.id : treePath.join("-");
    return invariant(route.index !== !0 || !route.children, "Cannot specify children on an index route"), invariant(!allIds.has(id), 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`), allIds.add(id), isIndexRoute(route) ? _extends({}, route, {
      id
    }) : _extends({}, route, {
      id,
      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : void 0
    });
  });
}
function matchRoutes(routes2, locationArg, basename) {
  basename === void 0 && (basename = "/");
  let location2 = typeof locationArg == "string" ? parsePath(locationArg) : locationArg, pathname = stripBasename(location2.pathname || "/", basename);
  if (pathname == null)
    return null;
  let branches = flattenRoutes(routes2);
  rankRouteBranches(branches);
  let matches = null;
  for (let i7 = 0; matches == null && i7 < branches.length; ++i7)
    matches = matchRouteBranch(
      branches[i7],
      safelyDecodeURI(pathname)
    );
  return matches;
}
function flattenRoutes(routes2, branches, parentsMeta, parentPath) {
  branches === void 0 && (branches = []), parentsMeta === void 0 && (parentsMeta = []), parentPath === void 0 && (parentPath = "");
  let flattenRoute = (route, index, relativePath) => {
    let meta5 = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === !0,
      childrenIndex: index,
      route
    };
    meta5.relativePath.startsWith("/") && (invariant(meta5.relativePath.startsWith(parentPath), 'Absolute route path "' + meta5.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."), meta5.relativePath = meta5.relativePath.slice(parentPath.length));
    let path2 = joinPaths([parentPath, meta5.relativePath]), routesMeta = parentsMeta.concat(meta5);
    route.children && route.children.length > 0 && (invariant(
      route.index !== !0,
      "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path2 + '".')
    ), flattenRoutes(route.children, branches, routesMeta, path2)), !(route.path == null && !route.index) && branches.push({
      path: path2,
      score: computeScore(path2, route.index),
      routesMeta
    });
  };
  return routes2.forEach((route, index) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?")))
      flattenRoute(route, index);
    else
      for (let exploded of explodeOptionalSegments(route.path))
        flattenRoute(route, index, exploded);
  }), branches;
}
function explodeOptionalSegments(path2) {
  let segments = path2.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments, isOptional = first.endsWith("?"), required = first.replace(/\?$/, "");
  if (rest.length === 0)
    return isOptional ? [required, ""] : [required];
  let restExploded = explodeOptionalSegments(rest.join("/")), result = [];
  return result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/"))), isOptional && result.push(...restExploded), result.map((exploded) => path2.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a4, b4) => a4.score !== b4.score ? b4.score - a4.score : compareIndexes(a4.routesMeta.map((meta5) => meta5.childrenIndex), b4.routesMeta.map((meta5) => meta5.childrenIndex)));
}
function computeScore(path2, index) {
  let segments = path2.split("/"), initialScore = segments.length;
  return segments.some(isSplat) && (initialScore += splatPenalty), index && (initialScore += indexRouteValue), segments.filter((s10) => !isSplat(s10)).reduce((score2, segment) => score2 + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a4, b4) {
  return a4.length === b4.length && a4.slice(0, -1).every((n4, i7) => n4 === b4[i7]) ? a4[a4.length - 1] - b4[b4.length - 1] : 0;
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch, matchedParams = {}, matchedPathname = "/", matches = [];
  for (let i7 = 0; i7 < routesMeta.length; ++i7) {
    let meta5 = routesMeta[i7], end = i7 === routesMeta.length - 1, remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/", match2 = matchPath({
      path: meta5.relativePath,
      caseSensitive: meta5.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta5.route;
    matches.push({
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    }), match2.pathnameBase !== "/" && (matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]));
  }
  return matches;
}
function generatePath(originalPath, params) {
  params === void 0 && (params = {});
  let path2 = originalPath;
  return path2.endsWith("*") && path2 !== "*" && !path2.endsWith("/*") && (warning(!1, 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".')), path2 = path2.replace(/\*$/, "/*")), path2.replace(/^:(\w+)(\??)/g, (_2, key, optional) => {
    let param = params[key];
    return optional === "?" ? param ?? "" : (param == null && invariant(!1, 'Missing ":' + key + '" param'), param);
  }).replace(/\/:(\w+)(\??)/g, (_2, key, optional) => {
    let param = params[key];
    return optional === "?" ? param == null ? "" : "/" + param : (param == null && invariant(!1, 'Missing ":' + key + '" param'), "/" + param);
  }).replace(/\?/g, "").replace(/(\/?)\*/, (_2, prefix2, __, str) => {
    let star = "*";
    return params[star] == null ? str === "/*" ? "/" : "" : "" + prefix2 + params[star];
  });
}
function matchPath(pattern, pathname) {
  typeof pattern == "string" && (pattern = {
    path: pattern,
    caseSensitive: !1,
    end: !0
  });
  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end), match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0], pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1"), captureGroups = match2.slice(1);
  return {
    params: paramNames.reduce((memo, paramName, index) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      return memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName), memo;
    }, {}),
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path2, caseSensitive, end) {
  caseSensitive === void 0 && (caseSensitive = !1), end === void 0 && (end = !0), warning(path2 === "*" || !path2.endsWith("*") || path2.endsWith("/*"), 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".'));
  let paramNames = [], regexpSource = "^" + path2.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_2, paramName) => (paramNames.push(paramName), "/([^\\/]+)"));
  return path2.endsWith("*") ? (paramNames.push("*"), regexpSource += path2 === "*" || path2 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : end ? regexpSource += "\\/*$" : path2 !== "" && path2 !== "/" && (regexpSource += "(?:(?=\\/|$))"), [new RegExp(regexpSource, caseSensitive ? void 0 : "i"), paramNames];
}
function safelyDecodeURI(value) {
  try {
    return decodeURI(value);
  } catch (error2) {
    return warning(!1, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ").")), value;
  }
}
function safelyDecodeURIComponent(value, paramName) {
  try {
    return decodeURIComponent(value);
  } catch (error2) {
    return warning(!1, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error2 + ").")), value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase()))
    return null;
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length, nextChar = pathname.charAt(startIndex);
  return nextChar && nextChar !== "/" ? null : pathname.slice(startIndex) || "/";
}
function warning(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
function resolvePath(to, fromPathname) {
  fromPathname === void 0 && (fromPathname = "/");
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to == "string" ? parsePath(to) : to;
  return {
    pathname: toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  return relativePath.split("/").forEach((segment) => {
    segment === ".." ? segments.length > 1 && segments.pop() : segment !== "." && segments.push(segment);
  }), segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path2) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path2) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match2, index) => index === 0 || match2.route.path && match2.route.path.length > 0);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  isPathRelative === void 0 && (isPathRelative = !1);
  let to;
  typeof toArg == "string" ? to = parsePath(toArg) : (to = _extends({}, toArg), invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to)), invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to)), invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to)));
  let isEmptyPath = toArg === "" || to.pathname === "", toPathname = isEmptyPath ? "/" : to.pathname, from;
  if (isPathRelative || toPathname == null)
    from = locationPathname;
  else {
    let routePathnameIndex = routePathnames.length - 1;
    if (toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      for (; toSegments[0] === ".."; )
        toSegments.shift(), routePathnameIndex -= 1;
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path2 = resolvePath(to, from), hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/"), hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  return !path2.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash) && (path2.pathname += "/"), path2;
}
function getToPathname(to) {
  return to === "" || to.pathname === "" ? "/" : typeof to == "string" ? parsePath(to).pathname : to.pathname;
}
function isTrackedPromise(value) {
  return value instanceof Promise && value._tracked === !0;
}
function unwrapTrackedPromise(value) {
  if (!isTrackedPromise(value))
    return value;
  if (value._error)
    throw value._error;
  return value._data;
}
function isRouteErrorResponse(error2) {
  return error2 != null && typeof error2.status == "number" && typeof error2.statusText == "string" && typeof error2.internal == "boolean" && "data" in error2;
}
function createRouter(init) {
  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let dataRoutes = convertRoutesToDataRoutes(init.routes), unlistenHistory = null, subscribers = /* @__PURE__ */ new Set(), savedScrollPositions2 = null, getScrollRestorationKey = null, getScrollPosition = null, initialScrollRestored = init.hydrationData != null, initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename), initialErrors = null;
  if (initialMatches == null) {
    let error2 = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    }), {
      matches,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches, initialErrors = {
      [route.id]: error2
    };
  }
  let initialized = !initialMatches.some((m6) => m6.route.loader) || init.hydrationData != null, router, state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    restoreScrollPosition: init.hydrationData != null ? !1 : null,
    preventScrollReset: !1,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  }, pendingAction = Action.Pop, pendingPreventScrollReset = !1, pendingNavigationController, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [], fetchControllers = /* @__PURE__ */ new Map(), incrementingLoadId = 0, pendingNavigationLoadId = -1, fetchReloadIds = /* @__PURE__ */ new Map(), fetchRedirectIds = /* @__PURE__ */ new Set(), fetchLoadMatches = /* @__PURE__ */ new Map(), activeDeferreds = /* @__PURE__ */ new Map(), activeBlocker = null, blockerFunctions = /* @__PURE__ */ new Map(), ignoreNextHistoryUpdate = !1;
  function initialize() {
    return unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location: location2,
        delta: delta2
      } = _ref;
      if (ignoreNextHistoryUpdate) {
        ignoreNextHistoryUpdate = !1;
        return;
      }
      warning(activeBlocker != null && delta2 === null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey2 = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location2,
        historyAction
      });
      if (blockerKey2 && delta2 != null) {
        ignoreNextHistoryUpdate = !0, init.history.go(delta2 * -1), updateBlocker(blockerKey2, {
          state: "blocked",
          location: location2,
          proceed() {
            updateBlocker(blockerKey2, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location: location2
            }), init.history.go(delta2);
          },
          reset() {
            deleteBlocker(blockerKey2), updateState({
              blockers: new Map(router.state.blockers)
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location2);
    }), state.initialized || startNavigation(Action.Pop, state.location), router;
  }
  function dispose() {
    unlistenHistory && unlistenHistory(), subscribers.clear(), pendingNavigationController && pendingNavigationController.abort(), state.fetchers.forEach((_2, key) => deleteFetcher(key)), state.blockers.forEach((_2, key) => deleteBlocker(key));
  }
  function subscribe(fn) {
    return subscribers.add(fn), () => subscribers.delete(fn);
  }
  function updateState(newState) {
    state = _extends({}, state, newState), subscribers.forEach((subscriber) => subscriber(state));
  }
  function completeNavigation(location2, newState) {
    var _location$state, _location$state2;
    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location2.state) == null ? void 0 : _location$state._isRedirect) !== !0, actionData;
    newState.actionData ? Object.keys(newState.actionData).length > 0 ? actionData = newState.actionData : actionData = null : isActionReload ? actionData = state.actionData : actionData = null;
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
    for (let [key] of blockerFunctions)
      deleteBlocker(key);
    let preventScrollReset = pendingPreventScrollReset === !0 || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location2.state) == null ? void 0 : _location$state2._isRedirect) !== !0;
    updateState(_extends({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location: location2,
      initialized: !0,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location2, newState.matches || state.matches),
      preventScrollReset,
      blockers: new Map(state.blockers)
    })), isUninterruptedRevalidation || pendingAction === Action.Pop || (pendingAction === Action.Push ? init.history.push(location2, location2.state) : pendingAction === Action.Replace && init.history.replace(location2, location2.state)), pendingAction = Action.Pop, pendingPreventScrollReset = !1, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [];
  }
  async function navigate(to, opts) {
    if (typeof to == "number") {
      init.history.go(to);
      return;
    }
    let {
      path: path2,
      submission,
      error: error2
    } = normalizeNavigateOptions(to, opts), currentLocation = state.location, nextLocation = createLocation(state.location, path2, opts && opts.state);
    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0, historyAction = Action.Push;
    userReplace === !0 ? historyAction = Action.Replace : userReplace === !1 || submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search && (historyAction = Action.Replace);
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === !0 : void 0, blockerKey2 = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey2) {
      updateBlocker(blockerKey2, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey2, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          }), navigate(to, opts);
        },
        reset() {
          deleteBlocker(blockerKey2), updateState({
            blockers: new Map(state.blockers)
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      pendingError: error2,
      preventScrollReset,
      replace: opts && opts.replace
    });
  }
  function revalidate() {
    if (interruptActiveLoads(), updateState({
      revalidation: "loading"
    }), state.navigation.state !== "submitting") {
      if (state.navigation.state === "idle") {
        startNavigation(state.historyAction, state.location, {
          startUninterruptedRevalidation: !0
        });
        return;
      }
      startNavigation(pendingAction || state.historyAction, state.navigation.location, {
        overrideNavigation: state.navigation
      });
    }
  }
  async function startNavigation(historyAction, location2, opts) {
    pendingNavigationController && pendingNavigationController.abort(), pendingNavigationController = null, pendingAction = historyAction, isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === !0, saveScrollPosition(state.location, state.matches), pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0;
    let loadingNavigation = opts && opts.overrideNavigation, matches = matchRoutes(dataRoutes, location2, init.basename);
    if (!matches) {
      let error2 = getInternalRouterError(404, {
        pathname: location2.pathname
      }), {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      cancelActiveDeferreds(), completeNavigation(location2, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error2
        }
      });
      return;
    }
    if (isHashChangeOnly(state.location, location2) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location2, {
        matches
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location2, pendingNavigationController.signal, opts && opts.submission), pendingActionData, pendingError;
    if (opts && opts.pendingError)
      pendingError = {
        [findNearestBoundary(matches).route.id]: opts.pendingError
      };
    else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionOutput = await handleAction(request, location2, opts.submission, matches, {
        replace: opts.replace
      });
      if (actionOutput.shortCircuited)
        return;
      pendingActionData = actionOutput.pendingActionData, pendingError = actionOutput.pendingActionError, loadingNavigation = _extends({
        state: "loading",
        location: location2
      }, opts.submission), request = new Request(request.url, {
        signal: request.signal
      });
    }
    let {
      shortCircuited,
      loaderData,
      errors
    } = await handleLoaders(request, location2, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);
    shortCircuited || (pendingNavigationController = null, completeNavigation(location2, _extends({
      matches
    }, pendingActionData ? {
      actionData: pendingActionData
    } : {}, {
      loaderData,
      errors
    })));
  }
  async function handleAction(request, location2, submission, matches, opts) {
    interruptActiveLoads();
    let navigation = _extends({
      state: "submitting",
      location: location2
    }, submission);
    updateState({
      navigation
    });
    let result, actionMatch = getTargetMatch(matches, location2);
    if (!actionMatch.route.action)
      result = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location2.pathname,
          routeId: actionMatch.route.id
        })
      };
    else if (result = await callLoaderOrAction("action", request, actionMatch, matches, router.basename), request.signal.aborted)
      return {
        shortCircuited: !0
      };
    if (isRedirectResult(result)) {
      let replace;
      return opts && opts.replace != null ? replace = opts.replace : replace = result.location === state.location.pathname + state.location.search, await startRedirectNavigation(state, result, {
        submission,
        replace
      }), {
        shortCircuited: !0
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
      return (opts && opts.replace) !== !0 && (pendingAction = Action.Push), {
        pendingActionData: {},
        pendingActionError: {
          [boundaryMatch.route.id]: result.error
        }
      };
    }
    if (isDeferredResult(result))
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    return {
      pendingActionData: {
        [actionMatch.route.id]: result.data
      }
    };
  }
  async function handleLoaders(request, location2, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {
    let loadingNavigation = overrideNavigation;
    loadingNavigation || (loadingNavigation = _extends({
      state: "loading",
      location: location2,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, submission));
    let activeSubmission = submission || (loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {
      formMethod: loadingNavigation.formMethod,
      formAction: loadingNavigation.formAction,
      formData: loadingNavigation.formData,
      formEncType: loadingNavigation.formEncType
    } : void 0), [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location2, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches);
    if (cancelActiveDeferreds((routeId) => !(matches && matches.some((m6) => m6.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m6) => m6.route.id === routeId)), matchesToLoad.length === 0 && revalidatingFetchers.length === 0)
      return completeNavigation(location2, _extends({
        matches,
        loaderData: {},
        errors: pendingError || null
      }, pendingActionData ? {
        actionData: pendingActionData
      } : {})), {
        shortCircuited: !0
      };
    if (!isUninterruptedRevalidation) {
      revalidatingFetchers.forEach((rf) => {
        let fetcher = state.fetchers.get(rf.key), revalidatingFetcher = {
          state: "loading",
          data: fetcher && fetcher.data,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          " _hasFetcherDoneAnything ": !0
        };
        state.fetchers.set(rf.key, revalidatingFetcher);
      });
      let actionData = pendingActionData || state.actionData;
      updateState(_extends({
        navigation: loadingNavigation
      }, actionData ? Object.keys(actionData).length === 0 ? {
        actionData: null
      } : {
        actionData
      } : {}, revalidatingFetchers.length > 0 ? {
        fetchers: new Map(state.fetchers)
      } : {}));
    }
    pendingNavigationLoadId = ++incrementingLoadId, revalidatingFetchers.forEach((rf) => fetchControllers.set(rf.key, pendingNavigationController));
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted)
      return {
        shortCircuited: !0
      };
    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
    let redirect4 = findRedirect(results);
    if (redirect4)
      return await startRedirectNavigation(state, redirect4, {
        replace
      }), {
        shortCircuited: !0
      };
    let {
      loaderData,
      errors
    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        (aborted || deferredData.done) && activeDeferreds.delete(routeId);
      });
    }), markFetchRedirectsDone();
    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
    return _extends({
      loaderData,
      errors
    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function getFetcher(key) {
    return state.fetchers.get(key) || IDLE_FETCHER;
  }
  function fetch2(key, routeId, href, opts) {
    if (isServer)
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    fetchControllers.has(key) && abortFetcher(key);
    let matches = matchRoutes(dataRoutes, href, init.basename);
    if (!matches) {
      setFetcherError(key, routeId, getInternalRouterError(404, {
        pathname: href
      }));
      return;
    }
    let {
      path: path2,
      submission
    } = normalizeNavigateOptions(href, opts, !0), match2 = getTargetMatch(matches, path2);
    if (pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0, submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key, routeId, path2, match2, matches, submission);
      return;
    }
    fetchLoadMatches.set(key, {
      routeId,
      path: path2,
      match: match2,
      matches
    }), handleFetcherLoader(key, routeId, path2, match2, matches, submission);
  }
  async function handleFetcherAction(key, routeId, path2, match2, requestMatches, submission) {
    if (interruptActiveLoads(), fetchLoadMatches.delete(key), !match2.route.action) {
      let error2 = getInternalRouterError(405, {
        method: submission.formMethod,
        pathname: path2,
        routeId
      });
      setFetcherError(key, routeId, error2);
      return;
    }
    let existingFetcher = state.fetchers.get(key), fetcher = _extends({
      state: "submitting"
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": !0
    });
    state.fetchers.set(key, fetcher), updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path2, abortController.signal, submission);
    fetchControllers.set(key, abortController);
    let actionResult = await callLoaderOrAction("action", fetchRequest, match2, requestMatches, router.basename);
    if (fetchRequest.signal.aborted) {
      fetchControllers.get(key) === abortController && fetchControllers.delete(key);
      return;
    }
    if (isRedirectResult(actionResult)) {
      fetchControllers.delete(key), fetchRedirectIds.add(key);
      let loadingFetcher = _extends({
        state: "loading"
      }, submission, {
        data: void 0,
        " _hasFetcherDoneAnything ": !0
      });
      return state.fetchers.set(key, loadingFetcher), updateState({
        fetchers: new Map(state.fetchers)
      }), startRedirectNavigation(state, actionResult, {
        isFetchActionRedirect: !0
      });
    }
    if (isErrorResult(actionResult)) {
      setFetcherError(key, routeId, actionResult.error);
      return;
    }
    if (isDeferredResult(actionResult))
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    let nextLocation = state.navigation.location || state.location, revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal), matches = state.navigation.state !== "idle" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;
    invariant(matches, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key, loadId);
    let loadFetcher = _extends({
      state: "loading",
      data: actionResult.data
    }, submission, {
      " _hasFetcherDoneAnything ": !0
    });
    state.fetchers.set(key, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
      init.history,
      state,
      matches,
      submission,
      nextLocation,
      isRevalidationRequired,
      cancelledDeferredRoutes,
      cancelledFetcherLoads,
      {
        [match2.route.id]: actionResult.data
      },
      void 0,
      fetchLoadMatches
    );
    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
      let staleKey = rf.key, existingFetcher2 = state.fetchers.get(staleKey), revalidatingFetcher = {
        state: "loading",
        data: existingFetcher2 && existingFetcher2.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": !0
      };
      state.fetchers.set(staleKey, revalidatingFetcher), fetchControllers.set(staleKey, abortController);
    }), updateState({
      fetchers: new Map(state.fetchers)
    });
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted)
      return;
    fetchReloadIds.delete(key), fetchControllers.delete(key), revalidatingFetchers.forEach((r7) => fetchControllers.delete(r7.key));
    let redirect4 = findRedirect(results);
    if (redirect4)
      return startRedirectNavigation(state, redirect4);
    let {
      loaderData,
      errors
    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds), doneFetcher = {
      state: "idle",
      data: actionResult.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": !0
    };
    state.fetchers.set(key, doneFetcher);
    let didAbortFetchLoads = abortStaleFetchLoads(loadId);
    state.navigation.state === "loading" && loadId > pendingNavigationLoadId ? (invariant(pendingAction, "Expected pending action"), pendingNavigationController && pendingNavigationController.abort(), completeNavigation(state.navigation.location, {
      matches,
      loaderData,
      errors,
      fetchers: new Map(state.fetchers)
    })) : (updateState(_extends({
      errors,
      loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
    }, didAbortFetchLoads ? {
      fetchers: new Map(state.fetchers)
    } : {})), isRevalidationRequired = !1);
  }
  async function handleFetcherLoader(key, routeId, path2, match2, matches, submission) {
    let existingFetcher = state.fetchers.get(key), loadingFetcher = _extends({
      state: "loading",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": !0
    });
    state.fetchers.set(key, loadingFetcher), updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path2, abortController.signal);
    fetchControllers.set(key, abortController);
    let result = await callLoaderOrAction("loader", fetchRequest, match2, matches, router.basename);
    if (isDeferredResult(result) && (result = await resolveDeferredData(result, fetchRequest.signal, !0) || result), fetchControllers.get(key) === abortController && fetchControllers.delete(key), fetchRequest.signal.aborted)
      return;
    if (isRedirectResult(result)) {
      await startRedirectNavigation(state, result);
      return;
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, routeId);
      state.fetchers.delete(key), updateState({
        fetchers: new Map(state.fetchers),
        errors: {
          [boundaryMatch.route.id]: result.error
        }
      });
      return;
    }
    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
    let doneFetcher = {
      state: "idle",
      data: result.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": !0
    };
    state.fetchers.set(key, doneFetcher), updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  async function startRedirectNavigation(state2, redirect4, _temp) {
    var _window;
    let {
      submission,
      replace,
      isFetchActionRedirect
    } = _temp === void 0 ? {} : _temp;
    redirect4.revalidate && (isRevalidationRequired = !0);
    let redirectLocation = createLocation(
      state2.location,
      redirect4.location,
      _extends({
        _isRedirect: !0
      }, isFetchActionRedirect ? {
        _isFetchActionRedirect: !0
      } : {})
    );
    if (invariant(redirectLocation, "Expected a location on the redirect navigation"), isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) < "u") {
      let newOrigin = init.history.createURL(redirect4.location).origin;
      if (window.location.origin !== newOrigin) {
        replace ? window.location.replace(redirect4.location) : window.location.assign(redirect4.location);
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace === !0 ? Action.Replace : Action.Push, {
      formMethod,
      formAction,
      formEncType,
      formData
    } = state2.navigation;
    !submission && formMethod && formAction && formData && formEncType && (submission = {
      formMethod,
      formAction,
      formEncType,
      formData
    }), redirectPreserveMethodStatusCodes.has(redirect4.status) && submission && isMutationMethod(submission.formMethod) ? await startNavigation(redirectHistoryAction, redirectLocation, {
      submission: _extends({}, submission, {
        formAction: redirect4.location
      }),
      preventScrollReset: pendingPreventScrollReset
    }) : await startNavigation(redirectHistoryAction, redirectLocation, {
      overrideNavigation: {
        state: "loading",
        location: redirectLocation,
        formMethod: submission ? submission.formMethod : void 0,
        formAction: submission ? submission.formAction : void 0,
        formEncType: submission ? submission.formEncType : void 0,
        formData: submission ? submission.formData : void 0
      },
      preventScrollReset: pendingPreventScrollReset
    });
  }
  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, router.basename)), ...fetchersToLoad.map((f6) => callLoaderOrAction("loader", createClientSideRequest(init.history, f6.path, request.signal), f6.match, f6.matches, router.basename))]), loaderResults = results.slice(0, matchesToLoad.length), fetcherResults = results.slice(matchesToLoad.length);
    return await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, !1, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f6) => f6.match), fetcherResults, request.signal, !0)]), {
      results,
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = !0, cancelledDeferredRoutes.push(...cancelActiveDeferreds()), fetchLoadMatches.forEach((_2, key) => {
      fetchControllers.has(key) && (cancelledFetcherLoads.push(key), abortFetcher(key));
    });
  }
  function setFetcherError(key, routeId, error2) {
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key), updateState({
      errors: {
        [boundaryMatch.route.id]: error2
      },
      fetchers: new Map(state.fetchers)
    });
  }
  function deleteFetcher(key) {
    fetchControllers.has(key) && abortFetcher(key), fetchLoadMatches.delete(key), fetchReloadIds.delete(key), fetchRedirectIds.delete(key), state.fetchers.delete(key);
  }
  function abortFetcher(key) {
    let controller = fetchControllers.get(key);
    invariant(controller, "Expected fetch controller: " + key), controller.abort(), fetchControllers.delete(key);
  }
  function markFetchersDone(keys) {
    for (let key of keys) {
      let doneFetcher = {
        state: "idle",
        data: getFetcher(key).data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": !0
      };
      state.fetchers.set(key, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    for (let key of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key);
      invariant(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (fetchRedirectIds.delete(key), doneKeys.push(key));
    }
    markFetchersDone(doneKeys);
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key, id] of fetchReloadIds)
      if (id < landedId) {
        let fetcher = state.fetchers.get(key);
        invariant(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (abortFetcher(key), fetchReloadIds.delete(key), yeetedKeys.push(key));
      }
    return markFetchersDone(yeetedKeys), yeetedKeys.length > 0;
  }
  function getBlocker(key, fn) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    return blockerFunctions.get(key) !== fn && (blockerFunctions.set(key, fn), activeBlocker == null ? activeBlocker = key : key !== activeBlocker && warning(!1, "A router only supports one blocker at a time")), blocker;
  }
  function deleteBlocker(key) {
    state.blockers.delete(key), blockerFunctions.delete(key), activeBlocker === key && (activeBlocker = null);
  }
  function updateBlocker(key, newBlocker) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state), state.blockers.set(key, newBlocker), updateState({
      blockers: new Map(state.blockers)
    });
  }
  function shouldBlockNavigation(_ref2) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref2;
    if (activeBlocker == null)
      return;
    let blockerFunction = blockerFunctions.get(activeBlocker);
    invariant(blockerFunction, "Could not find a function for the active blocker");
    let blocker = state.blockers.get(activeBlocker);
    if (!(blocker && blocker.state === "proceeding") && blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    }))
      return activeBlocker;
  }
  function cancelActiveDeferreds(predicate) {
    let cancelledRouteIds = [];
    return activeDeferreds.forEach((dfd, routeId) => {
      (!predicate || predicate(routeId)) && (dfd.cancel(), cancelledRouteIds.push(routeId), activeDeferreds.delete(routeId));
    }), cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    if (savedScrollPositions2 = positions, getScrollPosition = getPosition, getScrollRestorationKey = getKey || ((location2) => location2.key), !initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = !0;
      let y2 = getSavedScrollPosition(state.location, state.matches);
      y2 != null && updateState({
        restoreScrollPosition: y2
      });
    }
    return () => {
      savedScrollPositions2 = null, getScrollPosition = null, getScrollRestorationKey = null;
    };
  }
  function saveScrollPosition(location2, matches) {
    if (savedScrollPositions2 && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m6) => createUseMatchesMatch(m6, state.loaderData)), key = getScrollRestorationKey(location2, userMatches) || location2.key;
      savedScrollPositions2[key] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location2, matches) {
    if (savedScrollPositions2 && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m6) => createUseMatchesMatch(m6, state.loaderData)), key = getScrollRestorationKey(location2, userMatches) || location2.key, y2 = savedScrollPositions2[key];
      if (typeof y2 == "number")
        return y2;
    }
    return null;
  }
  return router = {
    get basename() {
      return init.basename;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    initialize,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    createHref: (to) => init.history.createHref(to),
    encodeLocation: (to) => init.history.encodeLocation(to),
    getFetcher,
    deleteFetcher,
    dispose,
    getBlocker,
    deleteBlocker,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds
  }, router;
}
function createStaticHandler(routes2, opts) {
  invariant(routes2.length > 0, "You must provide a non-empty routes array to createStaticHandler");
  let dataRoutes = convertRoutesToDataRoutes(routes2), basename = (opts ? opts.basename : null) || "/";
  async function query2(request, _temp2) {
    let {
      requestContext
    } = _temp2 === void 0 ? {} : _temp2, url = new URL(request.url), method = request.method.toLowerCase(), location2 = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location2, basename);
    if (!isValidMethod(method) && method !== "head") {
      let error2 = getInternalRouterError(405, {
        method
      }), {
        matches: methodNotAllowedMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      return {
        basename,
        location: location2,
        matches: methodNotAllowedMatches,
        loaderData: {},
        actionData: null,
        errors: {
          [route.id]: error2
        },
        statusCode: error2.status,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    } else if (!matches) {
      let error2 = getInternalRouterError(404, {
        pathname: location2.pathname
      }), {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      return {
        basename,
        location: location2,
        matches: notFoundMatches,
        loaderData: {},
        actionData: null,
        errors: {
          [route.id]: error2
        },
        statusCode: error2.status,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    }
    let result = await queryImpl(request, location2, matches, requestContext);
    return isResponse(result) ? result : _extends({
      location: location2,
      basename
    }, result);
  }
  async function queryRoute(request, _temp3) {
    let {
      routeId,
      requestContext
    } = _temp3 === void 0 ? {} : _temp3, url = new URL(request.url), method = request.method.toLowerCase(), location2 = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location2, basename);
    if (!isValidMethod(method) && method !== "head" && method !== "options")
      throw getInternalRouterError(405, {
        method
      });
    if (!matches)
      throw getInternalRouterError(404, {
        pathname: location2.pathname
      });
    let match2 = routeId ? matches.find((m6) => m6.route.id === routeId) : getTargetMatch(matches, location2);
    if (routeId && !match2)
      throw getInternalRouterError(403, {
        pathname: location2.pathname,
        routeId
      });
    if (!match2)
      throw getInternalRouterError(404, {
        pathname: location2.pathname
      });
    let result = await queryImpl(request, location2, matches, requestContext, match2);
    if (isResponse(result))
      return result;
    let error2 = result.errors ? Object.values(result.errors)[0] : void 0;
    if (error2 !== void 0)
      throw error2;
    if (result.actionData)
      return Object.values(result.actionData)[0];
    if (result.loaderData) {
      var _result$activeDeferre;
      let data = Object.values(result.loaderData)[0];
      return (_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match2.route.id] && (data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match2.route.id]), data;
    }
  }
  async function queryImpl(request, location2, matches, requestContext, routeMatch) {
    invariant(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
    try {
      if (isMutationMethod(request.method.toLowerCase()))
        return await submit(request, matches, routeMatch || getTargetMatch(matches, location2), requestContext, routeMatch != null);
      let result = await loadRouteData(request, matches, requestContext, routeMatch);
      return isResponse(result) ? result : _extends({}, result, {
        actionData: null,
        actionHeaders: {}
      });
    } catch (e3) {
      if (isQueryRouteResponse(e3)) {
        if (e3.type === ResultType.error && !isRedirectResponse(e3.response))
          throw e3.response;
        return e3.response;
      }
      if (isRedirectResponse(e3))
        return e3;
      throw e3;
    }
  }
  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
    let result;
    if (actionMatch.route.action) {
      if (result = await callLoaderOrAction("action", request, actionMatch, matches, basename, !0, isRouteRequest, requestContext), request.signal.aborted) {
        let method = isRouteRequest ? "queryRoute" : "query";
        throw new Error(method + "() call aborted");
      }
    } else {
      let error2 = getInternalRouterError(405, {
        method: request.method,
        pathname: new URL(request.url).pathname,
        routeId: actionMatch.route.id
      });
      if (isRouteRequest)
        throw error2;
      result = {
        type: ResultType.error,
        error: error2
      };
    }
    if (isRedirectResult(result))
      throw new Response(null, {
        status: result.status,
        headers: {
          Location: result.location
        }
      });
    if (isDeferredResult(result)) {
      let error2 = getInternalRouterError(400, {
        type: "defer-action"
      });
      if (isRouteRequest)
        throw error2;
      result = {
        type: ResultType.error,
        error: error2
      };
    }
    if (isRouteRequest) {
      if (isErrorResult(result))
        throw result.error;
      return {
        matches: [actionMatch],
        loaderData: {},
        actionData: {
          [actionMatch.route.id]: result.data
        },
        errors: null,
        statusCode: 200,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id), context3 = await loadRouteData(request, matches, requestContext, void 0, {
        [boundaryMatch.route.id]: result.error
      });
      return _extends({}, context3, {
        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,
        actionData: null,
        actionHeaders: _extends({}, result.headers ? {
          [actionMatch.route.id]: result.headers
        } : {})
      });
    }
    let loaderRequest = new Request(request.url, {
      headers: request.headers,
      redirect: request.redirect,
      signal: request.signal
    }), context2 = await loadRouteData(loaderRequest, matches, requestContext);
    return _extends({}, context2, result.statusCode ? {
      statusCode: result.statusCode
    } : {}, {
      actionData: {
        [actionMatch.route.id]: result.data
      },
      actionHeaders: _extends({}, result.headers ? {
        [actionMatch.route.id]: result.headers
      } : {})
    });
  }
  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {
    let isRouteRequest = routeMatch != null;
    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader))
      throw getInternalRouterError(400, {
        method: request.method,
        pathname: new URL(request.url).pathname,
        routeId: routeMatch == null ? void 0 : routeMatch.route.id
      });
    let matchesToLoad = (routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0])).filter((m6) => m6.route.loader);
    if (matchesToLoad.length === 0)
      return {
        matches,
        loaderData: matches.reduce((acc, m6) => Object.assign(acc, {
          [m6.route.id]: null
        }), {}),
        errors: pendingActionError || null,
        statusCode: 200,
        loaderHeaders: {},
        activeDeferreds: null
      };
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, basename, !0, isRouteRequest, requestContext))]);
    if (request.signal.aborted) {
      let method = isRouteRequest ? "queryRoute" : "query";
      throw new Error(method + "() call aborted");
    }
    let activeDeferreds = /* @__PURE__ */ new Map(), context2 = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds), executedLoaders = new Set(matchesToLoad.map((match2) => match2.route.id));
    return matches.forEach((match2) => {
      executedLoaders.has(match2.route.id) || (context2.loaderData[match2.route.id] = null);
    }), _extends({}, context2, {
      matches,
      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
    });
  }
  return {
    dataRoutes,
    query: query2,
    queryRoute
  };
}
function getStaticContextFromError(routes2, context2, error2) {
  return _extends({}, context2, {
    statusCode: 500,
    errors: {
      [context2._deepestRenderedBoundaryId || routes2[0].id]: error2
    }
  });
}
function isSubmissionNavigation(opts) {
  return opts != null && "formData" in opts;
}
function normalizeNavigateOptions(to, opts, isFetcher) {
  isFetcher === void 0 && (isFetcher = !1);
  let path2 = typeof to == "string" ? to : createPath(to);
  if (!opts || !isSubmissionNavigation(opts))
    return {
      path: path2
    };
  if (opts.formMethod && !isValidMethod(opts.formMethod))
    return {
      path: path2,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  let submission;
  if (opts.formData && (submission = {
    formMethod: opts.formMethod || "get",
    formAction: stripHashFromPath(path2),
    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
    formData: opts.formData
  }, isMutationMethod(submission.formMethod)))
    return {
      path: path2,
      submission
    };
  let parsedPath = parsePath(path2), searchParams = convertFormDataToSearchParams(opts.formData);
  return isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search) && searchParams.append("index", ""), parsedPath.search = "?" + searchParams, {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches, boundaryId) {
  let boundaryMatches = matches;
  if (boundaryId) {
    let index = matches.findIndex((m6) => m6.route.id === boundaryId);
    index >= 0 && (boundaryMatches = matches.slice(0, index));
  }
  return boundaryMatches;
}
function getMatchesToLoad(history, state, matches, submission, location2, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {
  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0, currentUrl = history.createURL(state.location), nextUrl = history.createURL(location2), defaultShouldRevalidate = isRevalidationRequired || currentUrl.toString() === nextUrl.toString() || currentUrl.search !== nextUrl.search, boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0, navigationMatches = getLoaderMatchesUntilBoundary(matches, boundaryId).filter((match2, index) => {
    if (match2.route.loader == null)
      return !1;
    if (isNewLoader(state.loaderData, state.matches[index], match2) || cancelledDeferredRoutes.some((id) => id === match2.route.id))
      return !0;
    let currentRouteMatch = state.matches[index], nextRouteMatch = match2;
    return shouldRevalidateLoader(match2, _extends({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
    }));
  }), revalidatingFetchers = [];
  return fetchLoadMatches && fetchLoadMatches.forEach((f6, key) => {
    if (matches.some((m6) => m6.route.id === f6.routeId))
      cancelledFetcherLoads.includes(key) ? revalidatingFetchers.push(_extends({
        key
      }, f6)) : shouldRevalidateLoader(f6.match, _extends({
        currentUrl,
        currentParams: state.matches[state.matches.length - 1].params,
        nextUrl,
        nextParams: matches[matches.length - 1].params
      }, submission, {
        actionResult,
        defaultShouldRevalidate
      })) && revalidatingFetchers.push(_extends({
        key
      }, f6));
    else
      return;
  }), [navigationMatches, revalidatingFetchers];
}
function isNewLoader(currentLoaderData, currentMatch, match2) {
  let isNew = !currentMatch || match2.route.id !== currentMatch.route.id, isMissingData = currentLoaderData[match2.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match2) {
  let currentPath = currentMatch.route.path;
  return currentMatch.pathname !== match2.pathname || currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"];
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice == "boolean")
      return routeChoice;
  }
  return arg.defaultShouldRevalidate;
}
async function callLoaderOrAction(type, request, match2, matches, basename, isStaticRequest, isRouteRequest, requestContext) {
  basename === void 0 && (basename = "/"), isStaticRequest === void 0 && (isStaticRequest = !1), isRouteRequest === void 0 && (isRouteRequest = !1);
  let resultType, result, reject, abortPromise = new Promise((_2, r7) => reject = r7), onReject = () => reject();
  request.signal.addEventListener("abort", onReject);
  try {
    let handler = match2.route[type];
    invariant(handler, "Could not find the " + type + ' to run on the "' + match2.route.id + '" route'), result = await Promise.race([handler({
      request,
      params: match2.params,
      context: requestContext
    }), abortPromise]), invariant(result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e3) {
    resultType = ResultType.error, result = e3;
  } finally {
    request.signal.removeEventListener("abort", onReject);
  }
  if (isResponse(result)) {
    let status = result.status;
    if (redirectStatusCodes.has(status)) {
      let location2 = result.headers.get("Location");
      if (invariant(location2, "Redirects returned/thrown from loaders/actions must have a Location header"), /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i.test(location2)) {
        if (!isStaticRequest) {
          let currentUrl = new URL(request.url), url = location2.startsWith("//") ? new URL(currentUrl.protocol + location2) : new URL(location2);
          url.origin === currentUrl.origin && (location2 = url.pathname + url.search + url.hash);
        }
      } else {
        let activeMatches = matches.slice(0, matches.indexOf(match2) + 1), routePathnames = getPathContributingMatches(activeMatches).map((match3) => match3.pathnameBase), resolvedLocation = resolveTo(location2, routePathnames, new URL(request.url).pathname);
        if (invariant(createPath(resolvedLocation), "Unable to resolve redirect location: " + location2), basename) {
          let path2 = resolvedLocation.pathname;
          resolvedLocation.pathname = path2 === "/" ? basename : joinPaths([basename, path2]);
        }
        location2 = createPath(resolvedLocation);
      }
      if (isStaticRequest)
        throw result.headers.set("Location", location2), result;
      return {
        type: ResultType.redirect,
        status,
        location: location2,
        revalidate: result.headers.get("X-Remix-Revalidate") !== null
      };
    }
    if (isRouteRequest)
      throw {
        type: resultType || ResultType.data,
        response: result
      };
    let data, contentType = result.headers.get("Content-Type");
    return contentType && /\bapplication\/json\b/.test(contentType) ? data = await result.json() : data = await result.text(), resultType === ResultType.error ? {
      type: resultType,
      error: new ErrorResponse(status, result.statusText, data),
      headers: result.headers
    } : {
      type: ResultType.data,
      data,
      statusCode: result.status,
      headers: result.headers
    };
  }
  return resultType === ResultType.error ? {
    type: resultType,
    error: result
  } : result instanceof DeferredData ? {
    type: ResultType.deferred,
    deferredData: result
  } : {
    type: ResultType.data,
    data: result
  };
}
function createClientSideRequest(history, location2, signal, submission) {
  let url = history.createURL(stripHashFromPath(location2)).toString(), init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType,
      formData
    } = submission;
    init.method = formMethod.toUpperCase(), init.body = formEncType === "application/x-www-form-urlencoded" ? convertFormDataToSearchParams(formData) : formData;
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key, value] of formData.entries())
    searchParams.append(key, value instanceof File ? value.name : value);
  return searchParams;
}
function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
  let loaderData = {}, errors = null, statusCode, foundError = !1, loaderHeaders = {};
  return results.forEach((result, index) => {
    let id = matchesToLoad[index].route.id;
    if (invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData"), isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, id), error2 = result.error;
      pendingError && (error2 = Object.values(pendingError)[0], pendingError = void 0), errors = errors || {}, errors[boundaryMatch.route.id] == null && (errors[boundaryMatch.route.id] = error2), loaderData[id] = void 0, foundError || (foundError = !0, statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500), result.headers && (loaderHeaders[id] = result.headers);
    } else
      isDeferredResult(result) ? (activeDeferreds.set(id, result.deferredData), loaderData[id] = result.deferredData.data) : loaderData[id] = result.data, result.statusCode != null && result.statusCode !== 200 && !foundError && (statusCode = result.statusCode), result.headers && (loaderHeaders[id] = result.headers);
  }), pendingError && (errors = pendingError, loaderData[Object.keys(pendingError)[0]] = void 0), {
    loaderData,
    errors,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors
  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
  for (let index = 0; index < revalidatingFetchers.length; index++) {
    let {
      key,
      match: match2
    } = revalidatingFetchers[index];
    invariant(fetcherResults !== void 0 && fetcherResults[index] !== void 0, "Did not find corresponding fetcher result");
    let result = fetcherResults[index];
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, match2.route.id);
      errors && errors[boundaryMatch.route.id] || (errors = _extends({}, errors, {
        [boundaryMatch.route.id]: result.error
      })), state.fetchers.delete(key);
    } else if (isRedirectResult(result))
      invariant(!1, "Unhandled fetcher revalidation redirect");
    else if (isDeferredResult(result))
      invariant(!1, "Unhandled fetcher deferred data");
    else {
      let doneFetcher = {
        state: "idle",
        data: result.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": !0
      };
      state.fetchers.set(key, doneFetcher);
    }
  }
  return {
    loaderData,
    errors
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
  let mergedLoaderData = _extends({}, newLoaderData);
  for (let match2 of matches) {
    let id = match2.route.id;
    if (newLoaderData.hasOwnProperty(id) ? newLoaderData[id] !== void 0 && (mergedLoaderData[id] = newLoaderData[id]) : loaderData[id] !== void 0 && (mergedLoaderData[id] = loaderData[id]), errors && errors.hasOwnProperty(id))
      break;
  }
  return mergedLoaderData;
}
function findNearestBoundary(matches, routeId) {
  return (routeId ? matches.slice(0, matches.findIndex((m6) => m6.route.id === routeId) + 1) : [...matches]).reverse().find((m6) => m6.route.hasErrorBoundary === !0) || matches[0];
}
function getShortCircuitMatches(routes2) {
  let route = routes2.find((r7) => r7.index || !r7.path || r7.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp4) {
  let {
    pathname,
    routeId,
    method,
    type
  } = _temp4 === void 0 ? {} : _temp4, statusText = "Unknown Server Error", errorMessage = "Unknown @remix-run/router error";
  return status === 400 ? (statusText = "Bad Request", method && pathname && routeId ? errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request." : type === "defer-action" && (errorMessage = "defer() is not supported in actions")) : status === 403 ? (statusText = "Forbidden", errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"') : status === 404 ? (statusText = "Not Found", errorMessage = 'No route matches URL "' + pathname + '"') : status === 405 && (statusText = "Method Not Allowed", method && pathname && routeId ? errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request." : method && (errorMessage = 'Invalid request method "' + method.toUpperCase() + '"')), new ErrorResponse(status || 500, statusText, new Error(errorMessage), !0);
}
function findRedirect(results) {
  for (let i7 = results.length - 1; i7 >= 0; i7--) {
    let result = results[i7];
    if (isRedirectResult(result))
      return result;
  }
}
function stripHashFromPath(path2) {
  let parsedPath = typeof path2 == "string" ? parsePath(path2) : path2;
  return createPath(_extends({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a4, b4) {
  return a4.pathname === b4.pathname && a4.search === b4.search && a4.hash !== b4.hash;
}
function isDeferredResult(result) {
  return result.type === ResultType.deferred;
}
function isErrorResult(result) {
  return result.type === ResultType.error;
}
function isRedirectResult(result) {
  return (result && result.type) === ResultType.redirect;
}
function isResponse(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
function isRedirectResponse(result) {
  if (!isResponse(result))
    return !1;
  let status = result.status, location2 = result.headers.get("Location");
  return status >= 300 && status <= 399 && location2 != null;
}
function isQueryRouteResponse(obj) {
  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);
}
function isValidMethod(method) {
  return validRequestMethods.has(method);
}
function isMutationMethod(method) {
  return validMutationMethods.has(method);
}
async function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {
  for (let index = 0; index < results.length; index++) {
    let result = results[index], match2 = matchesToLoad[index], currentMatch = currentMatches.find((m6) => m6.route.id === match2.route.id), isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
    isDeferredResult(result) && (isFetcher || isRevalidatingLoader) && await resolveDeferredData(result, signal, isFetcher).then((result2) => {
      result2 && (results[index] = result2 || results[index]);
    });
  }
}
async function resolveDeferredData(result, signal, unwrap) {
  if (unwrap === void 0 && (unwrap = !1), !await result.deferredData.resolveData(signal)) {
    if (unwrap)
      try {
        return {
          type: ResultType.data,
          data: result.deferredData.unwrappedData
        };
      } catch (e3) {
        return {
          type: ResultType.error,
          error: e3
        };
      }
    return {
      type: ResultType.data,
      data: result.deferredData.data
    };
  }
}
function hasNakedIndexQuery(search) {
  return new URLSearchParams(search).getAll("index").some((v3) => v3 === "");
}
function createUseMatchesMatch(match2, loaderData) {
  let {
    route,
    pathname,
    params
  } = match2;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function getTargetMatch(matches, location2) {
  let search = typeof location2 == "string" ? parsePath(location2).search : location2.search;
  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || ""))
    return matches[matches.length - 1];
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches[pathMatches.length - 1];
}
var Action, PopStateEventType, ResultType, paramRe, dynamicSegmentValue, indexRouteValue, emptySegmentValue, staticSegmentValue, splatPenalty, isSplat, joinPaths, normalizePathname, normalizeSearch, normalizeHash, json, AbortedDeferredError, DeferredData, defer, redirect, ErrorResponse, validMutationMethodsArr, validMutationMethods, validRequestMethodsArr, validRequestMethods, redirectStatusCodes, redirectPreserveMethodStatusCodes, IDLE_NAVIGATION, IDLE_FETCHER, IDLE_BLOCKER, isBrowser, isServer, UNSAFE_DEFERRED_SYMBOL, init_router = __esm({
  "node_modules/@remix-run/router/dist/router.js"() {
    (function(Action2) {
      Action2.Pop = "POP", Action2.Push = "PUSH", Action2.Replace = "REPLACE";
    })(Action || (Action = {}));
    PopStateEventType = "popstate";
    (function(ResultType2) {
      ResultType2.data = "data", ResultType2.deferred = "deferred", ResultType2.redirect = "redirect", ResultType2.error = "error";
    })(ResultType || (ResultType = {}));
    paramRe = /^:\w+$/, dynamicSegmentValue = 3, indexRouteValue = 2, emptySegmentValue = 1, staticSegmentValue = 10, splatPenalty = -2, isSplat = (s10) => s10 === "*";
    joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/"), normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/"), normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search, normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash, json = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init, headers = new Headers(responseInit.headers);
      return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), _extends({}, responseInit, {
        headers
      }));
    }, AbortedDeferredError = class extends Error {
    }, DeferredData = class {
      constructor(data, responseInit) {
        this.pendingKeysSet = /* @__PURE__ */ new Set(), this.subscribers = /* @__PURE__ */ new Set(), this.deferredKeys = [], invariant(data && typeof data == "object" && !Array.isArray(data), "defer() only accepts plain objects");
        let reject;
        this.abortPromise = new Promise((_2, r7) => reject = r7), this.controller = new AbortController();
        let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
        this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort), this.controller.signal.addEventListener("abort", onAbort), this.data = Object.entries(data).reduce((acc, _ref) => {
          let [key, value] = _ref;
          return Object.assign(acc, {
            [key]: this.trackPromise(key, value)
          });
        }, {}), this.done && this.unlistenAbortSignal(), this.init = responseInit;
      }
      trackPromise(key, value) {
        if (!(value instanceof Promise))
          return value;
        this.deferredKeys.push(key), this.pendingKeysSet.add(key);
        let promise2 = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise2, key, null, data), (error2) => this.onSettle(promise2, key, error2));
        return promise2.catch(() => {
        }), Object.defineProperty(promise2, "_tracked", {
          get: () => !0
        }), promise2;
      }
      onSettle(promise2, key, error2, data) {
        return this.controller.signal.aborted && error2 instanceof AbortedDeferredError ? (this.unlistenAbortSignal(), Object.defineProperty(promise2, "_error", {
          get: () => error2
        }), Promise.reject(error2)) : (this.pendingKeysSet.delete(key), this.done && this.unlistenAbortSignal(), error2 ? (Object.defineProperty(promise2, "_error", {
          get: () => error2
        }), this.emit(!1, key), Promise.reject(error2)) : (Object.defineProperty(promise2, "_data", {
          get: () => data
        }), this.emit(!1, key), data));
      }
      emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
      }
      subscribe(fn) {
        return this.subscribers.add(fn), () => this.subscribers.delete(fn);
      }
      cancel() {
        this.controller.abort(), this.pendingKeysSet.forEach((v3, k) => this.pendingKeysSet.delete(k)), this.emit(!0);
      }
      async resolveData(signal) {
        let aborted = !1;
        if (!this.done) {
          let onAbort = () => this.cancel();
          signal.addEventListener("abort", onAbort), aborted = await new Promise((resolve) => {
            this.subscribe((aborted2) => {
              signal.removeEventListener("abort", onAbort), (aborted2 || this.done) && resolve(aborted2);
            });
          });
        }
        return aborted;
      }
      get done() {
        return this.pendingKeysSet.size === 0;
      }
      get unwrappedData() {
        return invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds"), Object.entries(this.data).reduce((acc, _ref2) => {
          let [key, value] = _ref2;
          return Object.assign(acc, {
            [key]: unwrapTrackedPromise(value)
          });
        }, {});
      }
      get pendingKeys() {
        return Array.from(this.pendingKeysSet);
      }
    };
    defer = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init;
      return new DeferredData(data, responseInit);
    }, redirect = function(url, init) {
      init === void 0 && (init = 302);
      let responseInit = init;
      typeof responseInit == "number" ? responseInit = {
        status: responseInit
      } : typeof responseInit.status > "u" && (responseInit.status = 302);
      let headers = new Headers(responseInit.headers);
      return headers.set("Location", url), new Response(null, _extends({}, responseInit, {
        headers
      }));
    }, ErrorResponse = class {
      constructor(status, statusText, data, internal) {
        internal === void 0 && (internal = !1), this.status = status, this.statusText = statusText || "", this.internal = internal, data instanceof Error ? (this.data = data.toString(), this.error = data) : this.data = data;
      }
    };
    validMutationMethodsArr = ["post", "put", "patch", "delete"], validMutationMethods = new Set(validMutationMethodsArr), validRequestMethodsArr = ["get", ...validMutationMethodsArr], validRequestMethods = new Set(validRequestMethodsArr), redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]), redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]), IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    }, isBrowser = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", isServer = !isBrowser;
    UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
  }
});

// node_modules/react-router/dist/index.js
function _extends2() {
  return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends2.apply(this, arguments);
}
function isPolyfill(x2, y2) {
  return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
}
function useSyncExternalStore$2(subscribe, getSnapshot, getServerSnapshot) {
  didWarnOld18Alpha || "startTransition" in React && (didWarnOld18Alpha = !0, console.error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
  let value = getSnapshot();
  if (!didWarnUncachedGetSnapshot) {
    let cachedValue = getSnapshot();
    is(value, cachedValue) || (console.error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
  }
  let [{
    inst
  }, forceUpdate] = useState2({
    inst: {
      value,
      getSnapshot
    }
  });
  return useLayoutEffect2(() => {
    inst.value = value, inst.getSnapshot = getSnapshot, checkIfSnapshotChanged(inst) && forceUpdate({
      inst
    });
  }, [subscribe, value, getSnapshot]), useEffect2(() => (checkIfSnapshotChanged(inst) && forceUpdate({
    inst
  }), subscribe(() => {
    checkIfSnapshotChanged(inst) && forceUpdate({
      inst
    });
  })), [subscribe]), useDebugValue(value), value;
}
function checkIfSnapshotChanged(inst) {
  let latestGetSnapshot = inst.getSnapshot, prevValue = inst.value;
  try {
    let nextValue = latestGetSnapshot();
    return !is(prevValue, nextValue);
  } catch {
    return !0;
  }
}
function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
  return getSnapshot();
}
function useHref(to, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  useInRouterContext() || invariant(
    !1,
    "useHref() may be used only in the context of a <Router> component."
  );
  let {
    basename,
    navigator: navigator2
  } = React.useContext(NavigationContext), {
    hash,
    pathname,
    search
  } = useResolvedPath(to, {
    relative
  }), joinedPathname = pathname;
  return basename !== "/" && (joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname])), navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash
  });
}
function useInRouterContext() {
  return React.useContext(LocationContext) != null;
}
function useLocation() {
  return useInRouterContext() || invariant(
    !1,
    "useLocation() may be used only in the context of a <Router> component."
  ), React.useContext(LocationContext).location;
}
function useNavigationType() {
  return React.useContext(LocationContext).navigationType;
}
function useMatch(pattern) {
  useInRouterContext() || invariant(
    !1,
    "useMatch() may be used only in the context of a <Router> component."
  );
  let {
    pathname
  } = useLocation();
  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);
}
function useNavigate() {
  useInRouterContext() || invariant(
    !1,
    "useNavigate() may be used only in the context of a <Router> component."
  );
  let {
    basename,
    navigator: navigator2
  } = React.useContext(NavigationContext), {
    matches
  } = React.useContext(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase)), activeRef = React.useRef(!1);
  return React.useEffect(() => {
    activeRef.current = !0;
  }), React.useCallback(function(to, options) {
    if (options === void 0 && (options = {}), warning(activeRef.current, "You should call navigate() in a React.useEffect(), not when your component is first rendered."), !activeRef.current)
      return;
    if (typeof to == "number") {
      navigator2.go(to);
      return;
    }
    let path2 = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    basename !== "/" && (path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname])), (options.replace ? navigator2.replace : navigator2.push)(path2, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname]);
}
function useOutletContext() {
  return React.useContext(OutletContext);
}
function useOutlet(context2) {
  let outlet = React.useContext(RouteContext).outlet;
  return outlet && /* @__PURE__ */ React.createElement(OutletContext.Provider, {
    value: context2
  }, outlet);
}
function useParams() {
  let {
    matches
  } = React.useContext(RouteContext), routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2, {
    matches
  } = React.useContext(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
}
function useRoutes(routes2, locationArg) {
  useInRouterContext() || invariant(
    !1,
    "useRoutes() may be used only in the context of a <Router> component."
  );
  let {
    navigator: navigator2
  } = React.useContext(NavigationContext), dataRouterStateContext = React.useContext(DataRouterStateContext), {
    matches: parentMatches
  } = React.useContext(RouteContext), routeMatch = parentMatches[parentMatches.length - 1], parentParams = routeMatch ? routeMatch.params : {}, parentPathname = routeMatch ? routeMatch.pathname : "/", parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/", parentRoute = routeMatch && routeMatch.route;
  {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation(), location2;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg == "string" ? parsePath(locationArg) : locationArg;
    parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase)) || invariant(!1, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')), location2 = parsedLocationArg;
  } else
    location2 = locationFromContext;
  let pathname = location2.pathname || "/", remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/", matches = matchRoutes(routes2, {
    pathname: remainingPathname
  });
  warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" '), warning(matches == null || matches[matches.length - 1].route.element !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.');
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterStateContext || void 0);
  return locationArg && renderedMatches ? /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    value: {
      location: _extends2({
        pathname: "/",
        search: "",
        hash: "",
        state: null,
        key: "default"
      }, location2),
      navigationType: Action.Pop
    }
  }, renderedMatches) : renderedMatches;
}
function DefaultErrorElement() {
  let error2 = useRouteError(), message = isRouteErrorResponse(error2) ? error2.status + " " + error2.statusText : error2 instanceof Error ? error2.message : JSON.stringify(error2), stack = error2 instanceof Error ? error2.stack : null, lightgrey = "rgba(200,200,200, 0.5)", preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  }, codeStyles = {
    padding: "2px 4px",
    backgroundColor: lightgrey
  }, devInfo = null;
  return devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own\xA0", /* @__PURE__ */ React.createElement("code", {
    style: codeStyles
  }, "errorElement"), " props on\xA0", /* @__PURE__ */ React.createElement("code", {
    style: codeStyles
  }, "<Route>"))), /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref, dataRouterContext = React.useContext(DataRouterContext);
  return dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && match2.route.errorElement && (dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id), /* @__PURE__ */ React.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState) {
  if (parentMatches === void 0 && (parentMatches = []), matches == null)
    if (dataRouterState != null && dataRouterState.errors)
      matches = dataRouterState.matches;
    else
      return null;
  let renderedMatches = matches, errors = dataRouterState == null ? void 0 : dataRouterState.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m6) => m6.route.id && (errors == null ? void 0 : errors[m6.route.id]));
    errorIndex >= 0 || invariant(!1, "Could not find a matching route for the current errors: " + errors), renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  return renderedMatches.reduceRight((outlet, match2, index) => {
    let error2 = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null, errorElement = dataRouterState ? match2.route.errorElement || /* @__PURE__ */ React.createElement(DefaultErrorElement, null) : null, matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1)), getChildren2 = () => /* @__PURE__ */ React.createElement(RenderedRoute, {
      match: match2,
      routeContext: {
        outlet,
        matches: matches2
      }
    }, error2 ? errorElement : match2.route.element !== void 0 ? match2.route.element : outlet);
    return dataRouterState && (match2.route.errorElement || index === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      component: errorElement,
      error: error2,
      children: getChildren2(),
      routeContext: {
        outlet: null,
        matches: matches2
      }
    }) : getChildren2();
  }, null);
}
function getDataRouterConsoleError(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext(hookName) {
  let ctx = React.useContext(DataRouterContext);
  return ctx || invariant(!1, getDataRouterConsoleError(hookName)), ctx;
}
function useDataRouterState(hookName) {
  let state = React.useContext(DataRouterStateContext);
  return state || invariant(!1, getDataRouterConsoleError(hookName)), state;
}
function useRouteContext(hookName) {
  let route = React.useContext(RouteContext);
  return route || invariant(!1, getDataRouterConsoleError(hookName)), route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName), thisRoute = route.matches[route.matches.length - 1];
  return thisRoute.route.id || invariant(!1, hookName + ' can only be used on routes that contain a unique "id"'), thisRoute.route.id;
}
function useNavigation() {
  return useDataRouterState(DataRouterStateHook.UseNavigation).navigation;
}
function useRevalidator() {
  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator), state = useDataRouterState(DataRouterStateHook.UseRevalidator);
  return {
    revalidate: dataRouterContext.router.revalidate,
    state: state.revalidation
  };
}
function useMatches() {
  let {
    matches,
    loaderData
  } = useDataRouterState(DataRouterStateHook.UseMatches);
  return React.useMemo(() => matches.map((match2) => {
    let {
      pathname,
      params
    } = match2;
    return {
      id: match2.route.id,
      pathname,
      params,
      data: loaderData[match2.route.id],
      handle: match2.route.handle
    };
  }), [matches, loaderData]);
}
function useLoaderData() {
  let state = useDataRouterState(DataRouterStateHook.UseLoaderData), routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
  if (state.errors && state.errors[routeId] != null) {
    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
    return;
  }
  return state.loaderData[routeId];
}
function useRouteLoaderData(routeId) {
  return useDataRouterState(DataRouterStateHook.UseRouteLoaderData).loaderData[routeId];
}
function useActionData() {
  let state = useDataRouterState(DataRouterStateHook.UseActionData);
  return React.useContext(RouteContext) || invariant(!1, "useActionData must be used inside a RouteContext"), Object.values((state == null ? void 0 : state.actionData) || {})[0];
}
function useRouteError() {
  var _state$errors;
  let error2 = React.useContext(RouteErrorContext), state = useDataRouterState(DataRouterStateHook.UseRouteError), routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
  return error2 || ((_state$errors = state.errors) == null ? void 0 : _state$errors[routeId]);
}
function useAsyncValue() {
  let value = React.useContext(AwaitContext);
  return value == null ? void 0 : value._data;
}
function useAsyncError() {
  let value = React.useContext(AwaitContext);
  return value == null ? void 0 : value._error;
}
function useBlocker(shouldBlock) {
  let {
    router
  } = useDataRouterContext(DataRouterHook.UseBlocker), blockerFunction = React.useCallback((args) => typeof shouldBlock == "function" ? !!shouldBlock(args) : !!shouldBlock, [shouldBlock]), blocker = router.getBlocker(blockerKey, blockerFunction);
  return React.useEffect(() => () => router.deleteBlocker(blockerKey), [router]), blocker;
}
function warningOnce(key, cond, message) {
  !cond && !alreadyWarned[key] && (alreadyWarned[key] = !0, warning(!1, message));
}
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router
  } = _ref, state = useSyncExternalStore(
    router.subscribe,
    () => router.state,
    () => router.state
  ), navigator2 = React.useMemo(() => ({
    createHref: router.createHref,
    encodeLocation: router.encodeLocation,
    go: (n4) => router.navigate(n4),
    push: (to, state2, opts) => router.navigate(to, {
      state: state2,
      preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
    }),
    replace: (to, state2, opts) => router.navigate(to, {
      replace: !0,
      state: state2,
      preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
    })
  }), [router]), basename = router.basename || "/";
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DataRouterContext.Provider, {
    value: {
      router,
      navigator: navigator2,
      static: !1,
      basename
    }
  }, /* @__PURE__ */ React.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ React.createElement(Router, {
    basename: router.basename,
    location: router.state.location,
    navigationType: router.state.historyAction,
    navigator: navigator2
  }, router.state.initialized ? /* @__PURE__ */ React.createElement(Routes, null) : fallbackElement))), null);
}
function MemoryRouter(_ref2) {
  let {
    basename,
    children,
    initialEntries,
    initialIndex
  } = _ref2, historyRef = React.useRef();
  historyRef.current == null && (historyRef.current = createMemoryHistory({
    initialEntries,
    initialIndex,
    v5Compat: !0
  }));
  let history = historyRef.current, [state, setState] = React.useState({
    action: history.action,
    location: history.location
  });
  return React.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function Navigate(_ref3) {
  let {
    to,
    replace,
    state,
    relative
  } = _ref3;
  useInRouterContext() || invariant(
    !1,
    "<Navigate> may be used only in the context of a <Router> component."
  ), warning(!React.useContext(NavigationContext).static, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
  let dataRouterState = React.useContext(DataRouterStateContext), navigate = useNavigate();
  return React.useEffect(() => {
    dataRouterState && dataRouterState.navigation.state !== "idle" || navigate(to, {
      replace,
      state,
      relative
    });
  }), null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant(!1, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
}
function Router(_ref4) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = !1
  } = _ref4;
  useInRouterContext() && invariant(!1, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");
  let basename = basenameProp.replace(/^\/*/, "/"), navigationContext = React.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp
  }), [basename, navigator2, staticProp]);
  typeof locationProp == "string" && (locationProp = parsePath(locationProp));
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp, location2 = React.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    return trailingPathname == null ? null : {
      pathname: trailingPathname,
      search,
      hash,
      state,
      key
    };
  }, [basename, pathname, search, hash, state, key]);
  return warning(location2 != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything."), location2 == null ? null : /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    children,
    value: {
      location: location2,
      navigationType
    }
  }));
}
function Routes(_ref5) {
  let {
    children,
    location: location2
  } = _ref5, dataRouterContext = React.useContext(DataRouterContext), routes2 = dataRouterContext && !children ? dataRouterContext.router.routes : createRoutesFromChildren(children);
  return useRoutes(routes2, location2);
}
function Await(_ref6) {
  let {
    children,
    errorElement,
    resolve
  } = _ref6;
  return /* @__PURE__ */ React.createElement(AwaitErrorBoundary, {
    resolve,
    errorElement
  }, /* @__PURE__ */ React.createElement(ResolveAwait, null, children));
}
function ResolveAwait(_ref7) {
  let {
    children
  } = _ref7, data = useAsyncValue(), toRender = typeof children == "function" ? children(data) : children;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, toRender);
}
function createRoutesFromChildren(children, parentPath) {
  parentPath === void 0 && (parentPath = []);
  let routes2 = [];
  return React.Children.forEach(children, (element, index) => {
    if (!/* @__PURE__ */ React.isValidElement(element))
      return;
    if (element.type === React.Fragment) {
      routes2.push.apply(routes2, createRoutesFromChildren(element.props.children, parentPath));
      return;
    }
    element.type !== Route && invariant(!1, "[" + (typeof element.type == "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>"), !element.props.index || !element.props.children || invariant(!1, "An index route cannot have child routes.");
    let treePath = [...parentPath, index], route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      hasErrorBoundary: element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle
    };
    element.props.children && (route.children = createRoutesFromChildren(element.props.children, treePath)), routes2.push(route);
  }), routes2;
}
function renderMatches(matches) {
  return _renderMatches(matches);
}
function enhanceManualRouteObjects(routes2) {
  return routes2.map((route) => {
    let routeClone = _extends2({}, route);
    return routeClone.hasErrorBoundary == null && (routeClone.hasErrorBoundary = routeClone.errorElement != null), routeClone.children && (routeClone.children = enhanceManualRouteObjects(routeClone.children)), routeClone;
  });
}
function createMemoryRouter(routes2, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    history: createMemoryHistory({
      initialEntries: opts == null ? void 0 : opts.initialEntries,
      initialIndex: opts == null ? void 0 : opts.initialIndex
    }),
    hydrationData: opts == null ? void 0 : opts.hydrationData,
    routes: enhanceManualRouteObjects(routes2)
  }).initialize();
}
var React, is, useState2, useEffect2, useLayoutEffect2, useDebugValue, didWarnOld18Alpha, didWarnUncachedGetSnapshot, canUseDOM, isServerEnvironment, shim, useSyncExternalStore, DataRouterContext, DataRouterStateContext, AwaitContext, NavigationContext, LocationContext, RouteContext, RouteErrorContext, OutletContext, RenderErrorBoundary, DataRouterHook, DataRouterStateHook, blockerKey, alreadyWarned, AwaitRenderStatus, neverSettledPromise, AwaitErrorBoundary, init_dist = __esm({
  "node_modules/react-router/dist/index.js"() {
    init_router();
    init_router();
    React = __toESM(require_react());
    is = typeof Object.is == "function" ? Object.is : isPolyfill, {
      useState: useState2,
      useEffect: useEffect2,
      useLayoutEffect: useLayoutEffect2,
      useDebugValue
    } = React, didWarnOld18Alpha = !1, didWarnUncachedGetSnapshot = !1;
    canUseDOM = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", isServerEnvironment = !canUseDOM, shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore$2, useSyncExternalStore = "useSyncExternalStore" in React ? ((module) => module.useSyncExternalStore)(React) : shim, DataRouterContext = /* @__PURE__ */ React.createContext(null);
    DataRouterContext.displayName = "DataRouter";
    DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
    DataRouterStateContext.displayName = "DataRouterState";
    AwaitContext = /* @__PURE__ */ React.createContext(null);
    AwaitContext.displayName = "Await";
    NavigationContext = /* @__PURE__ */ React.createContext(null);
    NavigationContext.displayName = "Navigation";
    LocationContext = /* @__PURE__ */ React.createContext(null);
    LocationContext.displayName = "Location";
    RouteContext = /* @__PURE__ */ React.createContext({
      outlet: null,
      matches: []
    });
    RouteContext.displayName = "Route";
    RouteErrorContext = /* @__PURE__ */ React.createContext(null);
    RouteErrorContext.displayName = "RouteError";
    OutletContext = /* @__PURE__ */ React.createContext(null);
    RenderErrorBoundary = class extends React.Component {
      constructor(props) {
        super(props), this.state = {
          location: props.location,
          error: props.error
        };
      }
      static getDerivedStateFromError(error2) {
        return {
          error: error2
        };
      }
      static getDerivedStateFromProps(props, state) {
        return state.location !== props.location ? {
          error: props.error,
          location: props.location
        } : {
          error: props.error || state.error,
          location: state.location
        };
      }
      componentDidCatch(error2, errorInfo) {
        console.error("React Router caught the following error during render", error2, errorInfo);
      }
      render() {
        return this.state.error ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
          value: this.props.routeContext
        }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
          value: this.state.error,
          children: this.props.component
        })) : this.props.children;
      }
    };
    (function(DataRouterHook3) {
      DataRouterHook3.UseBlocker = "useBlocker", DataRouterHook3.UseRevalidator = "useRevalidator";
    })(DataRouterHook || (DataRouterHook = {}));
    (function(DataRouterStateHook3) {
      DataRouterStateHook3.UseLoaderData = "useLoaderData", DataRouterStateHook3.UseActionData = "useActionData", DataRouterStateHook3.UseRouteError = "useRouteError", DataRouterStateHook3.UseNavigation = "useNavigation", DataRouterStateHook3.UseRouteLoaderData = "useRouteLoaderData", DataRouterStateHook3.UseMatches = "useMatches", DataRouterStateHook3.UseRevalidator = "useRevalidator";
    })(DataRouterStateHook || (DataRouterStateHook = {}));
    blockerKey = "blocker-singleton";
    alreadyWarned = {};
    (function(AwaitRenderStatus2) {
      AwaitRenderStatus2[AwaitRenderStatus2.pending = 0] = "pending", AwaitRenderStatus2[AwaitRenderStatus2.success = 1] = "success", AwaitRenderStatus2[AwaitRenderStatus2.error = 2] = "error";
    })(AwaitRenderStatus || (AwaitRenderStatus = {}));
    neverSettledPromise = new Promise(() => {
    }), AwaitErrorBoundary = class extends React.Component {
      constructor(props) {
        super(props), this.state = {
          error: null
        };
      }
      static getDerivedStateFromError(error2) {
        return {
          error: error2
        };
      }
      componentDidCatch(error2, errorInfo) {
        console.error("<Await> caught the following error during render", error2, errorInfo);
      }
      render() {
        let {
          children,
          errorElement,
          resolve
        } = this.props, promise2 = null, status = AwaitRenderStatus.pending;
        if (!(resolve instanceof Promise))
          status = AwaitRenderStatus.success, promise2 = Promise.resolve(), Object.defineProperty(promise2, "_tracked", {
            get: () => !0
          }), Object.defineProperty(promise2, "_data", {
            get: () => resolve
          });
        else if (this.state.error) {
          status = AwaitRenderStatus.error;
          let renderError = this.state.error;
          promise2 = Promise.reject().catch(() => {
          }), Object.defineProperty(promise2, "_tracked", {
            get: () => !0
          }), Object.defineProperty(promise2, "_error", {
            get: () => renderError
          });
        } else
          resolve._tracked ? (promise2 = resolve, status = promise2._error !== void 0 ? AwaitRenderStatus.error : promise2._data !== void 0 ? AwaitRenderStatus.success : AwaitRenderStatus.pending) : (status = AwaitRenderStatus.pending, Object.defineProperty(resolve, "_tracked", {
            get: () => !0
          }), promise2 = resolve.then((data) => Object.defineProperty(resolve, "_data", {
            get: () => data
          }), (error2) => Object.defineProperty(resolve, "_error", {
            get: () => error2
          })));
        if (status === AwaitRenderStatus.error && promise2._error instanceof AbortedDeferredError)
          throw neverSettledPromise;
        if (status === AwaitRenderStatus.error && !errorElement)
          throw promise2._error;
        if (status === AwaitRenderStatus.error)
          return /* @__PURE__ */ React.createElement(AwaitContext.Provider, {
            value: promise2,
            children: errorElement
          });
        if (status === AwaitRenderStatus.success)
          return /* @__PURE__ */ React.createElement(AwaitContext.Provider, {
            value: promise2,
            children
          });
        throw promise2;
      }
    };
  }
});

// node_modules/react-router-dom/dist/index.js
var dist_exports = {};
__export(dist_exports, {
  AbortedDeferredError: () => AbortedDeferredError,
  Await: () => Await,
  BrowserRouter: () => BrowserRouter,
  Form: () => Form,
  HashRouter: () => HashRouter,
  Link: () => Link,
  MemoryRouter: () => MemoryRouter,
  NavLink: () => NavLink,
  Navigate: () => Navigate,
  NavigationType: () => Action,
  Outlet: () => Outlet,
  Route: () => Route,
  Router: () => Router,
  RouterProvider: () => RouterProvider,
  Routes: () => Routes,
  ScrollRestoration: () => ScrollRestoration,
  UNSAFE_DataRouterContext: () => DataRouterContext,
  UNSAFE_DataRouterStateContext: () => DataRouterStateContext,
  UNSAFE_LocationContext: () => LocationContext,
  UNSAFE_NavigationContext: () => NavigationContext,
  UNSAFE_RouteContext: () => RouteContext,
  UNSAFE_enhanceManualRouteObjects: () => enhanceManualRouteObjects,
  UNSAFE_useScrollRestoration: () => useScrollRestoration,
  createBrowserRouter: () => createBrowserRouter,
  createHashRouter: () => createHashRouter,
  createMemoryRouter: () => createMemoryRouter,
  createPath: () => createPath,
  createRoutesFromChildren: () => createRoutesFromChildren,
  createRoutesFromElements: () => createRoutesFromChildren,
  createSearchParams: () => createSearchParams,
  defer: () => defer,
  generatePath: () => generatePath,
  isRouteErrorResponse: () => isRouteErrorResponse,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  parsePath: () => parsePath,
  redirect: () => redirect,
  renderMatches: () => renderMatches,
  resolvePath: () => resolvePath,
  unstable_HistoryRouter: () => HistoryRouter,
  unstable_useBlocker: () => useBlocker,
  unstable_usePrompt: () => usePrompt,
  useActionData: () => useActionData,
  useAsyncError: () => useAsyncError,
  useAsyncValue: () => useAsyncValue,
  useBeforeUnload: () => useBeforeUnload,
  useFetcher: () => useFetcher,
  useFetchers: () => useFetchers,
  useFormAction: () => useFormAction,
  useHref: () => useHref,
  useInRouterContext: () => useInRouterContext,
  useLinkClickHandler: () => useLinkClickHandler,
  useLoaderData: () => useLoaderData,
  useLocation: () => useLocation,
  useMatch: () => useMatch,
  useMatches: () => useMatches,
  useNavigate: () => useNavigate,
  useNavigation: () => useNavigation,
  useNavigationType: () => useNavigationType,
  useOutlet: () => useOutlet,
  useOutletContext: () => useOutletContext,
  useParams: () => useParams,
  useResolvedPath: () => useResolvedPath,
  useRevalidator: () => useRevalidator,
  useRouteError: () => useRouteError,
  useRouteLoaderData: () => useRouteLoaderData,
  useRoutes: () => useRoutes,
  useSearchParams: () => useSearchParams,
  useSubmit: () => useSubmit
});
function _extends3() {
  return _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i7;
  for (i7 = 0; i7 < sourceKeys.length; i7++)
    key = sourceKeys[i7], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function isHtmlElement(object) {
  return object != null && typeof object.tagName == "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event2) {
  return !!(event2.metaKey || event2.altKey || event2.ctrlKey || event2.shiftKey);
}
function shouldProcessLinkClick(event2, target) {
  return event2.button === 0 && (!target || target === "_self") && !isModifiedEvent(event2);
}
function createSearchParams(init) {
  return init === void 0 && (init = ""), new URLSearchParams(typeof init == "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
    let value = init[key];
    return memo.concat(Array.isArray(value) ? value.map((v3) => [key, v3]) : [[key, value]]);
  }, []));
}
function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
  let searchParams = createSearchParams(locationSearch);
  if (defaultSearchParams)
    for (let key of defaultSearchParams.keys())
      searchParams.has(key) || defaultSearchParams.getAll(key).forEach((value) => {
        searchParams.append(key, value);
      });
  return searchParams;
}
function getFormSubmissionInfo(target, defaultAction, options) {
  let method, action4, encType, formData;
  if (isFormElement(target)) {
    let submissionTrigger = options.submissionTrigger;
    method = options.method || target.getAttribute("method") || defaultMethod, action4 = options.action || target.getAttribute("action") || defaultAction, encType = options.encType || target.getAttribute("enctype") || defaultEncType, formData = new FormData(target), submissionTrigger && submissionTrigger.name && formData.append(submissionTrigger.name, submissionTrigger.value);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null)
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    method = options.method || target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod, action4 = options.action || target.getAttribute("formaction") || form.getAttribute("action") || defaultAction, encType = options.encType || target.getAttribute("formenctype") || form.getAttribute("enctype") || defaultEncType, formData = new FormData(form), target.name && formData.append(target.name, target.value);
  } else {
    if (isHtmlElement(target))
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    if (method = options.method || defaultMethod, action4 = options.action || defaultAction, encType = options.encType || defaultEncType, target instanceof FormData)
      formData = target;
    else if (formData = new FormData(), target instanceof URLSearchParams)
      for (let [name, value] of target)
        formData.append(name, value);
    else if (target != null)
      for (let name of Object.keys(target))
        formData.append(name, target[name]);
  }
  let {
    protocol,
    host
  } = window.location;
  return {
    url: new URL(action4, protocol + "//" + host),
    method: method.toLowerCase(),
    encType,
    formData
  };
}
function createBrowserRouter(routes2, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    history: createBrowserHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes: enhanceManualRouteObjects(routes2)
  }).initialize();
}
function createHashRouter(routes2, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    history: createHashHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes: enhanceManualRouteObjects(routes2)
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  return state && state.errors && (state = _extends3({}, state, {
    errors: deserializeErrors(state.errors)
  })), state;
}
function deserializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors), serialized = {};
  for (let [key, val] of entries)
    if (val && val.__type === "RouteErrorResponse")
      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === !0);
    else if (val && val.__type === "Error") {
      let error2 = new Error(val.message);
      error2.stack = "", serialized[key] = error2;
    } else
      serialized[key] = val;
  return serialized;
}
function BrowserRouter(_ref) {
  let {
    basename,
    children,
    window: window2
  } = _ref, historyRef = React2.useRef();
  historyRef.current == null && (historyRef.current = createBrowserHistory({
    window: window2,
    v5Compat: !0
  }));
  let history = historyRef.current, [state, setState] = React2.useState({
    action: history.action,
    location: history.location
  });
  return React2.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function HashRouter(_ref2) {
  let {
    basename,
    children,
    window: window2
  } = _ref2, historyRef = React2.useRef();
  historyRef.current == null && (historyRef.current = createHashHistory({
    window: window2,
    v5Compat: !0
  }));
  let history = historyRef.current, [state, setState] = React2.useState({
    action: history.action,
    location: history.location
  });
  return React2.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function HistoryRouter(_ref3) {
  let {
    basename,
    children,
    history
  } = _ref3, [state, setState] = React2.useState({
    action: history.action,
    location: history.location
  });
  return React2.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function ScrollRestoration(_ref7) {
  let {
    getKey,
    storageKey
  } = _ref7;
  return useScrollRestoration({
    getKey,
    storageKey
  }), null;
}
function getDataRouterConsoleError2(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext2(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  return ctx || invariant(!1, getDataRouterConsoleError2(hookName)), ctx;
}
function useDataRouterState2(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  return state || invariant(!1, getDataRouterConsoleError2(hookName)), state;
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative
  } = _temp === void 0 ? {} : _temp, navigate = useNavigate(), location2 = useLocation(), path2 = useResolvedPath(to, {
    relative
  });
  return React2.useCallback((event2) => {
    if (shouldProcessLinkClick(event2, target)) {
      event2.preventDefault();
      let replace = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path2);
      navigate(to, {
        replace,
        state,
        preventScrollReset,
        relative
      });
    }
  }, [location2, navigate, path2, replaceProp, state, target, to, preventScrollReset, relative]);
}
function useSearchParams(defaultInit) {
  warning2(typeof URLSearchParams < "u", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.");
  let defaultSearchParamsRef = React2.useRef(createSearchParams(defaultInit)), hasSetSearchParamsRef = React2.useRef(!1), location2 = useLocation(), searchParams = React2.useMemo(() => getSearchParamsForLocation(location2.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location2.search]), navigate = useNavigate(), setSearchParams = React2.useCallback((nextInit, navigateOptions) => {
    let newSearchParams = createSearchParams(typeof nextInit == "function" ? nextInit(searchParams) : nextInit);
    hasSetSearchParamsRef.current = !0, navigate("?" + newSearchParams, navigateOptions);
  }, [navigate, searchParams]);
  return [searchParams, setSearchParams];
}
function useSubmit() {
  return useSubmitImpl();
}
function useSubmitImpl(fetcherKey, routeId) {
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseSubmitImpl), defaultAction = useFormAction();
  return React2.useCallback(function(target, options) {
    if (options === void 0 && (options = {}), typeof document > "u")
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    let {
      method,
      encType,
      formData,
      url
    } = getFormSubmissionInfo(target, defaultAction, options), href = url.pathname + url.search, opts = {
      replace: options.replace,
      preventScrollReset: options.preventScrollReset,
      formData,
      formMethod: method,
      formEncType: encType
    };
    fetcherKey ? (routeId == null && invariant(!1, "No routeId available for useFetcher()"), router.fetch(fetcherKey, routeId, href, opts)) : router.navigate(href, opts);
  }, [defaultAction, router, fetcherKey, routeId]);
}
function useFormAction(action4, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2, {
    basename
  } = React2.useContext(NavigationContext), routeContext = React2.useContext(RouteContext);
  routeContext || invariant(!1, "useFormAction must be used inside a RouteContext");
  let [match2] = routeContext.matches.slice(-1), path2 = _extends3({}, useResolvedPath(action4 || ".", {
    relative
  })), location2 = useLocation();
  if (action4 == null && (path2.search = location2.search, path2.hash = location2.hash, match2.route.index)) {
    let params = new URLSearchParams(path2.search);
    params.delete("index"), path2.search = params.toString() ? "?" + params.toString() : "";
  }
  return (!action4 || action4 === ".") && match2.route.index && (path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index"), basename !== "/" && (path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname])), createPath(path2);
}
function createFetcherForm(fetcherKey, routeId) {
  let FetcherForm = /* @__PURE__ */ React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(FormImpl, _extends3({}, props, {
    ref,
    fetcherKey,
    routeId
  })));
  return FetcherForm.displayName = "fetcher.Form", FetcherForm;
}
function useFetcher() {
  var _route$matches;
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseFetcher), route = React2.useContext(RouteContext);
  route || invariant(!1, "useFetcher must be used inside a RouteContext");
  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
  routeId == null && invariant(!1, 'useFetcher can only be used on routes that contain a unique "id"');
  let [fetcherKey] = React2.useState(() => String(++fetcherId)), [Form2] = React2.useState(() => (routeId || invariant(!1, "No routeId available for fetcher.Form()"), createFetcherForm(fetcherKey, routeId))), [load] = React2.useState(() => (href) => {
    router || invariant(!1, "No router available for fetcher.load()"), routeId || invariant(!1, "No routeId available for fetcher.load()"), router.fetch(fetcherKey, routeId, href);
  }), submit = useSubmitImpl(fetcherKey, routeId), fetcher = router.getFetcher(fetcherKey), fetcherWithComponents = React2.useMemo(() => _extends3({
    Form: Form2,
    submit,
    load
  }, fetcher), [fetcher, Form2, submit, load]);
  return React2.useEffect(() => () => {
    if (!router) {
      console.warn("No fetcher available to clean up from useFetcher()");
      return;
    }
    router.deleteFetcher(fetcherKey);
  }, [router, fetcherKey]), fetcherWithComponents;
}
function useFetchers() {
  return [...useDataRouterState2(DataRouterStateHook2.UseFetchers).fetchers.values()];
}
function useScrollRestoration(_temp3) {
  let {
    getKey,
    storageKey
  } = _temp3 === void 0 ? {} : _temp3, {
    router
  } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration), {
    restoreScrollPosition,
    preventScrollReset
  } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration), location2 = useLocation(), matches = useMatches(), navigation = useNavigation();
  React2.useEffect(() => (window.history.scrollRestoration = "manual", () => {
    window.history.scrollRestoration = "auto";
  }), []), usePageHide(React2.useCallback(() => {
    if (navigation.state === "idle") {
      let key = (getKey ? getKey(location2, matches) : null) || location2.key;
      savedScrollPositions[key] = window.scrollY;
    }
    sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions)), window.history.scrollRestoration = "auto";
  }, [storageKey, getKey, navigation.state, location2, matches])), typeof document < "u" && (React2.useLayoutEffect(() => {
    try {
      let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
      sessionPositions && (savedScrollPositions = JSON.parse(sessionPositions));
    } catch {
    }
  }, [storageKey]), React2.useLayoutEffect(() => {
    let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);
    return () => disableScrollRestoration && disableScrollRestoration();
  }, [router, getKey]), React2.useLayoutEffect(() => {
    if (restoreScrollPosition !== !1) {
      if (typeof restoreScrollPosition == "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location2.hash) {
        let el = document.getElementById(location2.hash.slice(1));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      preventScrollReset !== !0 && window.scrollTo(0, 0);
    }
  }, [location2, restoreScrollPosition, preventScrollReset]));
}
function useBeforeUnload(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    return window.addEventListener("beforeunload", callback, opts), () => {
      window.removeEventListener("beforeunload", callback, opts);
    };
  }, [callback, capture]);
}
function usePageHide(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    return window.addEventListener("pagehide", callback, opts), () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function usePrompt(_ref8) {
  let {
    when,
    message
  } = _ref8, blocker = useBlocker(when);
  React2.useEffect(() => {
    blocker.state === "blocked" && !when && blocker.reset();
  }, [blocker, when]), React2.useEffect(() => {
    blocker.state === "blocked" && (window.confirm(message) ? setTimeout(blocker.proceed, 0) : blocker.reset());
  }, [blocker, message]);
}
function warning2(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
var React2, defaultMethod, defaultEncType, _excluded, _excluded2, _excluded3, isBrowser2, Link, NavLink, Form, FormImpl, DataRouterHook2, DataRouterStateHook2, fetcherId, SCROLL_RESTORATION_STORAGE_KEY, savedScrollPositions, init_dist2 = __esm({
  "node_modules/react-router-dom/dist/index.js"() {
    React2 = __toESM(require_react());
    init_dist();
    init_dist();
    init_router();
    defaultMethod = "get", defaultEncType = "application/x-www-form-urlencoded";
    _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"], _excluded3 = ["reloadDocument", "replace", "method", "action", "onSubmit", "fetcherKey", "routeId", "relative", "preventScrollReset"];
    HistoryRouter.displayName = "unstable_HistoryRouter";
    isBrowser2 = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", Link = /* @__PURE__ */ React2.forwardRef(function(_ref4, ref) {
      let {
        onClick: onClick2,
        relative,
        reloadDocument,
        replace,
        state,
        target,
        to,
        preventScrollReset
      } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded), location2 = typeof to == "string" ? to : createPath(to), isAbsolute = /^[a-z+]+:\/\//i.test(location2) || location2.startsWith("//"), navigationLocation = location2, isExternal = !1;
      if (isBrowser2 && isAbsolute) {
        let currentUrl = new URL(window.location.href), targetUrl = location2.startsWith("//") ? new URL(currentUrl.protocol + location2) : new URL(location2);
        targetUrl.origin === currentUrl.origin ? navigationLocation = targetUrl.pathname + targetUrl.search + targetUrl.hash : isExternal = !0;
      }
      let href = useHref(navigationLocation, {
        relative
      }), internalOnClick = useLinkClickHandler(navigationLocation, {
        replace,
        state,
        target,
        preventScrollReset,
        relative
      });
      function handleClick(event2) {
        onClick2 && onClick2(event2), event2.defaultPrevented || internalOnClick(event2);
      }
      return /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
        href: isAbsolute ? location2 : href,
        onClick: isExternal || reloadDocument ? onClick2 : handleClick,
        ref,
        target
      }));
    });
    Link.displayName = "Link";
    NavLink = /* @__PURE__ */ React2.forwardRef(function(_ref5, ref) {
      let {
        "aria-current": ariaCurrentProp = "page",
        caseSensitive = !1,
        className: classNameProp = "",
        end = !1,
        style: styleProp,
        to,
        children
      } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2), path2 = useResolvedPath(to, {
        relative: rest.relative
      }), location2 = useLocation(), routerState = React2.useContext(DataRouterStateContext), {
        navigator: navigator2
      } = React2.useContext(NavigationContext), toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path2).pathname : path2.pathname, locationPathname = location2.pathname, nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      caseSensitive || (locationPathname = locationPathname.toLowerCase(), nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null, toPathname = toPathname.toLowerCase());
      let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/", isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/"), ariaCurrent = isActive ? ariaCurrentProp : void 0, className;
      typeof classNameProp == "function" ? className = classNameProp({
        isActive,
        isPending
      }) : className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
      let style = typeof styleProp == "function" ? styleProp({
        isActive,
        isPending
      }) : styleProp;
      return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to
      }), typeof children == "function" ? children({
        isActive,
        isPending
      }) : children);
    });
    NavLink.displayName = "NavLink";
    Form = /* @__PURE__ */ React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(FormImpl, _extends3({}, props, {
      ref
    })));
    Form.displayName = "Form";
    FormImpl = /* @__PURE__ */ React2.forwardRef((_ref6, forwardedRef) => {
      let {
        reloadDocument,
        replace,
        method = defaultMethod,
        action: action4,
        onSubmit,
        fetcherKey,
        routeId,
        relative,
        preventScrollReset
      } = _ref6, props = _objectWithoutPropertiesLoose(_ref6, _excluded3), submit = useSubmitImpl(fetcherKey, routeId), formMethod = method.toLowerCase() === "get" ? "get" : "post", formAction = useFormAction(action4, {
        relative
      });
      return /* @__PURE__ */ React2.createElement("form", _extends3({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : (event2) => {
          if (onSubmit && onSubmit(event2), event2.defaultPrevented)
            return;
          event2.preventDefault();
          let submitter = event2.nativeEvent.submitter, submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
          submit(submitter || event2.currentTarget, {
            method: submitMethod,
            replace,
            relative,
            preventScrollReset
          });
        }
      }, props));
    });
    FormImpl.displayName = "FormImpl";
    ScrollRestoration.displayName = "ScrollRestoration";
    (function(DataRouterHook3) {
      DataRouterHook3.UseScrollRestoration = "useScrollRestoration", DataRouterHook3.UseSubmitImpl = "useSubmitImpl", DataRouterHook3.UseFetcher = "useFetcher";
    })(DataRouterHook2 || (DataRouterHook2 = {}));
    (function(DataRouterStateHook3) {
      DataRouterStateHook3.UseFetchers = "useFetchers", DataRouterStateHook3.UseScrollRestoration = "useScrollRestoration";
    })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
    fetcherId = 0;
    SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions", savedScrollPositions = {};
  }
});

// node_modules/react-router-dom/server.js
var require_server = __commonJS({
  "node_modules/react-router-dom/server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var React32 = require_react(), router = (init_router(), __toCommonJS(router_exports)), reactRouterDom = (init_dist2(), __toCommonJS(dist_exports));
    function _interopNamespace(e3) {
      if (e3 && e3.__esModule)
        return e3;
      var n4 = /* @__PURE__ */ Object.create(null);
      return e3 && Object.keys(e3).forEach(function(k) {
        if (k !== "default") {
          var d9 = Object.getOwnPropertyDescriptor(e3, k);
          Object.defineProperty(n4, k, d9.get ? d9 : {
            enumerable: !0,
            get: function() {
              return e3[k];
            }
          });
        }
      }), n4.default = e3, Object.freeze(n4);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React32);
    function StaticRouter({
      basename,
      children,
      location: locationProp = "/"
    }) {
      typeof locationProp == "string" && (locationProp = reactRouterDom.parsePath(locationProp));
      let action4 = router.Action.Pop, location2 = {
        pathname: locationProp.pathname || "/",
        search: locationProp.search || "",
        hash: locationProp.hash || "",
        state: locationProp.state || null,
        key: locationProp.key || "default"
      }, staticNavigator = getStatelessNavigator();
      return /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename,
        children,
        location: location2,
        navigationType: action4,
        navigator: staticNavigator,
        static: !0
      });
    }
    function StaticRouterProvider2({
      context: context2,
      router: router$1,
      hydrate = !0,
      nonce
    }) {
      router$1 && context2 || router.invariant(!1, "You must provide `router` and `context` to <StaticRouterProvider>");
      let dataRouterContext = {
        router: router$1,
        navigator: getStatelessNavigator(),
        static: !0,
        staticContext: context2,
        basename: context2.basename || "/"
      }, hydrateScript = "";
      if (hydrate !== !1) {
        let data = {
          loaderData: context2.loaderData,
          actionData: context2.actionData,
          errors: serializeErrors2(context2.errors)
        };
        hydrateScript = `window.__staticRouterHydrationData = JSON.parse(${JSON.stringify(JSON.stringify(data))});`;
      }
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterContext.Provider, {
        value: dataRouterContext
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterStateContext.Provider, {
        value: dataRouterContext.router.state
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename: dataRouterContext.basename,
        location: dataRouterContext.router.state.location,
        navigationType: dataRouterContext.router.state.historyAction,
        navigator: dataRouterContext.navigator
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Routes, null)))), hydrateScript ? /* @__PURE__ */ React__namespace.createElement("script", {
        suppressHydrationWarning: !0,
        nonce,
        dangerouslySetInnerHTML: {
          __html: hydrateScript
        }
      }) : null);
    }
    function serializeErrors2(errors) {
      if (!errors)
        return null;
      let entries = Object.entries(errors), serialized = {};
      for (let [key, val] of entries)
        router.isRouteErrorResponse(val) ? serialized[key] = {
          ...val,
          __type: "RouteErrorResponse"
        } : val instanceof Error ? serialized[key] = {
          message: val.message,
          __type: "Error"
        } : serialized[key] = val;
      return serialized;
    }
    function getStatelessNavigator() {
      return {
        createHref,
        encodeLocation,
        push(to) {
          throw new Error(`You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)})\` somewhere in your app.`);
        },
        replace(to) {
          throw new Error(`You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)}, { replace: true })\` somewhere in your app.`);
        },
        go(delta2) {
          throw new Error(`You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${delta2})\` somewhere in your app.`);
        },
        back() {
          throw new Error("You cannot use navigator.back() on the server because it is a stateless environment.");
        },
        forward() {
          throw new Error("You cannot use navigator.forward() on the server because it is a stateless environment.");
        }
      };
    }
    function generateManifest(routes2, manifest = /* @__PURE__ */ new Map()) {
      return routes2.forEach((route) => {
        manifest.set(route.id, route), route.children && generateManifest(route.children, manifest);
      }), manifest;
    }
    function createStaticRouter2(routes2, context2) {
      let dataRoutes = router.UNSAFE_convertRoutesToDataRoutes(reactRouterDom.UNSAFE_enhanceManualRouteObjects(routes2)), manifest = generateManifest(dataRoutes), matches = context2.matches.map((match2) => {
        let route = manifest.get(match2.route.id) || match2.route;
        return {
          ...match2,
          route
        };
      }), msg = (method) => `You cannot use router.${method}() on the server because it is a stateless environment`;
      return {
        get basename() {
          return context2.basename;
        },
        get state() {
          return {
            historyAction: router.Action.Pop,
            location: context2.location,
            matches,
            loaderData: context2.loaderData,
            actionData: context2.actionData,
            errors: context2.errors,
            initialized: !0,
            navigation: router.IDLE_NAVIGATION,
            restoreScrollPosition: null,
            preventScrollReset: !1,
            revalidation: "idle",
            fetchers: /* @__PURE__ */ new Map(),
            blockers: /* @__PURE__ */ new Map()
          };
        },
        get routes() {
          return dataRoutes;
        },
        initialize() {
          throw msg("initialize");
        },
        subscribe() {
          throw msg("subscribe");
        },
        enableScrollRestoration() {
          throw msg("enableScrollRestoration");
        },
        navigate() {
          throw msg("navigate");
        },
        fetch() {
          throw msg("fetch");
        },
        revalidate() {
          throw msg("revalidate");
        },
        createHref,
        encodeLocation,
        getFetcher() {
          return router.IDLE_FETCHER;
        },
        deleteFetcher() {
          throw msg("deleteFetcher");
        },
        dispose() {
          throw msg("dispose");
        },
        getBlocker() {
          throw msg("getBlocker");
        },
        deleteBlocker() {
          throw msg("deleteBlocker");
        },
        _internalFetchControllers: /* @__PURE__ */ new Map(),
        _internalActiveDeferreds: /* @__PURE__ */ new Map()
      };
    }
    function createHref(to) {
      return typeof to == "string" ? to : reactRouterDom.createPath(to);
    }
    function encodeLocation(to) {
      let path2 = typeof to == "string" ? reactRouterDom.parsePath(to) : to;
      return {
        pathname: path2.pathname || "",
        search: path2.search || "",
        hash: path2.hash || ""
      };
    }
    exports.StaticRouter = StaticRouter;
    exports.StaticRouterProvider = StaticRouterProvider2;
    exports.createStaticRouter = createStaticRouter2;
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
var require_react_dom_server_legacy_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React32 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React32.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning2("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      function beginWriting(destination) {
      }
      function writeChunk(destination, chunk) {
        writeChunkAndReturn(destination, chunk);
      }
      function writeChunkAndReturn(destination, chunk) {
        return destination.push(chunk);
      }
      function completeWriting(destination) {
      }
      function close(destination) {
        destination.push(null);
      }
      function stringToChunk(content) {
        return content;
      }
      function stringToPrecomputedChunk(content) {
        return content;
      }
      function closeWithError(destination, error3) {
        destination.destroy(error3);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error2("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          name,
          null,
          !1,
          !1
        );
      }), [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !0,
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error2("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string3) {
          return string3.replace(hyphenPattern, function(_2, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2(
            "Unsupported style property %s. Did you mean %s?",
            name,
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error2("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error2("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml3(string3) {
        checkHtmlStringCoercion(string3);
        var str = "" + string3, match2 = matchHtmlRegExp.exec(str);
        if (!match2)
          return str;
        var escape, html = "", index, lastIndex = 0;
        for (index = match2.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape = "&quot;";
              break;
            case 38:
              escape = "&amp;";
              break;
            case 39:
              escape = "&#x27;";
              break;
            case 60:
              escape = "&lt;";
              break;
            case 62:
              escape = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text2) {
        return typeof text2 == "boolean" || typeof text2 == "number" ? "" + text2 : escapeHtml3(text2);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a4) {
        return isArrayImpl(a4);
      }
      var startInlineScript = "<script>", endInlineScript = "</script>", startScriptSrc = '<script src="', startModuleSrc = '<script type="module" src="', endAsyncScript = '" async=""></script>';
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match2, prefix3, s10, suffix) {
        return "" + prefix3 + (s10 === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : '<script nonce="' + escapeTextForBrowser(nonce) + '">', bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, escapeBootstrapScriptContent(bootstrapScriptContent), endInlineScript), bootstrapScripts !== void 0)
          for (var i7 = 0; i7 < bootstrapScripts.length; i7++)
            bootstrapChunks.push(startScriptSrc, escapeTextForBrowser(bootstrapScripts[i7]), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, escapeTextForBrowser(bootstrapModules[_i]), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: idPrefix + "P:",
          segmentPrefix: idPrefix + "S:",
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return responseState.boundaryPrefix + generatedID.toString(16);
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text2) {
        return escapeTextForBrowser(text2);
      }
      var textSeparator = "<!-- -->";
      function pushTextInstance(target, text2, responseState, textEmbedded) {
        return text2 === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(encodeHTMLTextNode(text2)), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = escapeTextForBrowser(hyphenateStyleName(styleName));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = ' style="', styleAssign = ":", styleSeparator = ";";
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (!!hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = escapeTextForBrowser(styleName), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim())) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = styleValue + "px" : valueChunk = "" + styleValue : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim()))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = " ", attributeAssign = '="', attributeEnd = '"', attributeEmptyString = '=""';
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (!(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = attributeName;
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, name, attributeAssign, escapeTextForBrowser(value), attributeEnd);
          }
        }
      }
      var endOfStartTag = ">", endOfStartTagSelfClosing = "/>";
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push("" + html));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array2 = isArray(value);
            props.multiple && !array2 ? error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array2 && error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React32.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = ' selected=""';
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i7 = 0; i7 < selectedValue.length; i7++) {
              checkAttributeStringCoercion(selectedValue[i7], "value");
              var v3 = "" + selectedValue[i7];
              if (v3 === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error2("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(encodeHTMLTextNode("" + value))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error2("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error2("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error2("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(encodeHTMLTextNode(children)), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, propKey, attributeAssign, escapeTextForBrowser(propValue), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = `
`;
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, html) : (checkHtmlStringCoercion(html), target.push("" + html)));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = "<" + tag, validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = "<!DOCTYPE html>";
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = "</", endTag2 = ">";
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, type, endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i7 = 0; i7 < bootstrapChunks.length - 1; i7++)
          writeChunk(destination, bootstrapChunks[i7]);
        return i7 < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i7]) : !0;
      }
      var placeholder1 = '<template id="', placeholder2 = '"></template>';
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = id.toString(16);
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = "<!--$-->", startPendingSuspenseBoundary1 = '<!--$?--><template id="', startPendingSuspenseBoundary2 = '"></template>', startClientRenderedSuspenseBoundary = "<!--$!-->", endSuspenseBoundary = "<!--/$-->", clientRenderedSuspenseBoundaryError1 = "<template", clientRenderedSuspenseBoundaryErrorAttrInterstitial = '"', clientRenderedSuspenseBoundaryError1A = ' data-dgst="', clientRenderedSuspenseBoundaryError1B = ' data-msg="', clientRenderedSuspenseBoundaryError1C = ' data-stck="', clientRenderedSuspenseBoundaryError2 = "></template>";
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, escapeTextForBrowser(errorDigest)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, escapeTextForBrowser(errorMesssage)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, escapeTextForBrowser(errorComponentStack)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = '<div hidden id="', startSegmentHTML2 = '">', endSegmentHTML = "</div>", startSegmentSVG = '<svg aria-hidden="true" style="display:none" id="', startSegmentSVG2 = '">', endSegmentSVG = "</svg>", startSegmentMathML = '<math aria-hidden="true" style="display:none" id="', startSegmentMathML2 = '">', endSegmentMathML = "</math>", startSegmentTable = '<table hidden id="', startSegmentTable2 = '">', endSegmentTable = "</table>", startSegmentTableBody = '<table hidden><tbody id="', startSegmentTableBody2 = '">', endSegmentTableBody = "</tbody></table>", startSegmentTableRow = '<table hidden><tr id="', startSegmentTableRow2 = '">', endSegmentTableRow = "</tr></table>", startSegmentColGroup = '<table hidden><colgroup id="', startSegmentColGroup2 = '">', endSegmentColGroup = "</colgroup></table>";
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = completeSegmentFunction + ';$RS("', completeSegmentScript1Partial = '$RS("', completeSegmentScript2 = '","', completeSegmentScript3 = '")</script>';
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = contentSegmentID.toString(16);
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = completeBoundaryFunction + ';$RC("', completeBoundaryScript1Partial = '$RC("', completeBoundaryScript2 = '","', completeBoundaryScript3 = '")</script>';
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = contentSegmentID.toString(16);
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = clientRenderFunction + ';$RX("', clientRenderScript1Partial = '$RX("', clientRenderScript1A = '"', clientRenderScript2 = ")</script>", clientRenderErrorScriptArgInterstitial = ",";
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorDigest || ""))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorMessage || ""))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorComponentStack))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match2) {
          switch (match2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      function createResponseState$1(generateStaticMarkup, identifierPrefix) {
        var responseState = createResponseState(identifierPrefix, void 0);
        return {
          bootstrapChunks: responseState.bootstrapChunks,
          startInlineScript: responseState.startInlineScript,
          placeholderPrefix: responseState.placeholderPrefix,
          segmentPrefix: responseState.segmentPrefix,
          boundaryPrefix: responseState.boundaryPrefix,
          idPrefix: responseState.idPrefix,
          nextSuspenseID: responseState.nextSuspenseID,
          sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
          sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
          sentClientRenderFunction: responseState.sentClientRenderFunction,
          generateStaticMarkup
        };
      }
      function createRootFormatContext() {
        return {
          insertionMode: HTML_MODE,
          selectedValue: null
        };
      }
      function pushTextInstance$1(target, text2, responseState, textEmbedded) {
        return responseState.generateStaticMarkup ? (target.push(escapeTextForBrowser(text2)), !1) : pushTextInstance(target, text2, responseState, textEmbedded);
      }
      function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
        if (!responseState.generateStaticMarkup)
          return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
      }
      function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeStartCompletedSuspenseBoundary(destination);
      }
      function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
        return responseState.generateStaticMarkup ? !0 : writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
      }
      function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndCompletedSuspenseBoundary(destination);
      }
      function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndClientRenderedSuspenseBoundary(destination);
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x2) {
              var match2 = x2.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x2) {
                control = x2;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x2) {
                control = x2;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x2) {
              control = x2;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s10 = sampleLines.length - 1, c5 = controlLines.length - 1; s10 >= 1 && c5 >= 0 && sampleLines[s10] !== controlLines[c5]; )
              c5--;
            for (; s10 >= 1 && c5 >= 0; s10--, c5--)
              if (sampleLines[s10] !== controlLines[c5]) {
                if (s10 !== 1 || c5 !== 1)
                  do
                    if (s10--, c5--, c5 < 0 || sampleLines[s10] !== controlLines[c5]) {
                      var _frame = `
` + sampleLines[s10].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s10 >= 1 && c5 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component3) {
        var prototype = Component3.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context2 = {};
          for (var key in contextTypes)
            context2[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context2, "context", name);
          }
          return context2;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue2 = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue2 = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context2, nextValue) {
        var prevValue;
        prevValue = context2._currentValue2, context2._currentValue2 = nextValue, context2._currentRenderer2 !== void 0 && context2._currentRenderer2 !== null && context2._currentRenderer2 !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer2 = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context: context2,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context2) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context2 && error2("The parent context is not the expected context. This is probably a bug in React.");
        {
          var _value = prevSnapshot.parentValue;
          _value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue2 = _value, context2._currentRenderer2 !== void 0 && context2._currentRenderer2 !== null && context2._currentRenderer2 !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer2 = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context2) {
        var value = context2._currentValue2;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error2(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context2 = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context2 = readContext(contextType) : context2 = maskedLegacyContext;
        var instance = new ctor(props, context2);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error2(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error2("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i7 = oldReplace ? 1 : 0; i7 < oldQueue.length; i7++) {
              var partial = oldQueue[i7], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context2) {
        var overflow = context2.overflow, idWithLeadingBit = context2.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length2 = getBitLength(totalChildren) + baseLength;
        if (length2 > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length2 | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x2) {
        var asUint = x2 >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is2(x2, y2) {
        return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is2, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error2(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i7 = 0; i7 < prevDeps.length && i7 < nextDeps.length; i7++)
          if (!objectIs(nextDeps[i7], prevDeps[i7]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component3, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component3(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context2) {
        return isInHookUserCodeInDev && error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context2);
      }
      function useContext7(context2) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context2);
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function useState9(initialState) {
        return currentHookNameInDev = "useState", useReducer2(
          basicStateReducer,
          initialState
        );
      }
      function useReducer2(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action4 = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action4), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo9(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef7(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error2("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action4) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action: action4,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback3(callback, deps) {
        return useMemo9(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition2() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop4() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext7,
        useMemo: useMemo9,
        useReducer: useReducer2,
        useRef: useRef7,
        useState: useState9,
        useInsertionEffect: noop4,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback3,
        useImperativeHandle: noop4,
        useEffect: noop4,
        useDebugValue: noop4,
        useDeferredValue,
        useTransition: useTransition2,
        useId,
        useMutableSource,
        useSyncExternalStore: useSyncExternalStore3
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x2) {
          return `
Error generating stack: ` + x2.message + `
` + x2.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler2(error3) {
        return console.error(error3), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError2 === void 0 ? defaultErrorHandler2 : onError2,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context2, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context: context2,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          index,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error2("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error3) {
        {
          var errorMessage;
          typeof error3 == "string" ? errorMessage = error3 : error3 && typeof error3.message == "string" ? errorMessage = error3.message : errorMessage = String(error3);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error3) {
        var errorDigest = request.onError(error3);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error3) {
        var onShellError = request.onShellError;
        onShellError(error3);
        var onFatalError = request.onFatalError;
        onFatalError(error3), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error3)) : (request.status = CLOSING, request.fatalError = error3);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error3) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error3), captureBoundaryErrorDetailsDev(newBoundary, error3);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component3) {
        return Component3.prototype && Component3.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component3, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component3(props, secondArg);
        return finishHooks(Component3, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component3, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component3) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component3.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component3, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component3, props) {
        pushClassComponentStackInDEV(task, Component3);
        var maskedContext = getMaskedContext(Component3, task.legacyContext), instance = constructClassInstance(Component3, props, maskedContext);
        mountClassInstance(instance, Component3, props, maskedContext), finishClassComponent(request, task, instance, Component3, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component3, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component3, task.legacyContext), pushFunctionComponentStackInDEV(task, Component3), Component3.prototype && typeof Component3.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component3) || "Unknown";
          didWarnAboutBadClass[componentName] || (error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component3, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component3) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component3) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component3, props, legacyContext), finishClassComponent(request, task, value, Component3, props);
        } else if (validateFunctionComponentInDev(Component3), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component3) {
        {
          if (Component3 && Component3.childContextTypes && error2("%s(...): childContextTypes cannot be defined on a function component.", Component3.displayName || Component3.name || "Component"), typeof Component3.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component3) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component3.contextType == "object" && Component3.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component3) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error2("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component3, baseProps) {
        if (Component3 && Component3.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component3.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context2, props) {
        context2._context === void 0 ? context2 !== context2.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context2 = context2._context;
        var render = props.children;
        typeof render != "function" && error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context2), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context2 = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context2, value), renderNodeDestructive(request, task, children), task.context = popProvider(context2), prevSnapshot !== task.context && error2("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component3 = init(payload), resolvedProps = resolveDefaultProps(Component3, props);
        renderElement(request, task, Component3, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x2) {
          throw typeof x2 == "object" && x2 !== null && typeof x2.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x2;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x2) {
                throw typeof x2 == "object" && x2 !== null && typeof x2.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x2;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i7 = 0; i7 < totalChildren; i7++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i7);
          try {
            renderNode(request, task, children[i7]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x2) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          segment.lastPushedText,
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x2.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x2) {
          if (resetHooksState(), typeof x2 == "object" && x2 !== null && typeof x2.then == "function") {
            spawnNewSuspendedTask(request, task, x2), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x2;
        }
      }
      function erroredTask(request, boundary, segment, error3) {
        var errorDigest = logRecoverableError(request, error3);
        if (boundary === null ? fatalError(request, error3) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error3), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x2) {
            if (resetHooksState(), typeof x2 == "object" && x2 !== null && typeof x2.then == "function") {
              var ping = task.ping;
              x2.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x2);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i7;
            for (i7 = 0; i7 < pingedTasks.length; i7++) {
              var task = pingedTasks[i7];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i7), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r7 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r7 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r7 = writeChunkAndReturn(destination, chunks[chunkIdx])), r7;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i7 = 0; i7 < completedSegments.length; i7++) {
          var segment = completedSegments[i7];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i7 = 0; i7 < completedSegments.length; i7++) {
          var segment = completedSegments[i7];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i7++, completedSegments.splice(0, i7), !1;
        }
        return completedSegments.splice(0, i7), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i7;
          for (i7 = 0; i7 < clientRenderedBoundaries.length; i7++) {
            var boundary = clientRenderedBoundaries[i7];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i7++, clientRenderedBoundaries.splice(0, i7);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i7);
          var completedBoundaries = request.completedBoundaries;
          for (i7 = 0; i7 < completedBoundaries.length; i7++) {
            var _boundary = completedBoundaries[i7];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i7++, completedBoundaries.splice(0, i7);
              return;
            }
          }
          completedBoundaries.splice(0, i7);
          var partialBoundaries = request.partialBoundaries;
          for (i7 = 0; i7 < partialBoundaries.length; i7++) {
            var _boundary2 = partialBoundaries[i7];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i7++, partialBoundaries.splice(0, i7);
              return;
            }
          }
          partialBoundaries.splice(0, i7);
          var largeBoundaries = request.completedBoundaries;
          for (i7 = 0; i7 < largeBoundaries.length; i7++) {
            var _boundary3 = largeBoundaries[i7];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i7++, largeBoundaries.splice(0, i7);
              return;
            }
          }
          largeBoundaries.splice(0, i7);
        } finally {
          request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error2("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error3) {
          logRecoverableError(request, error3), fatalError(request, error3);
        }
      }
      function onError() {
      }
      function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
        var didFatal = !1, fatalError2 = null, result = "", destination = {
          push: function(chunk) {
            return chunk !== null && (result += chunk), !0;
          },
          destroy: function(error3) {
            didFatal = !0, fatalError2 = error3;
          }
        }, readyToStream = !1;
        function onShellReady() {
          readyToStream = !0;
        }
        var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), 1 / 0, onError, void 0, onShellReady, void 0, void 0);
        if (startWork(request), abort(request, abortReason), startFlowing(request, destination), didFatal)
          throw fatalError2;
        if (!readyToStream)
          throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
        return result;
      }
      function renderToString(children, options) {
        return renderToStringImpl(children, options, !1, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToStaticMarkup(children, options) {
        return renderToStringImpl(children, options, !0, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToNodeStream() {
        throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
      }
      function renderToStaticNodeStream() {
        throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
      }
      exports.renderToNodeStream = renderToNodeStream, exports.renderToStaticMarkup = renderToStaticMarkup, exports.renderToStaticNodeStream = renderToStaticNodeStream, exports.renderToString = renderToString, exports.version = ReactVersion;
    })();
  }
});

// node_modules/react-dom/cjs/react-dom-server.browser.development.js
var require_react_dom_server_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React32 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React32.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning2("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      var VIEW_SIZE = 512, currentView = null, writtenBytes = 0;
      function beginWriting(destination) {
        currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0;
      }
      function writeChunk(destination, chunk) {
        if (chunk.length !== 0) {
          if (chunk.length > VIEW_SIZE) {
            writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk, allowableBytes = currentView.length - writtenBytes;
          allowableBytes < bytesToWrite.length && (allowableBytes === 0 ? destination.enqueue(currentView) : (currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes), destination.enqueue(currentView), bytesToWrite = bytesToWrite.subarray(allowableBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), currentView.set(bytesToWrite, writtenBytes), writtenBytes += bytesToWrite.length;
        }
      }
      function writeChunkAndReturn(destination, chunk) {
        return writeChunk(destination, chunk), !0;
      }
      function completeWriting(destination) {
        currentView && writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = null, writtenBytes = 0);
      }
      function close(destination) {
        destination.close();
      }
      var textEncoder = new TextEncoder();
      function stringToChunk(content) {
        return textEncoder.encode(content);
      }
      function stringToPrecomputedChunk(content) {
        return textEncoder.encode(content);
      }
      function closeWithError(destination, error3) {
        typeof destination.error == "function" ? destination.error(error3) : destination.close();
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error2("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          name,
          null,
          !1,
          !1
        );
      }), [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !0,
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error2("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string3) {
          return string3.replace(hyphenPattern, function(_2, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2(
            "Unsupported style property %s. Did you mean %s?",
            name,
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error2("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error2("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml3(string3) {
        checkHtmlStringCoercion(string3);
        var str = "" + string3, match2 = matchHtmlRegExp.exec(str);
        if (!match2)
          return str;
        var escape, html = "", index, lastIndex = 0;
        for (index = match2.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape = "&quot;";
              break;
            case 38:
              escape = "&amp;";
              break;
            case 39:
              escape = "&#x27;";
              break;
            case 60:
              escape = "&lt;";
              break;
            case 62:
              escape = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text2) {
        return typeof text2 == "boolean" || typeof text2 == "number" ? "" + text2 : escapeHtml3(text2);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a4) {
        return isArrayImpl(a4);
      }
      var startInlineScript = stringToPrecomputedChunk("<script>"), endInlineScript = stringToPrecomputedChunk("</script>"), startScriptSrc = stringToPrecomputedChunk('<script src="'), startModuleSrc = stringToPrecomputedChunk('<script type="module" src="'), endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match2, prefix3, s10, suffix) {
        return "" + prefix3 + (s10 === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">'), bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript), bootstrapScripts !== void 0)
          for (var i7 = 0; i7 < bootstrapScripts.length; i7++)
            bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i7])), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
          segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function createRootFormatContext(namespaceURI) {
        var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
        return createFormatContext(insertionMode, null);
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text2) {
        return escapeTextForBrowser(text2);
      }
      var textSeparator = stringToPrecomputedChunk("<!-- -->");
      function pushTextInstance(target, text2, responseState, textEmbedded) {
        return text2 === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(stringToChunk(encodeHTMLTextNode(text2))), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = stringToPrecomputedChunk(' style="'), styleAssign = stringToPrecomputedChunk(":"), styleSeparator = stringToPrecomputedChunk(";");
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (!!hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = stringToChunk(escapeTextForBrowser(styleName)), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()))) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = stringToChunk(styleValue + "px") : valueChunk = stringToChunk("" + styleValue) : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim())))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = stringToPrecomputedChunk(" "), attributeAssign = stringToPrecomputedChunk('="'), attributeEnd = stringToPrecomputedChunk('"'), attributeEmptyString = stringToPrecomputedChunk('=""');
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (!(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
      }
      var endOfStartTag = stringToPrecomputedChunk(">"), endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html)));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array2 = isArray(value);
            props.multiple && !array2 ? error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array2 && error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React32.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i7 = 0; i7 < selectedValue.length; i7++) {
              checkAttributeStringCoercion(selectedValue[i7], "value");
              var v3 = "" + selectedValue[i7];
              if (v3 === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error2("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(stringToChunk(encodeHTMLTextNode("" + value)))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error2("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error2("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error2("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(stringToChunk(encodeHTMLTextNode(children))), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = stringToPrecomputedChunk(`
`);
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, stringToChunk(html)) : (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html))));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = stringToPrecomputedChunk("<" + tag), validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = stringToPrecomputedChunk("</"), endTag2 = stringToPrecomputedChunk(">");
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, stringToChunk(type), endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i7 = 0; i7 < bootstrapChunks.length - 1; i7++)
          writeChunk(destination, bootstrapChunks[i7]);
        return i7 < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i7]) : !0;
      }
      var placeholder1 = stringToPrecomputedChunk('<template id="'), placeholder2 = stringToPrecomputedChunk('"></template>');
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = stringToChunk(id.toString(16));
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->"), startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="'), startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>'), startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->"), endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->"), clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template"), clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"'), clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="'), clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="'), clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="'), clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="'), startSegmentHTML2 = stringToPrecomputedChunk('">'), endSegmentHTML = stringToPrecomputedChunk("</div>"), startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="'), startSegmentSVG2 = stringToPrecomputedChunk('">'), endSegmentSVG = stringToPrecomputedChunk("</svg>"), startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="'), startSegmentMathML2 = stringToPrecomputedChunk('">'), endSegmentMathML = stringToPrecomputedChunk("</math>"), startSegmentTable = stringToPrecomputedChunk('<table hidden id="'), startSegmentTable2 = stringToPrecomputedChunk('">'), endSegmentTable = stringToPrecomputedChunk("</table>"), startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="'), startSegmentTableBody2 = stringToPrecomputedChunk('">'), endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>"), startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="'), startSegmentTableRow2 = stringToPrecomputedChunk('">'), endSegmentTableRow = stringToPrecomputedChunk("</tr></table>"), startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="'), startSegmentColGroup2 = stringToPrecomputedChunk('">'), endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("'), completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("'), completeSegmentScript2 = stringToPrecomputedChunk('","'), completeSegmentScript3 = stringToPrecomputedChunk('")</script>');
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("'), completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("'), completeBoundaryScript2 = stringToPrecomputedChunk('","'), completeBoundaryScript3 = stringToPrecomputedChunk('")</script>');
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("'), clientRenderScript1Partial = stringToPrecomputedChunk('$RX("'), clientRenderScript1A = stringToPrecomputedChunk('"'), clientRenderScript2 = stringToPrecomputedChunk(")</script>"), clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match2) {
          switch (match2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x2) {
              var match2 = x2.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x2) {
                control = x2;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x2) {
                control = x2;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x2) {
              control = x2;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s10 = sampleLines.length - 1, c5 = controlLines.length - 1; s10 >= 1 && c5 >= 0 && sampleLines[s10] !== controlLines[c5]; )
              c5--;
            for (; s10 >= 1 && c5 >= 0; s10--, c5--)
              if (sampleLines[s10] !== controlLines[c5]) {
                if (s10 !== 1 || c5 !== 1)
                  do
                    if (s10--, c5--, c5 < 0 || sampleLines[s10] !== controlLines[c5]) {
                      var _frame = `
` + sampleLines[s10].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s10 >= 1 && c5 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component3) {
        var prototype = Component3.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context2 = {};
          for (var key in contextTypes)
            context2[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context2, "context", name);
          }
          return context2;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context2, nextValue) {
        var prevValue;
        prevValue = context2._currentValue, context2._currentValue = nextValue, context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context: context2,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context2) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context2 && error2("The parent context is not the expected context. This is probably a bug in React.");
        {
          var value = prevSnapshot.parentValue;
          value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue = value, context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context2) {
        var value = context2._currentValue;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error2(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context2 = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context2 = readContext(contextType) : context2 = maskedLegacyContext;
        var instance = new ctor(props, context2);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error2(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error2("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i7 = oldReplace ? 1 : 0; i7 < oldQueue.length; i7++) {
              var partial = oldQueue[i7], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context2) {
        var overflow = context2.overflow, idWithLeadingBit = context2.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length2 = getBitLength(totalChildren) + baseLength;
        if (length2 > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length2 | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x2) {
        var asUint = x2 >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is2(x2, y2) {
        return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is2, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error2(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i7 = 0; i7 < prevDeps.length && i7 < nextDeps.length; i7++)
          if (!objectIs(nextDeps[i7], prevDeps[i7]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component3, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component3(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context2) {
        return isInHookUserCodeInDev && error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context2);
      }
      function useContext7(context2) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context2);
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function useState9(initialState) {
        return currentHookNameInDev = "useState", useReducer2(
          basicStateReducer,
          initialState
        );
      }
      function useReducer2(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action4 = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action4), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo9(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef7(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error2("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action4) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action: action4,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback3(callback, deps) {
        return useMemo9(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition2() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop4() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext7,
        useMemo: useMemo9,
        useReducer: useReducer2,
        useRef: useRef7,
        useState: useState9,
        useInsertionEffect: noop4,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback3,
        useImperativeHandle: noop4,
        useEffect: noop4,
        useDebugValue: noop4,
        useDeferredValue,
        useTransition: useTransition2,
        useId,
        useMutableSource,
        useSyncExternalStore: useSyncExternalStore3
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x2) {
          return `
Error generating stack: ` + x2.message + `
` + x2.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler2(error3) {
        return console.error(error3), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError === void 0 ? defaultErrorHandler2 : onError,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context2, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context: context2,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          index,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error2("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error3) {
        {
          var errorMessage;
          typeof error3 == "string" ? errorMessage = error3 : error3 && typeof error3.message == "string" ? errorMessage = error3.message : errorMessage = String(error3);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error3) {
        var errorDigest = request.onError(error3);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error3) {
        var onShellError = request.onShellError;
        onShellError(error3);
        var onFatalError = request.onFatalError;
        onFatalError(error3), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error3)) : (request.status = CLOSING, request.fatalError = error3);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error3) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error3), captureBoundaryErrorDetailsDev(newBoundary, error3);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component3) {
        return Component3.prototype && Component3.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component3, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component3(props, secondArg);
        return finishHooks(Component3, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component3, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component3) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component3.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component3, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component3, props) {
        pushClassComponentStackInDEV(task, Component3);
        var maskedContext = getMaskedContext(Component3, task.legacyContext), instance = constructClassInstance(Component3, props, maskedContext);
        mountClassInstance(instance, Component3, props, maskedContext), finishClassComponent(request, task, instance, Component3, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component3, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component3, task.legacyContext), pushFunctionComponentStackInDEV(task, Component3), Component3.prototype && typeof Component3.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component3) || "Unknown";
          didWarnAboutBadClass[componentName] || (error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component3, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component3) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component3) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component3, props, legacyContext), finishClassComponent(request, task, value, Component3, props);
        } else if (validateFunctionComponentInDev(Component3), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component3) {
        {
          if (Component3 && Component3.childContextTypes && error2("%s(...): childContextTypes cannot be defined on a function component.", Component3.displayName || Component3.name || "Component"), typeof Component3.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component3) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component3.contextType == "object" && Component3.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component3) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error2("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component3, baseProps) {
        if (Component3 && Component3.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component3.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context2, props) {
        context2._context === void 0 ? context2 !== context2.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context2 = context2._context;
        var render = props.children;
        typeof render != "function" && error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context2), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context2 = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context2, value), renderNodeDestructive(request, task, children), task.context = popProvider(context2), prevSnapshot !== task.context && error2("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component3 = init(payload), resolvedProps = resolveDefaultProps(Component3, props);
        renderElement(request, task, Component3, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x2) {
          throw typeof x2 == "object" && x2 !== null && typeof x2.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x2;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x2) {
                throw typeof x2 == "object" && x2 !== null && typeof x2.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x2;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i7 = 0; i7 < totalChildren; i7++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i7);
          try {
            renderNode(request, task, children[i7]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x2) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          segment.lastPushedText,
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x2.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x2) {
          if (resetHooksState(), typeof x2 == "object" && x2 !== null && typeof x2.then == "function") {
            spawnNewSuspendedTask(request, task, x2), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x2;
        }
      }
      function erroredTask(request, boundary, segment, error3) {
        var errorDigest = logRecoverableError(request, error3);
        if (boundary === null ? fatalError(request, error3) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error3), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x2) {
            if (resetHooksState(), typeof x2 == "object" && x2 !== null && typeof x2.then == "function") {
              var ping = task.ping;
              x2.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x2);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i7;
            for (i7 = 0; i7 < pingedTasks.length; i7++) {
              var task = pingedTasks[i7];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i7), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r7 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r7 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r7 = writeChunkAndReturn(destination, chunks[chunkIdx])), r7;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i7 = 0; i7 < completedSegments.length; i7++) {
          var segment = completedSegments[i7];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i7 = 0; i7 < completedSegments.length; i7++) {
          var segment = completedSegments[i7];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i7++, completedSegments.splice(0, i7), !1;
        }
        return completedSegments.splice(0, i7), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        beginWriting();
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i7;
          for (i7 = 0; i7 < clientRenderedBoundaries.length; i7++) {
            var boundary = clientRenderedBoundaries[i7];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i7++, clientRenderedBoundaries.splice(0, i7);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i7);
          var completedBoundaries = request.completedBoundaries;
          for (i7 = 0; i7 < completedBoundaries.length; i7++) {
            var _boundary = completedBoundaries[i7];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i7++, completedBoundaries.splice(0, i7);
              return;
            }
          }
          completedBoundaries.splice(0, i7), completeWriting(destination), beginWriting(destination);
          var partialBoundaries = request.partialBoundaries;
          for (i7 = 0; i7 < partialBoundaries.length; i7++) {
            var _boundary2 = partialBoundaries[i7];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i7++, partialBoundaries.splice(0, i7);
              return;
            }
          }
          partialBoundaries.splice(0, i7);
          var largeBoundaries = request.completedBoundaries;
          for (i7 = 0; i7 < largeBoundaries.length; i7++) {
            var _boundary3 = largeBoundaries[i7];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i7++, largeBoundaries.splice(0, i7);
              return;
            }
          }
          largeBoundaries.splice(0, i7);
        } finally {
          completeWriting(destination), request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error2("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error3) {
          logRecoverableError(request, error3), fatalError(request, error3);
        }
      }
      function renderToReadableStream2(children, options) {
        return new Promise(function(resolve, reject) {
          var onFatalError, onAllReady, allReady = new Promise(function(res, rej) {
            onAllReady = res, onFatalError = rej;
          });
          function onShellReady() {
            var stream = new ReadableStream(
              {
                type: "bytes",
                pull: function(controller) {
                  startFlowing(request, controller);
                },
                cancel: function(reason) {
                  abort(request);
                }
              },
              {
                highWaterMark: 0
              }
            );
            stream.allReady = allReady, resolve(stream);
          }
          function onShellError(error3) {
            allReady.catch(function() {
            }), reject(error3);
          }
          var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
          if (options && options.signal) {
            var signal = options.signal, listener = function() {
              abort(request, signal.reason), signal.removeEventListener("abort", listener);
            };
            signal.addEventListener("abort", listener);
          }
          startWork(request);
        });
      }
      exports.renderToReadableStream = renderToReadableStream2, exports.version = ReactVersion;
    })();
  }
});

// node_modules/react-dom/server.browser.js
var require_server_browser = __commonJS({
  "node_modules/react-dom/server.browser.js"(exports) {
    "use strict";
    var l7, s10;
    l7 = require_react_dom_server_legacy_browser_development(), s10 = require_react_dom_server_browser_development();
    exports.version = l7.version;
    exports.renderToString = l7.renderToString;
    exports.renderToStaticMarkup = l7.renderToStaticMarkup;
    exports.renderToNodeStream = l7.renderToNodeStream;
    exports.renderToStaticNodeStream = l7.renderToStaticNodeStream;
    exports.renderToReadableStream = s10.renderToReadableStream;
  }
});

// node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-dev-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React32 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React32.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x2) {
              var match2 = x2.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x2) {
                control = x2;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x2) {
                control = x2;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x2) {
              control = x2;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s10 = sampleLines.length - 1, c5 = controlLines.length - 1; s10 >= 1 && c5 >= 0 && sampleLines[s10] !== controlLines[c5]; )
              c5--;
            for (; s10 >= 1 && c5 >= 0; s10--, c5--)
              if (sampleLines[s10] !== controlLines[c5]) {
                if (s10 !== 1 || c5 !== 1)
                  do
                    if (s10--, c5--, c5 < 0 || sampleLines[s10] !== controlLines[c5]) {
                      var _frame = `
` + sampleLines[s10].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s10 >= 1 && c5 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component3) {
        var prototype = Component3.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a4) {
        return isArrayImpl(a4);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV48(type, config2, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2, self2));
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i7 = 0; i7 < node.length; i7++) {
              var child = node[i7];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i7 = 0; i7 < keys.length; i7++) {
            var key = keys[i7];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error2("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV48(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i7 = 0; i7 < children.length; i7++)
                    validateChildKeys(children[i7], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsxDEV = jsxDEV$1;
    })();
  }
});

// node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS({
  "node_modules/react/jsx-dev-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_dev_runtime_development();
  }
});

// node_modules/@shopify/hydrogen/dist/production/chunk-JXANKGQN.js
function g({ headTags: e3 }) {
  return h(e3), null;
}
function h(e3) {
  let o8 = "text-transform: uppercase;", n4 = "text-transform: uppercase; font-weight: bold; text-transform: uppercase;font-weight: bold";
  console.log(" "), console.log("%cSEO Meta Tags", `${n4}`), console.log(" "), e3.forEach((c5) => {
    if (c5.tag === "script") {
      if (console.log("%c\u2022 JSON LD ", o8), c5.children)
        try {
          console.table(JSON.parse(c5.children), ["name", "content"]);
        } catch {
          console.log(c5.children);
        }
    } else {
      if (console.log(`%c\u2022 ${c5.tag} `, o8), c5.children)
        if (typeof c5.children == "string")
          console.log(`\u21B3 ${c5.children}`);
        else
          try {
            Object.entries(JSON.parse(c5.children)).map(([l7, s10]) => console.log(`\u21B3 ${s10}`));
          } catch {
            console.log(c5.children);
          }
      Object.entries(c5.props).map(([l7, s10]) => console.log(`\u21B3 ${l7} \u2192 ${s10}`));
    }
    console.log(" ");
  });
}
var r, t, i, a, p, d, m, f, u, init_chunk_JXANKGQN = __esm({
  "node_modules/@shopify/hydrogen/dist/production/chunk-JXANKGQN.js"() {
    r = Object.create, t = Object.defineProperty, i = Object.getOwnPropertyDescriptor, a = Object.getOwnPropertyNames, p = Object.getPrototypeOf, d = Object.prototype.hasOwnProperty, m = (e3, o8) => () => (o8 || e3((o8 = { exports: {} }).exports, o8), o8.exports), f = (e3, o8, n4, c5) => {
      if (o8 && typeof o8 == "object" || typeof o8 == "function")
        for (let l7 of a(o8))
          !d.call(e3, l7) && l7 !== n4 && t(e3, l7, { get: () => o8[l7], enumerable: !(c5 = i(o8, l7)) || c5.enumerable });
      return e3;
    }, u = (e3, o8, n4) => (n4 = e3 != null ? r(p(e3)) : {}, f(o8 || !e3 || !e3.__esModule ? t(n4, "default", { value: e3, enumerable: !0 }) : n4, e3));
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React32 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React32.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x2) {
              var match2 = x2.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x2) {
                control = x2;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x2) {
                control = x2;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x2) {
              control = x2;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s10 = sampleLines.length - 1, c5 = controlLines.length - 1; s10 >= 1 && c5 >= 0 && sampleLines[s10] !== controlLines[c5]; )
              c5--;
            for (; s10 >= 1 && c5 >= 0; s10--, c5--)
              if (sampleLines[s10] !== controlLines[c5]) {
                if (s10 !== 1 || c5 !== 1)
                  do
                    if (s10--, c5--, c5 < 0 || sampleLines[s10] !== controlLines[c5]) {
                      var _frame = `
` + sampleLines[s10].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s10 >= 1 && c5 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component3) {
        var prototype = Component3.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a4) {
        return isArrayImpl(a4);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV48(type, config2, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2, self2));
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i7 = 0; i7 < node.length; i7++) {
              var child = node[i7];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i7 = 0; i7 < keys.length; i7++) {
            var key = keys[i7];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error2("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV48(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i7 = 0; i7 < children.length; i7++)
                    validateChildKeys(children[i7], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, !0);
      }
      function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, !1);
      }
      var jsx4 = jsxWithValidationDynamic, jsxs2 = jsxWithValidationStatic;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsx = jsx4, exports.jsxs = jsxs2;
    })();
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_runtime_development();
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse3;
    exports.serialize = serialize2;
    var decode = decodeURIComponent, encode = encodeURIComponent, fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options) {
      if (typeof str != "string")
        throw new TypeError("argument str must be a string");
      for (var obj = {}, opt = options || {}, pairs = str.split(";"), dec = opt.decode || decode, i7 = 0; i7 < pairs.length; i7++) {
        var pair = pairs[i7], index = pair.indexOf("=");
        if (!(index < 0)) {
          var key = pair.substring(0, index).trim();
          if (obj[key] == null) {
            var val = pair.substring(index + 1, pair.length).trim();
            val[0] === '"' && (val = val.slice(1, -1)), obj[key] = tryDecode(val, dec);
          }
        }
      }
      return obj;
    }
    function serialize2(name, val, options) {
      var opt = options || {}, enc = opt.encode || encode;
      if (typeof enc != "function")
        throw new TypeError("option encode is invalid");
      if (!fieldContentRegExp.test(name))
        throw new TypeError("argument name is invalid");
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value))
        throw new TypeError("argument val is invalid");
      var str = name + "=" + value;
      if (opt.maxAge != null) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge))
          throw new TypeError("option maxAge is invalid");
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain))
          throw new TypeError("option domain is invalid");
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path))
          throw new TypeError("option path is invalid");
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString != "function")
          throw new TypeError("option expires is invalid");
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly && (str += "; HttpOnly"), opt.secure && (str += "; Secure"), opt.sameSite) {
        var sameSite = typeof opt.sameSite == "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case !0:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch {
        return str;
      }
    }
  }
});

// node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: !0,
      map: !1,
      silent: !1
    };
    function isNonEmptyString(str) {
      return typeof str == "string" && !!str.trim();
    }
    function parseString2(setCookieValue, options) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString), nameValuePairStr = parts.shift(), parsed = parseNameValuePair(nameValuePairStr), name = parsed.name, value = parsed.value;
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      try {
        value = options.decodeValues ? decodeURIComponent(value) : value;
      } catch (e3) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e3
        );
      }
      var cookie = {
        name,
        value
      };
      return parts.forEach(function(part) {
        var sides = part.split("="), key = sides.shift().trimLeft().toLowerCase(), value2 = sides.join("=");
        key === "expires" ? cookie.expires = new Date(value2) : key === "max-age" ? cookie.maxAge = parseInt(value2, 10) : key === "secure" ? cookie.secure = !0 : key === "httponly" ? cookie.httpOnly = !0 : key === "samesite" ? cookie.sameSite = value2 : cookie[key] = value2;
      }), cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "", value = "", nameValueArr = nameValuePairStr.split("=");
      return nameValueArr.length > 1 ? (name = nameValueArr.shift(), value = nameValueArr.join("=")) : value = nameValuePairStr, { name, value };
    }
    function parse3(input, options) {
      if (options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, !input)
        return options.map ? {} : [];
      if (input.headers && input.headers["set-cookie"])
        input = input.headers["set-cookie"];
      else if (input.headers) {
        var sch = input.headers[Object.keys(input.headers).find(function(key) {
          return key.toLowerCase() === "set-cookie";
        })];
        !sch && input.headers.cookie && !options.silent && console.warn(
          "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
        ), input = sch;
      }
      if (Array.isArray(input) || (input = [input]), options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, options.map) {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString2(str, options);
          return cookies2[cookie.name] = cookie, cookies2;
        }, cookies);
      } else
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString2(str, options);
        });
    }
    function splitCookiesString2(cookiesString) {
      if (Array.isArray(cookiesString))
        return cookiesString;
      if (typeof cookiesString != "string")
        return [];
      var cookiesStrings = [], pos = 0, start, ch, lastComma, nextStart, cookiesSeparatorFound;
      function skipWhitespace() {
        for (; pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos)); )
          pos += 1;
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        return ch = cookiesString.charAt(pos), ch !== "=" && ch !== ";" && ch !== ",";
      }
      for (; pos < cookiesString.length; ) {
        for (start = pos, cookiesSeparatorFound = !1; skipWhitespace(); )
          if (ch = cookiesString.charAt(pos), ch === ",") {
            for (lastComma = pos, pos += 1, skipWhitespace(), nextStart = pos; pos < cookiesString.length && notSpecialChar(); )
              pos += 1;
            pos < cookiesString.length && cookiesString.charAt(pos) === "=" ? (cookiesSeparatorFound = !0, pos = nextStart, cookiesStrings.push(cookiesString.substring(start, lastComma)), start = pos) : pos = lastComma + 1;
          } else
            pos += 1;
        (!cookiesSeparatorFound || pos >= cookiesString.length) && cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
      }
      return cookiesStrings;
    }
    module.exports = parse3;
    module.exports.parse = parse3;
    module.exports.parseString = parseString2;
    module.exports.splitCookiesString = splitCookiesString2;
  }
});

// node_modules/@shopify/hydrogen/dist/production/log-seo-tags-GYSQ3BE2.js
var log_seo_tags_GYSQ3BE2_exports = {};
__export(log_seo_tags_GYSQ3BE2_exports, {
  default: () => g,
  logSeoTags: () => h
});
var init_log_seo_tags_GYSQ3BE2 = __esm({
  "node_modules/@shopify/hydrogen/dist/production/log-seo-tags-GYSQ3BE2.js"() {
    init_chunk_JXANKGQN();
  }
});

// node_modules/groq/lib/groq.esm.js
function groq(strings) {
  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
    keys[_key - 1] = arguments[_key];
  let lastIndex = strings.length - 1;
  return strings.slice(0, lastIndex).reduce((acc, str, i7) => acc + str + keys[i7], "") + strings[lastIndex];
}
var init_groq_esm = __esm({
  "node_modules/groq/lib/groq.esm.js"() {
  }
});

// node_modules/@sanity/image-url/lib/browser/image-url.umd.js
var require_image_url_umd = __commonJS({
  "node_modules/@sanity/image-url/lib/browser/image-url.umd.js"(exports, module) {
    (function(global2, factory) {
      typeof exports == "object" && typeof module < "u" ? module.exports = factory() : typeof define == "function" && define.amd ? define(factory) : (global2 = global2 || self, global2.SanityImageUrlBuilder = factory());
    })(exports, function() {
      function _extends7() {
        return _extends7 = Object.assign || function(target) {
          for (var i7 = 1; i7 < arguments.length; i7++) {
            var source = arguments[i7];
            for (var key in source)
              Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
          }
          return target;
        }, _extends7.apply(this, arguments);
      }
      function _unsupportedIterableToArray2(o8, minLen) {
        if (!!o8) {
          if (typeof o8 == "string")
            return _arrayLikeToArray2(o8, minLen);
          var n4 = Object.prototype.toString.call(o8).slice(8, -1);
          if (n4 === "Object" && o8.constructor && (n4 = o8.constructor.name), n4 === "Map" || n4 === "Set")
            return Array.from(o8);
          if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
            return _arrayLikeToArray2(o8, minLen);
        }
      }
      function _arrayLikeToArray2(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i7 = 0, arr2 = new Array(len); i7 < len; i7++)
          arr2[i7] = arr[i7];
        return arr2;
      }
      function _createForOfIteratorHelperLoose(o8, allowArrayLike) {
        var it2 = typeof Symbol < "u" && o8[Symbol.iterator] || o8["@@iterator"];
        if (it2)
          return (it2 = it2.call(o8)).next.bind(it2);
        if (Array.isArray(o8) || (it2 = _unsupportedIterableToArray2(o8)) || allowArrayLike && o8 && typeof o8.length == "number") {
          it2 && (o8 = it2);
          var i7 = 0;
          return function() {
            return i7 >= o8.length ? {
              done: !0
            } : {
              done: !1,
              value: o8[i7++]
            };
          };
        }
        throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      var example = "image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg";
      function parseAssetId(ref) {
        var _ref$split = ref.split("-"), id = _ref$split[1], dimensionString = _ref$split[2], format = _ref$split[3];
        if (!id || !dimensionString || !format)
          throw new Error("Malformed asset _ref '" + ref + `'. Expected an id like "` + example + '".');
        var _dimensionString$spli = dimensionString.split("x"), imgWidthStr = _dimensionString$spli[0], imgHeightStr = _dimensionString$spli[1], width = +imgWidthStr, height = +imgHeightStr, isValidAssetId = isFinite(width) && isFinite(height);
        if (!isValidAssetId)
          throw new Error("Malformed asset _ref '" + ref + `'. Expected an id like "` + example + '".');
        return {
          id,
          width,
          height,
          format
        };
      }
      var isRef = function(src) {
        var source = src;
        return source ? typeof source._ref == "string" : !1;
      }, isAsset = function(src) {
        var source = src;
        return source ? typeof source._id == "string" : !1;
      }, isAssetStub = function(src) {
        var source = src;
        return source && source.asset ? typeof source.asset.url == "string" : !1;
      };
      function parseSource(source) {
        if (!source)
          return null;
        var image;
        if (typeof source == "string" && isUrl(source))
          image = {
            asset: {
              _ref: urlToId(source)
            }
          };
        else if (typeof source == "string")
          image = {
            asset: {
              _ref: source
            }
          };
        else if (isRef(source))
          image = {
            asset: source
          };
        else if (isAsset(source))
          image = {
            asset: {
              _ref: source._id || ""
            }
          };
        else if (isAssetStub(source))
          image = {
            asset: {
              _ref: urlToId(source.asset.url)
            }
          };
        else if (typeof source.asset == "object")
          image = _extends7({}, source);
        else
          return null;
        var img = source;
        return img.crop && (image.crop = img.crop), img.hotspot && (image.hotspot = img.hotspot), applyDefaults(image);
      }
      function isUrl(url) {
        return /^https?:\/\//.test("" + url);
      }
      function urlToId(url) {
        var parts = url.split("/").slice(-1);
        return ("image-" + parts[0]).replace(/\.([a-z]+)$/, "-$1");
      }
      function applyDefaults(image) {
        if (image.crop && image.hotspot)
          return image;
        var result = _extends7({}, image);
        return result.crop || (result.crop = {
          left: 0,
          top: 0,
          bottom: 0,
          right: 0
        }), result.hotspot || (result.hotspot = {
          x: 0.5,
          y: 0.5,
          height: 1,
          width: 1
        }), result;
      }
      var SPEC_NAME_TO_URL_NAME_MAPPINGS = [["width", "w"], ["height", "h"], ["format", "fm"], ["download", "dl"], ["blur", "blur"], ["sharpen", "sharp"], ["invert", "invert"], ["orientation", "or"], ["minHeight", "min-h"], ["maxHeight", "max-h"], ["minWidth", "min-w"], ["maxWidth", "max-w"], ["quality", "q"], ["fit", "fit"], ["crop", "crop"], ["saturation", "sat"], ["auto", "auto"], ["dpr", "dpr"], ["pad", "pad"]];
      function urlForImage(options) {
        var spec = _extends7({}, options || {}), source = spec.source;
        delete spec.source;
        var image = parseSource(source);
        if (!image)
          throw new Error("Unable to resolve image URL from source (" + JSON.stringify(source) + ")");
        var id = image.asset._ref || image.asset._id || "", asset = parseAssetId(id), cropLeft = Math.round(image.crop.left * asset.width), cropTop = Math.round(image.crop.top * asset.height), crop = {
          left: cropLeft,
          top: cropTop,
          width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),
          height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)
        }, hotSpotVerticalRadius = image.hotspot.height * asset.height / 2, hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2, hotSpotCenterX = image.hotspot.x * asset.width, hotSpotCenterY = image.hotspot.y * asset.height, hotspot = {
          left: hotSpotCenterX - hotSpotHorizontalRadius,
          top: hotSpotCenterY - hotSpotVerticalRadius,
          right: hotSpotCenterX + hotSpotHorizontalRadius,
          bottom: hotSpotCenterY + hotSpotVerticalRadius
        };
        return spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop || (spec = _extends7({}, spec, fit({
          crop,
          hotspot
        }, spec))), specToImageUrl(_extends7({}, spec, {
          asset
        }));
      }
      function specToImageUrl(spec) {
        var cdnUrl2 = (spec.baseUrl || "https://cdn.sanity.io").replace(/\/+$/, ""), filename = spec.asset.id + "-" + spec.asset.width + "x" + spec.asset.height + "." + spec.asset.format, baseUrl = cdnUrl2 + "/images/" + spec.projectId + "/" + spec.dataset + "/" + filename, params = [];
        if (spec.rect) {
          var _spec$rect = spec.rect, left = _spec$rect.left, top = _spec$rect.top, width = _spec$rect.width, height = _spec$rect.height, isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;
          isEffectiveCrop && params.push("rect=" + left + "," + top + "," + width + "," + height);
        }
        spec.bg && params.push("bg=" + spec.bg), spec.focalPoint && (params.push("fp-x=" + spec.focalPoint.x), params.push("fp-y=" + spec.focalPoint.y));
        var flip = [spec.flipHorizontal && "h", spec.flipVertical && "v"].filter(Boolean).join("");
        return flip && params.push("flip=" + flip), SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function(mapping) {
          var specName = mapping[0], param = mapping[1];
          typeof spec[specName] < "u" ? params.push(param + "=" + encodeURIComponent(spec[specName])) : typeof spec[param] < "u" && params.push(param + "=" + encodeURIComponent(spec[param]));
        }), params.length === 0 ? baseUrl : baseUrl + "?" + params.join("&");
      }
      function fit(source, spec) {
        var cropRect, imgWidth = spec.width, imgHeight = spec.height;
        if (!(imgWidth && imgHeight))
          return {
            width: imgWidth,
            height: imgHeight,
            rect: source.crop
          };
        var crop = source.crop, hotspot = source.hotspot, desiredAspectRatio = imgWidth / imgHeight, cropAspectRatio = crop.width / crop.height;
        if (cropAspectRatio > desiredAspectRatio) {
          var height = Math.round(crop.height), width = Math.round(height * desiredAspectRatio), top = Math.max(0, Math.round(crop.top)), hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left), left = Math.max(0, Math.round(hotspotXCenter - width / 2));
          left < crop.left ? left = crop.left : left + width > crop.left + crop.width && (left = crop.left + crop.width - width), cropRect = {
            left,
            top,
            width,
            height
          };
        } else {
          var _width = crop.width, _height = Math.round(_width / desiredAspectRatio), _left = Math.max(0, Math.round(crop.left)), hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top), _top = Math.max(0, Math.round(hotspotYCenter - _height / 2));
          _top < crop.top ? _top = crop.top : _top + _height > crop.top + crop.height && (_top = crop.top + crop.height - _height), cropRect = {
            left: _left,
            top: _top,
            width: _width,
            height: _height
          };
        }
        return {
          width: imgWidth,
          height: imgHeight,
          rect: cropRect
        };
      }
      var validFits = ["clip", "crop", "fill", "fillmax", "max", "scale", "min"], validCrops = ["top", "bottom", "left", "right", "center", "focalpoint", "entropy"], validAutoModes = ["format"];
      function isSanityModernClientLike(client) {
        return client && "config" in client ? typeof client.config == "function" : !1;
      }
      function isSanityClientLike(client) {
        return client && "clientConfig" in client ? typeof client.clientConfig == "object" : !1;
      }
      function rewriteSpecName(key) {
        for (var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS, _iterator = _createForOfIteratorHelperLoose(specs), _step; !(_step = _iterator()).done; ) {
          var entry2 = _step.value, specName = entry2[0], param = entry2[1];
          if (key === specName || key === param)
            return specName;
        }
        return key;
      }
      function urlBuilder2(options) {
        if (isSanityModernClientLike(options)) {
          var _options$config = options.config(), apiUrl = _options$config.apiHost, projectId2 = _options$config.projectId, dataset2 = _options$config.dataset, apiHost = apiUrl || "https://api.sanity.io";
          return new ImageUrlBuilder(null, {
            baseUrl: apiHost.replace(/^https:\/\/api\./, "https://cdn."),
            projectId: projectId2,
            dataset: dataset2
          });
        }
        var client = options;
        if (isSanityClientLike(client)) {
          var _client$clientConfig = client.clientConfig, _apiUrl = _client$clientConfig.apiHost, _projectId = _client$clientConfig.projectId, _dataset = _client$clientConfig.dataset, _apiHost = _apiUrl || "https://api.sanity.io";
          return new ImageUrlBuilder(null, {
            baseUrl: _apiHost.replace(/^https:\/\/api\./, "https://cdn."),
            projectId: _projectId,
            dataset: _dataset
          });
        }
        return new ImageUrlBuilder(null, options);
      }
      var ImageUrlBuilder = /* @__PURE__ */ function() {
        function ImageUrlBuilder2(parent, options) {
          this.options = void 0, this.options = parent ? _extends7({}, parent.options || {}, options || {}) : _extends7({}, options || {});
        }
        var _proto = ImageUrlBuilder2.prototype;
        return _proto.withOptions = function(options) {
          var baseUrl = options.baseUrl || this.options.baseUrl, newOptions = {
            baseUrl
          };
          for (var key in options)
            if (options.hasOwnProperty(key)) {
              var specKey = rewriteSpecName(key);
              newOptions[specKey] = options[key];
            }
          return new ImageUrlBuilder2(this, _extends7({
            baseUrl
          }, newOptions));
        }, _proto.image = function(source) {
          return this.withOptions({
            source
          });
        }, _proto.dataset = function(_dataset2) {
          return this.withOptions({
            dataset: _dataset2
          });
        }, _proto.projectId = function(_projectId2) {
          return this.withOptions({
            projectId: _projectId2
          });
        }, _proto.bg = function(_bg) {
          return this.withOptions({
            bg: _bg
          });
        }, _proto.dpr = function(_dpr) {
          return this.withOptions(_dpr && _dpr !== 1 ? {
            dpr: _dpr
          } : {});
        }, _proto.width = function(_width) {
          return this.withOptions({
            width: _width
          });
        }, _proto.height = function(_height) {
          return this.withOptions({
            height: _height
          });
        }, _proto.focalPoint = function(x2, y2) {
          return this.withOptions({
            focalPoint: {
              x: x2,
              y: y2
            }
          });
        }, _proto.maxWidth = function(_maxWidth) {
          return this.withOptions({
            maxWidth: _maxWidth
          });
        }, _proto.minWidth = function(_minWidth) {
          return this.withOptions({
            minWidth: _minWidth
          });
        }, _proto.maxHeight = function(_maxHeight) {
          return this.withOptions({
            maxHeight: _maxHeight
          });
        }, _proto.minHeight = function(_minHeight) {
          return this.withOptions({
            minHeight: _minHeight
          });
        }, _proto.size = function(width, height) {
          return this.withOptions({
            width,
            height
          });
        }, _proto.blur = function(_blur) {
          return this.withOptions({
            blur: _blur
          });
        }, _proto.sharpen = function(_sharpen) {
          return this.withOptions({
            sharpen: _sharpen
          });
        }, _proto.rect = function(left, top, width, height) {
          return this.withOptions({
            rect: {
              left,
              top,
              width,
              height
            }
          });
        }, _proto.format = function(_format) {
          return this.withOptions({
            format: _format
          });
        }, _proto.invert = function(_invert) {
          return this.withOptions({
            invert: _invert
          });
        }, _proto.orientation = function(_orientation) {
          return this.withOptions({
            orientation: _orientation
          });
        }, _proto.quality = function(_quality) {
          return this.withOptions({
            quality: _quality
          });
        }, _proto.forceDownload = function(download) {
          return this.withOptions({
            download
          });
        }, _proto.flipHorizontal = function() {
          return this.withOptions({
            flipHorizontal: !0
          });
        }, _proto.flipVertical = function() {
          return this.withOptions({
            flipVertical: !0
          });
        }, _proto.ignoreImageParams = function() {
          return this.withOptions({
            ignoreImageParams: !0
          });
        }, _proto.fit = function(value) {
          if (validFits.indexOf(value) === -1)
            throw new Error('Invalid fit mode "' + value + '"');
          return this.withOptions({
            fit: value
          });
        }, _proto.crop = function(value) {
          if (validCrops.indexOf(value) === -1)
            throw new Error('Invalid crop mode "' + value + '"');
          return this.withOptions({
            crop: value
          });
        }, _proto.saturation = function(_saturation) {
          return this.withOptions({
            saturation: _saturation
          });
        }, _proto.auto = function(value) {
          if (validAutoModes.indexOf(value) === -1)
            throw new Error('Invalid auto mode "' + value + '"');
          return this.withOptions({
            auto: value
          });
        }, _proto.pad = function(_pad) {
          return this.withOptions({
            pad: _pad
          });
        }, _proto.url = function() {
          return urlForImage(this.options);
        }, _proto.toString = function() {
          return this.url();
        }, ImageUrlBuilder2;
      }();
      return urlBuilder2;
    });
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a4, b4) {
      if (a4 === b4)
        return !0;
      if (a4 && b4 && typeof a4 == "object" && typeof b4 == "object") {
        if (a4.constructor !== b4.constructor)
          return !1;
        var length2, i7, keys;
        if (Array.isArray(a4)) {
          if (length2 = a4.length, length2 != b4.length)
            return !1;
          for (i7 = length2; i7-- !== 0; )
            if (!equal(a4[i7], b4[i7]))
              return !1;
          return !0;
        }
        if (a4.constructor === RegExp)
          return a4.source === b4.source && a4.flags === b4.flags;
        if (a4.valueOf !== Object.prototype.valueOf)
          return a4.valueOf() === b4.valueOf();
        if (a4.toString !== Object.prototype.toString)
          return a4.toString() === b4.toString();
        if (keys = Object.keys(a4), length2 = keys.length, length2 !== Object.keys(b4).length)
          return !1;
        for (i7 = length2; i7-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b4, keys[i7]))
            return !1;
        for (i7 = length2; i7-- !== 0; ) {
          var key = keys[i7];
          if (!equal(a4[key], b4[key]))
            return !1;
        }
        return !0;
      }
      return a4 !== a4 && b4 !== b4;
    };
  }
});

// node_modules/@sanity/groq-store/node_modules/throttle-debounce/esm/index.js
function throttle(delay, callback, options) {
  var _ref = options || {}, _ref$noTrailing = _ref.noTrailing, noTrailing = _ref$noTrailing === void 0 ? !1 : _ref$noTrailing, _ref$noLeading = _ref.noLeading, noLeading = _ref$noLeading === void 0 ? !1 : _ref$noLeading, _ref$debounceMode = _ref.debounceMode, debounceMode = _ref$debounceMode === void 0 ? void 0 : _ref$debounceMode, timeoutID, cancelled = !1, lastExec = 0;
  function clearExistingTimeout() {
    timeoutID && clearTimeout(timeoutID);
  }
  function cancel(options2) {
    var _ref2 = options2 || {}, _ref2$upcomingOnly = _ref2.upcomingOnly, upcomingOnly = _ref2$upcomingOnly === void 0 ? !1 : _ref2$upcomingOnly;
    clearExistingTimeout(), cancelled = !upcomingOnly;
  }
  function wrapper() {
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++)
      arguments_[_key] = arguments[_key];
    var self2 = this, elapsed = Date.now() - lastExec;
    if (cancelled)
      return;
    function exec() {
      lastExec = Date.now(), callback.apply(self2, arguments_);
    }
    function clear() {
      timeoutID = void 0;
    }
    !noLeading && debounceMode && !timeoutID && exec(), clearExistingTimeout(), debounceMode === void 0 && elapsed > delay ? noLeading ? (lastExec = Date.now(), noTrailing || (timeoutID = setTimeout(debounceMode ? clear : exec, delay))) : exec() : noTrailing !== !0 && (timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay));
  }
  return wrapper.cancel = cancel, wrapper;
}
var init_esm = __esm({
  "node_modules/@sanity/groq-store/node_modules/throttle-debounce/esm/index.js"() {
  }
});

// node_modules/groq-js/dist/1.mjs
function escapeRegExp(string3) {
  return string3.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function pathRegExp(pattern) {
  let re3 = [];
  for (let part of pattern.split("."))
    part === "*" ? re3.push("[^.]+") : part === "**" ? re3.push(".*") : re3.push(escapeRegExp(part));
  return new RegExp("^".concat(re3.join("."), "$"));
}
function parseRFC3339(str) {
  return RFC3339_REGEX.test(str) ? new Date(str) : null;
}
function formatRFC3339(d9) {
  let year = addLeadingZero(d9.getUTCFullYear(), 4), month = addLeadingZero(d9.getUTCMonth() + 1, 2), day = addLeadingZero(d9.getUTCDate(), 2), hour = addLeadingZero(d9.getUTCHours(), 2), minute = addLeadingZero(d9.getUTCMinutes(), 2), second = addLeadingZero(d9.getUTCSeconds(), 2), fractionalSecond = "", millis = d9.getMilliseconds();
  return millis != 0 && (fractionalSecond = ".".concat(addLeadingZero(millis, 3))), "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":").concat(minute, ":").concat(second).concat(fractionalSecond, "Z");
}
function addLeadingZero(num, targetLength) {
  let str = num.toString();
  for (; str.length < targetLength; )
    str = "0".concat(str);
  return str;
}
function fromNumber(num) {
  return Number.isFinite(num) ? new StaticValue(num, "number") : NULL_VALUE;
}
function fromString(str) {
  return new StaticValue(str, "string");
}
function fromDateTime(dt) {
  return new StaticValue(dt, "datetime");
}
function fromPath(path2) {
  return new StaticValue(path2, "path");
}
function isIterator(obj) {
  return obj && typeof obj.next == "function";
}
function fromJS(val) {
  return isIterator(val) ? new StreamValue(async function* () {
    for await (let value of val)
      yield fromJS(value);
  }) : val == null ? NULL_VALUE : new StaticValue(val, getType(val));
}
function getType(data) {
  return data === null || typeof data > "u" ? "null" : Array.isArray(data) ? "array" : data instanceof Path ? "path" : data instanceof DateTime ? "datetime" : typeof data;
}
function isEqual(a4, b4) {
  return a4.type === "string" && b4.type === "string" || a4.type === "boolean" && b4.type === "boolean" || a4.type === "null" && b4.type === "null" || a4.type === "number" && b4.type === "number" ? a4.data === b4.data : a4.type === "datetime" && b4.type === "datetime" ? a4.data.equals(b4.data) : !1;
}
function matchText(tokens, patterns) {
  return tokens.length === 0 || patterns.length === 0 ? !1 : patterns.every((pattern) => pattern(tokens));
}
function matchTokenize(text2) {
  return text2.replace(EDGE_CHARS, "").match(CHARS) || [];
}
function matchAnalyzePattern(text2) {
  return matchPatternRegex(text2).map((re3) => (tokens) => tokens.some((token) => re3.test(token)));
}
function matchPatternRegex(text2) {
  return (text2.replace(EDGE_CHARS, "").match(CHARS_WITH_WILDCARD) || []).map((term) => new RegExp("^".concat(term.slice(0, MAX_TERM_LENGTH).replace(/\*/g, ".*"), "$"), "i"));
}
async function gatherText(value, cb) {
  if (value.type === "string")
    return cb(value.data), !0;
  if (value.isArray()) {
    let success = !0;
    for await (let part of value)
      part.type === "string" ? cb(part.data) : success = !1;
    return success;
  }
  return !1;
}
function partialCompare(a4, b4) {
  let aType = getType(a4), bType = getType(b4);
  if (aType !== bType)
    return null;
  switch (aType) {
    case "number":
    case "boolean":
      return a4 - b4;
    case "string":
      return a4 < b4 ? -1 : a4 > b4 ? 1 : 0;
    case "datetime":
      return a4.compareTo(b4);
    default:
      return null;
  }
}
function totalCompare(a4, b4) {
  let aType = getType(a4), bType = getType(b4), aTypeOrder = TYPE_ORDER[aType] || 100, bTypeOrder = TYPE_ORDER[bType] || 100;
  if (aTypeOrder !== bTypeOrder)
    return aTypeOrder - bTypeOrder;
  let result = partialCompare(a4, b4);
  return result === null && (result = 0), result;
}
function numericOperator(impl) {
  return function(left, right) {
    if (left.type === "number" && right.type === "number") {
      let result = impl(left.data, right.data);
      return fromNumber(result);
    }
    return NULL_VALUE;
  };
}
function evaluate(node, scope) {
  let execute = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : evaluate, func = EXECUTORS[node.type];
  return func(node, scope, execute);
}
function promiselessApply(value, cb) {
  return "then" in value ? value.then(cb) : cb(value);
}
function evaluateQuery(tree) {
  let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, root = fromJS(options.root), dataset2 = fromJS(options.dataset), params = {
    ...options.params
  }, scope = new Scope(params, dataset2, root, {
    timestamp: options.timestamp || /* @__PURE__ */ new Date(),
    identity: options.identity === void 0 ? "me" : options.identity,
    sanity: options.sanity,
    after: options.after ? fromJS(options.after) : null,
    before: options.before ? fromJS(options.before) : null
  }, null);
  return evaluate(tree, scope);
}
function canConstantEvaluate(node) {
  switch (node.type) {
    case "Group":
    case "Value":
    case "Parameter":
      return !0;
    case "Pos":
    case "Neg":
      return canConstantEvaluate(node.base);
    case "OpCall":
      switch (node.op) {
        case "+":
        case "-":
        case "*":
        case "/":
        case "%":
        case "**":
          return canConstantEvaluate(node.left) && canConstantEvaluate(node.right);
        default:
          return !1;
      }
    default:
      return !1;
  }
}
function tryConstantEvaluate(node) {
  return canConstantEvaluate(node) ? constantEvaluate(node) : null;
}
function constantEvaluate(node) {
  let value = evaluate(node, DUMMY_SCOPE, constantEvaluate);
  if ("then" in value)
    throw new Error("BUG: constant evaluate should never return a promise");
  return value;
}
async function portableTextContent(value) {
  if (value.type === "object")
    return blockText(value.data);
  if (value.isArray()) {
    let texts = await arrayText(value);
    if (texts.length > 0)
      return texts.join(`

`);
  }
  return null;
}
async function arrayText(value) {
  let result = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  for await (let block of value)
    if (block.type === "object") {
      let text2 = blockText(block.data);
      text2 !== null && result.push(text2);
    } else
      block.isArray() && await arrayText(block, result);
  return result;
}
function blockText(obj) {
  if (typeof obj._type != "string")
    return null;
  let children = obj.children;
  if (!Array.isArray(children))
    return null;
  let result = "";
  for (let child of children)
    child && typeof child == "object" && typeof child._type == "string" && child._type === "span" && typeof child.text == "string" && (result += child.text);
  return result;
}
async function evaluateScore(node, scope, execute) {
  if (node.type === "OpCall" && node.op === "match")
    return evaluateMatchScore(node.left, node.right, scope, execute);
  if (node.type === "FuncCall" && node.name === "boost") {
    let innerScore = await evaluateScore(node.args[0], scope, execute), boost2 = await execute(node.args[1], scope);
    return boost2.type === "number" && innerScore > 0 ? innerScore + boost2.data : 0;
  }
  switch (node.type) {
    case "Or": {
      let leftScore = await evaluateScore(node.left, scope, execute), rightScore = await evaluateScore(node.right, scope, execute);
      return leftScore + rightScore;
    }
    case "And": {
      let leftScore = await evaluateScore(node.left, scope, execute), rightScore = await evaluateScore(node.right, scope, execute);
      return leftScore === 0 || rightScore === 0 ? 0 : leftScore + rightScore;
    }
    default: {
      let res = await execute(node, scope);
      return res.type === "boolean" && res.data === !0 ? 1 : 0;
    }
  }
}
async function evaluateMatchScore(left, right, scope, execute) {
  let text2 = await execute(left, scope), pattern = await execute(right, scope), tokens = [], terms = [];
  if (await gatherText(text2, (part) => {
    tokens = tokens.concat(matchTokenize(part));
  }), !await gatherText(pattern, (part) => {
    terms = terms.concat(matchPatternRegex(part));
  }) || tokens.length === 0 || terms.length === 0)
    return 0;
  let score2 = 0;
  for (let re3 of terms) {
    let freq = tokens.reduce((c5, token) => c5 + (re3.test(token) ? 1 : 0), 0);
    score2 += freq * (BM25k + 1) / (freq + BM25k);
  }
  return score2;
}
function hasReference(value, pathSet) {
  switch (getType(value)) {
    case "array":
      for (let v3 of value)
        if (hasReference(v3, pathSet))
          return !0;
      break;
    case "object":
      if (value._ref)
        return pathSet.has(value._ref);
      for (let v3 of Object.values(value))
        if (hasReference(v3, pathSet))
          return !0;
      break;
  }
  return !1;
}
function countUTF8(str) {
  let count2 = 0;
  for (let i7 = 0; i7 < str.length; i7++) {
    let code = str.charCodeAt(i7);
    code >= 55296 && code <= 56319 || count2++;
  }
  return count2;
}
function parse$1(str) {
  let pos = 0;
  pos = skipWS(str, pos);
  let result = parseExpr(str, pos, 0);
  return result.type === "error" ? result : (pos = skipWS(str, result.position), pos !== str.length ? (result.failPosition && (pos = result.failPosition - 1), {
    type: "error",
    position: pos
  }) : (delete result.position, delete result.failPosition, result));
}
function parseExpr(str, pos, level) {
  let startPos = pos, token = str[pos], marks;
  switch (token) {
    case "+": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_POS);
      if (rhs.type === "error")
        return rhs;
      marks = [{
        name: "pos",
        position: startPos
      }].concat(rhs.marks), pos = rhs.position;
      break;
    }
    case "-": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NEG);
      if (rhs.type === "error")
        return rhs;
      marks = [{
        name: "neg",
        position: startPos
      }].concat(rhs.marks), pos = rhs.position;
      break;
    }
    case "(": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), 0);
      if (rhs.type === "error")
        return rhs;
      switch (pos = skipWS(str, rhs.position), str[pos]) {
        case ",": {
          for (marks = [{
            name: "tuple",
            position: startPos
          }].concat(rhs.marks), pos = skipWS(str, pos + 1); ; ) {
            if (rhs = parseExpr(str, pos, 0), rhs.type === "error")
              return rhs;
            if (pos = skipWS(str, rhs.position), str[pos] !== ",")
              break;
            pos = skipWS(str, pos + 1);
          }
          if (str[pos] !== ")")
            return {
              type: "error",
              position: pos
            };
          pos++, marks.push({
            name: "tuple_end",
            position: pos
          });
          break;
        }
        case ")": {
          pos++, marks = [{
            name: "group",
            position: startPos
          }].concat(rhs.marks);
          break;
        }
        default:
          return {
            type: "error",
            position: pos
          };
      }
      break;
    }
    case "!": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NOT);
      if (rhs.type === "error")
        return rhs;
      marks = [{
        name: "not",
        position: startPos
      }].concat(rhs.marks), pos = rhs.position;
      break;
    }
    case "{": {
      let result = parseObject(str, pos);
      if (result.type === "error")
        return result;
      marks = result.marks, pos = result.position;
      break;
    }
    case "[":
      if (marks = [{
        name: "array",
        position: pos
      }], pos = skipWS(str, pos + 1), str[pos] !== "]")
        for (; ; ) {
          str.slice(pos, pos + 3) === "..." && (marks.push({
            name: "array_splat",
            position: pos
          }), pos = skipWS(str, pos + 3));
          let res = parseExpr(str, pos, 0);
          if (res.type === "error")
            return res;
          if (marks = marks.concat(res.marks), pos = res.position, pos = skipWS(str, pos), str[pos] !== "," || (pos = skipWS(str, pos + 1), str[pos] === "]"))
            break;
        }
      if (str[pos] === "]")
        pos++, marks.push({
          name: "array_end",
          position: pos
        });
      else
        return {
          type: "error",
          position: pos
        };
      break;
    case "'":
    case '"': {
      let result = parseString(str, pos);
      if (result.type === "error")
        return result;
      marks = result.marks, pos = result.position;
      break;
    }
    case "^": {
      for (pos++, marks = []; str[pos] === "." && str[pos + 1] === "^"; )
        marks.push({
          name: "dblparent",
          position: startPos
        }), pos += 2;
      marks.push({
        name: "parent",
        position: startPos
      });
      break;
    }
    case "@":
      marks = [{
        name: "this",
        position: startPos
      }], pos++;
      break;
    case "*":
      marks = [{
        name: "everything",
        position: startPos
      }], pos++;
      break;
    case "$": {
      let identLen = parseRegex(str, pos + 1, IDENT);
      identLen && (pos += 1 + identLen, marks = [{
        name: "param",
        position: startPos
      }, {
        name: "ident",
        position: startPos + 1
      }, {
        name: "ident_end",
        position: pos
      }]);
      break;
    }
    default: {
      let numLen = parseRegex(str, pos, NUM);
      if (numLen) {
        pos += numLen;
        let name = "integer";
        if (str[pos] === ".") {
          let fracLen = parseRegex(str, pos + 1, NUM);
          fracLen && (name = "float", pos += 1 + fracLen);
        }
        if (str[pos] === "e" || str[pos] === "E") {
          name = "sci", pos++, (str[pos] === "+" || str[pos] === "-") && pos++;
          let expLen = parseRegex(str, pos, NUM);
          if (!expLen)
            return {
              type: "error",
              position: pos
            };
          pos += expLen;
        }
        marks = [{
          name,
          position: startPos
        }, {
          name: name + "_end",
          position: pos
        }];
        break;
      }
      let identLen = parseRegex(str, pos, IDENT);
      if (identLen) {
        switch (pos += identLen, str[pos]) {
          case ":":
          case "(": {
            let result = parseFuncCall(str, startPos, pos);
            if (result.type === "error")
              return result;
            marks = result.marks, pos = result.position;
            break;
          }
          default:
            marks = [{
              name: "this_attr",
              position: startPos
            }, {
              name: "ident",
              position: startPos
            }, {
              name: "ident_end",
              position: pos
            }];
        }
        break;
      }
    }
  }
  if (!marks)
    return {
      type: "error",
      position: pos
    };
  let lhsLevel = 12, trav;
  loop:
    for (; ; ) {
      let innerPos = skipWS(str, pos);
      if (innerPos === str.length) {
        pos = innerPos;
        break;
      }
      if (trav = parseTraversal(str, innerPos), trav.type === "success") {
        for (marks.unshift({
          name: "traverse",
          position: startPos
        }); trav.type === "success"; )
          marks = marks.concat(trav.marks), pos = trav.position, trav = parseTraversal(str, skipWS(str, pos));
        marks.push({
          name: "traversal_end",
          position: pos
        });
        continue;
      }
      switch (str[innerPos]) {
        case "=": {
          switch (str[innerPos + 1]) {
            case ">": {
              if (level > PREC_PAIR || lhsLevel <= PREC_PAIR)
                break loop;
              let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_PAIR);
              if (rhs.type === "error")
                return rhs;
              marks = marks.concat(rhs.marks), marks.unshift({
                name: "pair",
                position: startPos
              }), pos = rhs.position, lhsLevel = PREC_PAIR;
              break;
            }
            case "=": {
              if (level > PREC_COMP || lhsLevel <= PREC_COMP)
                break loop;
              let rhs = parseExpr(str, skipWS(str, innerPos + 2), 5);
              if (rhs.type === "error")
                return rhs;
              marks.unshift({
                name: "comp",
                position: startPos
              }), marks.push({
                name: "op",
                position: innerPos
              }, {
                name: "op_end",
                position: innerPos + 2
              }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = PREC_COMP;
              break;
            }
            default:
              break loop;
          }
          break;
        }
        case "+": {
          if (level > PREC_ADD || lhsLevel < PREC_ADD)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_ADD + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "add",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_ADD;
          break;
        }
        case "-": {
          if (level > PREC_SUB || lhsLevel < PREC_SUB)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_SUB + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "sub",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_SUB;
          break;
        }
        case "*": {
          if (str[innerPos + 1] === "*") {
            if (level > PREC_POW || lhsLevel <= PREC_POW)
              break loop;
            let rhs2 = parseExpr(str, skipWS(str, innerPos + 2), PREC_POW);
            if (rhs2.type === "error")
              return rhs2;
            marks = marks.concat(rhs2.marks), marks.unshift({
              name: "pow",
              position: startPos
            }), pos = rhs2.position, lhsLevel = PREC_POW;
            break;
          }
          if (level > PREC_MUL || lhsLevel < PREC_MUL)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MUL + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "mul",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_MUL;
          break;
        }
        case "/": {
          if (level > PREC_DIV || lhsLevel < PREC_DIV)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_DIV + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "div",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_DIV;
          break;
        }
        case "%": {
          if (level > PREC_MOD || lhsLevel < PREC_MOD)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MOD + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "mod",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_MOD;
          break;
        }
        case "<":
        case ">": {
          if (level > PREC_COMP || lhsLevel <= PREC_COMP)
            break loop;
          let nextPos = innerPos + 1;
          str[nextPos] === "=" && nextPos++;
          let rhs = parseExpr(str, skipWS(str, nextPos), PREC_COMP + 1);
          if (rhs.type === "error")
            return rhs;
          marks.unshift({
            name: "comp",
            position: startPos
          }), marks.push({
            name: "op",
            position: innerPos
          }, {
            name: "op_end",
            position: nextPos
          }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = PREC_COMP;
          break;
        }
        case "|": {
          if (str[innerPos + 1] === "|") {
            if (level > PREC_OR || lhsLevel < PREC_OR)
              break loop;
            let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_OR + 1);
            if (rhs.type === "error")
              return rhs;
            marks = marks.concat(rhs.marks), marks.unshift({
              name: "or",
              position: startPos
            }), pos = rhs.position, lhsLevel = PREC_OR;
          } else {
            if (level > 11 || lhsLevel < 11)
              break loop;
            let identPos = skipWS(str, innerPos + 1), identLen = parseRegex(str, identPos, IDENT);
            if (!identLen)
              return {
                type: "error",
                position: identPos
              };
            if (pos = identPos + identLen, str[pos] === "(" || str[pos] === ":") {
              let result = parseFuncCall(str, identPos, pos);
              if (result.type === "error")
                return result;
              marks = marks.concat(result.marks), marks.unshift({
                name: "pipecall",
                position: startPos
              }), pos = result.position, lhsLevel = 11;
            }
          }
          break;
        }
        case "&": {
          if (str[innerPos + 1] != "&" || level > PREC_AND || lhsLevel < PREC_AND)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_AND + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "and",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_AND;
          break;
        }
        case "!": {
          if (str[innerPos + 1] !== "=" || level > PREC_COMP || lhsLevel < PREC_COMP)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1);
          if (rhs.type === "error")
            return rhs;
          marks.unshift({
            name: "comp",
            position: startPos
          }), marks.push({
            name: "op",
            position: innerPos
          }, {
            name: "op_end",
            position: innerPos + 2
          }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = PREC_COMP;
          break;
        }
        case "d": {
          if (str.slice(innerPos, innerPos + 4) !== "desc" || level > PREC_ORDER || lhsLevel < PREC_ORDER)
            break loop;
          marks.unshift({
            name: "desc",
            position: startPos
          }), pos = innerPos + 4, lhsLevel = PREC_ORDER;
          break;
        }
        case "a": {
          if (str.slice(innerPos, innerPos + 3) !== "asc" || level > PREC_ORDER || lhsLevel < PREC_ORDER)
            break loop;
          marks.unshift({
            name: "asc",
            position: startPos
          }), pos = innerPos + 3, lhsLevel = PREC_ORDER;
          break;
        }
        default:
          switch (parseRegexStr(str, innerPos, IDENT)) {
            case "in": {
              if (level > PREC_COMP || lhsLevel <= PREC_COMP)
                break loop;
              pos = skipWS(str, innerPos + 2);
              let isGroup = !1;
              str[pos] === "(" && (isGroup = !0, pos = skipWS(str, pos + 1));
              let rangePos = pos, result = parseExpr(str, pos, PREC_COMP + 1);
              if (result.type === "error")
                return result;
              if (pos = skipWS(str, result.position), str[pos] === "." && str[pos + 1] === ".") {
                let type = "inc_range";
                str[pos + 2] === "." ? (type = "exc_range", pos = skipWS(str, pos + 3)) : pos = skipWS(str, pos + 2);
                let rhs = parseExpr(str, pos, PREC_COMP + 1);
                if (rhs.type === "error")
                  return rhs;
                marks.unshift({
                  name: "in_range",
                  position: startPos
                }), marks = marks.concat({
                  name: type,
                  position: rangePos
                }, result.marks, rhs.marks), pos = rhs.position;
              } else
                marks.unshift({
                  name: "comp",
                  position: startPos
                }), marks.push({
                  name: "op",
                  position: innerPos
                }, {
                  name: "op_end",
                  position: innerPos + 2
                }), marks = marks.concat(result.marks);
              if (isGroup) {
                if (pos = skipWS(str, pos), str[pos] !== ")")
                  return {
                    type: "error",
                    position: pos
                  };
                pos++;
              }
              lhsLevel = PREC_COMP;
              break;
            }
            case "match": {
              if (level > PREC_COMP || lhsLevel <= PREC_COMP)
                break loop;
              let rhs = parseExpr(str, skipWS(str, innerPos + 5), PREC_COMP + 1);
              if (rhs.type === "error")
                return rhs;
              marks.unshift({
                name: "comp",
                position: startPos
              }), marks.push({
                name: "op",
                position: innerPos
              }, {
                name: "op_end",
                position: innerPos + 5
              }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = 4;
              break;
            }
            default:
              break loop;
          }
      }
    }
  let failPosition = (trav == null ? void 0 : trav.type) === "error" && trav.position;
  return {
    type: "success",
    marks,
    position: pos,
    failPosition
  };
}
function parseTraversal(str, pos) {
  let startPos = pos;
  switch (str[pos]) {
    case ".": {
      pos = skipWS(str, pos + 1);
      let identStart = pos, identLen2 = parseRegex(str, pos, IDENT);
      return identLen2 ? (pos += identLen2, {
        type: "success",
        marks: [{
          name: "attr_access",
          position: startPos
        }, {
          name: "ident",
          position: identStart
        }, {
          name: "ident_end",
          position: pos
        }],
        position: pos
      }) : {
        type: "error",
        position: pos
      };
    }
    case "-":
      if (str[pos + 1] !== ">")
        return {
          type: "error",
          position: pos
        };
      let marks = [{
        name: "deref",
        position: startPos
      }];
      pos += 2;
      let identPos = skipWS(str, pos), identLen = parseRegex(str, identPos, IDENT);
      return identLen && (pos = identPos + identLen, marks.push({
        name: "deref_attr",
        position: identPos
      }, {
        name: "ident",
        position: identPos
      }, {
        name: "ident_end",
        position: pos
      })), {
        type: "success",
        marks,
        position: pos
      };
    case "[": {
      if (pos = skipWS(str, pos + 1), str[pos] === "]")
        return {
          type: "success",
          marks: [{
            name: "array_postfix",
            position: startPos
          }],
          position: pos + 1
        };
      let rangePos = pos, result = parseExpr(str, pos, 0);
      if (result.type === "error")
        return result;
      if (pos = skipWS(str, result.position), str[pos] === "." && str[pos + 1] === ".") {
        let type = "inc_range";
        str[pos + 2] === "." ? (type = "exc_range", pos += 3) : pos += 2, pos = skipWS(str, pos);
        let rhs = parseExpr(str, pos, 0);
        return rhs.type === "error" ? rhs : (pos = skipWS(str, rhs.position), str[pos] !== "]" ? {
          type: "error",
          position: pos
        } : {
          type: "success",
          marks: [{
            name: "slice",
            position: startPos
          }, {
            name: type,
            position: rangePos
          }].concat(result.marks, rhs.marks),
          position: pos + 1
        });
      }
      return str[pos] !== "]" ? {
        type: "error",
        position: pos
      } : {
        type: "success",
        marks: [{
          name: "square_bracket",
          position: startPos
        }].concat(result.marks),
        position: pos + 1
      };
    }
    case "|": {
      if (pos = skipWS(str, pos + 1), str[pos] === "{") {
        let result = parseObject(str, pos);
        return result.type === "error" || result.marks.unshift({
          name: "projection",
          position: startPos
        }), result;
      }
      break;
    }
    case "{": {
      let result = parseObject(str, pos);
      return result.type === "error" || result.marks.unshift({
        name: "projection",
        position: startPos
      }), result;
    }
  }
  return {
    type: "error",
    position: pos
  };
}
function parseFuncCall(str, startPos, pos) {
  let marks = [];
  if (marks.push({
    name: "func_call",
    position: startPos
  }), str[pos] === ":" && str[pos + 1] === ":") {
    marks.push({
      name: "namespace",
      position: startPos
    }), marks.push({
      name: "ident",
      position: startPos
    }, {
      name: "ident_end",
      position: pos
    }), pos = skipWS(str, pos + 2);
    let nameLen = parseRegex(str, pos, IDENT);
    if (!nameLen)
      return {
        type: "error",
        position: pos
      };
    if (marks.push({
      name: "ident",
      position: pos
    }, {
      name: "ident_end",
      position: pos + nameLen
    }), pos = skipWS(str, pos + nameLen), str[pos] !== "(")
      return {
        type: "error",
        position: pos
      };
    pos++, pos = skipWS(str, pos);
  } else
    marks.push({
      name: "ident",
      position: startPos
    }, {
      name: "ident_end",
      position: pos
    }), pos = skipWS(str, pos + 1);
  let lastPos = pos;
  if (str[pos] !== ")")
    for (; ; ) {
      let result = parseExpr(str, pos, 0);
      if (result.type === "error")
        return result;
      if (marks = marks.concat(result.marks), lastPos = result.position, pos = skipWS(str, result.position), str[pos] !== "," || (pos = skipWS(str, pos + 1), str[pos] === ")"))
        break;
    }
  return str[pos] !== ")" ? {
    type: "error",
    position: pos
  } : (marks.push({
    name: "func_args_end",
    position: lastPos
  }), {
    type: "success",
    marks,
    position: pos + 1
  });
}
function parseObject(str, pos) {
  let marks = [{
    name: "object",
    position: pos
  }];
  for (pos = skipWS(str, pos + 1); str[pos] !== "}"; ) {
    let pairPos = pos;
    if (str.slice(pos, pos + 3) === "...")
      if (pos = skipWS(str, pos + 3), str[pos] !== "}" && str[pos] !== ",") {
        let expr = parseExpr(str, pos, 0);
        if (expr.type === "error")
          return expr;
        marks.push({
          name: "object_splat",
          position: pairPos
        }), marks = marks.concat(expr.marks), pos = expr.position;
      } else
        marks.push({
          name: "object_splat_this",
          position: pairPos
        });
    else {
      let expr = parseExpr(str, pos, 0);
      if (expr.type === "error")
        return expr;
      let nextPos = skipWS(str, expr.position);
      if (expr.marks[0].name === "str" && str[nextPos] === ":") {
        let value = parseExpr(str, skipWS(str, nextPos + 1), 0);
        if (value.type === "error")
          return value;
        marks.push({
          name: "object_pair",
          position: pairPos
        }), marks = marks.concat(expr.marks, value.marks), pos = value.position;
      } else
        marks = marks.concat({
          name: "object_expr",
          position: pos
        }, expr.marks), pos = expr.position;
    }
    if (pos = skipWS(str, pos), str[pos] !== ",")
      break;
    pos = skipWS(str, pos + 1);
  }
  return str[pos] !== "}" ? {
    type: "error",
    position: pos
  } : (pos++, marks.push({
    name: "object_end",
    position: pos
  }), {
    type: "success",
    marks,
    position: pos
  });
}
function parseString(str, pos) {
  let token = str[pos];
  pos = pos + 1;
  let marks = [{
    name: "str",
    position: pos
  }];
  str:
    for (; ; pos++) {
      if (pos > str.length)
        return {
          type: "error",
          position: pos
        };
      switch (str[pos]) {
        case token: {
          marks.push({
            name: "str_end",
            position: pos
          }), pos++;
          break str;
        }
        case "\\":
          marks.push({
            name: "str_pause",
            position: pos
          }), str[pos + 1] === "u" ? str[pos + 2] === "{" ? (marks.push({
            name: "unicode_hex",
            position: pos + 3
          }), pos = str.indexOf("}", pos + 3), marks.push({
            name: "unicode_hex_end",
            position: pos
          })) : (marks.push({
            name: "unicode_hex",
            position: pos + 2
          }), marks.push({
            name: "unicode_hex_end",
            position: pos + 6
          }), pos += 5) : (marks.push({
            name: "single_escape",
            position: pos + 1
          }), pos += 1), marks.push({
            name: "str_start",
            position: pos + 1
          });
      }
    }
  return {
    type: "success",
    marks,
    position: pos
  };
}
function skipWS(str, pos) {
  return pos + parseRegex(str, pos, WS);
}
function parseRegex(str, pos, re3) {
  let m6 = re3.exec(str.slice(pos));
  return m6 ? m6[0].length : 0;
}
function parseRegexStr(str, pos, re3) {
  let m6 = re3.exec(str.slice(pos));
  return m6 ? m6[0] : null;
}
function join(a4, b4) {
  return (base) => b4(a4(base));
}
function map(inner) {
  return (base) => ({
    type: "Map",
    base,
    expr: inner({
      type: "This"
    })
  });
}
function flatMap(inner) {
  return (base) => ({
    type: "FlatMap",
    base,
    expr: inner({
      type: "This"
    })
  });
}
function traverseArray(build, right) {
  if (!right)
    return {
      type: "a-a",
      build
    };
  switch (right.type) {
    case "a-a":
      return {
        type: "a-a",
        build: join(build, right.build)
      };
    case "a-b":
      return {
        type: "a-b",
        build: join(build, right.build)
      };
    case "b-b":
      return {
        type: "a-a",
        build: join(build, map(right.build))
      };
    case "b-a":
      return {
        type: "a-a",
        build: join(build, flatMap(right.build))
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function traversePlain(mapper, right) {
  if (!right)
    return {
      type: "b-b",
      build: mapper
    };
  switch (right.type) {
    case "a-a":
    case "b-a":
      return {
        type: "b-a",
        build: join(mapper, right.build)
      };
    case "a-b":
    case "b-b":
      return {
        type: "b-b",
        build: join(mapper, right.build)
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function traverseElement(mapper, right) {
  if (!right)
    return {
      type: "a-b",
      build: mapper
    };
  switch (right.type) {
    case "a-a":
    case "b-a":
      return {
        type: "a-a",
        build: join(mapper, right.build)
      };
    case "a-b":
    case "b-b":
      return {
        type: "a-b",
        build: join(mapper, right.build)
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function traverseProjection(mapper, right) {
  if (!right)
    return {
      type: "b-b",
      build: mapper
    };
  switch (right.type) {
    case "a-a":
      return {
        type: "a-a",
        build: join(map(mapper), right.build)
      };
    case "a-b":
      return {
        type: "a-b",
        build: join(map(mapper), right.build)
      };
    case "b-a":
      return {
        type: "b-a",
        build: join(mapper, right.build)
      };
    case "b-b":
      return {
        type: "b-b",
        build: join(mapper, right.build)
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function expandHex(str) {
  let charCode = parseInt(str, 16);
  return String.fromCharCode(charCode);
}
function extractPropertyKey(node) {
  if (node.type === "AccessAttribute" && !node.base)
    return node.name;
  if (node.type === "Deref" || node.type === "Map" || node.type === "Projection" || node.type === "Slice" || node.type === "Filter" || node.type === "AccessElement" || node.type === "ArrayCoerce")
    return extractPropertyKey(node.base);
  throw new GroqQueryError("Cannot determine property key for type: ".concat(node.type));
}
function validateArity(name, arity, count2) {
  if (typeof arity == "number") {
    if (count2 !== arity)
      throw new GroqQueryError("Incorrect number of arguments to function ".concat(name, "(). Expected ").concat(arity, ", got ").concat(count2, "."));
  } else if (arity && !arity(count2))
    throw new GroqQueryError("Incorrect number of arguments to function ".concat(name, "()."));
}
function argumentShouldBeSelector(namespace, functionName, argCount) {
  let functionsRequiringSelectors = ["changedAny", "changedOnly"];
  return namespace == "diff" && argCount == 2 && functionsRequiringSelectors.includes(functionName);
}
function parse2(input) {
  let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, result = parse$1(input);
  if (result.type === "error")
    throw new GroqSyntaxError(result.position);
  return new MarkProcessor(input, result.marks, options).process(EXPR_BUILDER);
}
var Path, StreamValue, RFC3339_REGEX, StaticValue, NULL_VALUE, TRUE_VALUE, FALSE_VALUE, DateTime, CHARS, CHARS_WITH_WILDCARD, EDGE_CHARS, MAX_TERM_LENGTH, TYPE_ORDER, operators, Scope, EXECUTORS, DUMMY_SCOPE, BM25k, _global, string2, array, pt, sanity, pipeFunctions, delta, diff, math, namespaces, MarkProcessor, WS, NUM, IDENT, PREC_PAIR, PREC_OR, PREC_AND, PREC_COMP, PREC_ORDER, PREC_ADD, PREC_SUB, PREC_MUL, PREC_DIV, PREC_MOD, PREC_POW, PREC_POS, PREC_NOT, PREC_NEG, ESCAPE_SEQUENCE, GroqQueryError, EXPR_BUILDER, OBJECT_BUILDER, TRAVERSE_BUILDER, SELECTOR_BUILDER, GroqSyntaxError, init__ = __esm({
  "node_modules/groq-js/dist/1.mjs"() {
    Path = class {
      constructor(pattern) {
        this.pattern = pattern, this.patternRe = pathRegExp(pattern);
      }
      matches(str) {
        return this.patternRe.test(str);
      }
      toJSON() {
        return this.pattern;
      }
    }, StreamValue = class {
      constructor(generator) {
        this.type = "stream", this.generator = generator, this.ticker = null, this.isDone = !1, this.data = [];
      }
      isArray() {
        return !0;
      }
      async get() {
        let result = [];
        for await (let value of this)
          result.push(await value.get());
        return result;
      }
      async *[Symbol.asyncIterator]() {
        let i7 = 0;
        for (; ; ) {
          for (; i7 < this.data.length; i7++)
            yield this.data[i7];
          if (this.isDone)
            return;
          await this._nextTick();
        }
      }
      _nextTick() {
        if (this.ticker)
          return this.ticker;
        let currentResolver, setupTicker = () => {
          this.ticker = new Promise((resolve) => {
            currentResolver = resolve;
          });
        }, tick = () => {
          currentResolver(), setupTicker();
        }, fetch2 = async () => {
          for await (let value of this.generator())
            this.data.push(value), tick();
          this.isDone = !0, tick();
        };
        return setupTicker(), fetch2(), this.ticker;
      }
    }, RFC3339_REGEX = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|([-+]\d{2}:\d{2}))$/;
    StaticValue = class {
      constructor(data, type) {
        this.data = data, this.type = type;
      }
      isArray() {
        return this.type === "array";
      }
      async get() {
        return this.data;
      }
      [Symbol.asyncIterator]() {
        if (Array.isArray(this.data))
          return function* (data) {
            for (let element of data)
              yield fromJS(element);
          }(this.data);
        throw new Error("Cannot iterate over: ".concat(this.type));
      }
    }, NULL_VALUE = new StaticValue(null, "null"), TRUE_VALUE = new StaticValue(!0, "boolean"), FALSE_VALUE = new StaticValue(!1, "boolean"), DateTime = class {
      constructor(date) {
        this.date = date;
      }
      static parseToValue(str) {
        let date = parseRFC3339(str);
        return date ? new StaticValue(new DateTime(date), "datetime") : NULL_VALUE;
      }
      equals(other) {
        return this.date.getTime() == other.date.getTime();
      }
      add(secs) {
        let copy = new Date(this.date.getTime());
        return copy.setTime(copy.getTime() + secs * 1e3), new DateTime(copy);
      }
      difference(other) {
        return (this.date.getTime() - other.date.getTime()) / 1e3;
      }
      compareTo(other) {
        return this.date.getTime() - other.date.getTime();
      }
      toString() {
        return formatRFC3339(this.date);
      }
      toJSON() {
        return this.toString();
      }
    };
    CHARS = /([^!@#$%^&*(),\\/?";:{}|[\]+<>\s-])+/g, CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\/?";:{}|[\]+<>\s-])+/g, EDGE_CHARS = /(\b\.+|\.+\b)/g, MAX_TERM_LENGTH = 1024;
    TYPE_ORDER = {
      datetime: 1,
      number: 2,
      string: 3,
      boolean: 4
    };
    operators = {
      "==": function(left, right) {
        return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;
      },
      "!=": function(left, right) {
        return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;
      },
      ">": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result > 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      ">=": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result >= 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      "<": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result < 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      "<=": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result <= 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      in: async function(left, right) {
        if (right.type === "path")
          return left.type !== "string" ? NULL_VALUE : right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE;
        if (right.isArray()) {
          for await (let b4 of right)
            if (isEqual(left, b4))
              return TRUE_VALUE;
          return FALSE_VALUE;
        }
        return NULL_VALUE;
      },
      match: async function(left, right) {
        let tokens = [], patterns = [];
        return await gatherText(left, (part) => {
          tokens = tokens.concat(matchTokenize(part));
        }), await gatherText(right, (part) => {
          patterns = patterns.concat(matchAnalyzePattern(part));
        }) && matchText(tokens, patterns) ? TRUE_VALUE : FALSE_VALUE;
      },
      "+": function(left, right) {
        return left.type === "datetime" && right.type === "number" ? fromDateTime(left.data.add(right.data)) : left.type === "number" && right.type === "number" ? fromNumber(left.data + right.data) : left.type === "string" && right.type === "string" ? fromString(left.data + right.data) : left.type === "object" && right.type === "object" ? fromJS({
          ...left.data,
          ...right.data
        }) : left.type === "array" && right.type === "array" ? fromJS(left.data.concat(right.data)) : left.isArray() && right.isArray() ? new StreamValue(async function* () {
          for await (let val of left)
            yield val;
          for await (let val of right)
            yield val;
        }) : NULL_VALUE;
      },
      "-": function(left, right) {
        return left.type === "datetime" && right.type === "number" ? fromDateTime(left.data.add(-right.data)) : left.type === "datetime" && right.type === "datetime" ? fromNumber(left.data.difference(right.data)) : left.type === "number" && right.type === "number" ? fromNumber(left.data - right.data) : NULL_VALUE;
      },
      "*": numericOperator((a4, b4) => a4 * b4),
      "/": numericOperator((a4, b4) => a4 / b4),
      "%": numericOperator((a4, b4) => a4 % b4),
      "**": numericOperator((a4, b4) => Math.pow(a4, b4))
    };
    Scope = class {
      constructor(params, source, value, context2, parent) {
        this.isHidden = !1, this.params = params, this.source = source, this.value = value, this.context = context2, this.parent = parent;
      }
      createNested(value) {
        return this.isHidden ? new Scope(this.params, this.source, value, this.context, this.parent) : new Scope(this.params, this.source, value, this.context, this);
      }
      createHidden(value) {
        let result = this.createNested(value);
        return result.isHidden = !0, result;
      }
    };
    EXECUTORS = {
      This(_2, scope) {
        return scope.value;
      },
      Selector() {
        throw new Error("Selectors can not be evaluated");
      },
      Everything(_2, scope) {
        return scope.source;
      },
      Parameter(_ref, scope) {
        let {
          name
        } = _ref;
        return fromJS(scope.params[name]);
      },
      Context(_ref2, scope) {
        let {
          key
        } = _ref2;
        if (key === "before" || key === "after")
          return scope.context[key] || NULL_VALUE;
        throw new Error("unknown context key: ".concat(key));
      },
      Parent(_ref3, scope) {
        let {
          n: n4
        } = _ref3, current = scope;
        for (let i7 = 0; i7 < n4; i7++) {
          if (!current.parent)
            return NULL_VALUE;
          current = current.parent;
        }
        return current.value;
      },
      OpCall(_ref4, scope, execute) {
        let {
          op,
          left,
          right
        } = _ref4, func = operators[op];
        if (!func)
          throw new Error("Unknown operator: ".concat(op));
        let leftValue = execute(left, scope), rightValue = execute(right, scope);
        return "then" in leftValue || "then" in rightValue ? (async () => func(await leftValue, await rightValue))() : func(leftValue, rightValue);
      },
      async Select(_ref5, scope, execute) {
        let {
          alternatives,
          fallback
        } = _ref5;
        for (let alt of alternatives) {
          let altCond = await execute(alt.condition, scope);
          if (altCond.type === "boolean" && altCond.data === !0)
            return execute(alt.value, scope);
        }
        return fallback ? execute(fallback, scope) : NULL_VALUE;
      },
      async InRange(_ref6, scope, execute) {
        let {
          base,
          left,
          right,
          isInclusive
        } = _ref6, value = await execute(base, scope), leftValue = await execute(left, scope), rightValue = await execute(right, scope), leftCmp = partialCompare(await value.get(), await leftValue.get());
        if (leftCmp === null)
          return NULL_VALUE;
        let rightCmp = partialCompare(await value.get(), await rightValue.get());
        return rightCmp === null ? NULL_VALUE : isInclusive ? leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE : leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      async Filter(_ref7, scope, execute) {
        let {
          base,
          expr
        } = _ref7, baseValue = await execute(base, scope);
        return baseValue.isArray() ? new StreamValue(async function* () {
          for await (let elem of baseValue) {
            let newScope = scope.createNested(elem), exprValue = await execute(expr, newScope);
            exprValue.type === "boolean" && exprValue.data === !0 && (yield elem);
          }
        }) : NULL_VALUE;
      },
      async Projection(_ref8, scope, execute) {
        let {
          base,
          expr
        } = _ref8, baseValue = await execute(base, scope);
        if (baseValue.type !== "object")
          return NULL_VALUE;
        let newScope = scope.createNested(baseValue);
        return execute(expr, newScope);
      },
      FuncCall(_ref9, scope, execute) {
        let {
          func,
          args
        } = _ref9;
        return func(args, scope, execute);
      },
      async PipeFuncCall(_ref10, scope, execute) {
        let {
          func,
          base,
          args
        } = _ref10, baseValue = await execute(base, scope);
        return func(baseValue, args, scope, execute);
      },
      async AccessAttribute(_ref11, scope, execute) {
        let {
          base,
          name
        } = _ref11, value = scope.value;
        return base && (value = await execute(base, scope)), value.type === "object" && value.data.hasOwnProperty(name) ? fromJS(value.data[name]) : NULL_VALUE;
      },
      async AccessElement(_ref12, scope, execute) {
        let {
          base,
          index
        } = _ref12, baseValue = await execute(base, scope);
        if (!baseValue.isArray())
          return NULL_VALUE;
        let data = await baseValue.get(), finalIndex = index < 0 ? index + data.length : index;
        return fromJS(data[finalIndex]);
      },
      async Slice(_ref13, scope, execute) {
        let {
          base,
          left,
          right,
          isInclusive
        } = _ref13, baseValue = await execute(base, scope);
        if (!baseValue.isArray())
          return NULL_VALUE;
        let array2 = await baseValue.get(), leftIdx = left, rightIdx = right;
        return leftIdx < 0 && (leftIdx = array2.length + leftIdx), rightIdx < 0 && (rightIdx = array2.length + rightIdx), isInclusive && rightIdx++, leftIdx < 0 && (leftIdx = 0), rightIdx < 0 && (rightIdx = 0), fromJS(array2.slice(leftIdx, rightIdx));
      },
      async Deref(_ref14, scope, execute) {
        let {
          base
        } = _ref14, value = await execute(base, scope);
        if (!scope.source.isArray() || value.type !== "object")
          return NULL_VALUE;
        let id = value.data._ref;
        if (typeof id != "string")
          return NULL_VALUE;
        for await (let doc of scope.source)
          if (doc.type === "object" && id === doc.data._id)
            return doc;
        return NULL_VALUE;
      },
      Value(_ref15) {
        let {
          value
        } = _ref15;
        return fromJS(value);
      },
      Group(_ref16, scope, execute) {
        let {
          base
        } = _ref16;
        return execute(base, scope);
      },
      async Object(_ref17, scope, execute) {
        let {
          attributes
        } = _ref17, result = {};
        for (let attr of attributes) {
          let attrType = attr.type;
          switch (attr.type) {
            case "ObjectAttributeValue": {
              let value = await execute(attr.value, scope);
              result[attr.name] = await value.get();
              break;
            }
            case "ObjectConditionalSplat": {
              let cond = await execute(attr.condition, scope);
              if (cond.type !== "boolean" || cond.data === !1)
                continue;
              let value = await execute(attr.value, scope);
              value.type === "object" && Object.assign(result, value.data);
              break;
            }
            case "ObjectSplat": {
              let value = await execute(attr.value, scope);
              value.type === "object" && Object.assign(result, value.data);
              break;
            }
            default:
              throw new Error("Unknown node type: ".concat(attrType));
          }
        }
        return fromJS(result);
      },
      Array(_ref18, scope, execute) {
        let {
          elements
        } = _ref18;
        return new StreamValue(async function* () {
          for (let element of elements) {
            let value = await execute(element.value, scope);
            if (element.isSplat) {
              if (value.isArray())
                for await (let v3 of value)
                  yield v3;
            } else
              yield value;
          }
        });
      },
      Tuple() {
        throw new Error("tuples can not be evaluated");
      },
      async Or(_ref19, scope, execute) {
        let {
          left,
          right
        } = _ref19, leftValue = await execute(left, scope), rightValue = await execute(right, scope);
        return leftValue.type === "boolean" && leftValue.data === !0 || rightValue.type === "boolean" && rightValue.data === !0 ? TRUE_VALUE : leftValue.type !== "boolean" || rightValue.type !== "boolean" ? NULL_VALUE : FALSE_VALUE;
      },
      async And(_ref20, scope, execute) {
        let {
          left,
          right
        } = _ref20, leftValue = await execute(left, scope), rightValue = await execute(right, scope);
        return leftValue.type === "boolean" && leftValue.data === !1 || rightValue.type === "boolean" && rightValue.data === !1 ? FALSE_VALUE : leftValue.type !== "boolean" || rightValue.type !== "boolean" ? NULL_VALUE : TRUE_VALUE;
      },
      async Not(_ref21, scope, execute) {
        let {
          base
        } = _ref21, value = await execute(base, scope);
        return value.type !== "boolean" ? NULL_VALUE : value.data ? FALSE_VALUE : TRUE_VALUE;
      },
      Neg(_ref22, scope, execute) {
        let {
          base
        } = _ref22;
        return promiselessApply(execute(base, scope), (value) => value.type !== "number" ? NULL_VALUE : fromNumber(-value.data));
      },
      Pos(_ref23, scope, execute) {
        let {
          base
        } = _ref23;
        return promiselessApply(execute(base, scope), (value) => value.type !== "number" ? NULL_VALUE : fromNumber(value.data));
      },
      Asc() {
        return NULL_VALUE;
      },
      Desc() {
        return NULL_VALUE;
      },
      async ArrayCoerce(_ref24, scope, execute) {
        let {
          base
        } = _ref24, value = await execute(base, scope);
        return value.isArray() ? value : NULL_VALUE;
      },
      async Map(_ref25, scope, execute) {
        let {
          base,
          expr
        } = _ref25, value = await execute(base, scope);
        return value.isArray() ? new StreamValue(async function* () {
          for await (let elem of value) {
            let newScope = scope.createHidden(elem);
            yield await execute(expr, newScope);
          }
        }) : NULL_VALUE;
      },
      async FlatMap(_ref26, scope, execute) {
        let {
          base,
          expr
        } = _ref26, value = await execute(base, scope);
        return value.isArray() ? new StreamValue(async function* () {
          for await (let elem of value) {
            let newScope = scope.createHidden(elem), innerValue = await execute(expr, newScope);
            if (innerValue.isArray())
              for await (let inner of innerValue)
                yield inner;
            else
              yield innerValue;
          }
        }) : NULL_VALUE;
      }
    };
    DUMMY_SCOPE = new Scope({}, NULL_VALUE, NULL_VALUE, {
      timestamp: /* @__PURE__ */ new Date(0),
      identity: "me",
      before: null,
      after: null
    }, null);
    BM25k = 1.2;
    _global = {};
    _global.anywhere = async function() {
      throw new Error("not implemented");
    };
    _global.anywhere.arity = 1;
    _global.coalesce = async function(args, scope, execute) {
      for (let arg of args) {
        let value = await execute(arg, scope);
        if (value.type !== "null")
          return value;
      }
      return NULL_VALUE;
    };
    _global.count = async function(args, scope, execute) {
      let inner = await execute(args[0], scope);
      if (!inner.isArray())
        return NULL_VALUE;
      let num = 0;
      for await (let _2 of inner)
        num++;
      return fromNumber(num);
    };
    _global.count.arity = 1;
    _global.dateTime = async function(args, scope, execute) {
      let val = await execute(args[0], scope);
      return val.type === "datetime" ? val : val.type !== "string" ? NULL_VALUE : DateTime.parseToValue(val.data);
    };
    _global.dateTime.arity = 1;
    _global.defined = async function(args, scope, execute) {
      return (await execute(args[0], scope)).type === "null" ? FALSE_VALUE : TRUE_VALUE;
    };
    _global.defined.arity = 1;
    _global.identity = async function(args, scope) {
      return fromString(scope.context.identity);
    };
    _global.identity.arity = 0;
    _global.length = async function(args, scope, execute) {
      let inner = await execute(args[0], scope);
      if (inner.type === "string")
        return fromNumber(countUTF8(inner.data));
      if (inner.isArray()) {
        let num = 0;
        for await (let _2 of inner)
          num++;
        return fromNumber(num);
      }
      return NULL_VALUE;
    };
    _global.length.arity = 1;
    _global.path = async function(args, scope, execute) {
      let inner = await execute(args[0], scope);
      return inner.type !== "string" ? NULL_VALUE : fromPath(new Path(inner.data));
    };
    _global.path.arity = 1;
    _global.string = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      switch (value.type) {
        case "number":
        case "string":
        case "boolean":
        case "datetime":
          return fromString("".concat(value.data));
        default:
          return NULL_VALUE;
      }
    };
    _global.string.arity = 1;
    _global.references = async function(args, scope, execute) {
      let pathSet = /* @__PURE__ */ new Set();
      for (let arg of args) {
        let path2 = await execute(arg, scope);
        if (path2.type === "string")
          pathSet.add(path2.data);
        else if (path2.isArray())
          for await (let elem of path2)
            elem.type === "string" && pathSet.add(elem.data);
      }
      if (pathSet.size === 0)
        return FALSE_VALUE;
      let scopeValue = await scope.value.get();
      return hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE;
    };
    _global.references.arity = (c5) => c5 >= 1;
    _global.round = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      if (value.type !== "number")
        return NULL_VALUE;
      let num = value.data, prec = 0;
      if (args.length === 2) {
        let precValue = await execute(args[1], scope);
        if (precValue.type !== "number" || precValue.data < 0 || !Number.isInteger(precValue.data))
          return NULL_VALUE;
        prec = precValue.data;
      }
      return prec === 0 ? num < 0 ? fromNumber(-Math.round(-num)) : fromNumber(Math.round(num)) : fromNumber(Number(num.toFixed(prec)));
    };
    _global.round.arity = (count2) => count2 >= 1 && count2 <= 2;
    _global.now = async function(args, scope) {
      return fromString(scope.context.timestamp.toISOString());
    };
    _global.now.arity = 0;
    _global.boost = async function() {
      throw new Error("unexpected boost call");
    };
    _global.boost.arity = 2;
    string2 = {};
    string2.lower = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      return value.type !== "string" ? NULL_VALUE : fromString(value.data.toLowerCase());
    };
    string2.lower.arity = 1;
    string2.upper = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      return value.type !== "string" ? NULL_VALUE : fromString(value.data.toUpperCase());
    };
    string2.upper.arity = 1;
    string2.split = async function(args, scope, execute) {
      let str = await execute(args[0], scope);
      if (str.type !== "string")
        return NULL_VALUE;
      let sep = await execute(args[1], scope);
      return sep.type !== "string" ? NULL_VALUE : str.data.length === 0 ? fromJS([]) : sep.data.length === 0 ? fromJS(Array.from(str.data)) : fromJS(str.data.split(sep.data));
    };
    string2.split.arity = 2;
    _global.lower = string2.lower;
    _global.upper = string2.upper;
    string2.startsWith = async function(args, scope, execute) {
      let str = await execute(args[0], scope);
      if (str.type !== "string")
        return NULL_VALUE;
      let prefix2 = await execute(args[1], scope);
      return prefix2.type !== "string" ? NULL_VALUE : str.data.startsWith(prefix2.data) ? TRUE_VALUE : FALSE_VALUE;
    };
    string2.startsWith.arity = 2;
    array = {};
    array.join = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let sep = await execute(args[1], scope);
      if (sep.type !== "string")
        return NULL_VALUE;
      let buf = "", needSep = !1;
      for await (let elem of arr) {
        switch (needSep && (buf += sep.data), elem.type) {
          case "number":
          case "string":
          case "boolean":
          case "datetime":
            buf += "".concat(elem.data);
            break;
          default:
            return NULL_VALUE;
        }
        needSep = !0;
      }
      return fromJS(buf);
    };
    array.join.arity = 2;
    array.compact = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      return arr.isArray() ? new StreamValue(async function* () {
        for await (let elem of arr)
          elem.type !== "null" && (yield elem);
      }) : NULL_VALUE;
    };
    array.compact.arity = 1;
    array.unique = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      return value.isArray() ? new StreamValue(async function* () {
        let added = /* @__PURE__ */ new Set();
        for await (let iter of value)
          switch (iter.type) {
            case "number":
            case "string":
            case "boolean":
            case "datetime":
              added.has(iter.data) || (added.add(iter.data), yield iter);
              break;
            default:
              yield iter;
          }
      }) : NULL_VALUE;
    };
    array.unique.arity = 1;
    pt = {};
    pt.text = async function(args, scope, execute) {
      let value = await execute(args[0], scope), text2 = await portableTextContent(value);
      return text2 === null ? NULL_VALUE : fromString(text2);
    };
    pt.text.arity = 1;
    sanity = {};
    sanity.projectId = async function(args, scope) {
      return scope.context.sanity ? fromString(scope.context.sanity.projectId) : NULL_VALUE;
    };
    sanity.dataset = async function(args, scope) {
      return scope.context.sanity ? fromString(scope.context.sanity.dataset) : NULL_VALUE;
    };
    pipeFunctions = {};
    pipeFunctions.order = async function(base, args, scope, execute) {
      if (await !0, !base.isArray())
        return NULL_VALUE;
      let mappers = [], directions = [], n4 = 0;
      for (let mapper of args) {
        let direction = "asc";
        mapper.type === "Desc" ? (direction = "desc", mapper = mapper.base) : mapper.type === "Asc" && (mapper = mapper.base), mappers.push(mapper), directions.push(direction), n4++;
      }
      let aux = [], idx = 0;
      for await (let value of base) {
        let newScope = scope.createNested(value), tuple = [await value.get(), idx];
        for (let i7 = 0; i7 < n4; i7++) {
          let result = await execute(mappers[i7], newScope);
          tuple.push(await result.get());
        }
        aux.push(tuple), idx++;
      }
      return aux.sort((aTuple, bTuple) => {
        for (let i7 = 0; i7 < n4; i7++) {
          let c5 = totalCompare(aTuple[i7 + 2], bTuple[i7 + 2]);
          if (directions[i7] === "desc" && (c5 = -c5), c5 !== 0)
            return c5;
        }
        return aTuple[1] - bTuple[1];
      }), fromJS(aux.map((v3) => v3[0]));
    };
    pipeFunctions.order.arity = (count2) => count2 >= 1;
    pipeFunctions.score = async function(base, args, scope, execute) {
      if (!base.isArray())
        return NULL_VALUE;
      let unknown = [], scored = [];
      for await (let value of base) {
        if (value.type !== "object") {
          unknown.push(await value.get());
          continue;
        }
        let newScope = scope.createNested(value), valueScore = typeof value.data._score == "number" ? value.data._score : 0;
        for (let arg of args)
          valueScore += await evaluateScore(arg, newScope, execute);
        let newObject = Object.assign({}, value.data, {
          _score: valueScore
        });
        scored.push(newObject);
      }
      return scored.sort((a4, b4) => b4._score - a4._score), fromJS(scored);
    };
    pipeFunctions.score.arity = (count2) => count2 >= 1;
    delta = {};
    delta.operation = async function(args, scope) {
      let hasBefore = scope.context.before !== null, hasAfter = scope.context.after !== null;
      return hasBefore && hasAfter ? fromString("update") : hasAfter ? fromString("create") : hasBefore ? fromString("delete") : NULL_VALUE;
    };
    delta.changedAny = () => {
      throw new Error("not implemented");
    };
    delta.changedAny.arity = 1;
    delta.changedAny.mode = "delta";
    delta.changedOnly = () => {
      throw new Error("not implemented");
    };
    delta.changedOnly.arity = 1;
    delta.changedOnly.mode = "delta";
    diff = {};
    diff.changedAny = () => {
      throw new Error("not implemented");
    };
    diff.changedAny.arity = 3;
    diff.changedOnly = () => {
      throw new Error("not implemented");
    };
    diff.changedOnly.arity = 3;
    math = {};
    math.min = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          (n4 === void 0 || elem.data < n4) && (n4 = elem.data);
        }
      return fromJS(n4);
    };
    math.min.arity = 1;
    math.max = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          (n4 === void 0 || elem.data > n4) && (n4 = elem.data);
        }
      return fromJS(n4);
    };
    math.max.arity = 1;
    math.sum = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4 = 0;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          n4 += elem.data;
        }
      return fromJS(n4);
    };
    math.sum.arity = 1;
    math.avg = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4 = 0, c5 = 0;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          n4 += elem.data, c5++;
        }
      return c5 === 0 ? NULL_VALUE : fromJS(n4 / c5);
    };
    math.avg.arity = 1;
    namespaces = {
      global: _global,
      string: string2,
      array,
      pt,
      delta,
      diff,
      sanity,
      math
    }, MarkProcessor = class {
      constructor(string3, marks, parseOptions) {
        this.allowBoost = !1, this.string = string3, this.marks = marks, this.index = 0, this.parseOptions = parseOptions;
      }
      hasMark() {
        let pos = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        return this.index + pos < this.marks.length;
      }
      getMark() {
        let pos = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        return this.marks[this.index + pos];
      }
      shift() {
        this.index += 1;
      }
      process(visitor) {
        let mark = this.marks[this.index];
        this.shift();
        let func = visitor[mark.name];
        if (!func)
          throw new Error("Unknown handler: ".concat(mark.name));
        return func.call(visitor, this, mark);
      }
      processString() {
        return this.shift(), this.processStringEnd();
      }
      processStringEnd() {
        let prev = this.marks[this.index - 1], curr = this.marks[this.index];
        return this.shift(), this.string.slice(prev.position, curr.position);
      }
      slice(len) {
        let pos = this.marks[this.index].position;
        return this.string.slice(pos, pos + len);
      }
    }, WS = /^([\t\n\v\f\r \u0085\u00A0]|(\/\/[^\n]*\n))+/, NUM = /^\d+/, IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/, PREC_PAIR = 1, PREC_OR = 2, PREC_AND = 3, PREC_COMP = 4, PREC_ORDER = 4, PREC_ADD = 6, PREC_SUB = 6, PREC_MUL = 7, PREC_DIV = 7, PREC_MOD = 7, PREC_POW = 8, PREC_POS = 10, PREC_NOT = 10, PREC_NEG = 8;
    ESCAPE_SEQUENCE = {
      "'": "'",
      '"': '"',
      "\\": "\\",
      "/": "/",
      b: "\b",
      f: "\f",
      n: `
`,
      r: "\r",
      t: "	"
    };
    GroqQueryError = class extends Error {
      constructor() {
        super(...arguments), this.name = "GroqQueryError";
      }
    }, EXPR_BUILDER = {
      group(p5) {
        return {
          type: "Group",
          base: p5.process(EXPR_BUILDER)
        };
      },
      everything() {
        return {
          type: "Everything"
        };
      },
      this() {
        return {
          type: "This"
        };
      },
      parent() {
        return {
          type: "Parent",
          n: 1
        };
      },
      dblparent(p5) {
        return {
          type: "Parent",
          n: p5.process(EXPR_BUILDER).n + 1
        };
      },
      traverse(p5) {
        let base = p5.process(EXPR_BUILDER), traversalList = [];
        for (; p5.getMark().name !== "traversal_end"; )
          traversalList.push(p5.process(TRAVERSE_BUILDER));
        p5.shift();
        let traversal = null;
        for (let i7 = traversalList.length - 1; i7 >= 0; i7--)
          traversal = traversalList[i7](traversal);
        if ((base.type === "Everything" || base.type === "Array" || base.type === "PipeFuncCall") && (traversal = traverseArray((val) => val, traversal)), traversal === null)
          throw new Error("BUG: unexpected empty traversal");
        return traversal.build(base);
      },
      this_attr(p5) {
        let name = p5.processString();
        return name === "null" ? {
          type: "Value",
          value: null
        } : name === "true" ? {
          type: "Value",
          value: !0
        } : name === "false" ? {
          type: "Value",
          value: !1
        } : {
          type: "AccessAttribute",
          name
        };
      },
      neg(p5) {
        return {
          type: "Neg",
          base: p5.process(EXPR_BUILDER)
        };
      },
      pos(p5) {
        return {
          type: "Pos",
          base: p5.process(EXPR_BUILDER)
        };
      },
      add(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "+",
          left,
          right
        };
      },
      sub(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "-",
          left,
          right
        };
      },
      mul(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "*",
          left,
          right
        };
      },
      div(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "/",
          left,
          right
        };
      },
      mod(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "%",
          left,
          right
        };
      },
      pow(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "**",
          left,
          right
        };
      },
      comp(p5) {
        let left = p5.process(EXPR_BUILDER), op = p5.processString(), right = p5.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op,
          left,
          right
        };
      },
      in_range(p5) {
        let base = p5.process(EXPR_BUILDER), isInclusive = p5.getMark().name === "inc_range";
        p5.shift();
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "InRange",
          base,
          left,
          right,
          isInclusive
        };
      },
      str(p5) {
        let value = "";
        loop:
          for (; p5.hasMark(); ) {
            let mark = p5.getMark();
            switch (mark.name) {
              case "str_end":
                value += p5.processStringEnd();
                break loop;
              case "str_pause":
                value += p5.processStringEnd();
                break;
              case "str_start":
                p5.shift();
                break;
              case "single_escape": {
                let char = p5.slice(1);
                p5.shift(), value += ESCAPE_SEQUENCE[char];
                break;
              }
              case "unicode_hex":
                p5.shift(), value += expandHex(p5.processStringEnd());
                break;
              default:
                throw new Error("unexpected mark: ".concat(mark.name));
            }
          }
        return {
          type: "Value",
          value
        };
      },
      integer(p5) {
        let strValue = p5.processStringEnd();
        return {
          type: "Value",
          value: Number(strValue)
        };
      },
      float(p5) {
        let strValue = p5.processStringEnd();
        return {
          type: "Value",
          value: Number(strValue)
        };
      },
      sci(p5) {
        let strValue = p5.processStringEnd();
        return {
          type: "Value",
          value: Number(strValue)
        };
      },
      object(p5) {
        let attributes = [];
        for (; p5.getMark().name !== "object_end"; )
          attributes.push(p5.process(OBJECT_BUILDER));
        return p5.shift(), {
          type: "Object",
          attributes
        };
      },
      array(p5) {
        let elements = [];
        for (; p5.getMark().name !== "array_end"; ) {
          let isSplat2 = !1;
          p5.getMark().name === "array_splat" && (isSplat2 = !0, p5.shift());
          let value = p5.process(EXPR_BUILDER);
          elements.push({
            type: "ArrayElement",
            value,
            isSplat: isSplat2
          });
        }
        return p5.shift(), {
          type: "Array",
          elements
        };
      },
      tuple(p5) {
        let members = [];
        for (; p5.getMark().name !== "tuple_end"; )
          members.push(p5.process(EXPR_BUILDER));
        return p5.shift(), {
          type: "Tuple",
          members
        };
      },
      func_call(p5) {
        let namespace = "global";
        p5.getMark().name === "namespace" && (p5.shift(), namespace = p5.processString());
        let name = p5.processString();
        if (namespace === "global" && name === "select") {
          let result = {
            type: "Select",
            alternatives: []
          };
          for (; p5.getMark().name !== "func_args_end"; )
            if (p5.getMark().name === "pair") {
              if (result.fallback)
                throw new GroqQueryError("unexpected argument to select()");
              p5.shift();
              let condition = p5.process(EXPR_BUILDER), value = p5.process(EXPR_BUILDER);
              result.alternatives.push({
                type: "SelectAlternative",
                condition,
                value
              });
            } else {
              if (result.fallback)
                throw new GroqQueryError("unexpected argument to select()");
              let value = p5.process(EXPR_BUILDER);
              result.fallback = value;
            }
          return p5.shift(), result;
        }
        let args = [];
        for (; p5.getMark().name !== "func_args_end"; )
          argumentShouldBeSelector(namespace, name, args.length) ? (p5.process(SELECTOR_BUILDER), args.push({
            type: "Selector"
          })) : args.push(p5.process(EXPR_BUILDER));
        if (p5.shift(), namespace === "global" && (name === "before" || name === "after") && p5.parseOptions.mode === "delta")
          return {
            type: "Context",
            key: name
          };
        if (namespace === "global" && name === "boost" && !p5.allowBoost)
          throw new GroqQueryError("unexpected boost");
        let funcs = namespaces[namespace];
        if (!funcs)
          throw new GroqQueryError("Undefined namespace: ".concat(namespace));
        let func = funcs[name];
        if (!func)
          throw new GroqQueryError("Undefined function: ".concat(name));
        if (func.arity !== void 0 && validateArity(name, func.arity, args.length), func.mode !== void 0 && func.mode !== p5.parseOptions.mode)
          throw new GroqQueryError("Undefined function: ".concat(name));
        return {
          type: "FuncCall",
          func,
          name,
          args
        };
      },
      pipecall(p5) {
        let base = p5.process(EXPR_BUILDER);
        p5.shift();
        let namespace = "global";
        if (p5.getMark().name === "namespace" && (p5.shift(), namespace = p5.processString()), namespace !== "global")
          throw new GroqQueryError("Undefined namespace: ".concat(namespace));
        let name = p5.processString(), args = [], oldAllowBoost = p5.allowBoost;
        for (name === "score" && (p5.allowBoost = !0); ; ) {
          let markName = p5.getMark().name;
          if (markName === "func_args_end")
            break;
          if (name === "order") {
            if (markName === "asc") {
              p5.shift(), args.push({
                type: "Asc",
                base: p5.process(EXPR_BUILDER)
              });
              continue;
            } else if (markName === "desc") {
              p5.shift(), args.push({
                type: "Desc",
                base: p5.process(EXPR_BUILDER)
              });
              continue;
            }
          }
          args.push(p5.process(EXPR_BUILDER));
        }
        p5.shift(), p5.allowBoost = oldAllowBoost;
        let func = pipeFunctions[name];
        if (!func)
          throw new GroqQueryError("Undefined pipe function: ".concat(name));
        return func.arity && validateArity(name, func.arity, args.length), {
          type: "PipeFuncCall",
          func,
          base,
          name,
          args
        };
      },
      pair(p5) {
        throw new GroqQueryError("unexpected =>");
      },
      and(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "And",
          left,
          right
        };
      },
      or(p5) {
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER);
        return {
          type: "Or",
          left,
          right
        };
      },
      not(p5) {
        return {
          type: "Not",
          base: p5.process(EXPR_BUILDER)
        };
      },
      asc(p5) {
        throw new GroqQueryError("unexpected asc");
      },
      desc(p5) {
        throw new GroqQueryError("unexpected desc");
      },
      param(p5) {
        let name = p5.processString();
        return p5.parseOptions.params && p5.parseOptions.params.hasOwnProperty(name) ? {
          type: "Value",
          value: p5.parseOptions.params[name]
        } : {
          type: "Parameter",
          name
        };
      }
    }, OBJECT_BUILDER = {
      object_expr(p5) {
        if (p5.getMark().name === "pair") {
          p5.shift();
          let condition = p5.process(EXPR_BUILDER), value2 = p5.process(EXPR_BUILDER);
          return {
            type: "ObjectConditionalSplat",
            condition,
            value: value2
          };
        }
        let value = p5.process(EXPR_BUILDER);
        return {
          type: "ObjectAttributeValue",
          name: extractPropertyKey(value),
          value
        };
      },
      object_pair(p5) {
        let name = p5.process(EXPR_BUILDER);
        if (name.type !== "Value")
          throw new Error("name must be string");
        let value = p5.process(EXPR_BUILDER);
        return {
          type: "ObjectAttributeValue",
          name: name.value,
          value
        };
      },
      object_splat(p5) {
        return {
          type: "ObjectSplat",
          value: p5.process(EXPR_BUILDER)
        };
      },
      object_splat_this() {
        return {
          type: "ObjectSplat",
          value: {
            type: "This"
          }
        };
      }
    }, TRAVERSE_BUILDER = {
      square_bracket(p5) {
        let expr = p5.process(EXPR_BUILDER), value = tryConstantEvaluate(expr);
        return value && value.type === "number" ? (right) => traverseElement((base) => ({
          type: "AccessElement",
          base,
          index: value.data
        }), right) : value && value.type === "string" ? (right) => traversePlain((base) => ({
          type: "AccessAttribute",
          base,
          name: value.data
        }), right) : (right) => traverseArray((base) => ({
          type: "Filter",
          base,
          expr
        }), right);
      },
      slice(p5) {
        let isInclusive = p5.getMark().name === "inc_range";
        p5.shift();
        let left = p5.process(EXPR_BUILDER), right = p5.process(EXPR_BUILDER), leftValue = tryConstantEvaluate(left), rightValue = tryConstantEvaluate(right);
        if (!leftValue || !rightValue || leftValue.type !== "number" || rightValue.type !== "number")
          throw new GroqQueryError("slicing must use constant numbers");
        return (rhs) => traverseArray((base) => ({
          type: "Slice",
          base,
          left: leftValue.data,
          right: rightValue.data,
          isInclusive
        }), rhs);
      },
      projection(p5) {
        let obj = p5.process(EXPR_BUILDER);
        return (right) => traverseProjection((base) => ({
          type: "Projection",
          base,
          expr: obj
        }), right);
      },
      attr_access(p5) {
        let name = p5.processString();
        return (right) => traversePlain((base) => ({
          type: "AccessAttribute",
          base,
          name
        }), right);
      },
      deref(p5) {
        let attr = null;
        p5.getMark().name === "deref_attr" && (p5.shift(), attr = p5.processString());
        let wrap = (base) => attr ? {
          type: "AccessAttribute",
          base,
          name: attr
        } : base;
        return (right) => traversePlain((base) => wrap({
          type: "Deref",
          base
        }), right);
      },
      array_postfix(p5) {
        return (right) => traverseArray((base) => ({
          type: "ArrayCoerce",
          base
        }), right);
      }
    }, SELECTOR_BUILDER = {
      group(p5) {
        return p5.process(SELECTOR_BUILDER), null;
      },
      everything() {
        throw new Error("Invalid selector syntax");
      },
      this() {
        throw new Error("Invalid selector syntax");
      },
      parent() {
        throw new Error("Invalid selector syntax");
      },
      dblparent(p5) {
        throw new Error("Invalid selector syntax");
      },
      traverse(p5) {
        for (p5.process(SELECTOR_BUILDER); p5.getMark().name !== "traversal_end"; )
          p5.process(TRAVERSE_BUILDER);
        return p5.shift(), null;
      },
      this_attr(p5) {
        return p5.processString(), null;
      },
      neg(p5) {
        throw new Error("Invalid selector syntax");
      },
      pos(p5) {
        throw new Error("Invalid selector syntax");
      },
      add(p5) {
        throw new Error("Invalid selector syntax");
      },
      sub(p5) {
        throw new Error("Invalid selector syntax");
      },
      mul(p5) {
        throw new Error("Invalid selector syntax");
      },
      div(p5) {
        throw new Error("Invalid selector syntax");
      },
      mod(p5) {
        throw new Error("Invalid selector syntax");
      },
      pow(p5) {
        throw new Error("Invalid selector syntax");
      },
      comp(p5) {
        throw new Error("Invalid selector syntax");
      },
      in_range(p5) {
        throw new Error("Invalid selector syntax");
      },
      str(p5) {
        throw new Error("Invalid selector syntax");
      },
      integer(p5) {
        throw new Error("Invalid selector syntax");
      },
      float(p5) {
        throw new Error("Invalid selector syntax");
      },
      sci(p5) {
        throw new Error("Invalid selector syntax");
      },
      object(p5) {
        throw new Error("Invalid selector syntax");
      },
      array(p5) {
        throw new Error("Invalid selector syntax");
      },
      tuple(p5) {
        throw new Error("Invalid selector syntax");
      },
      func_call(p5, mark) {
        let func = EXPR_BUILDER.func_call(p5, mark);
        if (func.name === "anywhere" && func.args.length === 1)
          return null;
        throw new Error("Invalid selector syntax");
      },
      pipecall(p5) {
        throw new Error("Invalid selector syntax");
      },
      pair(p5) {
        throw new Error("Invalid selector syntax");
      },
      and(p5) {
        throw new Error("Invalid selector syntax");
      },
      or(p5) {
        throw new Error("Invalid selector syntax");
      },
      not(p5) {
        throw new Error("Invalid selector syntax");
      },
      asc(p5) {
        throw new Error("Invalid selector syntax");
      },
      desc(p5) {
        throw new Error("Invalid selector syntax");
      },
      param(p5) {
        throw new Error("Invalid selector syntax");
      }
    };
    GroqSyntaxError = class extends Error {
      constructor(position) {
        super("Syntax error in GROQ query at position ".concat(position)), this.name = "GroqSyntaxError", this.position = position;
      }
    };
  }
});

// node_modules/groq-js/dist/index.mjs
var init_dist3 = __esm({
  "node_modules/groq-js/dist/index.mjs"() {
    init__();
  }
});

// node_modules/mendoza/lib/esm/internal-patcher.js
var OPS, Patcher, init_internal_patcher = __esm({
  "node_modules/mendoza/lib/esm/internal-patcher.js"() {
    OPS = [
      "Value",
      "Copy",
      "Blank",
      "ReturnIntoArray",
      "ReturnIntoObject",
      "ReturnIntoObjectSameKey",
      "PushField",
      "PushElement",
      "PushParent",
      "Pop",
      "PushFieldCopy",
      "PushFieldBlank",
      "PushElementCopy",
      "PushElementBlank",
      "ReturnIntoObjectPop",
      "ReturnIntoObjectSameKeyPop",
      "ReturnIntoArrayPop",
      "ObjectSetFieldValue",
      "ObjectCopyField",
      "ObjectDeleteField",
      "ArrayAppendValue",
      "ArrayAppendSlice",
      "StringAppendString",
      "StringAppendSlice"
    ], Patcher = function() {
      function Patcher2(model, root, patch) {
        this.i = 0, this.inputStack = [], this.outputStack = [], this.model = model, this.root = root, this.patch = patch;
      }
      return Patcher2.prototype.read = function() {
        return this.patch[this.i++];
      }, Patcher2.prototype.process = function() {
        for (this.inputStack.push({ value: this.root }), this.outputStack.push({ value: this.root }); this.i < this.patch.length; ) {
          var opcode = this.read(), op = OPS[opcode];
          if (!op)
            throw new Error("Unknown opcode: " + opcode);
          var processor = "process" + op;
          this[processor].apply(this);
        }
        var entry2 = this.outputStack.pop();
        return this.finalizeOutput(entry2);
      }, Patcher2.prototype.inputEntry = function() {
        return this.inputStack[this.inputStack.length - 1];
      }, Patcher2.prototype.inputKey = function(entry2, idx) {
        return entry2.keys || (entry2.keys = this.model.objectGetKeys(entry2.value).sort()), entry2.keys[idx];
      }, Patcher2.prototype.outputEntry = function() {
        return this.outputStack[this.outputStack.length - 1];
      }, Patcher2.prototype.outputArray = function() {
        var entry2 = this.outputEntry();
        return entry2.writeValue || (entry2.writeValue = this.model.copyArray(entry2.value)), entry2.writeValue;
      }, Patcher2.prototype.outputObject = function() {
        var entry2 = this.outputEntry();
        return entry2.writeValue || (entry2.writeValue = this.model.copyObject(entry2.value)), entry2.writeValue;
      }, Patcher2.prototype.outputString = function() {
        var entry2 = this.outputEntry();
        return entry2.writeValue || (entry2.writeValue = this.model.copyString(entry2.value)), entry2.writeValue;
      }, Patcher2.prototype.finalizeOutput = function(entry2) {
        return entry2.writeValue ? this.model.finalize(entry2.writeValue) : entry2.value;
      }, Patcher2.prototype.processValue = function() {
        var value = this.model.wrap(this.read());
        this.outputStack.push({ value });
      }, Patcher2.prototype.processCopy = function() {
        var input = this.inputEntry();
        this.outputStack.push({ value: input.value });
      }, Patcher2.prototype.processBlank = function() {
        this.outputStack.push({ value: null });
      }, Patcher2.prototype.processReturnIntoArray = function() {
        var entry2 = this.outputStack.pop(), result = this.finalizeOutput(entry2), arr = this.outputArray();
        this.model.arrayAppendValue(arr, result);
      }, Patcher2.prototype.processReturnIntoObject = function() {
        var key = this.read(), entry2 = this.outputStack.pop(), result = this.finalizeOutput(entry2);
        result = this.model.markChanged(result);
        var obj = this.outputObject();
        this.model.objectSetField(obj, key, result);
      }, Patcher2.prototype.processReturnIntoObjectSameKey = function() {
        var input = this.inputEntry(), entry2 = this.outputStack.pop(), result = this.finalizeOutput(entry2), obj = this.outputObject();
        this.model.objectSetField(obj, input.key, result);
      }, Patcher2.prototype.processPushField = function() {
        var idx = this.read(), entry2 = this.inputEntry(), key = this.inputKey(entry2, idx), value = this.model.objectGetField(entry2.value, key);
        this.inputStack.push({ value, key });
      }, Patcher2.prototype.processPushElement = function() {
        var idx = this.read(), entry2 = this.inputEntry(), value = this.model.arrayGetElement(entry2.value, idx);
        this.inputStack.push({ value });
      }, Patcher2.prototype.processPop = function() {
        this.inputStack.pop();
      }, Patcher2.prototype.processPushFieldCopy = function() {
        this.processPushField(), this.processCopy();
      }, Patcher2.prototype.processPushFieldBlank = function() {
        this.processPushField(), this.processBlank();
      }, Patcher2.prototype.processPushElementCopy = function() {
        this.processPushElement(), this.processCopy();
      }, Patcher2.prototype.processPushElementBlank = function() {
        this.processPushElement(), this.processBlank();
      }, Patcher2.prototype.processReturnIntoObjectPop = function() {
        this.processReturnIntoObject(), this.processPop();
      }, Patcher2.prototype.processReturnIntoObjectSameKeyPop = function() {
        this.processReturnIntoObjectSameKey(), this.processPop();
      }, Patcher2.prototype.processReturnIntoArrayPop = function() {
        this.processReturnIntoArray(), this.processPop();
      }, Patcher2.prototype.processObjectSetFieldValue = function() {
        this.processValue(), this.processReturnIntoObject();
      }, Patcher2.prototype.processObjectCopyField = function() {
        this.processPushField(), this.processCopy(), this.processReturnIntoObjectSameKey(), this.processPop();
      }, Patcher2.prototype.processObjectDeleteField = function() {
        var idx = this.read(), entry2 = this.inputEntry(), key = this.inputKey(entry2, idx), obj = this.outputObject();
        this.model.objectDeleteField(obj, key);
      }, Patcher2.prototype.processArrayAppendValue = function() {
        var value = this.model.wrap(this.read()), arr = this.outputArray();
        this.model.arrayAppendValue(arr, value);
      }, Patcher2.prototype.processArrayAppendSlice = function() {
        var left = this.read(), right = this.read(), str = this.outputArray(), val = this.inputEntry().value;
        this.model.arrayAppendSlice(str, val, left, right);
      }, Patcher2.prototype.processStringAppendString = function() {
        var value = this.model.wrap(this.read()), str = this.outputString();
        this.model.stringAppendValue(str, value);
      }, Patcher2.prototype.processStringAppendSlice = function() {
        var left = this.read(), right = this.read(), str = this.outputString(), val = this.inputEntry().value;
        this.model.stringAppendSlice(str, val, left, right);
      }, Patcher2;
    }();
  }
});

// node_modules/mendoza/lib/esm/utf8.js
function utf8charSize(code) {
  return code >> 16 ? 4 : code >> 11 ? 3 : code >> 7 ? 2 : 1;
}
function utf8resolveIndex(str, idx, start) {
  start === void 0 && (start = 0);
  var byteCount = start, ucsIdx = 0;
  for (ucsIdx = start; byteCount < idx; ucsIdx++) {
    var code = str.codePointAt(ucsIdx), size = utf8charSize(code);
    size === 4 && ucsIdx++, byteCount += size;
  }
  return ucsIdx;
}
var init_utf8 = __esm({
  "node_modules/mendoza/lib/esm/utf8.js"() {
  }
});

// node_modules/mendoza/lib/esm/simple-patcher.js
function applyPatch(left, patch) {
  var root = left, patcher = new Patcher(Model, root, patch);
  return patcher.process();
}
var Model, init_simple_patcher = __esm({
  "node_modules/mendoza/lib/esm/simple-patcher.js"() {
    init_internal_patcher();
    init_utf8();
    Model = {
      wrap: function(data) {
        return data;
      },
      finalize: function(b4) {
        return Array.isArray(b4) ? b4 : b4.data;
      },
      markChanged: function(value) {
        return value;
      },
      objectGetKeys: function(value) {
        return Object.keys(value);
      },
      objectGetField: function(value, key) {
        return value[key];
      },
      arrayGetElement: function(value, idx) {
        return value[idx];
      },
      copyObject: function(value) {
        var res = {
          type: "object",
          data: {}
        };
        if (value !== null)
          for (var _i = 0, _a2 = Object.entries(value); _i < _a2.length; _i++) {
            var _b = _a2[_i], key = _b[0], val = _b[1];
            res.data[key] = val;
          }
        return res;
      },
      copyArray: function(value) {
        return value === null ? [] : value.slice();
      },
      copyString: function(value) {
        return {
          type: "string",
          data: value === null ? "" : value
        };
      },
      objectSetField: function(target, key, value) {
        target.data[key] = value;
      },
      objectDeleteField: function(target, key) {
        delete target.data[key];
      },
      arrayAppendValue: function(target, value) {
        target.push(value);
      },
      arrayAppendSlice: function(target, source, left, right) {
        target.push.apply(target, source.slice(left, right));
      },
      stringAppendSlice: function(target, source, left, right) {
        var sourceString = source, leftPos = utf8resolveIndex(sourceString, left), rightPos = utf8resolveIndex(sourceString, right, leftPos);
        target.data += sourceString.slice(leftPos, rightPos);
      },
      stringAppendValue: function(target, value) {
        target.data += value;
      }
    };
  }
});

// node_modules/mendoza/lib/esm/index.js
var init_esm2 = __esm({
  "node_modules/mendoza/lib/esm/index.js"() {
    init_simple_patcher();
  }
});

// node_modules/@sanity/groq-store/dist/index.browser.mjs
var index_browser_exports = {};
__export(index_browser_exports, {
  groq: () => groq,
  groqStore: () => groqStore
});
function _taggedTemplateLiteral(strings, raw) {
  return raw || (raw = strings.slice(0)), Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function listen(EventSourceImpl, config2, handlers) {
  let {
    projectId: projectId2,
    dataset: dataset2,
    token
  } = config2, headers = token ? {
    Authorization: "Bearer ".concat(token)
  } : void 0, url = "https://".concat(projectId2, ".api.sanity.io/v1/data/listen/").concat(dataset2, "?query=*&effectFormat=mendoza"), es = new EventSourceImpl(url, {
    withCredentials: !0,
    headers
  });
  return addEventSourceListener(es, "welcome", handlers.open), addEventSourceListener(es, "mutation", getMutationParser(handlers.next)), addEventSourceListener(es, "channelError", (msg) => {
    es.close();
    let data;
    try {
      data = JSON.parse(msg.data);
    } catch {
      handlers.error(new Error("Unknown error parsing listener message"));
      return;
    }
    handlers.error(new Error(data.message || data.error || "Listener returned HTTP ".concat(data.statusCode)));
  }), addEventSourceListener(es, "error", (err) => {
    let origin = typeof window < "u" && window.location.origin, hintSuffix = origin ? ", and that the CORS-origin (".concat(origin, ") is allowed") : "", errorMessage = isErrorLike(err) ? " (".concat(err.message, ")") : "";
    handlers.error(new Error("Error establishing listener - check that the project ID and dataset are correct".concat(hintSuffix).concat(errorMessage)));
  }), {
    unsubscribe: () => Promise.resolve(es.close())
  };
}
function getMutationParser(cb) {
  return (msg) => {
    let data;
    try {
      data = JSON.parse(msg.data);
    } catch {
      return;
    }
    cb(data);
  };
}
function isErrorLike(err) {
  return typeof err == "object" && err !== null && "message" in err;
}
function isDraft(doc) {
  return doc._id.startsWith("drafts.");
}
function getPublishedId(document2) {
  return isDraft(document2) ? document2._id.slice(7) : document2._id;
}
function applyPatchWithoutRev(doc, patch) {
  let patchDoc = {
    ...doc
  };
  return delete patchDoc._rev, applyPatch(patchDoc, patch);
}
function noop2() {
  return Promise.resolve();
}
function getSyncingDataset(config2, onNotifyUpdate, _ref) {
  let {
    getDocuments: getDocuments3,
    EventSource: EventSource2
  } = _ref, {
    projectId: projectId2,
    dataset: dataset2,
    listen: useListener,
    overlayDrafts,
    documentLimit,
    token,
    includeTypes
  } = config2;
  if (!useListener) {
    let loaded2 = getDocuments3({
      projectId: projectId2,
      dataset: dataset2,
      documentLimit,
      token,
      includeTypes
    }).then(onUpdate).then(noop2);
    return {
      unsubscribe: noop2,
      loaded: loaded2
    };
  }
  let indexedDocuments = /* @__PURE__ */ new Map(), documents, buffer = [], onDoneLoading, onLoadError, loaded = new Promise((resolve, reject) => {
    onDoneLoading = resolve, onLoadError = reject;
  }), stagedDocs, previousTrx, flushTimeout;
  return {
    unsubscribe: listen(EventSource2, config2, {
      next: onMutationReceived,
      open: onOpen,
      error: (error2) => onLoadError(error2)
    }).unsubscribe,
    loaded
  };
  async function onOpen() {
    let initial = await getDocuments3({
      projectId: projectId2,
      dataset: dataset2,
      documentLimit,
      token,
      includeTypes
    });
    documents = applyBufferedMutations(initial, buffer), documents.forEach((doc) => indexedDocuments.set(doc._id, doc)), onUpdate(documents), onDoneLoading();
  }
  function onMutationReceived(msg) {
    documents ? (applyMutation(msg), scheduleUpdate(documents, msg)) : buffer.push(msg);
  }
  function scheduleUpdate(docs, msg) {
    clearTimeout(flushTimeout), previousTrx !== msg.transactionId && stagedDocs ? (onUpdate(stagedDocs), previousTrx = void 0) : (previousTrx = msg.transactionId, stagedDocs = docs.slice()), flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice());
  }
  function onUpdate(docs) {
    stagedDocs = void 0, flushTimeout = void 0, previousTrx = void 0, onNotifyUpdate(overlayDrafts ? overlay(docs) : docs);
  }
  function applyMutation(msg) {
    if (!msg.effects || msg.documentId.startsWith("_."))
      return;
    let document2 = indexedDocuments.get(msg.documentId) || null;
    replaceDocument(msg.documentId, applyPatchWithoutRev(document2, msg.effects.apply));
  }
  function replaceDocument(id, document2) {
    let current = indexedDocuments.get(id), docs = documents || [], position = current ? docs.indexOf(current) : -1;
    position === -1 && document2 ? (docs.push(document2), indexedDocuments.set(id, document2)) : document2 ? (docs.splice(position, 1, document2), indexedDocuments.set(id, document2)) : (docs.splice(position, 1), indexedDocuments.delete(id));
  }
}
function applyBufferedMutations(documents, mutations) {
  let groups = /* @__PURE__ */ new Map();
  return mutations.forEach((mutation) => {
    let group = groups.get(mutation.documentId) || [];
    group.push(mutation), groups.set(mutation.documentId, group);
  }), groups.forEach((group, id) => {
    let document2 = documents.find((doc) => doc._id === id);
    if (!document2) {
      console.warn("Received mutation for missing document %s", id);
      return;
    }
    let hasFoundRevision = !1, current = document2;
    group.forEach((mutation) => {
      hasFoundRevision = hasFoundRevision || mutation.previousRev === document2._rev, !!hasFoundRevision && mutation.effects && (current = applyPatchWithoutRev(current, mutation.effects.apply));
    }), documents.splice(documents.indexOf(document2), 1, current);
  }), documents;
}
function overlay(documents) {
  let overlayed = /* @__PURE__ */ new Map();
  return documents.forEach((doc) => {
    let existing = overlayed.get(getPublishedId(doc));
    doc._id.startsWith("drafts.") ? overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc)) : existing || overlayed.set(doc._id, doc);
  }), Array.from(overlayed.values());
}
function pretendThatItsPublished(doc) {
  return {
    ...doc,
    _id: getPublishedId(doc)
  };
}
function groqStore$1(config2, envImplementations) {
  let documents = [], executeThrottled = throttle(config2.subscriptionThrottleMs || 50, executeAllSubscriptions), activeSubscriptions = [], dataset2;
  async function loadDataset() {
    dataset2 || (dataset2 = getSyncingDataset(config2, (docs) => {
      documents = docs, executeThrottled();
    }, envImplementations)), await dataset2.loaded;
  }
  async function query2(groqQuery, params) {
    await loadDataset();
    let tree = parse2(groqQuery, {
      params
    });
    return (await evaluateQuery(tree, {
      dataset: documents,
      params
    })).get();
  }
  async function getDocument2(documentId) {
    return await loadDataset(), query2(groq(_templateObject || (_templateObject = _taggedTemplateLiteral(["*[_id == $id][0]"]))), {
      id: documentId
    });
  }
  async function getDocuments3(documentIds) {
    await loadDataset();
    let subQueries = documentIds.map((id) => '*[_id == "'.concat(id, '"][0]')).join(`,
`);
    return query2("[".concat(subQueries, "]"));
  }
  function subscribe(groqQuery, params, callback) {
    if (!config2.listen)
      throw new Error("Cannot use `subscribe()` without `listen: true`");
    let subscription = {
      query: groqQuery,
      params,
      callback
    };
    activeSubscriptions.push(subscription);
    let unsubscribed = !1, unsubscribe = () => (unsubscribed || (unsubscribed = !0, activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)), Promise.resolve());
    return executeQuerySubscription(subscription), {
      unsubscribe
    };
  }
  function executeQuerySubscription(subscription) {
    return query2(subscription.query, subscription.params).then((res) => {
      "previousResult" in subscription && (0, import_fast_deep_equal.default)(subscription.previousResult, res) || (subscription.previousResult = res, subscription.callback(void 0, res));
    }).catch((err) => {
      subscription.callback(err);
    });
  }
  function executeAllSubscriptions() {
    activeSubscriptions.forEach(executeQuerySubscription);
  }
  function close() {
    return executeThrottled.cancel(), dataset2 ? dataset2.unsubscribe() : Promise.resolve();
  }
  return {
    query: query2,
    getDocument: getDocument2,
    getDocuments: getDocuments3,
    subscribe,
    close
  };
}
function getDocumentStream(body) {
  if (!body)
    throw new Error("Failed to read body from response");
  let reader, cancelled = !1;
  function cancel() {
    cancelled = !0, reader && reader.cancel();
  }
  return new ReadableStream({
    start(controller) {
      reader = body.getReader();
      let decoder = new TextDecoder(), buffer = "";
      reader.read().then(processResult).catch((err) => controller.error(err));
      async function processResult(result) {
        if (result.done) {
          if (cancelled)
            return;
          if (buffer = buffer.trim(), buffer.length === 0) {
            controller.close();
            return;
          }
          controller.enqueue(JSON.parse(buffer)), controller.close();
          return;
        }
        buffer += decoder.decode(result.value, {
          stream: !0
        });
        let lines = buffer.split(`
`);
        for (let i7 = 0; i7 < lines.length - 1; ++i7) {
          let line = lines[i7].trim();
          if (line.length !== 0)
            try {
              controller.enqueue(JSON.parse(line));
            } catch (err) {
              controller.error(err), cancel();
              return;
            }
        }
        if (buffer = lines[lines.length - 1], !!reader)
          try {
            processResult(await reader.read());
          } catch (err) {
            controller.error(err);
          }
      }
    },
    cancel
  });
}
function isStreamError(result) {
  return !result || !("error" in result) || typeof result.error != "object" || result.error === null ? !1 : "description" in result.error && typeof result.error.description == "string" && !("_id" in result);
}
function getError(body) {
  return typeof body == "object" && "error" in body && "message" in body ? body.message || body.error : "<unknown error>";
}
function isRelevantDocument(doc) {
  return !doc._id.startsWith("_.");
}
function assertEnvSupport() {
  let unsupported = ["EventSource", "ReadableStream", "fetch"].filter((api) => !(api in window));
  if (unsupported.length > 0)
    throw new Error("Browser not supported. Missing browser APIs: ".concat(unsupported.join(", ")));
}
function groqStore(config2) {
  var _a2;
  assertEnvSupport();
  let EventSource2 = (_a2 = config2.EventSource) != null ? _a2 : window.EventSource;
  if (config2.token) {
    if (!config2.EventSource)
      throw new Error("When the `token` option is used the `EventSource` option must also be provided.");
    if (config2.EventSource === window.EventSource)
      throw new Error("When the `token` option is used the `EventSource` option must also be provided. EventSource cannot be `window.EventSource`, as it does not support passing a token.");
  }
  return groqStore$1(config2, {
    EventSource: EventSource2,
    getDocuments
  });
}
var import_fast_deep_equal, _templateObject, isNativeBrowserEventSource, addEventSourceListener, DEBOUNCE_MS, getDocuments, init_index_browser = __esm({
  "node_modules/@sanity/groq-store/dist/index.browser.mjs"() {
    init_groq_esm();
    init_groq_esm();
    import_fast_deep_equal = __toESM(require_fast_deep_equal(), 1);
    init_esm();
    init_dist3();
    init_esm2();
    isNativeBrowserEventSource = (eventSource) => typeof window < "u" && eventSource.addEventListener === window.EventSource.prototype.addEventListener, addEventSourceListener = (eventSource, type, listener) => {
      isNativeBrowserEventSource(eventSource) && eventSource.addEventListener(type, listener, !1), eventSource.addEventListener(type, listener);
    };
    DEBOUNCE_MS = 25;
    getDocuments = async function(_ref2) {
      let {
        projectId: projectId2,
        dataset: dataset2,
        token,
        documentLimit,
        includeTypes = []
      } = _ref2, baseUrl = "https://".concat(projectId2, ".api.sanity.io/v1/data/export/").concat(dataset2), params = includeTypes.length > 0 ? new URLSearchParams({
        types: includeTypes == null ? void 0 : includeTypes.join(",")
      }) : "", url = "".concat(baseUrl, "?").concat(params), headers = token ? {
        Authorization: "Bearer ".concat(token)
      } : void 0, response = await fetch(url, {
        credentials: "include",
        headers
      });
      if (response.status !== 200)
        throw new Error("Error streaming dataset: ".concat(getError(await response.json())));
      let reader = getDocumentStream(response.body).getReader(), documents = [], result, document2;
      do {
        if (result = await reader.read(), document2 = result.value, isStreamError(document2))
          throw new Error("Error streaming dataset: ".concat(document2.error));
        if (document2 && isRelevantDocument(document2) && documents.push(document2), documentLimit && documents.length > documentLimit)
          throw reader.cancel("Reached document limit"), new Error("Error streaming dataset: Reached limit of ".concat(documentLimit, " documents. Try using the includeTypes option to reduce the amount of documents, or increase the limit."));
      } while (!result.done);
      return documents;
    };
  }
});

// node_modules/@sanity/preview-kit/node_modules/event-source-polyfill/src/eventsource.js
var require_eventsource = __commonJS({
  "node_modules/@sanity/preview-kit/node_modules/event-source-polyfill/src/eventsource.js"(exports, module) {
    (function(global2) {
      "use strict";
      var setTimeout2 = global2.setTimeout, clearTimeout2 = global2.clearTimeout, XMLHttpRequest2 = global2.XMLHttpRequest, XDomainRequest = global2.XDomainRequest, ActiveXObject = global2.ActiveXObject, NativeEventSource = global2.EventSource, document2 = global2.document, Promise2 = global2.Promise, fetch2 = global2.fetch, Response2 = global2.Response, TextDecoder2 = global2.TextDecoder, TextEncoder2 = global2.TextEncoder, AbortController2 = global2.AbortController;
      if (typeof window < "u" && typeof document2 < "u" && !("readyState" in document2) && document2.body == null && (document2.readyState = "loading", window.addEventListener("load", function(event2) {
        document2.readyState = "complete";
      }, !1)), XMLHttpRequest2 == null && ActiveXObject != null && (XMLHttpRequest2 = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      }), Object.create == null && (Object.create = function(C2) {
        function F5() {
        }
        return F5.prototype = C2, new F5();
      }), Date.now || (Date.now = function() {
        return new Date().getTime();
      }), AbortController2 == null) {
        var originalFetch2 = fetch2;
        fetch2 = function(url, options) {
          var signal = options.signal;
          return originalFetch2(url, { headers: options.headers, credentials: options.credentials, cache: options.cache }).then(function(response) {
            var reader = response.body.getReader();
            return signal._reader = reader, signal._aborted && signal._reader.cancel(), {
              status: response.status,
              statusText: response.statusText,
              headers: response.headers,
              body: {
                getReader: function() {
                  return reader;
                }
              }
            };
          });
        }, AbortController2 = function() {
          this.signal = {
            _reader: null,
            _aborted: !1
          }, this.abort = function() {
            this.signal._reader != null && this.signal._reader.cancel(), this.signal._aborted = !0;
          };
        };
      }
      function TextDecoderPolyfill() {
        this.bitsNeeded = 0, this.codePoint = 0;
      }
      TextDecoderPolyfill.prototype.decode = function(octets) {
        function valid(codePoint2, shift, octetsCount2) {
          if (octetsCount2 === 1)
            return codePoint2 >= 128 >> shift && codePoint2 << shift <= 2047;
          if (octetsCount2 === 2)
            return codePoint2 >= 2048 >> shift && codePoint2 << shift <= 55295 || codePoint2 >= 57344 >> shift && codePoint2 << shift <= 65535;
          if (octetsCount2 === 3)
            return codePoint2 >= 65536 >> shift && codePoint2 << shift <= 1114111;
          throw new Error();
        }
        function octetsCount(bitsNeeded2, codePoint2) {
          if (bitsNeeded2 === 6 * 1)
            return codePoint2 >> 6 > 15 ? 3 : codePoint2 > 31 ? 2 : 1;
          if (bitsNeeded2 === 6 * 2)
            return codePoint2 > 15 ? 3 : 2;
          if (bitsNeeded2 === 6 * 3)
            return 3;
          throw new Error();
        }
        for (var REPLACER = 65533, string3 = "", bitsNeeded = this.bitsNeeded, codePoint = this.codePoint, i7 = 0; i7 < octets.length; i7 += 1) {
          var octet = octets[i7];
          bitsNeeded !== 0 && (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) && (bitsNeeded = 0, codePoint = REPLACER, string3 += String.fromCharCode(codePoint)), bitsNeeded === 0 ? (octet >= 0 && octet <= 127 ? (bitsNeeded = 0, codePoint = octet) : octet >= 192 && octet <= 223 ? (bitsNeeded = 6 * 1, codePoint = octet & 31) : octet >= 224 && octet <= 239 ? (bitsNeeded = 6 * 2, codePoint = octet & 15) : octet >= 240 && octet <= 247 ? (bitsNeeded = 6 * 3, codePoint = octet & 7) : (bitsNeeded = 0, codePoint = REPLACER), bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint)) && (bitsNeeded = 0, codePoint = REPLACER)) : (bitsNeeded -= 6, codePoint = codePoint << 6 | octet & 63), bitsNeeded === 0 && (codePoint <= 65535 ? string3 += String.fromCharCode(codePoint) : (string3 += String.fromCharCode(55296 + (codePoint - 65535 - 1 >> 10)), string3 += String.fromCharCode(56320 + (codePoint - 65535 - 1 & 1023))));
        }
        return this.bitsNeeded = bitsNeeded, this.codePoint = codePoint, string3;
      };
      var supportsStreamOption = function() {
        try {
          return new TextDecoder2().decode(new TextEncoder2().encode("test"), { stream: !0 }) === "test";
        } catch (error2) {
          console.debug("TextDecoder does not support streaming option. Using polyfill instead: " + error2);
        }
        return !1;
      };
      (TextDecoder2 == null || TextEncoder2 == null || !supportsStreamOption()) && (TextDecoder2 = TextDecoderPolyfill);
      var k = function() {
      };
      function XHRWrapper(xhr) {
        this.withCredentials = !1, this.readyState = 0, this.status = 0, this.statusText = "", this.responseText = "", this.onprogress = k, this.onload = k, this.onerror = k, this.onreadystatechange = k, this._contentType = "", this._xhr = xhr, this._sendTimeout = 0, this._abort = k;
      }
      XHRWrapper.prototype.open = function(method, url) {
        this._abort(!0);
        var that = this, xhr = this._xhr, state = 1, timeout2 = 0;
        this._abort = function(silent) {
          that._sendTimeout !== 0 && (clearTimeout2(that._sendTimeout), that._sendTimeout = 0), (state === 1 || state === 2 || state === 3) && (state = 4, xhr.onload = k, xhr.onerror = k, xhr.onabort = k, xhr.onprogress = k, xhr.onreadystatechange = k, xhr.abort(), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), silent || (that.readyState = 4, that.onabort(null), that.onreadystatechange())), state = 0;
        };
        var onStart = function() {
          if (state === 1) {
            var status = 0, statusText = "", contentType = void 0;
            if ("contentType" in xhr)
              status = 200, statusText = "OK", contentType = xhr.contentType;
            else
              try {
                status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type");
              } catch {
                status = 0, statusText = "", contentType = void 0;
              }
            status !== 0 && (state = 2, that.readyState = 2, that.status = status, that.statusText = statusText, that._contentType = contentType, that.onreadystatechange());
          }
        }, onProgress = function() {
          if (onStart(), state === 2 || state === 3) {
            state = 3;
            var responseText = "";
            try {
              responseText = xhr.responseText;
            } catch {
            }
            that.readyState = 3, that.responseText = responseText, that.onprogress();
          }
        }, onFinish = function(type, event2) {
          if ((event2 == null || event2.preventDefault == null) && (event2 = {
            preventDefault: k
          }), onProgress(), state === 1 || state === 2 || state === 3) {
            if (state = 4, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), that.readyState = 4, type === "load")
              that.onload(event2);
            else if (type === "error")
              that.onerror(event2);
            else if (type === "abort")
              that.onabort(event2);
            else
              throw new TypeError();
            that.onreadystatechange();
          }
        }, onReadyStateChange = function(event2) {
          xhr != null && (xhr.readyState === 4 ? (!("onload" in xhr) || !("onerror" in xhr) || !("onabort" in xhr)) && onFinish(xhr.responseText === "" ? "error" : "load", event2) : xhr.readyState === 3 ? "onprogress" in xhr || onProgress() : xhr.readyState === 2 && onStart());
        }, onTimeout = function() {
          timeout2 = setTimeout2(function() {
            onTimeout();
          }, 500), xhr.readyState === 3 && onProgress();
        };
        "onload" in xhr && (xhr.onload = function(event2) {
          onFinish("load", event2);
        }), "onerror" in xhr && (xhr.onerror = function(event2) {
          onFinish("error", event2);
        }), "onabort" in xhr && (xhr.onabort = function(event2) {
          onFinish("abort", event2);
        }), "onprogress" in xhr && (xhr.onprogress = onProgress), "onreadystatechange" in xhr && (xhr.onreadystatechange = function(event2) {
          onReadyStateChange(event2);
        }), ("contentType" in xhr || !("ontimeout" in XMLHttpRequest2.prototype)) && (url += (url.indexOf("?") === -1 ? "?" : "&") + "padding=true"), xhr.open(method, url, !0), "readyState" in xhr && (timeout2 = setTimeout2(function() {
          onTimeout();
        }, 0));
      }, XHRWrapper.prototype.abort = function() {
        this._abort(!1);
      }, XHRWrapper.prototype.getResponseHeader = function(name) {
        return this._contentType;
      }, XHRWrapper.prototype.setRequestHeader = function(name, value) {
        var xhr = this._xhr;
        "setRequestHeader" in xhr && xhr.setRequestHeader(name, value);
      }, XHRWrapper.prototype.getAllResponseHeaders = function() {
        return this._xhr.getAllResponseHeaders != null && this._xhr.getAllResponseHeaders() || "";
      }, XHRWrapper.prototype.send = function() {
        if ((!("ontimeout" in XMLHttpRequest2.prototype) || !("sendAsBinary" in XMLHttpRequest2.prototype) && !("mozAnon" in XMLHttpRequest2.prototype)) && document2 != null && document2.readyState != null && document2.readyState !== "complete") {
          var that = this;
          that._sendTimeout = setTimeout2(function() {
            that._sendTimeout = 0, that.send();
          }, 4);
          return;
        }
        var xhr = this._xhr;
        "withCredentials" in xhr && (xhr.withCredentials = this.withCredentials);
        try {
          xhr.send(void 0);
        } catch (error1) {
          throw error1;
        }
      };
      function toLowerCase(name) {
        return name.replace(/[A-Z]/g, function(c5) {
          return String.fromCharCode(c5.charCodeAt(0) + 32);
        });
      }
      function HeadersPolyfill(all) {
        for (var map3 = /* @__PURE__ */ Object.create(null), array2 = all.split(`\r
`), i7 = 0; i7 < array2.length; i7 += 1) {
          var line = array2[i7], parts = line.split(": "), name = parts.shift(), value = parts.join(": ");
          map3[toLowerCase(name)] = value;
        }
        this._map = map3;
      }
      HeadersPolyfill.prototype.get = function(name) {
        return this._map[toLowerCase(name)];
      }, XMLHttpRequest2 != null && XMLHttpRequest2.HEADERS_RECEIVED == null && (XMLHttpRequest2.HEADERS_RECEIVED = 2);
      function XHRTransport() {
      }
      XHRTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        xhr.open("GET", url);
        var offset = 0;
        xhr.onprogress = function() {
          var responseText = xhr.responseText, chunk = responseText.slice(offset);
          offset += chunk.length, onProgressCallback(chunk);
        }, xhr.onerror = function(event2) {
          event2.preventDefault(), onFinishCallback(new Error("NetworkError"));
        }, xhr.onload = function() {
          onFinishCallback(null);
        }, xhr.onabort = function() {
          onFinishCallback(null);
        }, xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest2.HEADERS_RECEIVED) {
            var status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type"), headers2 = xhr.getAllResponseHeaders();
            onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers2));
          }
        }, xhr.withCredentials = withCredentials;
        for (var name in headers)
          Object.prototype.hasOwnProperty.call(headers, name) && xhr.setRequestHeader(name, headers[name]);
        return xhr.send(), xhr;
      };
      function HeadersWrapper(headers) {
        this._headers = headers;
      }
      HeadersWrapper.prototype.get = function(name) {
        return this._headers.get(name);
      };
      function FetchTransport() {
      }
      FetchTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        var reader = null, controller = new AbortController2(), signal = controller.signal, textDecoder = new TextDecoder2();
        return fetch2(url, {
          headers,
          credentials: withCredentials ? "include" : "same-origin",
          signal,
          cache: "no-store"
        }).then(function(response) {
          return reader = response.body.getReader(), onStartCallback(response.status, response.statusText, response.headers.get("Content-Type"), new HeadersWrapper(response.headers)), new Promise2(function(resolve, reject) {
            var readNextChunk = function() {
              reader.read().then(function(result) {
                if (result.done)
                  resolve(void 0);
                else {
                  var chunk = textDecoder.decode(result.value, { stream: !0 });
                  onProgressCallback(chunk), readNextChunk();
                }
              }).catch(function(error2) {
                reject(error2);
              });
            };
            readNextChunk();
          });
        }).catch(function(error2) {
          if (error2.name !== "AbortError")
            return error2;
        }).then(function(error2) {
          onFinishCallback(error2);
        }), {
          abort: function() {
            reader != null && reader.cancel(), controller.abort();
          }
        };
      };
      function EventTarget() {
        this._listeners = /* @__PURE__ */ Object.create(null);
      }
      function throwError(e3) {
        setTimeout2(function() {
          throw e3;
        }, 0);
      }
      EventTarget.prototype.dispatchEvent = function(event2) {
        event2.target = this;
        var typeListeners = this._listeners[event2.type];
        if (typeListeners != null)
          for (var length2 = typeListeners.length, i7 = 0; i7 < length2; i7 += 1) {
            var listener = typeListeners[i7];
            try {
              typeof listener.handleEvent == "function" ? listener.handleEvent(event2) : listener.call(this, event2);
            } catch (e3) {
              throwError(e3);
            }
          }
      }, EventTarget.prototype.addEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        typeListeners == null && (typeListeners = [], listeners[type] = typeListeners);
        for (var found = !1, i7 = 0; i7 < typeListeners.length; i7 += 1)
          typeListeners[i7] === listener && (found = !0);
        found || typeListeners.push(listener);
      }, EventTarget.prototype.removeEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        if (typeListeners != null) {
          for (var filtered = [], i7 = 0; i7 < typeListeners.length; i7 += 1)
            typeListeners[i7] !== listener && filtered.push(typeListeners[i7]);
          filtered.length === 0 ? delete listeners[type] : listeners[type] = filtered;
        }
      };
      function Event2(type) {
        this.type = type, this.target = void 0;
      }
      function MessageEvent(type, options) {
        Event2.call(this, type), this.data = options.data, this.lastEventId = options.lastEventId;
      }
      MessageEvent.prototype = Object.create(Event2.prototype);
      function ConnectionEvent(type, options) {
        Event2.call(this, type), this.status = options.status, this.statusText = options.statusText, this.headers = options.headers;
      }
      ConnectionEvent.prototype = Object.create(Event2.prototype);
      function ErrorEvent(type, options) {
        Event2.call(this, type), this.error = options.error;
      }
      ErrorEvent.prototype = Object.create(Event2.prototype);
      var WAITING = -1, CONNECTING = 0, OPEN = 1, CLOSED = 2, AFTER_CR = -1, FIELD_START = 0, FIELD = 1, VALUE_START = 2, VALUE = 3, contentTypeRegExp = /^text\/event\-stream(;.*)?$/i, MINIMUM_DURATION = 1e3, MAXIMUM_DURATION = 18e6, parseDuration = function(value, def) {
        var n4 = value == null ? def : parseInt(value, 10);
        return n4 !== n4 && (n4 = def), clampDuration(n4);
      }, clampDuration = function(n4) {
        return Math.min(Math.max(n4, MINIMUM_DURATION), MAXIMUM_DURATION);
      }, fire = function(that, f6, event2) {
        try {
          typeof f6 == "function" && f6.call(that, event2);
        } catch (e3) {
          throwError(e3);
        }
      };
      function EventSourcePolyfill(url, options) {
        EventTarget.call(this), options = options || {}, this.onopen = void 0, this.onmessage = void 0, this.onerror = void 0, this.url = void 0, this.readyState = void 0, this.withCredentials = void 0, this.headers = void 0, this._close = void 0, start(this, url, options);
      }
      function getBestXHRTransport() {
        return XMLHttpRequest2 != null && "withCredentials" in XMLHttpRequest2.prototype || XDomainRequest == null ? new XMLHttpRequest2() : new XDomainRequest();
      }
      var isFetchSupported = fetch2 != null && Response2 != null && "body" in Response2.prototype;
      function start(es, url, options) {
        url = String(url);
        var withCredentials = Boolean(options.withCredentials), lastEventIdQueryParameterName = options.lastEventIdQueryParameterName || "lastEventId", initialRetry = clampDuration(1e3), heartbeatTimeout = parseDuration(options.heartbeatTimeout, 45e3), lastEventId = "", retry2 = initialRetry, wasActivity = !1, textLength = 0, headers = options.headers || {}, TransportOption = options.Transport, xhr = isFetchSupported && TransportOption == null ? void 0 : new XHRWrapper(TransportOption != null ? new TransportOption() : getBestXHRTransport()), transport = TransportOption != null && typeof TransportOption != "string" ? new TransportOption() : xhr == null ? new FetchTransport() : new XHRTransport(), abortController = void 0, timeout2 = 0, currentState = WAITING, dataBuffer = "", lastEventIdBuffer = "", eventTypeBuffer = "", textBuffer = "", state = FIELD_START, fieldStart = 0, valueStart = 0, onStart = function(status, statusText, contentType, headers2) {
          if (currentState === CONNECTING)
            if (status === 200 && contentType != null && contentTypeRegExp.test(contentType)) {
              currentState = OPEN, wasActivity = Date.now(), retry2 = initialRetry, es.readyState = OPEN;
              var event2 = new ConnectionEvent("open", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onopen, event2);
            } else {
              var message = "";
              status !== 200 ? (statusText && (statusText = statusText.replace(/\s+/g, " ")), message = "EventSource's response has a status " + status + " " + statusText + " that is not 200. Aborting the connection.") : message = "EventSource's response has a Content-Type specifying an unsupported type: " + (contentType == null ? "-" : contentType.replace(/\s+/g, " ")) + ". Aborting the connection.", close();
              var event2 = new ConnectionEvent("error", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onerror, event2), console.error(message);
            }
        }, onProgress = function(textChunk) {
          if (currentState === OPEN) {
            for (var n4 = -1, i7 = 0; i7 < textChunk.length; i7 += 1) {
              var c5 = textChunk.charCodeAt(i7);
              (c5 === `
`.charCodeAt(0) || c5 === "\r".charCodeAt(0)) && (n4 = i7);
            }
            var chunk = (n4 !== -1 ? textBuffer : "") + textChunk.slice(0, n4 + 1);
            textBuffer = (n4 === -1 ? textBuffer : "") + textChunk.slice(n4 + 1), textChunk !== "" && (wasActivity = Date.now(), textLength += textChunk.length);
            for (var position = 0; position < chunk.length; position += 1) {
              var c5 = chunk.charCodeAt(position);
              if (state === AFTER_CR && c5 === `
`.charCodeAt(0))
                state = FIELD_START;
              else if (state === AFTER_CR && (state = FIELD_START), c5 === "\r".charCodeAt(0) || c5 === `
`.charCodeAt(0)) {
                if (state !== FIELD_START) {
                  state === FIELD && (valueStart = position + 1);
                  var field = chunk.slice(fieldStart, valueStart - 1), value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === " ".charCodeAt(0) ? 1 : 0), position);
                  field === "data" ? (dataBuffer += `
`, dataBuffer += value) : field === "id" ? lastEventIdBuffer = value : field === "event" ? eventTypeBuffer = value : field === "retry" ? (initialRetry = parseDuration(value, initialRetry), retry2 = initialRetry) : field === "heartbeatTimeout" && (heartbeatTimeout = parseDuration(value, heartbeatTimeout), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = setTimeout2(function() {
                    onTimeout();
                  }, heartbeatTimeout)));
                }
                if (state === FIELD_START) {
                  if (dataBuffer !== "") {
                    lastEventId = lastEventIdBuffer, eventTypeBuffer === "" && (eventTypeBuffer = "message");
                    var event2 = new MessageEvent(eventTypeBuffer, {
                      data: dataBuffer.slice(1),
                      lastEventId: lastEventIdBuffer
                    });
                    if (es.dispatchEvent(event2), eventTypeBuffer === "open" ? fire(es, es.onopen, event2) : eventTypeBuffer === "message" ? fire(es, es.onmessage, event2) : eventTypeBuffer === "error" && fire(es, es.onerror, event2), currentState === CLOSED)
                      return;
                  }
                  dataBuffer = "", eventTypeBuffer = "";
                }
                state = c5 === "\r".charCodeAt(0) ? AFTER_CR : FIELD_START;
              } else
                state === FIELD_START && (fieldStart = position, state = FIELD), state === FIELD ? c5 === ":".charCodeAt(0) && (valueStart = position + 1, state = VALUE_START) : state === VALUE_START && (state = VALUE);
            }
          }
        }, onFinish = function(error2) {
          if (currentState === OPEN || currentState === CONNECTING) {
            currentState = WAITING, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), timeout2 = setTimeout2(function() {
              onTimeout();
            }, retry2), retry2 = clampDuration(Math.min(initialRetry * 16, retry2 * 2)), es.readyState = CONNECTING;
            var event2 = new ErrorEvent("error", { error: error2 });
            es.dispatchEvent(event2), fire(es, es.onerror, event2), error2 != null && console.error(error2);
          }
        }, close = function() {
          currentState = CLOSED, abortController != null && (abortController.abort(), abortController = void 0), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), es.readyState = CLOSED;
        }, onTimeout = function() {
          if (timeout2 = 0, currentState !== WAITING) {
            if (!wasActivity && abortController != null)
              onFinish(new Error("No activity within " + heartbeatTimeout + " milliseconds. " + (currentState === CONNECTING ? "No response received." : textLength + " chars received.") + " Reconnecting.")), abortController != null && (abortController.abort(), abortController = void 0);
            else {
              var nextHeartbeat = Math.max((wasActivity || Date.now()) + heartbeatTimeout - Date.now(), 1);
              wasActivity = !1, timeout2 = setTimeout2(function() {
                onTimeout();
              }, nextHeartbeat);
            }
            return;
          }
          wasActivity = !1, textLength = 0, timeout2 = setTimeout2(function() {
            onTimeout();
          }, heartbeatTimeout), currentState = CONNECTING, dataBuffer = "", eventTypeBuffer = "", lastEventIdBuffer = lastEventId, textBuffer = "", fieldStart = 0, valueStart = 0, state = FIELD_START;
          var requestURL = url;
          if (url.slice(0, 5) !== "data:" && url.slice(0, 5) !== "blob:" && lastEventId !== "") {
            var i7 = url.indexOf("?");
            requestURL = i7 === -1 ? url : url.slice(0, i7 + 1) + url.slice(i7 + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function(p5, paramName) {
              return paramName === lastEventIdQueryParameterName ? "" : p5;
            }), requestURL += (url.indexOf("?") === -1 ? "?" : "&") + lastEventIdQueryParameterName + "=" + encodeURIComponent(lastEventId);
          }
          var withCredentials2 = es.withCredentials, requestHeaders = {};
          requestHeaders.Accept = "text/event-stream";
          var headers2 = es.headers;
          if (headers2 != null)
            for (var name in headers2)
              Object.prototype.hasOwnProperty.call(headers2, name) && (requestHeaders[name] = headers2[name]);
          try {
            abortController = transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials2, requestHeaders);
          } catch (error2) {
            throw close(), error2;
          }
        };
        es.url = url, es.readyState = CONNECTING, es.withCredentials = withCredentials, es.headers = headers, es._close = close, onTimeout();
      }
      EventSourcePolyfill.prototype = Object.create(EventTarget.prototype), EventSourcePolyfill.prototype.CONNECTING = CONNECTING, EventSourcePolyfill.prototype.OPEN = OPEN, EventSourcePolyfill.prototype.CLOSED = CLOSED, EventSourcePolyfill.prototype.close = function() {
        this._close();
      }, EventSourcePolyfill.CONNECTING = CONNECTING, EventSourcePolyfill.OPEN = OPEN, EventSourcePolyfill.CLOSED = CLOSED, EventSourcePolyfill.prototype.withCredentials = void 0;
      var R2 = NativeEventSource;
      XMLHttpRequest2 != null && (NativeEventSource == null || !("withCredentials" in NativeEventSource.prototype)) && (R2 = EventSourcePolyfill), function(factory) {
        if (typeof module == "object" && typeof module.exports == "object") {
          var v3 = factory(exports);
          v3 !== void 0 && (module.exports = v3);
        } else
          typeof define == "function" && define.amd ? define(["exports"], factory) : factory(global2);
      }(function(exports2) {
        exports2.EventSourcePolyfill = EventSourcePolyfill, exports2.NativeEventSource = NativeEventSource, exports2.EventSource = R2;
      });
    })(typeof globalThis > "u" ? typeof window < "u" ? window : typeof self < "u" ? self : exports : globalThis);
  }
});

// node_modules/parse-headers/parse-headers.js
var require_parse_headers = __commonJS({
  "node_modules/parse-headers/parse-headers.js"(exports, module) {
    var trim = function(string3) {
      return string3.replace(/^\s+|\s+$/g, "");
    }, isArray = function(arg) {
      return Object.prototype.toString.call(arg) === "[object Array]";
    };
    module.exports = function(headers) {
      if (!headers)
        return {};
      for (var result = {}, headersArr = trim(headers).split(`
`), i7 = 0; i7 < headersArr.length; i7++) {
        var row = headersArr[i7], index = row.indexOf(":"), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        typeof result[key] > "u" ? result[key] = value : isArray(result[key]) ? result[key].push(value) : result[key] = [result[key], value];
      }
      return result;
    };
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s10 = 1e3, m6 = s10 * 60, h5 = m6 * 60, d9 = h5 * 24, w3 = d9 * 7, y2 = d9 * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0)
        return parse3(val);
      if (type === "number" && isFinite(val))
        return options.long ? fmtLong(val) : fmtShort(val);
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      if (str = String(str), !(str.length > 100)) {
        var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
          str
        );
        if (!!match2) {
          var n4 = parseFloat(match2[1]), type = (match2[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n4 * y2;
            case "weeks":
            case "week":
            case "w":
              return n4 * w3;
            case "days":
            case "day":
            case "d":
              return n4 * d9;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n4 * h5;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n4 * m6;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n4 * s10;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n4;
            default:
              return;
          }
        }
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      return msAbs >= d9 ? Math.round(ms / d9) + "d" : msAbs >= h5 ? Math.round(ms / h5) + "h" : msAbs >= m6 ? Math.round(ms / m6) + "m" : msAbs >= s10 ? Math.round(ms / s10) + "s" : ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      return msAbs >= d9 ? plural(ms, msAbs, d9, "day") : msAbs >= h5 ? plural(ms, msAbs, h5, "hour") : msAbs >= m6 ? plural(ms, msAbs, m6, "minute") : msAbs >= s10 ? plural(ms, msAbs, s10, "second") : ms + " ms";
    }
    function plural(ms, msAbs, n4, name) {
      var isPlural = msAbs >= n4 * 1.5;
      return Math.round(ms / n4) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = coerce, createDebug.disable = disable, createDebug.enable = enable, createDebug.enabled = enabled, createDebug.humanize = require_ms(), createDebug.destroy = destroy, Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i7 = 0; i7 < namespace.length; i7++)
          hash = (hash << 5) - hash + namespace.charCodeAt(i7), hash |= 0;
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime, enableOverride = null, namespacesCache, enabledCache;
        function debug(...args) {
          if (!debug.enabled)
            return;
          let self2 = debug, curr = Number(new Date()), ms = curr - (prevTime || curr);
          self2.diff = ms, self2.prev = prevTime, self2.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), typeof args[0] != "string" && args.unshift("%O");
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match2, format) => {
            if (match2 === "%%")
              return "%";
            index++;
            let formatter = createDebug.formatters[format];
            if (typeof formatter == "function") {
              let val = args[index];
              match2 = formatter.call(self2, val), args.splice(index, 1), index--;
            }
            return match2;
          }), createDebug.formatArgs.call(self2, args), (self2.log || createDebug.log).apply(self2, args);
        }
        return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend4, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", {
          enumerable: !0,
          configurable: !1,
          get: () => enableOverride !== null ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache),
          set: (v3) => {
            enableOverride = v3;
          }
        }), typeof createDebug.init == "function" && createDebug.init(debug), debug;
      }
      function extend4(namespace, delimiter) {
        let newDebug = createDebug(this.namespace + (typeof delimiter > "u" ? ":" : delimiter) + namespace);
        return newDebug.log = this.log, newDebug;
      }
      function enable(namespaces2) {
        createDebug.save(namespaces2), createDebug.namespaces = namespaces2, createDebug.names = [], createDebug.skips = [];
        let i7, split = (typeof namespaces2 == "string" ? namespaces2 : "").split(/[\s,]+/), len = split.length;
        for (i7 = 0; i7 < len; i7++)
          !split[i7] || (namespaces2 = split[i7].replace(/\*/g, ".*?"), namespaces2[0] === "-" ? createDebug.skips.push(new RegExp("^" + namespaces2.slice(1) + "$")) : createDebug.names.push(new RegExp("^" + namespaces2 + "$")));
      }
      function disable() {
        let namespaces2 = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        return createDebug.enable(""), namespaces2;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*")
          return !0;
        let i7, len;
        for (i7 = 0, len = createDebug.skips.length; i7 < len; i7++)
          if (createDebug.skips[i7].test(name))
            return !1;
        for (i7 = 0, len = createDebug.names.length; i7 < len; i7++)
          if (createDebug.names[i7].test(name))
            return !0;
        return !1;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        return val instanceof Error ? val.stack || val.message : val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return createDebug.enable(createDebug.load()), createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = !1;
      return () => {
        warned || (warned = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      return typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? !0 : typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? !1 : typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff), !this.useColors)
        return;
      let c5 = "color: " + this.color;
      args.splice(1, 0, c5, "color: inherit");
      let index = 0, lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match2) => {
        match2 !== "%%" && (index++, match2 === "%c" && (lastC = index));
      }), args.splice(lastC, 0, c5);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces2) {
      try {
        namespaces2 ? exports.storage.setItem("debug", namespaces2) : exports.storage.removeItem("debug");
      } catch {
      }
    }
    function load() {
      let r7;
      try {
        r7 = exports.storage.getItem("debug");
      } catch {
      }
      return !r7 && typeof process < "u" && "env" in process && (r7 = process.env.DEBUG), r7;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v3) {
      try {
        return JSON.stringify(v3);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends2, __assign2, __rest2, __decorate2, __param2, __esDecorate2, __runInitializers2, __propKey2, __setFunctionName2, __metadata2, __awaiter2, __generator2, __exportStar2, __values2, __read2, __spread2, __spreadArrays2, __spreadArray2, __await2, __asyncGenerator2, __asyncDelegator2, __asyncValues2, __makeTemplateObject2, __importStar2, __importDefault2, __classPrivateFieldGet2, __classPrivateFieldSet2, __classPrivateFieldIn2, __createBinding2;
    (function(factory) {
      var root = typeof globalThis == "object" ? globalThis : typeof self == "object" ? self : typeof this == "object" ? this : {};
      typeof define == "function" && define.amd ? define("tslib", ["exports"], function(exports2) {
        factory(createExporter(root, createExporter(exports2)));
      }) : typeof module == "object" && typeof module.exports == "object" ? factory(createExporter(root, createExporter(module.exports))) : factory(createExporter(root));
      function createExporter(exports2, previous) {
        return exports2 !== root && (typeof Object.create == "function" ? Object.defineProperty(exports2, "__esModule", { value: !0 }) : exports2.__esModule = !0), function(id, v3) {
          return exports2[id] = previous ? previous(id, v3) : v3;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d9, b4) {
        d9.__proto__ = b4;
      } || function(d9, b4) {
        for (var p5 in b4)
          Object.prototype.hasOwnProperty.call(b4, p5) && (d9[p5] = b4[p5]);
      };
      __extends2 = function(d9, b4) {
        if (typeof b4 != "function" && b4 !== null)
          throw new TypeError("Class extends value " + String(b4) + " is not a constructor or null");
        extendStatics(d9, b4);
        function __() {
          this.constructor = d9;
        }
        d9.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
      }, __assign2 = Object.assign || function(t9) {
        for (var s10, i7 = 1, n4 = arguments.length; i7 < n4; i7++) {
          s10 = arguments[i7];
          for (var p5 in s10)
            Object.prototype.hasOwnProperty.call(s10, p5) && (t9[p5] = s10[p5]);
        }
        return t9;
      }, __rest2 = function(s10, e3) {
        var t9 = {};
        for (var p5 in s10)
          Object.prototype.hasOwnProperty.call(s10, p5) && e3.indexOf(p5) < 0 && (t9[p5] = s10[p5]);
        if (s10 != null && typeof Object.getOwnPropertySymbols == "function")
          for (var i7 = 0, p5 = Object.getOwnPropertySymbols(s10); i7 < p5.length; i7++)
            e3.indexOf(p5[i7]) < 0 && Object.prototype.propertyIsEnumerable.call(s10, p5[i7]) && (t9[p5[i7]] = s10[p5[i7]]);
        return t9;
      }, __decorate2 = function(decorators, target, key, desc) {
        var c5 = arguments.length, r7 = c5 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d9;
        if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
          r7 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i7 = decorators.length - 1; i7 >= 0; i7--)
            (d9 = decorators[i7]) && (r7 = (c5 < 3 ? d9(r7) : c5 > 3 ? d9(target, key, r7) : d9(target, key)) || r7);
        return c5 > 3 && r7 && Object.defineProperty(target, key, r7), r7;
      }, __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      }, __esDecorate2 = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f6) {
          if (f6 !== void 0 && typeof f6 != "function")
            throw new TypeError("Function expected");
          return f6;
        }
        for (var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value", target = !descriptorIn && ctor ? contextIn.static ? ctor : ctor.prototype : null, descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {}), _2, done = !1, i7 = decorators.length - 1; i7 >= 0; i7--) {
          var context2 = {};
          for (var p5 in contextIn)
            context2[p5] = p5 === "access" ? {} : contextIn[p5];
          for (var p5 in contextIn.access)
            context2.access[p5] = contextIn.access[p5];
          context2.addInitializer = function(f6) {
            if (done)
              throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f6 || null));
          };
          var result = (0, decorators[i7])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context2);
          if (kind === "accessor") {
            if (result === void 0)
              continue;
            if (result === null || typeof result != "object")
              throw new TypeError("Object expected");
            (_2 = accept(result.get)) && (descriptor.get = _2), (_2 = accept(result.set)) && (descriptor.set = _2), (_2 = accept(result.init)) && initializers.push(_2);
          } else
            (_2 = accept(result)) && (kind === "field" ? initializers.push(_2) : descriptor[key] = _2);
        }
        target && Object.defineProperty(target, contextIn.name, descriptor), done = !0;
      }, __runInitializers2 = function(thisArg, initializers, value) {
        for (var useValue = arguments.length > 2, i7 = 0; i7 < initializers.length; i7++)
          value = useValue ? initializers[i7].call(thisArg, value) : initializers[i7].call(thisArg);
        return useValue ? value : void 0;
      }, __propKey2 = function(x2) {
        return typeof x2 == "symbol" ? x2 : "".concat(x2);
      }, __setFunctionName2 = function(f6, name, prefix2) {
        return typeof name == "symbol" && (name = name.description ? "[".concat(name.description, "]") : ""), Object.defineProperty(f6, "name", { configurable: !0, value: prefix2 ? "".concat(prefix2, " ", name) : name });
      }, __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
          return Reflect.metadata(metadataKey, metadataValue);
      }, __awaiter2 = function(thisArg, _arguments, P3, generator) {
        function adopt(value) {
          return value instanceof P3 ? value : new P3(function(resolve) {
            resolve(value);
          });
        }
        return new (P3 || (P3 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator.throw(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }, __generator2 = function(thisArg, body) {
        var _2 = { label: 0, sent: function() {
          if (t9[0] & 1)
            throw t9[1];
          return t9[1];
        }, trys: [], ops: [] }, f6, y2, t9, g6;
        return g6 = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol == "function" && (g6[Symbol.iterator] = function() {
          return this;
        }), g6;
        function verb(n4) {
          return function(v3) {
            return step([n4, v3]);
          };
        }
        function step(op) {
          if (f6)
            throw new TypeError("Generator is already executing.");
          for (; g6 && (g6 = 0, op[0] && (_2 = 0)), _2; )
            try {
              if (f6 = 1, y2 && (t9 = op[0] & 2 ? y2.return : op[0] ? y2.throw || ((t9 = y2.return) && t9.call(y2), 0) : y2.next) && !(t9 = t9.call(y2, op[1])).done)
                return t9;
              switch (y2 = 0, t9 && (op = [op[0] & 2, t9.value]), op[0]) {
                case 0:
                case 1:
                  t9 = op;
                  break;
                case 4:
                  return _2.label++, { value: op[1], done: !1 };
                case 5:
                  _2.label++, y2 = op[1], op = [0];
                  continue;
                case 7:
                  op = _2.ops.pop(), _2.trys.pop();
                  continue;
                default:
                  if (t9 = _2.trys, !(t9 = t9.length > 0 && t9[t9.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _2 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t9 || op[1] > t9[0] && op[1] < t9[3])) {
                    _2.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _2.label < t9[1]) {
                    _2.label = t9[1], t9 = op;
                    break;
                  }
                  if (t9 && _2.label < t9[2]) {
                    _2.label = t9[2], _2.ops.push(op);
                    break;
                  }
                  t9[2] && _2.ops.pop(), _2.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _2);
            } catch (e3) {
              op = [6, e3], y2 = 0;
            } finally {
              f6 = t9 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: !0 };
        }
      }, __exportStar2 = function(m6, o8) {
        for (var p5 in m6)
          p5 !== "default" && !Object.prototype.hasOwnProperty.call(o8, p5) && __createBinding2(o8, m6, p5);
      }, __createBinding2 = Object.create ? function(o8, m6, k, k2) {
        k2 === void 0 && (k2 = k);
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) && (desc = { enumerable: !0, get: function() {
          return m6[k];
        } }), Object.defineProperty(o8, k2, desc);
      } : function(o8, m6, k, k2) {
        k2 === void 0 && (k2 = k), o8[k2] = m6[k];
      }, __values2 = function(o8) {
        var s10 = typeof Symbol == "function" && Symbol.iterator, m6 = s10 && o8[s10], i7 = 0;
        if (m6)
          return m6.call(o8);
        if (o8 && typeof o8.length == "number")
          return {
            next: function() {
              return o8 && i7 >= o8.length && (o8 = void 0), { value: o8 && o8[i7++], done: !o8 };
            }
          };
        throw new TypeError(s10 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }, __read2 = function(o8, n4) {
        var m6 = typeof Symbol == "function" && o8[Symbol.iterator];
        if (!m6)
          return o8;
        var i7 = m6.call(o8), r7, ar = [], e3;
        try {
          for (; (n4 === void 0 || n4-- > 0) && !(r7 = i7.next()).done; )
            ar.push(r7.value);
        } catch (error2) {
          e3 = { error: error2 };
        } finally {
          try {
            r7 && !r7.done && (m6 = i7.return) && m6.call(i7);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      }, __spread2 = function() {
        for (var ar = [], i7 = 0; i7 < arguments.length; i7++)
          ar = ar.concat(__read2(arguments[i7]));
        return ar;
      }, __spreadArrays2 = function() {
        for (var s10 = 0, i7 = 0, il = arguments.length; i7 < il; i7++)
          s10 += arguments[i7].length;
        for (var r7 = Array(s10), k = 0, i7 = 0; i7 < il; i7++)
          for (var a4 = arguments[i7], j3 = 0, jl = a4.length; j3 < jl; j3++, k++)
            r7[k] = a4[j3];
        return r7;
      }, __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i7 = 0, l7 = from.length, ar; i7 < l7; i7++)
            (ar || !(i7 in from)) && (ar || (ar = Array.prototype.slice.call(from, 0, i7)), ar[i7] = from[i7]);
        return to.concat(ar || Array.prototype.slice.call(from));
      }, __await2 = function(v3) {
        return this instanceof __await2 ? (this.v = v3, this) : new __await2(v3);
      }, __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g6 = generator.apply(thisArg, _arguments || []), i7, q2 = [];
        return i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7;
        function verb(n4) {
          g6[n4] && (i7[n4] = function(v3) {
            return new Promise(function(a4, b4) {
              q2.push([n4, v3, a4, b4]) > 1 || resume(n4, v3);
            });
          });
        }
        function resume(n4, v3) {
          try {
            step(g6[n4](v3));
          } catch (e3) {
            settle(q2[0][3], e3);
          }
        }
        function step(r7) {
          r7.value instanceof __await2 ? Promise.resolve(r7.value.v).then(fulfill, reject) : settle(q2[0][2], r7);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f6, v3) {
          f6(v3), q2.shift(), q2.length && resume(q2[0][0], q2[0][1]);
        }
      }, __asyncDelegator2 = function(o8) {
        var i7, p5;
        return i7 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i7[Symbol.iterator] = function() {
          return this;
        }, i7;
        function verb(n4, f6) {
          i7[n4] = o8[n4] ? function(v3) {
            return (p5 = !p5) ? { value: __await2(o8[n4](v3)), done: !1 } : f6 ? f6(v3) : v3;
          } : f6;
        }
      }, __asyncValues2 = function(o8) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m6 = o8[Symbol.asyncIterator], i7;
        return m6 ? m6.call(o8) : (o8 = typeof __values2 == "function" ? __values2(o8) : o8[Symbol.iterator](), i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7);
        function verb(n4) {
          i7[n4] = o8[n4] && function(v3) {
            return new Promise(function(resolve, reject) {
              v3 = o8[n4](v3), settle(resolve, reject, v3.done, v3.value);
            });
          };
        }
        function settle(resolve, reject, d9, v3) {
          Promise.resolve(v3).then(function(v4) {
            resolve({ value: v4, done: d9 });
          }, reject);
        }
      }, __makeTemplateObject2 = function(cooked, raw) {
        return Object.defineProperty ? Object.defineProperty(cooked, "raw", { value: raw }) : cooked.raw = raw, cooked;
      };
      var __setModuleDefault = Object.create ? function(o8, v3) {
        Object.defineProperty(o8, "default", { enumerable: !0, value: v3 });
      } : function(o8, v3) {
        o8.default = v3;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null)
          for (var k in mod)
            k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding2(result, mod, k);
        return __setModuleDefault(result, mod), result;
      }, __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      }, __classPrivateFieldGet2 = function(receiver, state, kind, f6) {
        if (kind === "a" && !f6)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state == "function" ? receiver !== state || !f6 : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f6 : kind === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
      }, __classPrivateFieldSet2 = function(receiver, state, value, kind, f6) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f6)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state == "function" ? receiver !== state || !f6 : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
      }, __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver != "object" && typeof receiver != "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state == "function" ? receiver === state : state.has(receiver);
      }, exporter("__extends", __extends2), exporter("__assign", __assign2), exporter("__rest", __rest2), exporter("__decorate", __decorate2), exporter("__param", __param2), exporter("__esDecorate", __esDecorate2), exporter("__runInitializers", __runInitializers2), exporter("__propKey", __propKey2), exporter("__setFunctionName", __setFunctionName2), exporter("__metadata", __metadata2), exporter("__awaiter", __awaiter2), exporter("__generator", __generator2), exporter("__exportStar", __exportStar2), exporter("__createBinding", __createBinding2), exporter("__values", __values2), exporter("__read", __read2), exporter("__spread", __spread2), exporter("__spreadArrays", __spreadArrays2), exporter("__spreadArray", __spreadArray2), exporter("__await", __await2), exporter("__asyncGenerator", __asyncGenerator2), exporter("__asyncDelegator", __asyncDelegator2), exporter("__asyncValues", __asyncValues2), exporter("__makeTemplateObject", __makeTemplateObject2), exporter("__importStar", __importStar2), exporter("__importDefault", __importDefault2), exporter("__classPrivateFieldGet", __classPrivateFieldGet2), exporter("__classPrivateFieldSet", __classPrivateFieldSet2), exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// node_modules/event-source-polyfill/src/eventsource.js
var require_eventsource2 = __commonJS({
  "node_modules/event-source-polyfill/src/eventsource.js"(exports, module) {
    (function(global2) {
      "use strict";
      var setTimeout2 = global2.setTimeout, clearTimeout2 = global2.clearTimeout, XMLHttpRequest2 = global2.XMLHttpRequest, XDomainRequest = global2.XDomainRequest, ActiveXObject = global2.ActiveXObject, NativeEventSource = global2.EventSource, document2 = global2.document, Promise2 = global2.Promise, fetch2 = global2.fetch, Response2 = global2.Response, TextDecoder2 = global2.TextDecoder, TextEncoder2 = global2.TextEncoder, AbortController2 = global2.AbortController;
      if (typeof window < "u" && typeof document2 < "u" && !("readyState" in document2) && document2.body == null && (document2.readyState = "loading", window.addEventListener("load", function(event2) {
        document2.readyState = "complete";
      }, !1)), XMLHttpRequest2 == null && ActiveXObject != null && (XMLHttpRequest2 = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      }), Object.create == null && (Object.create = function(C2) {
        function F5() {
        }
        return F5.prototype = C2, new F5();
      }), Date.now || (Date.now = function() {
        return new Date().getTime();
      }), AbortController2 == null) {
        var originalFetch2 = fetch2;
        fetch2 = function(url, options) {
          var signal = options.signal;
          return originalFetch2(url, { headers: options.headers, credentials: options.credentials, cache: options.cache }).then(function(response) {
            var reader = response.body.getReader();
            return signal._reader = reader, signal._aborted && signal._reader.cancel(), {
              status: response.status,
              statusText: response.statusText,
              headers: response.headers,
              body: {
                getReader: function() {
                  return reader;
                }
              }
            };
          });
        }, AbortController2 = function() {
          this.signal = {
            _reader: null,
            _aborted: !1
          }, this.abort = function() {
            this.signal._reader != null && this.signal._reader.cancel(), this.signal._aborted = !0;
          };
        };
      }
      function TextDecoderPolyfill() {
        this.bitsNeeded = 0, this.codePoint = 0;
      }
      TextDecoderPolyfill.prototype.decode = function(octets) {
        function valid(codePoint2, shift, octetsCount2) {
          if (octetsCount2 === 1)
            return codePoint2 >= 128 >> shift && codePoint2 << shift <= 2047;
          if (octetsCount2 === 2)
            return codePoint2 >= 2048 >> shift && codePoint2 << shift <= 55295 || codePoint2 >= 57344 >> shift && codePoint2 << shift <= 65535;
          if (octetsCount2 === 3)
            return codePoint2 >= 65536 >> shift && codePoint2 << shift <= 1114111;
          throw new Error();
        }
        function octetsCount(bitsNeeded2, codePoint2) {
          if (bitsNeeded2 === 6 * 1)
            return codePoint2 >> 6 > 15 ? 3 : codePoint2 > 31 ? 2 : 1;
          if (bitsNeeded2 === 6 * 2)
            return codePoint2 > 15 ? 3 : 2;
          if (bitsNeeded2 === 6 * 3)
            return 3;
          throw new Error();
        }
        for (var REPLACER = 65533, string3 = "", bitsNeeded = this.bitsNeeded, codePoint = this.codePoint, i7 = 0; i7 < octets.length; i7 += 1) {
          var octet = octets[i7];
          bitsNeeded !== 0 && (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) && (bitsNeeded = 0, codePoint = REPLACER, string3 += String.fromCharCode(codePoint)), bitsNeeded === 0 ? (octet >= 0 && octet <= 127 ? (bitsNeeded = 0, codePoint = octet) : octet >= 192 && octet <= 223 ? (bitsNeeded = 6 * 1, codePoint = octet & 31) : octet >= 224 && octet <= 239 ? (bitsNeeded = 6 * 2, codePoint = octet & 15) : octet >= 240 && octet <= 247 ? (bitsNeeded = 6 * 3, codePoint = octet & 7) : (bitsNeeded = 0, codePoint = REPLACER), bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint)) && (bitsNeeded = 0, codePoint = REPLACER)) : (bitsNeeded -= 6, codePoint = codePoint << 6 | octet & 63), bitsNeeded === 0 && (codePoint <= 65535 ? string3 += String.fromCharCode(codePoint) : (string3 += String.fromCharCode(55296 + (codePoint - 65535 - 1 >> 10)), string3 += String.fromCharCode(56320 + (codePoint - 65535 - 1 & 1023))));
        }
        return this.bitsNeeded = bitsNeeded, this.codePoint = codePoint, string3;
      };
      var supportsStreamOption = function() {
        try {
          return new TextDecoder2().decode(new TextEncoder2().encode("test"), { stream: !0 }) === "test";
        } catch (error2) {
          console.debug("TextDecoder does not support streaming option. Using polyfill instead: " + error2);
        }
        return !1;
      };
      (TextDecoder2 == null || TextEncoder2 == null || !supportsStreamOption()) && (TextDecoder2 = TextDecoderPolyfill);
      var k = function() {
      };
      function XHRWrapper(xhr) {
        this.withCredentials = !1, this.readyState = 0, this.status = 0, this.statusText = "", this.responseText = "", this.onprogress = k, this.onload = k, this.onerror = k, this.onreadystatechange = k, this._contentType = "", this._xhr = xhr, this._sendTimeout = 0, this._abort = k;
      }
      XHRWrapper.prototype.open = function(method, url) {
        this._abort(!0);
        var that = this, xhr = this._xhr, state = 1, timeout2 = 0;
        this._abort = function(silent) {
          that._sendTimeout !== 0 && (clearTimeout2(that._sendTimeout), that._sendTimeout = 0), (state === 1 || state === 2 || state === 3) && (state = 4, xhr.onload = k, xhr.onerror = k, xhr.onabort = k, xhr.onprogress = k, xhr.onreadystatechange = k, xhr.abort(), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), silent || (that.readyState = 4, that.onabort(null), that.onreadystatechange())), state = 0;
        };
        var onStart = function() {
          if (state === 1) {
            var status = 0, statusText = "", contentType = void 0;
            if ("contentType" in xhr)
              status = 200, statusText = "OK", contentType = xhr.contentType;
            else
              try {
                status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type");
              } catch {
                status = 0, statusText = "", contentType = void 0;
              }
            status !== 0 && (state = 2, that.readyState = 2, that.status = status, that.statusText = statusText, that._contentType = contentType, that.onreadystatechange());
          }
        }, onProgress = function() {
          if (onStart(), state === 2 || state === 3) {
            state = 3;
            var responseText = "";
            try {
              responseText = xhr.responseText;
            } catch {
            }
            that.readyState = 3, that.responseText = responseText, that.onprogress();
          }
        }, onFinish = function(type, event2) {
          if ((event2 == null || event2.preventDefault == null) && (event2 = {
            preventDefault: k
          }), onProgress(), state === 1 || state === 2 || state === 3) {
            if (state = 4, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), that.readyState = 4, type === "load")
              that.onload(event2);
            else if (type === "error")
              that.onerror(event2);
            else if (type === "abort")
              that.onabort(event2);
            else
              throw new TypeError();
            that.onreadystatechange();
          }
        }, onReadyStateChange = function(event2) {
          xhr != null && (xhr.readyState === 4 ? (!("onload" in xhr) || !("onerror" in xhr) || !("onabort" in xhr)) && onFinish(xhr.responseText === "" ? "error" : "load", event2) : xhr.readyState === 3 ? "onprogress" in xhr || onProgress() : xhr.readyState === 2 && onStart());
        }, onTimeout = function() {
          timeout2 = setTimeout2(function() {
            onTimeout();
          }, 500), xhr.readyState === 3 && onProgress();
        };
        "onload" in xhr && (xhr.onload = function(event2) {
          onFinish("load", event2);
        }), "onerror" in xhr && (xhr.onerror = function(event2) {
          onFinish("error", event2);
        }), "onabort" in xhr && (xhr.onabort = function(event2) {
          onFinish("abort", event2);
        }), "onprogress" in xhr && (xhr.onprogress = onProgress), "onreadystatechange" in xhr && (xhr.onreadystatechange = function(event2) {
          onReadyStateChange(event2);
        }), ("contentType" in xhr || !("ontimeout" in XMLHttpRequest2.prototype)) && (url += (url.indexOf("?") === -1 ? "?" : "&") + "padding=true"), xhr.open(method, url, !0), "readyState" in xhr && (timeout2 = setTimeout2(function() {
          onTimeout();
        }, 0));
      }, XHRWrapper.prototype.abort = function() {
        this._abort(!1);
      }, XHRWrapper.prototype.getResponseHeader = function(name) {
        return this._contentType;
      }, XHRWrapper.prototype.setRequestHeader = function(name, value) {
        var xhr = this._xhr;
        "setRequestHeader" in xhr && xhr.setRequestHeader(name, value);
      }, XHRWrapper.prototype.getAllResponseHeaders = function() {
        return this._xhr.getAllResponseHeaders != null && this._xhr.getAllResponseHeaders() || "";
      }, XHRWrapper.prototype.send = function() {
        if ((!("ontimeout" in XMLHttpRequest2.prototype) || !("sendAsBinary" in XMLHttpRequest2.prototype) && !("mozAnon" in XMLHttpRequest2.prototype)) && document2 != null && document2.readyState != null && document2.readyState !== "complete") {
          var that = this;
          that._sendTimeout = setTimeout2(function() {
            that._sendTimeout = 0, that.send();
          }, 4);
          return;
        }
        var xhr = this._xhr;
        "withCredentials" in xhr && (xhr.withCredentials = this.withCredentials);
        try {
          xhr.send(void 0);
        } catch (error1) {
          throw error1;
        }
      };
      function toLowerCase(name) {
        return name.replace(/[A-Z]/g, function(c5) {
          return String.fromCharCode(c5.charCodeAt(0) + 32);
        });
      }
      function HeadersPolyfill(all) {
        for (var map3 = /* @__PURE__ */ Object.create(null), array2 = all.split(`\r
`), i7 = 0; i7 < array2.length; i7 += 1) {
          var line = array2[i7], parts = line.split(": "), name = parts.shift(), value = parts.join(": ");
          map3[toLowerCase(name)] = value;
        }
        this._map = map3;
      }
      HeadersPolyfill.prototype.get = function(name) {
        return this._map[toLowerCase(name)];
      }, XMLHttpRequest2 != null && XMLHttpRequest2.HEADERS_RECEIVED == null && (XMLHttpRequest2.HEADERS_RECEIVED = 2);
      function XHRTransport() {
      }
      XHRTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        xhr.open("GET", url);
        var offset = 0;
        xhr.onprogress = function() {
          var responseText = xhr.responseText, chunk = responseText.slice(offset);
          offset += chunk.length, onProgressCallback(chunk);
        }, xhr.onerror = function(event2) {
          event2.preventDefault(), onFinishCallback(new Error("NetworkError"));
        }, xhr.onload = function() {
          onFinishCallback(null);
        }, xhr.onabort = function() {
          onFinishCallback(null);
        }, xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest2.HEADERS_RECEIVED) {
            var status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type"), headers2 = xhr.getAllResponseHeaders();
            onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers2));
          }
        }, xhr.withCredentials = withCredentials;
        for (var name in headers)
          Object.prototype.hasOwnProperty.call(headers, name) && xhr.setRequestHeader(name, headers[name]);
        return xhr.send(), xhr;
      };
      function HeadersWrapper(headers) {
        this._headers = headers;
      }
      HeadersWrapper.prototype.get = function(name) {
        return this._headers.get(name);
      };
      function FetchTransport() {
      }
      FetchTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        var reader = null, controller = new AbortController2(), signal = controller.signal, textDecoder = new TextDecoder2();
        return fetch2(url, {
          headers,
          credentials: withCredentials ? "include" : "same-origin",
          signal,
          cache: "no-store"
        }).then(function(response) {
          return reader = response.body.getReader(), onStartCallback(response.status, response.statusText, response.headers.get("Content-Type"), new HeadersWrapper(response.headers)), new Promise2(function(resolve, reject) {
            var readNextChunk = function() {
              reader.read().then(function(result) {
                if (result.done)
                  resolve(void 0);
                else {
                  var chunk = textDecoder.decode(result.value, { stream: !0 });
                  onProgressCallback(chunk), readNextChunk();
                }
              }).catch(function(error2) {
                reject(error2);
              });
            };
            readNextChunk();
          });
        }).catch(function(error2) {
          if (error2.name !== "AbortError")
            return error2;
        }).then(function(error2) {
          onFinishCallback(error2);
        }), {
          abort: function() {
            reader != null && reader.cancel(), controller.abort();
          }
        };
      };
      function EventTarget() {
        this._listeners = /* @__PURE__ */ Object.create(null);
      }
      function throwError(e3) {
        setTimeout2(function() {
          throw e3;
        }, 0);
      }
      EventTarget.prototype.dispatchEvent = function(event2) {
        event2.target = this;
        var typeListeners = this._listeners[event2.type];
        if (typeListeners != null)
          for (var length2 = typeListeners.length, i7 = 0; i7 < length2; i7 += 1) {
            var listener = typeListeners[i7];
            try {
              typeof listener.handleEvent == "function" ? listener.handleEvent(event2) : listener.call(this, event2);
            } catch (e3) {
              throwError(e3);
            }
          }
      }, EventTarget.prototype.addEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        typeListeners == null && (typeListeners = [], listeners[type] = typeListeners);
        for (var found = !1, i7 = 0; i7 < typeListeners.length; i7 += 1)
          typeListeners[i7] === listener && (found = !0);
        found || typeListeners.push(listener);
      }, EventTarget.prototype.removeEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        if (typeListeners != null) {
          for (var filtered = [], i7 = 0; i7 < typeListeners.length; i7 += 1)
            typeListeners[i7] !== listener && filtered.push(typeListeners[i7]);
          filtered.length === 0 ? delete listeners[type] : listeners[type] = filtered;
        }
      };
      function Event2(type) {
        this.type = type, this.target = void 0;
      }
      function MessageEvent(type, options) {
        Event2.call(this, type), this.data = options.data, this.lastEventId = options.lastEventId;
      }
      MessageEvent.prototype = Object.create(Event2.prototype);
      function ConnectionEvent(type, options) {
        Event2.call(this, type), this.status = options.status, this.statusText = options.statusText, this.headers = options.headers;
      }
      ConnectionEvent.prototype = Object.create(Event2.prototype);
      function ErrorEvent(type, options) {
        Event2.call(this, type), this.error = options.error;
      }
      ErrorEvent.prototype = Object.create(Event2.prototype);
      var WAITING = -1, CONNECTING = 0, OPEN = 1, CLOSED = 2, AFTER_CR = -1, FIELD_START = 0, FIELD = 1, VALUE_START = 2, VALUE = 3, contentTypeRegExp = /^text\/event\-stream(;.*)?$/i, MINIMUM_DURATION = 1e3, MAXIMUM_DURATION = 18e6, parseDuration = function(value, def) {
        var n4 = value == null ? def : parseInt(value, 10);
        return n4 !== n4 && (n4 = def), clampDuration(n4);
      }, clampDuration = function(n4) {
        return Math.min(Math.max(n4, MINIMUM_DURATION), MAXIMUM_DURATION);
      }, fire = function(that, f6, event2) {
        try {
          typeof f6 == "function" && f6.call(that, event2);
        } catch (e3) {
          throwError(e3);
        }
      };
      function EventSourcePolyfill(url, options) {
        EventTarget.call(this), options = options || {}, this.onopen = void 0, this.onmessage = void 0, this.onerror = void 0, this.url = void 0, this.readyState = void 0, this.withCredentials = void 0, this.headers = void 0, this._close = void 0, start(this, url, options);
      }
      function getBestXHRTransport() {
        return XMLHttpRequest2 != null && "withCredentials" in XMLHttpRequest2.prototype || XDomainRequest == null ? new XMLHttpRequest2() : new XDomainRequest();
      }
      var isFetchSupported = fetch2 != null && Response2 != null && "body" in Response2.prototype;
      function start(es, url, options) {
        url = String(url);
        var withCredentials = Boolean(options.withCredentials), lastEventIdQueryParameterName = options.lastEventIdQueryParameterName || "lastEventId", initialRetry = clampDuration(1e3), heartbeatTimeout = parseDuration(options.heartbeatTimeout, 45e3), lastEventId = "", retry2 = initialRetry, wasActivity = !1, textLength = 0, headers = options.headers || {}, TransportOption = options.Transport, xhr = isFetchSupported && TransportOption == null ? void 0 : new XHRWrapper(TransportOption != null ? new TransportOption() : getBestXHRTransport()), transport = TransportOption != null && typeof TransportOption != "string" ? new TransportOption() : xhr == null ? new FetchTransport() : new XHRTransport(), abortController = void 0, timeout2 = 0, currentState = WAITING, dataBuffer = "", lastEventIdBuffer = "", eventTypeBuffer = "", textBuffer = "", state = FIELD_START, fieldStart = 0, valueStart = 0, onStart = function(status, statusText, contentType, headers2) {
          if (currentState === CONNECTING)
            if (status === 200 && contentType != null && contentTypeRegExp.test(contentType)) {
              currentState = OPEN, wasActivity = Date.now(), retry2 = initialRetry, es.readyState = OPEN;
              var event2 = new ConnectionEvent("open", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onopen, event2);
            } else {
              var message = "";
              status !== 200 ? (statusText && (statusText = statusText.replace(/\s+/g, " ")), message = "EventSource's response has a status " + status + " " + statusText + " that is not 200. Aborting the connection.") : message = "EventSource's response has a Content-Type specifying an unsupported type: " + (contentType == null ? "-" : contentType.replace(/\s+/g, " ")) + ". Aborting the connection.", close();
              var event2 = new ConnectionEvent("error", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onerror, event2), console.error(message);
            }
        }, onProgress = function(textChunk) {
          if (currentState === OPEN) {
            for (var n4 = -1, i7 = 0; i7 < textChunk.length; i7 += 1) {
              var c5 = textChunk.charCodeAt(i7);
              (c5 === `
`.charCodeAt(0) || c5 === "\r".charCodeAt(0)) && (n4 = i7);
            }
            var chunk = (n4 !== -1 ? textBuffer : "") + textChunk.slice(0, n4 + 1);
            textBuffer = (n4 === -1 ? textBuffer : "") + textChunk.slice(n4 + 1), textChunk !== "" && (wasActivity = Date.now(), textLength += textChunk.length);
            for (var position = 0; position < chunk.length; position += 1) {
              var c5 = chunk.charCodeAt(position);
              if (state === AFTER_CR && c5 === `
`.charCodeAt(0))
                state = FIELD_START;
              else if (state === AFTER_CR && (state = FIELD_START), c5 === "\r".charCodeAt(0) || c5 === `
`.charCodeAt(0)) {
                if (state !== FIELD_START) {
                  state === FIELD && (valueStart = position + 1);
                  var field = chunk.slice(fieldStart, valueStart - 1), value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === " ".charCodeAt(0) ? 1 : 0), position);
                  field === "data" ? (dataBuffer += `
`, dataBuffer += value) : field === "id" ? lastEventIdBuffer = value : field === "event" ? eventTypeBuffer = value : field === "retry" ? (initialRetry = parseDuration(value, initialRetry), retry2 = initialRetry) : field === "heartbeatTimeout" && (heartbeatTimeout = parseDuration(value, heartbeatTimeout), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = setTimeout2(function() {
                    onTimeout();
                  }, heartbeatTimeout)));
                }
                if (state === FIELD_START) {
                  if (dataBuffer !== "") {
                    lastEventId = lastEventIdBuffer, eventTypeBuffer === "" && (eventTypeBuffer = "message");
                    var event2 = new MessageEvent(eventTypeBuffer, {
                      data: dataBuffer.slice(1),
                      lastEventId: lastEventIdBuffer
                    });
                    if (es.dispatchEvent(event2), eventTypeBuffer === "open" ? fire(es, es.onopen, event2) : eventTypeBuffer === "message" ? fire(es, es.onmessage, event2) : eventTypeBuffer === "error" && fire(es, es.onerror, event2), currentState === CLOSED)
                      return;
                  }
                  dataBuffer = "", eventTypeBuffer = "";
                }
                state = c5 === "\r".charCodeAt(0) ? AFTER_CR : FIELD_START;
              } else
                state === FIELD_START && (fieldStart = position, state = FIELD), state === FIELD ? c5 === ":".charCodeAt(0) && (valueStart = position + 1, state = VALUE_START) : state === VALUE_START && (state = VALUE);
            }
          }
        }, onFinish = function(error2) {
          if (currentState === OPEN || currentState === CONNECTING) {
            currentState = WAITING, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), timeout2 = setTimeout2(function() {
              onTimeout();
            }, retry2), retry2 = clampDuration(Math.min(initialRetry * 16, retry2 * 2)), es.readyState = CONNECTING;
            var event2 = new ErrorEvent("error", { error: error2 });
            es.dispatchEvent(event2), fire(es, es.onerror, event2), error2 != null && console.error(error2);
          }
        }, close = function() {
          currentState = CLOSED, abortController != null && (abortController.abort(), abortController = void 0), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), es.readyState = CLOSED;
        }, onTimeout = function() {
          if (timeout2 = 0, currentState !== WAITING) {
            if (!wasActivity && abortController != null)
              onFinish(new Error("No activity within " + heartbeatTimeout + " milliseconds. " + (currentState === CONNECTING ? "No response received." : textLength + " chars received.") + " Reconnecting.")), abortController != null && (abortController.abort(), abortController = void 0);
            else {
              var nextHeartbeat = Math.max((wasActivity || Date.now()) + heartbeatTimeout - Date.now(), 1);
              wasActivity = !1, timeout2 = setTimeout2(function() {
                onTimeout();
              }, nextHeartbeat);
            }
            return;
          }
          wasActivity = !1, textLength = 0, timeout2 = setTimeout2(function() {
            onTimeout();
          }, heartbeatTimeout), currentState = CONNECTING, dataBuffer = "", eventTypeBuffer = "", lastEventIdBuffer = lastEventId, textBuffer = "", fieldStart = 0, valueStart = 0, state = FIELD_START;
          var requestURL = url;
          if (url.slice(0, 5) !== "data:" && url.slice(0, 5) !== "blob:" && lastEventId !== "") {
            var i7 = url.indexOf("?");
            requestURL = i7 === -1 ? url : url.slice(0, i7 + 1) + url.slice(i7 + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function(p5, paramName) {
              return paramName === lastEventIdQueryParameterName ? "" : p5;
            }), requestURL += (url.indexOf("?") === -1 ? "?" : "&") + lastEventIdQueryParameterName + "=" + encodeURIComponent(lastEventId);
          }
          var withCredentials2 = es.withCredentials, requestHeaders = {};
          requestHeaders.Accept = "text/event-stream";
          var headers2 = es.headers;
          if (headers2 != null)
            for (var name in headers2)
              Object.prototype.hasOwnProperty.call(headers2, name) && (requestHeaders[name] = headers2[name]);
          try {
            abortController = transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials2, requestHeaders);
          } catch (error2) {
            throw close(), error2;
          }
        };
        es.url = url, es.readyState = CONNECTING, es.withCredentials = withCredentials, es.headers = headers, es._close = close, onTimeout();
      }
      EventSourcePolyfill.prototype = Object.create(EventTarget.prototype), EventSourcePolyfill.prototype.CONNECTING = CONNECTING, EventSourcePolyfill.prototype.OPEN = OPEN, EventSourcePolyfill.prototype.CLOSED = CLOSED, EventSourcePolyfill.prototype.close = function() {
        this._close();
      }, EventSourcePolyfill.CONNECTING = CONNECTING, EventSourcePolyfill.OPEN = OPEN, EventSourcePolyfill.CLOSED = CLOSED, EventSourcePolyfill.prototype.withCredentials = void 0;
      var R2 = NativeEventSource;
      XMLHttpRequest2 != null && (NativeEventSource == null || !("withCredentials" in NativeEventSource.prototype)) && (R2 = EventSourcePolyfill), function(factory) {
        if (typeof module == "object" && typeof module.exports == "object") {
          var v3 = factory(exports);
          v3 !== void 0 && (module.exports = v3);
        } else
          typeof define == "function" && define.amd ? define(["exports"], factory) : factory(global2);
      }(function(exports2) {
        exports2.EventSourcePolyfill = EventSourcePolyfill, exports2.NativeEventSource = NativeEventSource, exports2.EventSource = R2;
      });
    })(typeof globalThis > "u" ? typeof window < "u" ? window : typeof self < "u" ? self : exports : globalThis);
  }
});

// node_modules/@sanity/eventsource/browser.js
var require_browser2 = __commonJS({
  "node_modules/@sanity/eventsource/browser.js"(exports, module) {
    var evs = require_eventsource2();
    module.exports = evs.EventSourcePolyfill;
  }
});

// server-entry-module:@remix-run/dev/server-build
var server_build_exports = {};
__export(server_build_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  publicPath: () => publicPath,
  routes: () => routes
});

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});

// node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js
function _extends4() {
  return _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends4.apply(this, arguments);
}

// node_modules/@remix-run/react/dist/esm/components.js
var React3 = __toESM(require_react());
init_dist2();

// node_modules/@remix-run/react/dist/esm/errorBoundaries.js
var import_react = __toESM(require_react());
init_dist2();
var RemixErrorBoundary = class extends import_react.default.Component {
  constructor(props) {
    super(props), this.state = {
      error: props.error || null,
      location: props.location
    };
  }
  static getDerivedStateFromError(error2) {
    return {
      error: error2
    };
  }
  static getDerivedStateFromProps(props, state) {
    return state.location !== props.location ? {
      error: props.error || null,
      location: props.location
    } : {
      error: props.error || state.error,
      location: state.location
    };
  }
  render() {
    return this.state.error ? /* @__PURE__ */ import_react.default.createElement(this.props.component, {
      error: this.state.error
    }) : this.props.children;
  }
};
function RemixRootDefaultErrorBoundary({
  error: error2
}) {
  return console.error(error2), /* @__PURE__ */ import_react.default.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ import_react.default.createElement("head", null, /* @__PURE__ */ import_react.default.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ import_react.default.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  }), /* @__PURE__ */ import_react.default.createElement("title", null, "Application Error!")), /* @__PURE__ */ import_react.default.createElement("body", null, /* @__PURE__ */ import_react.default.createElement("main", {
    style: {
      fontFamily: "system-ui, sans-serif",
      padding: "2rem"
    }
  }, /* @__PURE__ */ import_react.default.createElement("h1", {
    style: {
      fontSize: "24px"
    }
  }, "Application Error"), /* @__PURE__ */ import_react.default.createElement("pre", {
    style: {
      padding: "2rem",
      background: "hsla(10, 50%, 50%, 0.1)",
      color: "red",
      overflow: "auto"
    }
  }, error2.stack)), /* @__PURE__ */ import_react.default.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."
              );
            `
    }
  })));
}
function V2_RemixRootDefaultErrorBoundary() {
  let error2 = useRouteError();
  if (isRouteErrorResponse(error2))
    return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultCatchBoundaryImpl, {
      caught: error2
    });
  if (error2 instanceof Error)
    return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultErrorBoundary, {
      error: error2
    });
  {
    let errorString = error2 == null ? "Unknown Error" : typeof error2 == "object" && "toString" in error2 ? error2.toString() : JSON.stringify(error2);
    return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultErrorBoundary, {
      error: new Error(errorString)
    });
  }
}
var RemixCatchContext = /* @__PURE__ */ import_react.default.createContext(void 0);
function useCatch() {
  return (0, import_react.useContext)(RemixCatchContext);
}
function RemixCatchBoundary({
  catch: catchVal,
  component: Component3,
  children
}) {
  return catchVal ? /* @__PURE__ */ import_react.default.createElement(RemixCatchContext.Provider, {
    value: catchVal
  }, /* @__PURE__ */ import_react.default.createElement(Component3, null)) : /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, children);
}
function RemixRootDefaultCatchBoundary() {
  let caught = useCatch();
  return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultCatchBoundaryImpl, {
    caught
  });
}
function RemixRootDefaultCatchBoundaryImpl({
  caught
}) {
  return /* @__PURE__ */ import_react.default.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ import_react.default.createElement("head", null, /* @__PURE__ */ import_react.default.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ import_react.default.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  }), /* @__PURE__ */ import_react.default.createElement("title", null, "Unhandled Thrown Response!")), /* @__PURE__ */ import_react.default.createElement("body", null, /* @__PURE__ */ import_react.default.createElement("h1", {
    style: {
      fontFamily: "system-ui, sans-serif",
      padding: "2rem"
    }
  }, caught.status, " ", caught.statusText), /* @__PURE__ */ import_react.default.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws 404s (and other responses). Check out https://remix.run/guides/not-found for more information."
              );
            `
    }
  })));
}

// node_modules/@remix-run/react/dist/esm/invariant.js
function invariant2(value, message) {
  if (value === !1 || value === null || typeof value > "u")
    throw new Error(message);
}

// node_modules/@remix-run/react/dist/esm/links.js
init_dist2();

// node_modules/@remix-run/react/dist/esm/routeModules.js
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache)
    return routeModulesCache[route.id];
  try {
    let routeModule = await import(
      /* webpackIgnore: true */
      route.module
    );
    return routeModulesCache[route.id] = routeModule, routeModule;
  } catch {
    return window.location.reload(), new Promise(() => {
    });
  }
}

// node_modules/@remix-run/react/dist/esm/links.js
function getLinksForMatches(matches, routeModules, manifest) {
  let descriptors = matches.map((match2) => {
    var _module$links;
    let module = routeModules[match2.route.id];
    return ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || [];
  }).flat(1), preloads = getCurrentPageModulePreloadHrefs(matches, manifest);
  return dedupe(descriptors, preloads);
}
function isPageLinkDescriptor(object) {
  return object != null && typeof object.page == "string";
}
function isHtmlLinkDescriptor(object) {
  return object == null ? !1 : object.href == null ? object.rel === "preload" && (typeof object.imageSrcSet == "string" || typeof object.imagesrcset == "string") && (typeof object.imageSizes == "string" || typeof object.imagesizes == "string") : typeof object.rel == "string" && typeof object.href == "string";
}
async function getStylesheetPrefetchLinks(matches, manifest, routeModules) {
  return (await Promise.all(matches.map(async (match2) => {
    let mod = await loadRouteModule(manifest.routes[match2.route.id], routeModules);
    return mod.links ? mod.links() : [];
  }))).flat(1).filter(isHtmlLinkDescriptor).filter((link3) => link3.rel === "stylesheet" || link3.rel === "preload").map((link3) => link3.rel === "preload" ? {
    ...link3,
    rel: "prefetch"
  } : {
    ...link3,
    rel: "prefetch",
    as: "style"
  });
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location2, mode) {
  let path2 = parsePathPatch(page), isNew = (match2, index) => currentMatches[index] ? match2.route.id !== currentMatches[index].route.id : !0, matchPathChanged = (match2, index) => {
    var _currentMatches$index;
    return currentMatches[index].pathname !== match2.pathname || ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith("*")) && currentMatches[index].params["*"] !== match2.params["*"];
  };
  return mode === "data" && location2.search !== path2.search ? nextMatches.filter((match2, index) => {
    if (!manifest.routes[match2.route.id].hasLoader)
      return !1;
    if (isNew(match2, index) || matchPathChanged(match2, index))
      return !0;
    if (match2.route.shouldRevalidate) {
      var _currentMatches$;
      let routeChoice = match2.route.shouldRevalidate({
        currentUrl: new URL(location2.pathname + location2.search + location2.hash, window.origin),
        currentParams: ((_currentMatches$ = currentMatches[0]) === null || _currentMatches$ === void 0 ? void 0 : _currentMatches$.params) || {},
        nextUrl: new URL(page, window.origin),
        nextParams: match2.params,
        defaultShouldRevalidate: !0
      });
      if (typeof routeChoice == "boolean")
        return routeChoice;
    }
    return !0;
  }) : nextMatches.filter((match2, index) => {
    let manifestRoute = manifest.routes[match2.route.id];
    return (mode === "assets" || manifestRoute.hasLoader) && (isNew(match2, index) || matchPathChanged(match2, index));
  });
}
function getDataLinkHrefs(page, matches, manifest) {
  let path2 = parsePathPatch(page);
  return dedupeHrefs(matches.filter((match2) => manifest.routes[match2.route.id].hasLoader).map((match2) => {
    let {
      pathname,
      search
    } = path2, searchParams = new URLSearchParams(search);
    return searchParams.set("_data", match2.route.id), `${pathname}?${searchParams}`;
  }));
}
function getModuleLinkHrefs(matches, manifestPatch) {
  return dedupeHrefs(matches.map((match2) => {
    let route = manifestPatch.routes[match2.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function getCurrentPageModulePreloadHrefs(matches, manifest) {
  return dedupeHrefs(matches.map((match2) => {
    let route = manifest.routes[match2.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function dedupe(descriptors, preloads) {
  let set = /* @__PURE__ */ new Set(), preloadsSet = new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    if (!isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href))
      return deduped;
    let str = JSON.stringify(descriptor);
    return set.has(str) || (set.add(str), deduped.push(descriptor)), deduped;
  }, []);
}
function parsePathPatch(href) {
  let path2 = parsePath(href);
  return path2.search === void 0 && (path2.search = ""), path2;
}

// node_modules/@remix-run/react/dist/esm/markup.js
var ESCAPE_LOOKUP = {
  "&": "\\u0026",
  ">": "\\u003e",
  "<": "\\u003c",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
}, ESCAPE_REGEX = /[&><\u2028\u2029]/g;
function escapeHtml(html) {
  return html.replace(ESCAPE_REGEX, (match2) => ESCAPE_LOOKUP[match2]);
}
function createHtml(html) {
  return {
    __html: html
  };
}

// node_modules/@remix-run/react/dist/esm/transition.js
var IDLE_TRANSITION = {
  state: "idle",
  submission: void 0,
  location: void 0,
  type: "idle"
}, IDLE_FETCHER2 = {
  state: "idle",
  type: "init",
  data: void 0,
  submission: void 0
};

// node_modules/@remix-run/react/dist/esm/components.js
function useDataRouterContext3() {
  let context2 = React3.useContext(DataRouterContext);
  return invariant2(context2, "You must render this element inside a <DataRouterContext.Provider> element"), context2;
}
function useDataRouterStateContext() {
  let context2 = React3.useContext(DataRouterStateContext);
  return invariant2(context2, "You must render this element inside a <DataRouterStateContext.Provider> element"), context2;
}
var RemixContext = /* @__PURE__ */ React3.createContext(void 0);
RemixContext.displayName = "Remix";
function useRemixContext() {
  let context2 = React3.useContext(RemixContext);
  return invariant2(context2, "You must render this element inside a <Remix> element"), context2;
}
function RemixRoute({
  id
}) {
  let {
    routeModules
  } = useRemixContext();
  invariant2(routeModules, `Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`);
  let {
    default: Component3
  } = routeModules[id];
  return invariant2(Component3, `Route "${id}" has no component! Please go add a \`default\` export in the route module file.
If you were trying to navigate or submit to a resource route, use \`<a>\` instead of \`<Link>\` or \`<Form reloadDocument>\`.`), /* @__PURE__ */ React3.createElement(Component3, null);
}
function RemixRouteError({
  id
}) {
  let {
    future: future2,
    routeModules
  } = useRemixContext();
  invariant2(routeModules, `Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`);
  let error2 = useRouteError(), {
    CatchBoundary: CatchBoundary2,
    ErrorBoundary: ErrorBoundary2
  } = routeModules[id];
  if (future2.v2_errorBoundary) {
    if (id === "root" && (ErrorBoundary2 || (ErrorBoundary2 = V2_RemixRootDefaultErrorBoundary)), ErrorBoundary2)
      return /* @__PURE__ */ React3.createElement(ErrorBoundary2, null);
    throw error2;
  }
  if (id === "root" && (CatchBoundary2 || (CatchBoundary2 = RemixRootDefaultCatchBoundary), ErrorBoundary2 || (ErrorBoundary2 = RemixRootDefaultErrorBoundary)), isRouteErrorResponse(error2)) {
    let tError = error2;
    if ((tError == null ? void 0 : tError.error) instanceof Error && tError.status !== 404 && ErrorBoundary2)
      return /* @__PURE__ */ React3.createElement(ErrorBoundary2, {
        error: tError.error
      });
    if (CatchBoundary2)
      return /* @__PURE__ */ React3.createElement(RemixCatchBoundary, {
        component: CatchBoundary2,
        catch: error2
      });
  }
  if (error2 instanceof Error && ErrorBoundary2)
    return /* @__PURE__ */ React3.createElement(ErrorBoundary2, {
      error: error2
    });
  throw error2;
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let [maybePrefetch, setMaybePrefetch] = React3.useState(!1), [shouldPrefetch, setShouldPrefetch] = React3.useState(!1), {
    onFocus,
    onBlur,
    onMouseEnter,
    onMouseLeave,
    onTouchStart: onTouchStart2
  } = theirElementProps;
  React3.useEffect(() => {
    prefetch === "render" && setShouldPrefetch(!0);
  }, [prefetch]);
  let setIntent = () => {
    prefetch === "intent" && setMaybePrefetch(!0);
  }, cancelIntent = () => {
    prefetch === "intent" && (setMaybePrefetch(!1), setShouldPrefetch(!1));
  };
  return React3.useEffect(() => {
    if (maybePrefetch) {
      let id = setTimeout(() => {
        setShouldPrefetch(!0);
      }, 100);
      return () => {
        clearTimeout(id);
      };
    }
  }, [maybePrefetch]), [shouldPrefetch, {
    onFocus: composeEventHandlers(onFocus, setIntent),
    onBlur: composeEventHandlers(onBlur, cancelIntent),
    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
    onTouchStart: composeEventHandlers(onTouchStart2, setIntent)
  }];
}
var NavLink2 = /* @__PURE__ */ React3.forwardRef(({
  to,
  prefetch = "none",
  ...props
}, forwardedRef) => {
  let isAbsolute = typeof to == "string" && (/^[a-z+]+:\/\//i.test(to) || to.startsWith("//")), href = useHref(to), [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(NavLink, _extends4({
    ref: forwardedRef,
    to
  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React3.createElement(PrefetchPageLinks, {
    page: href
  }) : null);
});
NavLink2.displayName = "NavLink";
var Link2 = /* @__PURE__ */ React3.forwardRef(({
  to,
  prefetch = "none",
  ...props
}, forwardedRef) => {
  let isAbsolute = typeof to == "string" && (/^[a-z+]+:\/\//i.test(to) || to.startsWith("//")), href = useHref(to), [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Link, _extends4({
    ref: forwardedRef,
    to
  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React3.createElement(PrefetchPageLinks, {
    page: href
  }) : null);
});
Link2.displayName = "Link";
function composeEventHandlers(theirHandler, ourHandler) {
  return (event2) => {
    theirHandler && theirHandler(event2), event2.defaultPrevented || ourHandler(event2);
  };
}
function Links() {
  let {
    manifest,
    routeModules
  } = useRemixContext(), {
    matches
  } = useDataRouterStateContext(), links5 = React3.useMemo(() => getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, links5.map((link3) => {
    if (isPageLinkDescriptor(link3))
      return /* @__PURE__ */ React3.createElement(PrefetchPageLinks, _extends4({
        key: link3.page
      }, link3));
    let imageSrcSet = null;
    return "useId" in React3 ? (link3.imagesrcset && (link3.imageSrcSet = imageSrcSet = link3.imagesrcset, delete link3.imagesrcset), link3.imagesizes && (link3.imageSizes = link3.imagesizes, delete link3.imagesizes)) : (link3.imageSrcSet && (link3.imagesrcset = imageSrcSet = link3.imageSrcSet, delete link3.imageSrcSet), link3.imageSizes && (link3.imagesizes = link3.imageSizes, delete link3.imageSizes)), /* @__PURE__ */ React3.createElement("link", _extends4({
      key: link3.rel + (link3.href || "") + (imageSrcSet || "")
    }, link3));
  }));
}
function PrefetchPageLinks({
  page,
  ...dataLinkProps
}) {
  let {
    router
  } = useDataRouterContext3(), matches = React3.useMemo(() => matchRoutes(router.routes, page), [router.routes, page]);
  return matches ? /* @__PURE__ */ React3.createElement(PrefetchPageLinksImpl, _extends4({
    page,
    matches
  }, dataLinkProps)) : (console.warn(`Tried to prefetch ${page} but no routes matched.`), null);
}
function usePrefetchedStylesheets(matches) {
  let {
    manifest,
    routeModules
  } = useRemixContext(), [styleLinks, setStyleLinks] = React3.useState([]);
  return React3.useEffect(() => {
    let interrupted = !1;
    return getStylesheetPrefetchLinks(matches, manifest, routeModules).then((links5) => {
      interrupted || setStyleLinks(links5);
    }), () => {
      interrupted = !0;
    };
  }, [matches, manifest, routeModules]), styleLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location2 = useLocation(), {
    manifest
  } = useRemixContext(), {
    matches
  } = useDataRouterStateContext(), newMatchesForData = React3.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location2, "data"), [page, nextMatches, matches, manifest, location2]), newMatchesForAssets = React3.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location2, "assets"), [page, nextMatches, matches, manifest, location2]), dataHrefs = React3.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]), moduleHrefs = React3.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]), styleLinks = usePrefetchedStylesheets(newMatchesForAssets);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: href,
    rel: "prefetch",
    as: "fetch",
    href
  }, linkProps))), moduleHrefs.map((href) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: href,
    rel: "modulepreload",
    href
  }, linkProps))), styleLinks.map((link3) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: link3.href
  }, link3))));
}
function V1Meta() {
  let {
    routeModules
  } = useRemixContext(), {
    matches,
    loaderData
  } = useDataRouterStateContext(), location2 = useLocation(), meta5 = {}, parentsData = {};
  for (let match2 of matches) {
    let routeId = match2.route.id, data = loaderData[routeId], params = match2.params, routeModule = routeModules[routeId];
    if (routeModule.meta) {
      let routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
        data,
        parentsData,
        params,
        location: location2,
        matches: void 0
      }) : routeModule.meta;
      if (routeMeta && Array.isArray(routeMeta))
        throw new Error(
          "The route at " + match2.route.path + " returns an array. This is only supported with the `v2_meta` future flag in the Remix config. Either set the flag to `true` or update the route's meta function to return an object.\n\nTo reference the v1 meta function API, see https://remix.run/route/meta"
        );
      Object.assign(meta5, routeMeta);
    }
    parentsData[routeId] = data;
  }
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, Object.entries(meta5).map(([name, value]) => {
    if (!value)
      return null;
    if (["charset", "charSet"].includes(name))
      return /* @__PURE__ */ React3.createElement("meta", {
        key: "charset",
        charSet: value
      });
    if (name === "title")
      return /* @__PURE__ */ React3.createElement("title", {
        key: "title"
      }, String(value));
    let isOpenGraphTag = /^(og|music|video|article|book|profile|fb):.+$/.test(name);
    return [value].flat().map((content) => isOpenGraphTag ? /* @__PURE__ */ React3.createElement("meta", {
      property: name,
      content,
      key: name + content
    }) : typeof content == "string" ? /* @__PURE__ */ React3.createElement("meta", {
      name,
      content,
      key: name + content
    }) : /* @__PURE__ */ React3.createElement("meta", _extends4({
      key: name + JSON.stringify(content)
    }, content)));
  }));
}
function V2Meta() {
  let {
    routeModules
  } = useRemixContext(), {
    matches,
    loaderData
  } = useDataRouterStateContext(), location2 = useLocation(), meta5 = [], leafMeta = null, parentsData = {}, matchesWithMeta = matches.map((match2) => ({
    ...match2,
    meta: []
  })), index = -1;
  for (let match2 of matches) {
    index++;
    let routeId = match2.route.id, data = loaderData[routeId], params = match2.params, routeModule = routeModules[routeId], routeMeta = [];
    if (routeModule != null && routeModule.meta ? routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
      data,
      parentsData,
      params,
      location: location2,
      matches: matchesWithMeta
    }) : routeModule.meta : leafMeta && (routeMeta = leafMeta), routeMeta = routeMeta || [], !Array.isArray(routeMeta))
      throw new Error("The `v2_meta` API is enabled in the Remix config, but the route at " + match2.route.path + ` returns an invalid value. In v2, all route meta functions must return an array of meta objects.

To reference the v1 meta function API, see https://remix.run/route/meta`);
    matchesWithMeta[index].meta = routeMeta, meta5 = routeMeta, parentsData[routeId] = data, leafMeta = meta5;
  }
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, meta5.flat().map((metaProps) => metaProps ? "title" in metaProps ? /* @__PURE__ */ React3.createElement("title", {
    key: "title"
  }, String(metaProps.title)) : "charSet" in metaProps || "charset" in metaProps ? /* @__PURE__ */ React3.createElement("meta", {
    key: "charset",
    charSet: metaProps.charSet || metaProps.charset
  }) : /* @__PURE__ */ React3.createElement("meta", _extends4({
    key: JSON.stringify(metaProps)
  }, metaProps)) : null));
}
function Meta() {
  let {
    future: future2
  } = useRemixContext();
  return future2 != null && future2.v2_meta ? /* @__PURE__ */ React3.createElement(V2Meta, null) : /* @__PURE__ */ React3.createElement(V1Meta, null);
}
function Await2(props) {
  return /* @__PURE__ */ React3.createElement(Await, props);
}
var isHydrated = !1;
function Scripts(props) {
  let {
    manifest,
    serverHandoffString,
    abortDelay
  } = useRemixContext(), {
    router,
    static: isStatic,
    staticContext
  } = useDataRouterContext3(), {
    matches
  } = useDataRouterStateContext(), navigation = useNavigation();
  React3.useEffect(() => {
    isHydrated = !0;
  }, []);
  let deferredScripts = [], initialScripts = React3.useMemo(() => {
    let contextScript = staticContext ? `window.__remixContext = ${serverHandoffString};` : " ", activeDeferreds = staticContext == null ? void 0 : staticContext.activeDeferreds;
    contextScript += activeDeferreds ? ["__remixContext.p = function(v,e,p,x) {", "  if (typeof e !== 'undefined') {", "    x=new Error(e.message);", "x.stack=e.stack;", "    p=Promise.reject(x);", "  } else {", "    p=Promise.resolve(v);", "  }", "  return p;", "};", "__remixContext.n = function(i,k) {", "  __remixContext.t = __remixContext.t || {};", "  __remixContext.t[i] = __remixContext.t[i] || {};", "  let p = new Promise((r, e) => {__remixContext.t[i][k] = {r:(v)=>{r(v);},e:(v)=>{e(v);}};});", typeof abortDelay == "number" ? `setTimeout(() => {if(typeof p._error !== "undefined" || typeof p._data !== "undefined"){return;} __remixContext.t[i][k].e(new Error("Server timeout."))}, ${abortDelay});` : "", "  return p;", "};", "__remixContext.r = function(i,k,v,e,p,x) {", "  p = __remixContext.t[i][k];", "  if (typeof e !== 'undefined') {", "    x=new Error(e.message);", "x.stack=e.stack;", "    p.e(x);", "  } else {", "    p.r(v);", "  }", "};"].join(`
`) + Object.entries(activeDeferreds).map(([routeId, deferredData]) => {
      let pendingKeys = new Set(deferredData.pendingKeys), promiseKeyValues = deferredData.deferredKeys.map((key) => {
        if (pendingKeys.has(key))
          return deferredScripts.push(/* @__PURE__ */ React3.createElement(DeferredHydrationScript, {
            key: `${routeId} | ${key}`,
            deferredData,
            routeId,
            dataKey: key
          })), `${JSON.stringify(key)}:__remixContext.n(${JSON.stringify(routeId)}, ${JSON.stringify(key)})`;
        {
          let trackedPromise = deferredData.data[key];
          if (typeof trackedPromise._error < "u") {
            let toSerialize = {
              message: trackedPromise._error.message,
              stack: void 0
            };
            return toSerialize.stack = trackedPromise._error.stack, `${JSON.stringify(key)}:__remixContext.p(!1, ${escapeHtml(JSON.stringify(toSerialize))})`;
          } else {
            if (typeof trackedPromise._data > "u")
              throw new Error(`The deferred data for ${key} was not resolved, did you forget to return data from a deferred promise?`);
            return `${JSON.stringify(key)}:__remixContext.p(${escapeHtml(JSON.stringify(trackedPromise._data))})`;
          }
        }
      }).join(`,
`);
      return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;
    }).join(`
`) + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "") : "";
    let routeModulesScript = isStatic ? `${matches.map((match2, index) => `import ${JSON.stringify(manifest.url)};
import * as route${index} from ${JSON.stringify(manifest.routes[match2.route.id].module)};`).join(`
`)}
window.__remixRouteModules = {${matches.map((match2, index) => `${JSON.stringify(match2.route.id)}:route${index}`).join(",")}};

import(${JSON.stringify(manifest.entry.module)});` : " ";
    return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("script", _extends4({}, props, {
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: createHtml(contextScript),
      type: void 0
    })), /* @__PURE__ */ React3.createElement("script", _extends4({}, props, {
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: createHtml(routeModulesScript),
      type: "module",
      async: !0
    })));
  }, []);
  if (!isStatic && typeof __remixContext == "object" && __remixContext.a)
    for (let i7 = 0; i7 < __remixContext.a; i7++)
      deferredScripts.push(/* @__PURE__ */ React3.createElement(DeferredHydrationScript, {
        key: i7
      }));
  let nextMatches = React3.useMemo(() => {
    if (navigation.location) {
      let matches2 = matchRoutes(router.routes, navigation.location);
      return invariant2(matches2, `No routes match path "${navigation.location.pathname}"`), matches2;
    }
    return [];
  }, [navigation.location, router.routes]), routePreloads = matches.concat(nextMatches).map((match2) => {
    let route = manifest.routes[match2.route.id];
    return (route.imports || []).concat([route.module]);
  }).flat(1), preloads = manifest.entry.imports.concat(routePreloads);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("link", {
    rel: "modulepreload",
    href: manifest.url,
    crossOrigin: props.crossOrigin
  }), /* @__PURE__ */ React3.createElement("link", {
    rel: "modulepreload",
    href: manifest.entry.module,
    crossOrigin: props.crossOrigin
  }), dedupe2(preloads).map((path2) => /* @__PURE__ */ React3.createElement("link", {
    key: path2,
    rel: "modulepreload",
    href: path2,
    crossOrigin: props.crossOrigin
  })), !isHydrated && initialScripts, !isHydrated && deferredScripts);
}
function DeferredHydrationScript({
  dataKey,
  deferredData,
  routeId
}) {
  return typeof document > "u" && deferredData && dataKey && routeId && invariant2(deferredData.pendingKeys.includes(dataKey), `Deferred data for route ${routeId} with key ${dataKey} was not pending but tried to render a script for it.`), /* @__PURE__ */ React3.createElement(React3.Suspense, {
    fallback: typeof document > "u" && deferredData && dataKey && routeId ? null : /* @__PURE__ */ React3.createElement("script", {
      async: !0,
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: {
        __html: " "
      }
    })
  }, typeof document > "u" && deferredData && dataKey && routeId ? /* @__PURE__ */ React3.createElement(Await2, {
    resolve: deferredData.data[dataKey],
    errorElement: /* @__PURE__ */ React3.createElement(ErrorDeferredHydrationScript, {
      dataKey,
      routeId
    }),
    children: (data) => /* @__PURE__ */ React3.createElement("script", {
      async: !0,
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: {
        __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, ${escapeHtml(JSON.stringify(data))});`
      }
    })
  }) : /* @__PURE__ */ React3.createElement("script", {
    async: !0,
    suppressHydrationWarning: !0,
    dangerouslySetInnerHTML: {
      __html: " "
    }
  }));
}
function ErrorDeferredHydrationScript({
  dataKey,
  routeId
}) {
  let error2 = useAsyncError(), toSerialize = {
    message: error2.message,
    stack: void 0
  };
  return toSerialize.stack = error2.stack, /* @__PURE__ */ React3.createElement("script", {
    suppressHydrationWarning: !0,
    dangerouslySetInnerHTML: {
      __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, !1, ${escapeHtml(JSON.stringify(toSerialize))});`
    }
  });
}
function dedupe2(array2) {
  return [...new Set(array2)];
}
function useMatches2() {
  let {
    routeModules
  } = useRemixContext();
  return useMatches().map((match2) => ({
    id: match2.id,
    pathname: match2.pathname,
    params: match2.params,
    data: match2.data,
    handle: routeModules[match2.id].handle
  }));
}
function useLoaderData2() {
  return useLoaderData();
}
function useActionData2() {
  return useActionData();
}
function useTransition() {
  let navigation = useNavigation();
  return React3.useMemo(() => convertNavigationToTransition(navigation), [navigation]);
}
function convertNavigationToTransition(navigation) {
  let {
    location: location2,
    state,
    formMethod,
    formAction,
    formEncType,
    formData
  } = navigation;
  if (!location2)
    return IDLE_TRANSITION;
  let isActionSubmission = formMethod != null && ["POST", "PUT", "PATCH", "DELETE"].includes(formMethod.toUpperCase());
  if (state === "submitting" && formMethod && formAction && formEncType && formData) {
    if (isActionSubmission)
      return {
        location: location2,
        state,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        type: "actionSubmission"
      };
    invariant2(!1, "Encountered an unexpected navigation scenario in useTransition()");
  }
  if (state === "loading") {
    let {
      _isRedirect,
      _isFetchActionRedirect
    } = location2.state || {};
    if (formMethod && formAction && formEncType && formData) {
      if (_isRedirect)
        return isActionSubmission ? {
          location: location2,
          state,
          submission: {
            method: formMethod.toUpperCase(),
            action: formAction,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "actionRedirect"
        } : {
          location: location2,
          state,
          submission: {
            method: formMethod.toUpperCase(),
            action: formAction,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "loaderSubmissionRedirect"
        };
      if (isActionSubmission)
        return {
          location: location2,
          state,
          submission: {
            method: formMethod.toUpperCase(),
            action: formAction,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "actionReload"
        };
      {
        let url = new URL(formAction, window.location.origin);
        return url.search = new URLSearchParams(formData.entries()).toString(), {
          location: location2,
          state: "submitting",
          submission: {
            method: formMethod.toUpperCase(),
            action: url.pathname + url.search,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "loaderSubmission"
        };
      }
    } else if (_isRedirect)
      return _isFetchActionRedirect ? {
        location: location2,
        state,
        submission: void 0,
        type: "fetchActionRedirect"
      } : {
        location: location2,
        state,
        submission: void 0,
        type: "normalRedirect"
      };
  }
  return {
    location: location2,
    state: "loading",
    submission: void 0,
    type: "normalLoad"
  };
}
function useFetchers2() {
  return useFetchers().map((f6) => convertRouterFetcherToRemixFetcher({
    state: f6.state,
    data: f6.data,
    formMethod: f6.formMethod,
    formAction: f6.formAction,
    formData: f6.formData,
    formEncType: f6.formEncType,
    " _hasFetcherDoneAnything ": f6[" _hasFetcherDoneAnything "]
  }));
}
function useFetcher2() {
  let fetcherRR = useFetcher();
  return React3.useMemo(() => ({
    ...convertRouterFetcherToRemixFetcher({
      state: fetcherRR.state,
      data: fetcherRR.data,
      formMethod: fetcherRR.formMethod,
      formAction: fetcherRR.formAction,
      formData: fetcherRR.formData,
      formEncType: fetcherRR.formEncType,
      " _hasFetcherDoneAnything ": fetcherRR[" _hasFetcherDoneAnything "]
    }),
    load: fetcherRR.load,
    submit: fetcherRR.submit,
    Form: fetcherRR.Form
  }), [fetcherRR]);
}
function convertRouterFetcherToRemixFetcher(fetcherRR) {
  let {
    state,
    formMethod,
    formAction,
    formEncType,
    formData,
    data
  } = fetcherRR, isActionSubmission = formMethod != null && ["POST", "PUT", "PATCH", "DELETE"].includes(formMethod.toUpperCase());
  if (state === "idle")
    return fetcherRR[" _hasFetcherDoneAnything "] === !0 ? {
      state: "idle",
      type: "done",
      submission: void 0,
      data
    } : IDLE_FETCHER2;
  if (state === "submitting" && formMethod && formAction && formEncType && formData) {
    if (isActionSubmission)
      return {
        state,
        type: "actionSubmission",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        data
      };
    invariant2(!1, "Encountered an unexpected fetcher scenario in useFetcher()");
  }
  if (state === "loading" && formMethod && formAction && formEncType && formData) {
    if (isActionSubmission)
      return data ? {
        state,
        type: "actionReload",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        data
      } : {
        state,
        type: "actionRedirect",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        data: void 0
      };
    {
      let url = new URL(formAction, window.location.origin);
      return url.search = new URLSearchParams(formData.entries()).toString(), {
        state: "submitting",
        type: "loaderSubmission",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: url.pathname + url.search,
          encType: formEncType,
          formData,
          key: ""
        },
        data
      };
    }
  }
  return {
    state: "loading",
    type: "normalLoad",
    submission: void 0,
    data
  };
}

// node_modules/@remix-run/react/dist/esm/routes.js
var React4 = __toESM(require_react());
function createServerRoutes(manifest, routeModules, future2, parentId) {
  return Object.values(manifest).filter((route) => route.parentId === parentId).map((route) => {
    let hasErrorBoundary = future2.v2_errorBoundary === !0 ? route.id === "root" || route.hasErrorBoundary : route.id === "root" || route.hasCatchBoundary || route.hasErrorBoundary, dataRoute = {
      caseSensitive: route.caseSensitive,
      element: /* @__PURE__ */ React4.createElement(RemixRoute, {
        id: route.id
      }),
      errorElement: hasErrorBoundary ? /* @__PURE__ */ React4.createElement(RemixRouteError, {
        id: route.id
      }) : void 0,
      id: route.id,
      index: route.index,
      path: route.path,
      handle: routeModules[route.id].handle
    }, children = createServerRoutes(manifest, routeModules, future2, route.id);
    return children.length > 0 && (dataRoute.children = children), dataRoute;
  });
}

// node_modules/@remix-run/react/dist/esm/index.js
init_dist2();

// node_modules/@remix-run/react/dist/esm/scroll-restoration.js
var React5 = __toESM(require_react());
init_dist2();
var STORAGE_KEY = "positions";
function ScrollRestoration2({
  getKey,
  ...props
}) {
  let location2 = useLocation(), matches = useMatches2();
  useScrollRestoration({
    getKey,
    storageKey: STORAGE_KEY
  });
  let key = React5.useMemo(
    () => {
      if (!getKey)
        return null;
      let userKey = getKey(location2, matches);
      return userKey !== location2.key ? userKey : null;
    },
    []
  ), restoreScroll = ((STORAGE_KEY2, restoreKey) => {
    if (!window.history.state || !window.history.state.key) {
      let key2 = Math.random().toString(32).slice(2);
      window.history.replaceState({
        key: key2
      }, "");
    }
    try {
      let storedY = JSON.parse(sessionStorage.getItem(STORAGE_KEY2) || "{}")[restoreKey || window.history.state.key];
      typeof storedY == "number" && window.scrollTo(0, storedY);
    } catch (error2) {
      console.error(error2), sessionStorage.removeItem(STORAGE_KEY2);
    }
  }).toString();
  return /* @__PURE__ */ React5.createElement("script", _extends4({}, props, {
    suppressHydrationWarning: !0,
    dangerouslySetInnerHTML: {
      __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)}, ${JSON.stringify(key)})`
    }
  }));
}

// node_modules/@remix-run/react/dist/esm/server.js
var React6 = __toESM(require_react()), import_server = __toESM(require_server());
function RemixServer({
  context: context2,
  url,
  abortDelay
}) {
  typeof url == "string" && (url = new URL(url));
  let {
    manifest,
    routeModules,
    serverHandoffString
  } = context2, routes2 = createServerRoutes(manifest.routes, routeModules, context2.future), router = (0, import_server.createStaticRouter)(routes2, context2.staticHandlerContext);
  return /* @__PURE__ */ React6.createElement(RemixContext.Provider, {
    value: {
      manifest,
      routeModules,
      serverHandoffString,
      future: context2.future,
      abortDelay
    }
  }, /* @__PURE__ */ React6.createElement(RemixErrorBoundary, {
    location: router.state.location,
    component: RemixRootDefaultErrorBoundary
  }, /* @__PURE__ */ React6.createElement(import_server.StaticRouterProvider, {
    router,
    context: context2.staticHandlerContext,
    hydrate: !1
  })));
}

// app/entry.server.tsx
var import_server3 = __toESM(require_server_browser());

// node_modules/isbot/index.mjs
function _iterableToArrayLimit(arr, i7) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e3, _x, _r, _arr = [], _n = !0, _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, i7 === 0) {
        if (Object(_i) !== _i)
          return;
        _n = !1;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i7); _n = !0)
          ;
    } catch (err) {
      _d = !0, _e3 = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e3;
      }
    }
    return _arr;
  }
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i7 = 0; i7 < props.length; i7++) {
    var descriptor = props[i7];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", {
    writable: !1
  }), Constructor;
}
function _defineProperty(obj, key, value) {
  return key = _toPropertyKey(key), key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _slicedToArray(arr, i7) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i7) || _unsupportedIterableToArray(arr, i7) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray(o8, minLen) {
  if (!!o8) {
    if (typeof o8 == "string")
      return _arrayLikeToArray(o8, minLen);
    var n4 = Object.prototype.toString.call(o8).slice(8, -1);
    if (n4 === "Object" && o8.constructor && (n4 = o8.constructor.name), n4 === "Map" || n4 === "Set")
      return Array.from(o8);
    if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
      return _arrayLikeToArray(o8, minLen);
  }
}
function _arrayLikeToArray(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i7 = 0, arr2 = new Array(len); i7 < len; i7++)
    arr2[i7] = arr[i7];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function _toPrimitive(input, hint) {
  if (typeof input != "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res != "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key == "symbol" ? key : String(key);
}
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  return _classApplyDescriptorSet(receiver, descriptor, value), value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action4) {
  if (!privateMap.has(receiver))
    throw new TypeError("attempted to " + action4 + " private field on non-instance");
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  return descriptor.get ? descriptor.get.call(receiver) : descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set)
    descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable)
      throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
  }
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver))
    throw new TypeError("attempted to get private field on non-instance");
  return fn;
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap), privateMap.set(obj, value);
}
function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet), privateSet.add(obj);
}
var list = [
  " daum[ /]",
  " deusu/",
  "(?:^| )site",
  "@[a-z]",
  "\\(at\\)[a-z]",
  "\\(github\\.com/",
  "\\[at\\][a-z]",
  "^12345",
  "^<",
  "^[\\w \\.\\-\\(\\)]+(/v?\\d+(\\.\\d+)?(\\.\\d{1,10})?)?$",
  "^[^ ]{50,}$",
  "^active",
  "^ad muncher",
  "^anglesharp/",
  "^anonymous",
  "^avsdevicesdk/",
  "^axios/",
  "^bidtellect/",
  "^biglotron",
  "^castro",
  "^clamav[ /]",
  "^cobweb/",
  "^coccoc",
  "^custom",
  "^ddg[_-]android",
  "^discourse",
  "^dispatch/\\d",
  "^downcast/",
  "^duckduckgo",
  "^facebook",
  "^fdm[ /]\\d",
  "^getright/",
  "^gozilla/",
  "^hatena",
  "^hobbit",
  "^hotzonu",
  "^hwcdn/",
  "^jeode/",
  "^jetty/",
  "^jigsaw",
  "^linkdex",
  "^lwp[-: ]",
  "^metauri",
  "^microsoft bits",
  "^movabletype",
  "^mozilla/\\d\\.\\d \\(compatible;?\\)$",
  "^mozilla/\\d\\.\\d \\w*$",
  "^navermailapp",
  "^netsurf",
  "^offline explorer",
  "^phantom",
  "^php",
  "^postman",
  "^postrank",
  "^python",
  "^read",
  "^reed",
  "^restsharp/",
  "^snapchat",
  "^space bison",
  "^svn",
  "^swcd ",
  "^taringa",
  "^test certificate info",
  "^thumbor/",
  "^tumblr/",
  "^user-agent:mozilla",
  "^valid",
  "^venus/fedoraplanet",
  "^w3c",
  "^webbandit/",
  "^webcopier",
  "^wget",
  "^whatsapp",
  "^xenu link sleuth",
  "^yahoo",
  "^yandex",
  "^zdm/\\d",
  "^zoom marketplace/",
  "^{{.*}}$",
  "adbeat\\.com",
  "appinsights",
  "archive",
  "ask jeeves/teoma",
  "bit\\.ly/",
  "bluecoat drtr",
  "bot",
  "browsex",
  "burpcollaborator",
  "capture",
  "catch",
  "check",
  "chrome-lighthouse",
  "chromeframe",
  "client",
  "cloud",
  "crawl",
  "cryptoapi",
  "dareboost",
  "datanyze",
  "dataprovider",
  "dejaclick",
  "dmbrowser",
  "download",
  "evc-batch/",
  "feed",
  "firephp",
  "freesafeip",
  "ghost",
  "gomezagent",
  "google",
  "headlesschrome/",
  "http",
  "httrack",
  "hubspot marketing grader",
  "hydra",
  "ibisbrowser",
  "images",
  "iplabel",
  "ips-agent",
  "java",
  "library",
  "mail\\.ru/",
  "manager",
  "monitor",
  "morningscore/",
  "neustar wpm",
  "news",
  "nutch",
  "offbyone",
  "optimize",
  "pageburst",
  "pagespeed",
  "perl",
  "pingdom",
  "powermarks",
  "preview",
  "proxy",
  "ptst[ /]\\d",
  "reader",
  "rexx;",
  "rigor",
  "rss",
  "scan",
  "scrape",
  "search",
  "serp ?reputation ?management",
  "server",
  "sogou",
  "sparkler/",
  "spider",
  "statuscake",
  "stumbleupon\\.com",
  "supercleaner",
  "synapse",
  "synthetic",
  "taginspector/",
  "torrent",
  "tracemyfile",
  "transcoder",
  "trendsmapresolver",
  "twingly recon",
  "url",
  "virtuoso",
  "wappalyzer",
  "webglance",
  "webkit2png",
  "websitemetadataretriever",
  "whatcms/",
  "wordpress",
  "zgrab"
];
function amend(list2) {
  try {
    new RegExp("(?<! cu)bot").test("dangerbot");
  } catch {
    return list2;
  }
  return [
    ["bot", "(?<! cu)bot"],
    ["google", "(?<! (?:channel/|google/))google(?!(app|/google| pixel))"],
    ["http", "(?<!(?:lib))http"],
    ["java", "java(?!;)"],
    ["search", "(?<! ya(?:yandex)?)search"]
  ].forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), search = _ref2[0], replace = _ref2[1], index = list2.lastIndexOf(search);
    ~index && list2.splice(index, 1, replace);
  }), list2;
}
amend(list);
var flags = "i", _list = /* @__PURE__ */ new WeakMap(), _pattern = /* @__PURE__ */ new WeakMap(), _update = /* @__PURE__ */ new WeakSet(), _index = /* @__PURE__ */ new WeakSet(), Isbot = /* @__PURE__ */ function() {
  function Isbot2(patterns) {
    var _this = this;
    _classCallCheck(this, Isbot2), _classPrivateMethodInitSpec(this, _index), _classPrivateMethodInitSpec(this, _update), _classPrivateFieldInitSpec(this, _list, {
      writable: !0,
      value: void 0
    }), _classPrivateFieldInitSpec(this, _pattern, {
      writable: !0,
      value: void 0
    }), _classPrivateFieldSet(this, _list, patterns || list.slice()), _classPrivateMethodGet(this, _update, _update2).call(this);
    var isbot2 = function(ua) {
      return _this.test(ua);
    };
    return Object.defineProperties(isbot2, Object.entries(Object.getOwnPropertyDescriptors(Isbot2.prototype)).reduce(function(accumulator, _ref) {
      var _ref2 = _slicedToArray(_ref, 2), prop = _ref2[0], descriptor = _ref2[1];
      return typeof descriptor.value == "function" && Object.assign(accumulator, _defineProperty({}, prop, {
        value: _this[prop].bind(_this)
      })), typeof descriptor.get == "function" && Object.assign(accumulator, _defineProperty({}, prop, {
        get: function() {
          return _this[prop];
        }
      })), accumulator;
    }, {}));
  }
  return _createClass(Isbot2, [{
    key: "pattern",
    get: function() {
      return new RegExp(_classPrivateFieldGet(this, _pattern));
    }
  }, {
    key: "test",
    value: function(ua) {
      return Boolean(ua) && _classPrivateFieldGet(this, _pattern).test(ua);
    }
  }, {
    key: "find",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", match2 = ua.match(_classPrivateFieldGet(this, _pattern));
      return match2 && match2[0];
    }
  }, {
    key: "matches",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      return _classPrivateFieldGet(this, _list).filter(function(entry2) {
        return new RegExp(entry2, flags).test(ua);
      });
    }
  }, {
    key: "clear",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      this.exclude(this.matches(ua));
    }
  }, {
    key: "extend",
    value: function() {
      var _this2 = this, filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      [].push.apply(_classPrivateFieldGet(this, _list), filters.filter(function(rule) {
        return _classPrivateMethodGet(_this2, _index, _index2).call(_this2, rule) === -1;
      }).map(function(filter2) {
        return filter2.toLowerCase();
      })), _classPrivateMethodGet(this, _update, _update2).call(this);
    }
  }, {
    key: "exclude",
    value: function() {
      for (var filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], length2 = filters.length; length2--; ) {
        var index = _classPrivateMethodGet(this, _index, _index2).call(this, filters[length2]);
        index > -1 && _classPrivateFieldGet(this, _list).splice(index, 1);
      }
      _classPrivateMethodGet(this, _update, _update2).call(this);
    }
  }, {
    key: "spawn",
    value: function(list2) {
      return new Isbot2(list2 || _classPrivateFieldGet(this, _list));
    }
  }]), Isbot2;
}();
function _update2() {
  _classPrivateFieldSet(this, _pattern, new RegExp(_classPrivateFieldGet(this, _list).join("|"), flags));
}
function _index2(rule) {
  return _classPrivateFieldGet(this, _list).indexOf(rule.toLowerCase());
}
var isbot = new Isbot();

// app/entry.server.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
async function handleRequest(request, responseStatusCode, responseHeaders, remixContext) {
  let body = await (0, import_server3.renderToReadableStream)(
    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(RemixServer, { context: remixContext, url: request.url }, void 0, !1, {
      fileName: "app/entry.server.tsx",
      lineNumber: 13,
      columnNumber: 5
    }, this)
  );
  return isbot(request.headers.get("User-Agent")) && await body.allReady, responseHeaders.set("Content-Type", "text/html"), new Response(body, {
    status: responseStatusCode,
    headers: responseHeaders
  });
}

// app/root.jsx
var root_exports = {};
__export(root_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action,
  default: () => App,
  getAllProductsData: () => getAllProductsData,
  getCart: () => getCart,
  getShopPage: () => getShopPage,
  handle: () => handle,
  links: () => links,
  loader: () => loader,
  meta: () => meta
});

// node_modules/@shopify/hydrogen/dist/production/index.js
init_chunk_JXANKGQN();

// node_modules/@shopify/hydrogen-react/dist/browser-prod/flatten-connection.mjs
function flattenConnection(connection) {
  if (!connection) {
    let noConnectionErr = `flattenConnection(): needs a 'connection' to flatten, but received '${connection ?? ""}' instead.`;
    return console.error(noConnectionErr + " Returning an empty array"), [];
  }
  return "nodes" in connection ? connection.nodes : "edges" in connection && Array.isArray(connection.edges) ? connection.edges.map((edge) => {
    if (!(edge != null && edge.node))
      throw new Error(
        "flattenConnection(): Connection edges must contain nodes"
      );
    return edge.node;
  }) : [];
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/ShopifyProvider.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1), import_react3 = __toESM(require_react(), 1);

// node_modules/@shopify/hydrogen-react/dist/browser-prod/storefront-api-constants.mjs
var SFAPI_VERSION = "2023-01";

// node_modules/@shopify/hydrogen-react/dist/browser-prod/storefront-client.mjs
function createStorefrontClient(props) {
  let {
    storeDomain,
    privateStorefrontToken,
    publicStorefrontToken,
    storefrontApiVersion,
    contentType
  } = props;
  return storefrontApiVersion !== SFAPI_VERSION && warnOnce(
    `StorefrontClient: The Storefront API version that you're using is different than the version this build of Hydrogen React is targeting. You may run into unexpected errors if these versions don't match. Received verion: "${storefrontApiVersion}"; expected version "${SFAPI_VERSION}"`
  ), {
    getShopifyDomain(overrideProps) {
      return (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? storeDomain;
    },
    getStorefrontApiUrl(overrideProps) {
      let finalDomainUrl = (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? storeDomain;
      return `${finalDomainUrl}${finalDomainUrl.endsWith("/") ? "" : "/"}api/${(overrideProps == null ? void 0 : overrideProps.storefrontApiVersion) ?? storefrontApiVersion}/graphql.json`;
    },
    getPrivateTokenHeaders(overrideProps) {
      if (!privateStorefrontToken && !(overrideProps != null && overrideProps.privateStorefrontToken))
        throw new Error(
          "StorefrontClient: You did not pass in a 'privateStorefrontToken' while using 'getPrivateTokenHeaders()'"
        );
      return {
        "content-type": ((overrideProps == null ? void 0 : overrideProps.contentType) ?? contentType) === "graphql" ? "application/graphql" : "application/json",
        "X-SDK-Variant": "hydrogen-react",
        "X-SDK-Variant-Source": "react",
        "X-SDK-Version": storefrontApiVersion,
        "Shopify-Storefront-Private-Token": (overrideProps == null ? void 0 : overrideProps.privateStorefrontToken) ?? privateStorefrontToken ?? "",
        ...overrideProps != null && overrideProps.buyerIp ? { "Shopify-Storefront-Buyer-IP": overrideProps.buyerIp } : {}
      };
    },
    getPublicTokenHeaders(overrideProps) {
      if (!publicStorefrontToken && !(overrideProps != null && overrideProps.publicStorefrontToken))
        throw new Error(
          "StorefrontClient: You did not pass in a 'publicStorefrontToken' while using 'getPublicTokenHeaders()'"
        );
      let finalContentType = (overrideProps == null ? void 0 : overrideProps.contentType) ?? contentType ?? "json";
      return getPublicTokenHeadersRaw(
        finalContentType,
        storefrontApiVersion,
        (overrideProps == null ? void 0 : overrideProps.publicStorefrontToken) ?? publicStorefrontToken ?? ""
      );
    }
  };
}
function getPublicTokenHeadersRaw(contentType, storefrontApiVersion, accessToken) {
  return {
    "content-type": contentType === "graphql" ? "application/graphql" : "application/json",
    "X-SDK-Variant": "hydrogen-react",
    "X-SDK-Variant-Source": "react",
    "X-SDK-Version": storefrontApiVersion,
    "X-Shopify-Storefront-Access-Token": accessToken
  };
}
var warnings = /* @__PURE__ */ new Set(), warnOnce = (string3) => {
  warnings.has(string3) || (console.warn(string3), warnings.add(string3));
};

// node_modules/@shopify/hydrogen-react/dist/browser-prod/ShopifyProvider.mjs
var ShopifyContext = (0, import_react3.createContext)({
  storeDomain: "test",
  storefrontToken: "abc123",
  storefrontApiVersion: SFAPI_VERSION,
  countryIsoCode: "US",
  languageIsoCode: "EN",
  getStorefrontApiUrl() {
    return "";
  },
  getPublicTokenHeaders() {
    return {};
  },
  getShopifyDomain() {
    return "";
  }
});
function useShop() {
  let shopContext = (0, import_react3.useContext)(ShopifyContext);
  if (!shopContext)
    throw new Error("'useShop()' must be a descendent of <ShopifyProvider/>");
  return shopContext;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/cart-constants.mjs
var SHOPIFY_Y = "_shopify_y", SHOPIFY_S = "_shopify_s";

// node_modules/worktop/cookie/index.mjs
var g2 = /* @__PURE__ */ new Set([
  "domain",
  "path",
  "max-age",
  "expires",
  "samesite",
  "secure",
  "httponly"
]);
function u2(a4) {
  let r7 = {}, e3, t9, n4 = 0, m6 = a4.split(/;\s*/g), s10, i7;
  for (; n4 < m6.length; n4++)
    if (t9 = m6[n4], e3 = t9.indexOf("="), ~e3) {
      if (s10 = t9.substring(0, e3++).trim(), i7 = t9.substring(e3).trim(), i7[0] === '"' && (i7 = i7.substring(1, i7.length - 1)), ~i7.indexOf("%"))
        try {
          i7 = decodeURIComponent(i7);
        } catch {
        }
      g2.has(t9 = s10.toLowerCase()) ? t9 === "expires" ? r7.expires = new Date(i7) : t9 === "max-age" ? r7.maxage = +i7 : r7[t9] = i7 : r7[s10] = i7;
    } else
      (s10 = t9.trim().toLowerCase()) && (s10 === "httponly" || s10 === "secure") && (r7[s10] = !0);
  return r7;
}
function l(a4, r7, e3 = {}) {
  let t9 = a4 + "=" + encodeURIComponent(r7);
  return e3.expires && (t9 += "; Expires=" + new Date(e3.expires).toUTCString()), e3.maxage != null && e3.maxage >= 0 && (t9 += "; Max-Age=" + (e3.maxage | 0)), e3.domain && (t9 += "; Domain=" + e3.domain), e3.path && (t9 += "; Path=" + e3.path), e3.samesite && (t9 += "; SameSite=" + e3.samesite), (e3.secure || e3.samesite === "None") && (t9 += "; Secure"), e3.httponly && (t9 += "; HttpOnly"), t9;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/cookies-utils.mjs
var tokenHash = "xxxx-4xxx-xxxx-xxxxxxxxxxxx";
function buildUUID() {
  let hash = "";
  try {
    let crypto2 = window.crypto, randomValuesArray = new Uint16Array(31);
    crypto2.getRandomValues(randomValuesArray);
    let i7 = 0;
    hash = tokenHash.replace(/[x]/g, (c5) => {
      let r7 = randomValuesArray[i7] % 16, v3 = c5 === "x" ? r7 : r7 & 3 | 8;
      return i7++, v3.toString(16);
    }).toUpperCase();
  } catch {
    hash = tokenHash.replace(/[x]/g, (c5) => {
      let r7 = Math.random() * 16 | 0;
      return (c5 === "x" ? r7 : r7 & 3 | 8).toString(16);
    }).toUpperCase();
  }
  return `${hexTime()}-${hash}`;
}
function hexTime() {
  let dateNumber = 0, perfNumber = 0;
  dateNumber = new Date().getTime() >>> 0;
  try {
    perfNumber = performance.now() >>> 0;
  } catch {
    perfNumber = 0;
  }
  let output = Math.abs(dateNumber + perfNumber).toString(16).toLowerCase();
  return output.padStart(8 - output.length, "0");
}
function getShopifyCookies(cookies) {
  let cookieData = u2(cookies);
  return {
    [SHOPIFY_Y]: cookieData[SHOPIFY_Y] || "",
    [SHOPIFY_S]: cookieData[SHOPIFY_S] || ""
  };
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-constants.mjs
var AnalyticsEventName = {
  PAGE_VIEW: "PAGE_VIEW",
  ADD_TO_CART: "ADD_TO_CART"
}, AnalyticsPageType = {
  article: "article",
  blog: "blog",
  captcha: "captcha",
  cart: "cart",
  collection: "collection",
  customersAccount: "customers/account",
  customersActivateAccount: "customers/activate_account",
  customersAddresses: "customers/addresses",
  customersLogin: "customers/login",
  customersOrder: "customers/order",
  customersRegister: "customers/register",
  customersResetPassword: "customers/reset_password",
  giftCard: "gift_card",
  home: "index",
  listCollections: "list-collections",
  forbidden: "403",
  notFound: "404",
  page: "page",
  password: "password",
  product: "product",
  policy: "policy",
  search: "search"
}, ShopifySalesChannel = {
  hydrogen: "hydrogen",
  headless: "headless"
}, ShopifyAppId = {
  hydrogen: "6167201",
  headless: "12875497473"
};

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-utils.mjs
function schemaWrapper(schemaId, payload) {
  return {
    schema_id: schemaId,
    payload,
    metadata: {
      event_created_at_ms: Date.now()
    }
  };
}
function parseGid(gid) {
  let defaultReturn = { id: "", resource: null };
  if (typeof gid != "string")
    return defaultReturn;
  let matches = gid.match(/^gid:\/\/shopify\/(\w+)\/([a-z0-9]+)/);
  if (!matches || matches.length === 1)
    return defaultReturn;
  let id = matches[2] ?? null, resource = matches[1] ?? null;
  return { id, resource };
}
function addDataIf(keyValuePairs, formattedData) {
  return typeof keyValuePairs != "object" ? {} : (Object.entries(keyValuePairs).forEach(([key, value]) => {
    value && (formattedData[key] = value);
  }), formattedData);
}
function errorIfServer(fnName) {
  return typeof document > "u" ? (console.error(
    `${fnName} should only be used within the useEffect callback or event handlers`
  ), !0) : !1;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-schema-trekkie-storefront-page-view.mjs
var SCHEMA_ID = "trekkie_storefront_page_view/1.4", OXYGEN_DOMAIN = "myshopify.dev";
function pageView(payload) {
  let pageViewPayload = payload, { id, resource } = parseGid(pageViewPayload.resourceId), resourceType = resource ? resource.toLowerCase() : void 0;
  return [
    schemaWrapper(
      SCHEMA_ID,
      addDataIf(
        {
          pageType: pageViewPayload.pageType,
          customerId: pageViewPayload.customerId,
          resourceType,
          resourceId: parseInt(id)
        },
        formatPayload(pageViewPayload)
      )
    )
  ];
}
function formatPayload(payload) {
  return {
    appClientId: payload.shopifySalesChannel ? ShopifyAppId[payload.shopifySalesChannel] : ShopifyAppId.headless,
    isMerchantRequest: isMerchantRequest(payload.url),
    hydrogenSubchannelId: payload.storefrontId || "0",
    isPersistentCookie: payload.hasUserConsent,
    uniqToken: payload.uniqueToken,
    visitToken: payload.visitToken,
    microSessionId: buildUUID(),
    microSessionCount: 1,
    url: payload.url,
    path: payload.path,
    search: payload.search,
    referrer: payload.referrer,
    title: payload.title,
    shopId: parseInt(parseGid(payload.shopId).id),
    currency: payload.currency,
    contentLanguage: payload.acceptedLanguage || "en"
  };
}
function isMerchantRequest(url) {
  if (typeof url != "string")
    return !1;
  let hostname = new URL(url).hostname;
  return hostname.indexOf(OXYGEN_DOMAIN) !== -1 || hostname === "localhost";
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-schema-custom-storefront-customer-tracking.mjs
var SCHEMA_ID2 = "custom_storefront_customer_tracking/1.0", PAGE_RENDERED_EVENT_NAME = "page_rendered", COLLECTION_PAGE_RENDERED_EVENT_NAME = "collection_page_rendered", PRODUCT_PAGE_RENDERED_EVENT_NAME = "product_page_rendered", PRODUCT_ADDED_TO_CART_EVENT_NAME = "product_added_to_cart", SEARCH_SUBMITTED_EVENT_NAME = "search_submitted";
function pageView2(payload) {
  let pageViewPayload = payload, additionalPayload = {
    canonical_url: pageViewPayload.canonicalUrl || pageViewPayload.url,
    customer_id: pageViewPayload.customerId
  }, pageType = pageViewPayload.pageType, pageViewEvents = [];
  switch (pageViewEvents.push(
    schemaWrapper(
      SCHEMA_ID2,
      addDataIf(
        {
          event_name: PAGE_RENDERED_EVENT_NAME,
          ...additionalPayload
        },
        formatPayload2(pageViewPayload)
      )
    )
  ), pageType) {
    case AnalyticsPageType.collection:
      pageViewEvents.push(
        schemaWrapper(
          SCHEMA_ID2,
          addDataIf(
            {
              event_name: COLLECTION_PAGE_RENDERED_EVENT_NAME,
              ...additionalPayload,
              collection_name: pageViewPayload.collectionHandle
            },
            formatPayload2(pageViewPayload)
          )
        )
      );
      break;
    case AnalyticsPageType.product:
      pageViewEvents.push(
        schemaWrapper(
          SCHEMA_ID2,
          addDataIf(
            {
              event_name: PRODUCT_PAGE_RENDERED_EVENT_NAME,
              ...additionalPayload,
              products: formatProductPayload(pageViewPayload.products),
              total_value: pageViewPayload.totalValue
            },
            formatPayload2(pageViewPayload)
          )
        )
      );
      break;
    case AnalyticsPageType.search:
      pageViewEvents.push(
        schemaWrapper(
          SCHEMA_ID2,
          addDataIf(
            {
              event_name: SEARCH_SUBMITTED_EVENT_NAME,
              ...additionalPayload,
              search_string: pageViewPayload.searchString
            },
            formatPayload2(pageViewPayload)
          )
        )
      );
      break;
  }
  return pageViewEvents;
}
function addToCart(payload) {
  let addToCartPayload = payload, cartToken = parseGid(addToCartPayload.cartId), cart_token = cartToken != null && cartToken.id ? `${cartToken.id}` : null;
  return [
    schemaWrapper(
      SCHEMA_ID2,
      addDataIf(
        {
          event_name: PRODUCT_ADDED_TO_CART_EVENT_NAME,
          customerId: addToCartPayload.customerId,
          cart_token,
          total_value: addToCartPayload.totalValue,
          products: formatProductPayload(addToCartPayload.products)
        },
        formatPayload2(addToCartPayload)
      )
    )
  ];
}
function formatPayload2(payload) {
  return {
    source: payload.shopifySalesChannel || ShopifySalesChannel.headless,
    hydrogenSubchannelId: payload.storefrontId || "0",
    is_persistent_cookie: payload.hasUserConsent,
    ccpa_enforced: !1,
    gdpr_enforced: !1,
    unique_token: payload.uniqueToken,
    event_time: Date.now(),
    event_id: buildUUID(),
    event_source_url: payload.url,
    referrer: payload.referrer,
    user_agent: payload.userAgent,
    navigation_type: payload.navigationType,
    navigation_api: payload.navigationApi,
    shop_id: parseInt(parseGid(payload.shopId).id),
    currency: payload.currency
  };
}
function formatProductPayload(products) {
  return products ? products.map((p5) => {
    let product = addDataIf(
      {
        variant_gid: p5.variantGid,
        category: p5.category,
        sku: p5.sku,
        product_id: parseInt(parseGid(p5.productGid).id),
        variant_id: parseInt(parseGid(p5.variantGid).id)
      },
      {
        product_gid: p5.productGid,
        name: p5.name,
        variant: p5.variantName || "",
        brand: p5.brand,
        price: p5.price,
        quantity: Number(p5.quantity || 0)
      }
    );
    return JSON.stringify(product);
  }) : [];
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics.mjs
function sendShopifyAnalytics(event2, shopDomain) {
  let { eventName, payload } = event2;
  if (!payload.hasUserConsent)
    return Promise.resolve();
  let events2 = [];
  if (eventName === AnalyticsEventName.PAGE_VIEW) {
    let pageViewPayload = payload;
    events2 = events2.concat(
      pageView(pageViewPayload),
      pageView2(pageViewPayload)
    );
  } else
    eventName === AnalyticsEventName.ADD_TO_CART && (events2 = events2.concat(
      addToCart(payload)
    ));
  return events2.length ? sendToShopify(events2, shopDomain) : Promise.resolve();
}
var ERROR_MESSAGE = "sendShopifyAnalytics request is unsuccessful";
function sendToShopify(events2, shopDomain) {
  let eventsToBeSent = {
    events: events2,
    metadata: {
      event_sent_at_ms: Date.now()
    }
  };
  try {
    return fetch(
      shopDomain ? `https://${shopDomain}/.well-known/shopify/monorail/unstable/produce_batch` : "https://monorail-edge.shopifysvc.com/unstable/produce_batch",
      {
        method: "post",
        headers: {
          "content-type": "text/plain"
        },
        body: JSON.stringify(eventsToBeSent)
      }
    ).then((response) => {
      if (!response.ok)
        throw new Error("Response failed");
      return response.text();
    }).then((data) => {
      data && JSON.parse(data).result.forEach((eventResponse) => {
        eventResponse.status !== 200 && console.error(ERROR_MESSAGE, `

`, eventResponse.message);
      });
    }).catch((err) => {
      console.error(ERROR_MESSAGE, err);
    });
  } catch {
    return Promise.resolve();
  }
}
function getClientBrowserParameters() {
  if (errorIfServer("getClientBrowserParameters"))
    return {
      uniqueToken: "",
      visitToken: "",
      url: "",
      path: "",
      search: "",
      referrer: "",
      title: "",
      userAgent: "",
      navigationType: "",
      navigationApi: ""
    };
  let [navigationType, navigationApi] = getNavigationType(), cookies = getShopifyCookies(document.cookie);
  return {
    uniqueToken: cookies[SHOPIFY_Y],
    visitToken: cookies[SHOPIFY_S],
    url: location.href,
    path: location.pathname,
    search: location.search,
    referrer: document.referrer,
    title: document.title,
    userAgent: navigator.userAgent,
    navigationType,
    navigationApi
  };
}
function getNavigationTypeExperimental() {
  try {
    let navigationEntries = (performance == null ? void 0 : performance.getEntriesByType) && (performance == null ? void 0 : performance.getEntriesByType("navigation"));
    if (navigationEntries && navigationEntries[0]) {
      let rawType = window.performance.getEntriesByType(
        "navigation"
      )[0].type;
      return rawType && rawType.toString();
    }
  } catch {
  }
}
function getNavigationTypeLegacy() {
  var _a2, _b;
  try {
    if (PerformanceNavigation && ((_a2 = performance == null ? void 0 : performance.navigation) == null ? void 0 : _a2.type) !== null && ((_b = performance == null ? void 0 : performance.navigation) == null ? void 0 : _b.type) !== void 0) {
      let rawType = performance.navigation.type;
      switch (rawType) {
        case PerformanceNavigation.TYPE_NAVIGATE:
          return "navigate";
        case PerformanceNavigation.TYPE_RELOAD:
          return "reload";
        case PerformanceNavigation.TYPE_BACK_FORWARD:
          return "back_forward";
        default:
          return `unknown: ${rawType}`;
      }
    }
  } catch {
  }
}
function getNavigationType() {
  try {
    let navApi = "PerformanceNavigationTiming", navType = getNavigationTypeExperimental();
    return navType || (navType = getNavigationTypeLegacy(), navApi = "performance.navigation"), navType ? [navType, navApi] : ["unknown", "unknown"];
  } catch {
  }
  return ["error", "error"];
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/Money.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);

// node_modules/@shopify/hydrogen-react/dist/browser-prod/useMoney.mjs
var import_react4 = __toESM(require_react(), 1);
function useMoney(money) {
  let { countryIsoCode, languageIsoCode } = useShop(), locale = `${languageIsoCode}-${countryIsoCode}`;
  if (!locale)
    throw new Error(
      "useMoney(): Unable to get 'locale' from 'useShop()', which means that 'locale' was not passed to '<ShopifyProvider/>'. 'locale' is required for 'useMoney()' to work"
    );
  let amount = parseFloat(money.amount), options = (0, import_react4.useMemo)(
    () => ({
      style: "currency",
      currency: money.currencyCode
    }),
    [money.currencyCode]
  ), defaultFormatter = useLazyFormatter(locale, options), nameFormatter = useLazyFormatter(locale, {
    ...options,
    currencyDisplay: "name"
  }), narrowSymbolFormatter = useLazyFormatter(locale, {
    ...options,
    currencyDisplay: "narrowSymbol"
  }), withoutTrailingZerosFormatter = useLazyFormatter(locale, {
    ...options,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }), withoutCurrencyFormatter = useLazyFormatter(locale), withoutTrailingZerosOrCurrencyFormatter = useLazyFormatter(locale, {
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }), isPartCurrency = (part) => part.type === "currency", lazyFormatters = (0, import_react4.useMemo)(
    () => ({
      original: () => money,
      currencyCode: () => money.currencyCode,
      localizedString: () => defaultFormatter().format(amount),
      parts: () => defaultFormatter().formatToParts(amount),
      withoutTrailingZeros: () => amount % 1 === 0 ? withoutTrailingZerosFormatter().format(amount) : defaultFormatter().format(amount),
      withoutTrailingZerosAndCurrency: () => amount % 1 === 0 ? withoutTrailingZerosOrCurrencyFormatter().format(amount) : withoutCurrencyFormatter().format(amount),
      currencyName: () => {
        var _a2;
        return ((_a2 = nameFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a2.value) ?? money.currencyCode;
      },
      currencySymbol: () => {
        var _a2;
        return ((_a2 = defaultFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a2.value) ?? money.currencyCode;
      },
      currencyNarrowSymbol: () => {
        var _a2;
        return ((_a2 = narrowSymbolFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a2.value) ?? "";
      },
      amount: () => defaultFormatter().formatToParts(amount).filter(
        (part) => ["decimal", "fraction", "group", "integer", "literal"].includes(
          part.type
        )
      ).map((part) => part.value).join("")
    }),
    [
      money,
      amount,
      nameFormatter,
      defaultFormatter,
      narrowSymbolFormatter,
      withoutCurrencyFormatter,
      withoutTrailingZerosFormatter,
      withoutTrailingZerosOrCurrencyFormatter
    ]
  );
  return (0, import_react4.useMemo)(
    () => new Proxy(lazyFormatters, {
      get: (target, key) => {
        var _a2;
        return (_a2 = Reflect.get(target, key)) == null ? void 0 : _a2.call(null);
      }
    }),
    [lazyFormatters]
  );
}
function useLazyFormatter(locale, options) {
  return (0, import_react4.useMemo)(() => {
    let memoized;
    return () => memoized ?? (memoized = new Intl.NumberFormat(locale, options));
  }, [locale, options]);
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/Money.mjs
function Money({
  data,
  as,
  withoutCurrency,
  withoutTrailingZeros,
  measurement,
  measurementSeparator = "/",
  ...passthroughProps
}) {
  if (!isMoney(data))
    throw new Error(
      "<Money/> needs a valid 'data' prop that has 'amount' and 'currencyCode'"
    );
  let moneyObject = useMoney(data), Wrapper = as ?? "div", output = moneyObject.localizedString;
  return (withoutCurrency || withoutTrailingZeros) && (withoutCurrency && !withoutTrailingZeros ? output = moneyObject.amount : !withoutCurrency && withoutTrailingZeros ? output = moneyObject.withoutTrailingZeros : output = moneyObject.withoutTrailingZerosAndCurrency), /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Wrapper, { ...passthroughProps, children: [
    output,
    measurement && measurement.referenceUnit && /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      measurementSeparator,
      measurement.referenceUnit
    ] })
  ] });
}
function isMoney(maybeMoney) {
  return typeof maybeMoney.amount == "string" && !!maybeMoney.amount && typeof maybeMoney.currencyCode == "string" && !!maybeMoney.currencyCode;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/useShopifyCookies.mjs
var import_react5 = __toESM(require_react(), 1);
var longTermLength = 60 * 60 * 24 * 360 * 1, shortTermLength = 60 * 30;
function useShopifyCookies(options) {
  let { hasUserConsent = !1, domain = "" } = options || {};
  (0, import_react5.useEffect)(() => {
    let cookies = getShopifyCookies(document.cookie);
    hasUserConsent ? (setCookie(
      SHOPIFY_Y,
      cookies[SHOPIFY_Y] || buildUUID(),
      longTermLength,
      domain
    ), setCookie(
      SHOPIFY_S,
      cookies[SHOPIFY_S] || buildUUID(),
      shortTermLength,
      domain
    )) : (setCookie(SHOPIFY_Y, "", 0, domain), setCookie(SHOPIFY_S, "", 0, domain));
  });
}
function setCookie(name, value, maxage, domain) {
  document.cookie = l(name, value, {
    maxage,
    domain,
    samesite: "Lax",
    path: "/"
  });
}

// node_modules/@remix-run/server-runtime/dist/esm/cookies.js
var import_cookie3 = __toESM(require_cookie());

// node_modules/@remix-run/server-runtime/dist/esm/warnings.js
var alreadyWarned2 = {};
function warnOnce2(condition, message) {
  !condition && !alreadyWarned2[message] && (alreadyWarned2[message] = !0, console.warn(message));
}

// node_modules/@remix-run/server-runtime/dist/esm/cookies.js
var createCookieFactory = ({
  sign: sign3,
  unsign: unsign3
}) => (name, cookieOptions = {}) => {
  let {
    secrets,
    ...options
  } = {
    secrets: [],
    path: "/",
    sameSite: "lax",
    ...cookieOptions
  };
  return warnOnceAboutExpiresCookie(name, options.expires), {
    get name() {
      return name;
    },
    get isSigned() {
      return secrets.length > 0;
    },
    get expires() {
      return typeof options.maxAge < "u" ? new Date(Date.now() + options.maxAge * 1e3) : options.expires;
    },
    async parse(cookieHeader, parseOptions) {
      if (!cookieHeader)
        return null;
      let cookies = (0, import_cookie3.parse)(cookieHeader, {
        ...options,
        ...parseOptions
      });
      return name in cookies ? cookies[name] === "" ? "" : await decodeCookieValue(unsign3, cookies[name], secrets) : null;
    },
    async serialize(value, serializeOptions) {
      return (0, import_cookie3.serialize)(name, value === "" ? "" : await encodeCookieValue(sign3, value, secrets), {
        ...options,
        ...serializeOptions
      });
    }
  };
}, isCookie = (object) => object != null && typeof object.name == "string" && typeof object.isSigned == "boolean" && typeof object.parse == "function" && typeof object.serialize == "function";
async function encodeCookieValue(sign3, value, secrets) {
  let encoded = encodeData(value);
  return secrets.length > 0 && (encoded = await sign3(encoded, secrets[0])), encoded;
}
async function decodeCookieValue(unsign3, value, secrets) {
  if (secrets.length > 0) {
    for (let secret of secrets) {
      let unsignedValue = await unsign3(value, secret);
      if (unsignedValue !== !1)
        return decodeData(unsignedValue);
    }
    return null;
  }
  return decodeData(value);
}
function encodeData(value) {
  return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));
}
function decodeData(value) {
  try {
    return JSON.parse(decodeURIComponent(myEscape(atob(value))));
  } catch {
    return {};
  }
}
function myEscape(value) {
  let str = value.toString(), result = "", index = 0, chr, code;
  for (; index < str.length; )
    chr = str.charAt(index++), /[\w*+\-./@]/.exec(chr) ? result += chr : (code = chr.charCodeAt(0), code < 256 ? result += "%" + hex(code, 2) : result += "%u" + hex(code, 4).toUpperCase());
  return result;
}
function hex(code, length2) {
  let result = code.toString(16);
  for (; result.length < length2; )
    result = "0" + result;
  return result;
}
function myUnescape(value) {
  let str = value.toString(), result = "", index = 0, chr, part;
  for (; index < str.length; ) {
    if (chr = str.charAt(index++), chr === "%") {
      if (str.charAt(index) === "u") {
        if (part = str.slice(index + 1, index + 5), /^[\da-f]{4}$/i.exec(part)) {
          result += String.fromCharCode(parseInt(part, 16)), index += 5;
          continue;
        }
      } else if (part = str.slice(index, index + 2), /^[\da-f]{2}$/i.exec(part)) {
        result += String.fromCharCode(parseInt(part, 16)), index += 2;
        continue;
      }
    }
    result += chr;
  }
  return result;
}
function warnOnceAboutExpiresCookie(name, expires) {
  warnOnce2(!expires, `The "${name}" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \`commitSession(session, { expires })\` if using a session storage object, or \`cookie.serialize("value", { expires })\` if you're using the cookie directly.`);
}

// node_modules/@remix-run/server-runtime/dist/esm/responses.js
init_router();

// node_modules/@remix-run/server-runtime/dist/esm/errors.js
init_router();
async function serializeError(error2) {
  return {
    message: error2.message,
    stack: error2.stack
  };
}
function serializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors), serialized = {};
  for (let [key, val] of entries)
    isRouteErrorResponse(val) ? serialized[key] = {
      ...val,
      __type: "RouteErrorResponse"
    } : val instanceof Error ? serialized[key] = {
      message: val.message,
      stack: val.stack,
      __type: "Error"
    } : serialized[key] = val;
  return serialized;
}

// node_modules/@remix-run/server-runtime/dist/esm/responses.js
var json3 = (data, init = {}) => {
  let responseInit = typeof init == "number" ? {
    status: init
  } : init, headers = new Headers(responseInit.headers);
  return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), {
    ...responseInit,
    headers
  });
}, defer3 = (data, init = {}) => {
  let responseInit = typeof init == "number" ? {
    status: init
  } : init, headers = new Headers(responseInit.headers);
  return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), defer(data, {
    ...responseInit,
    headers
  });
}, redirect3 = (url, init = 302) => {
  let responseInit = init;
  typeof responseInit == "number" ? responseInit = {
    status: responseInit
  } : typeof responseInit.status > "u" && (responseInit.status = 302);
  let headers = new Headers(responseInit.headers);
  return headers.set("Location", url), new Response(null, {
    ...responseInit,
    headers
  });
};
function isDeferredData(value) {
  let deferred = value;
  return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
}
function isResponse2(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
var redirectStatusCodes2 = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
function isRedirectStatusCode(statusCode) {
  return redirectStatusCodes2.has(statusCode);
}
function isRedirectResponse2(response) {
  return isRedirectStatusCode(response.status);
}
function isTrackedPromise2(value) {
  return value != null && typeof value.then == "function" && value._tracked === !0;
}
var DEFERRED_VALUE_PLACEHOLDER_PREFIX = "__deferred_promise:";
function createDeferredReadableStream(deferredData, signal) {
  let encoder3 = new TextEncoder();
  return new ReadableStream({
    async start(controller) {
      let criticalData = {}, preresolvedKeys = [];
      for (let [key, value] of Object.entries(deferredData.data))
        isTrackedPromise2(value) ? (criticalData[key] = `${DEFERRED_VALUE_PLACEHOLDER_PREFIX}${key}`, (typeof value._data < "u" || typeof value._error < "u") && preresolvedKeys.push(key)) : criticalData[key] = value;
      controller.enqueue(encoder3.encode(JSON.stringify(criticalData) + `

`));
      for (let preresolvedKey of preresolvedKeys)
        enqueueTrackedPromise(controller, encoder3, preresolvedKey, deferredData.data[preresolvedKey]);
      let unsubscribe = deferredData.subscribe((aborted, settledKey) => {
        settledKey && enqueueTrackedPromise(controller, encoder3, settledKey, deferredData.data[settledKey]);
      });
      await deferredData.resolveData(signal), unsubscribe(), controller.close();
    }
  });
}
function enqueueTrackedPromise(controller, encoder3, settledKey, promise2) {
  "_error" in promise2 ? controller.enqueue(encoder3.encode("error:" + JSON.stringify({
    [settledKey]: serializeError(promise2._error)
  }) + `

`)) : controller.enqueue(encoder3.encode("data:" + JSON.stringify({
    [settledKey]: promise2._data ?? null
  }) + `

`));
}

// node_modules/@remix-run/server-runtime/dist/esm/server.js
init_router();

// node_modules/@remix-run/server-runtime/dist/esm/entry.js
function createEntryRouteModules(manifest) {
  return Object.keys(manifest).reduce((memo, routeId) => (memo[routeId] = manifest[routeId].module, memo), {});
}

// node_modules/@remix-run/server-runtime/dist/esm/headers.js
var import_set_cookie_parser = __toESM(require_set_cookie());
function getDocumentHeadersRR(build, context2) {
  return (context2.errors ? context2.matches.slice(0, context2.matches.findIndex((m6) => context2.errors[m6.route.id]) + 1) : context2.matches).reduce((parentHeaders, match2) => {
    let {
      id
    } = match2.route, routeModule = build.routes[id].module, loaderHeaders = context2.loaderHeaders[id] || new Headers(), actionHeaders = context2.actionHeaders[id] || new Headers(), headers = new Headers(routeModule.headers ? typeof routeModule.headers == "function" ? routeModule.headers({
      loaderHeaders,
      parentHeaders,
      actionHeaders
    }) : routeModule.headers : void 0);
    return prependCookies(actionHeaders, headers), prependCookies(loaderHeaders, headers), prependCookies(parentHeaders, headers), headers;
  }, new Headers());
}
function prependCookies(parentHeaders, childHeaders) {
  let parentSetCookieString = parentHeaders.get("Set-Cookie");
  parentSetCookieString && (0, import_set_cookie_parser.splitCookiesString)(parentSetCookieString).forEach((cookie) => {
    childHeaders.append("Set-Cookie", cookie);
  });
}

// node_modules/@remix-run/server-runtime/dist/esm/invariant.js
function invariant3(value, message) {
  if (value === !1 || value === null || typeof value > "u")
    throw console.error("The following error is a bug in Remix; please open an issue! https://github.com/remix-run/remix/issues/new"), new Error(message);
}

// node_modules/@remix-run/server-runtime/dist/esm/mode.js
var ServerMode;
(function(ServerMode2) {
  ServerMode2.Development = "development", ServerMode2.Production = "production", ServerMode2.Test = "test";
})(ServerMode || (ServerMode = {}));
function isServerMode(value) {
  return value === ServerMode.Development || value === ServerMode.Production || value === ServerMode.Test;
}

// node_modules/@remix-run/server-runtime/dist/esm/routeMatching.js
init_router();
function matchServerRoutes(routes2, pathname) {
  let matches = matchRoutes(routes2, pathname);
  return matches ? matches.map((match2) => ({
    params: match2.params,
    pathname: match2.pathname,
    route: match2.route
  })) : null;
}

// node_modules/@remix-run/server-runtime/dist/esm/data.js
async function callRouteActionRR({
  loadContext,
  action: action4,
  params,
  request,
  routeId
}) {
  let result = await action4({
    request: stripDataParam(stripIndexParam(request)),
    context: loadContext,
    params
  });
  if (result === void 0)
    throw new Error(`You defined an action for route "${routeId}" but didn't return anything from your \`action\` function. Please return a value or \`null\`.`);
  return isResponse2(result) ? result : json3(result);
}
async function callRouteLoaderRR({
  loadContext,
  loader: loader11,
  params,
  request,
  routeId
}) {
  let result = await loader11({
    request: stripDataParam(stripIndexParam(request)),
    context: loadContext,
    params
  });
  if (result === void 0)
    throw new Error(`You defined a loader for route "${routeId}" but didn't return anything from your \`loader\` function. Please return a value or \`null\`.`);
  return isDeferredData(result) ? result.init && isRedirectStatusCode(result.init.status || 200) ? redirect3(new Headers(result.init.headers).get("Location"), result.init) : result : isResponse2(result) ? result : json3(result);
}
function stripIndexParam(request) {
  let url = new URL(request.url), indexValues = url.searchParams.getAll("index");
  url.searchParams.delete("index");
  let indexValuesToKeep = [];
  for (let indexValue of indexValues)
    indexValue && indexValuesToKeep.push(indexValue);
  for (let toKeep of indexValuesToKeep)
    url.searchParams.append("index", toKeep);
  return new Request(url.href, request);
}
function stripDataParam(request) {
  let url = new URL(request.url);
  return url.searchParams.delete("_data"), new Request(url.href, request);
}

// node_modules/@remix-run/server-runtime/dist/esm/routes.js
function createRoutes(manifest, parentId) {
  return Object.entries(manifest).filter(([, route]) => route.parentId === parentId).map(([id, route]) => ({
    ...route,
    children: createRoutes(manifest, id)
  }));
}
function createStaticHandlerDataRoutes(manifest, future2, parentId) {
  return Object.values(manifest).filter((route) => route.parentId === parentId).map((route) => {
    let commonRoute = {
      hasErrorBoundary: future2.v2_errorBoundary === !0 ? route.id === "root" || route.module.ErrorBoundary != null : route.id === "root" || route.module.CatchBoundary != null || route.module.ErrorBoundary != null,
      id: route.id,
      path: route.path,
      loader: route.module.loader ? (args) => callRouteLoaderRR({
        request: args.request,
        params: args.params,
        loadContext: args.context,
        loader: route.module.loader,
        routeId: route.id
      }) : void 0,
      action: route.module.action ? (args) => callRouteActionRR({
        request: args.request,
        params: args.params,
        loadContext: args.context,
        action: route.module.action,
        routeId: route.id
      }) : void 0,
      handle: route.module.handle
    };
    return route.index ? {
      index: !0,
      ...commonRoute
    } : {
      caseSensitive: route.caseSensitive,
      children: createStaticHandlerDataRoutes(manifest, future2, route.id),
      ...commonRoute
    };
  });
}

// node_modules/@remix-run/server-runtime/dist/esm/markup.js
var ESCAPE_LOOKUP2 = {
  "&": "\\u0026",
  ">": "\\u003e",
  "<": "\\u003c",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
}, ESCAPE_REGEX2 = /[&><\u2028\u2029]/g;
function escapeHtml2(html) {
  return html.replace(ESCAPE_REGEX2, (match2) => ESCAPE_LOOKUP2[match2]);
}

// node_modules/@remix-run/server-runtime/dist/esm/serverHandoff.js
function createServerHandoffString(serverHandoff) {
  return escapeHtml2(JSON.stringify(serverHandoff));
}

// node_modules/@remix-run/server-runtime/dist/esm/server.js
var createRequestHandler = (build, mode) => {
  let routes2 = createRoutes(build.routes), dataRoutes = createStaticHandlerDataRoutes(build.routes, build.future), serverMode = isServerMode(mode) ? mode : ServerMode.Production, staticHandler = createStaticHandler(dataRoutes);
  return async function(request, loadContext = {}) {
    let url = new URL(request.url), {
      unstable_dev
    } = build.future;
    if (mode === "development" && unstable_dev !== !1 && url.pathname === (unstable_dev.remixRequestHandlerPath ?? "") + "/__REMIX_ASSETS_MANIFEST")
      return request.method !== "GET" ? new Response("Method not allowed", {
        status: 405
      }) : new Response(JSON.stringify(build.assets), {
        status: 200,
        headers: {
          "Content-Type": "application/json"
        }
      });
    let matches = matchServerRoutes(routes2, url.pathname), response;
    if (url.searchParams.has("_data")) {
      let routeId = url.searchParams.get("_data");
      if (response = await handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext), build.entry.module.handleDataRequest) {
        let match2 = matches.find((match3) => match3.route.id == routeId);
        response = await build.entry.module.handleDataRequest(response, {
          context: loadContext,
          params: match2.params,
          request
        });
      }
    } else
      matches && matches[matches.length - 1].route.module.default == null ? response = await handleResourceRequestRR(serverMode, staticHandler, matches.slice(-1)[0].route.id, request, loadContext) : response = await handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext);
    return request.method === "HEAD" ? new Response(null, {
      headers: response.headers,
      status: response.status,
      statusText: response.statusText
    }) : response;
  };
};
async function handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext) {
  try {
    let response = await staticHandler.queryRoute(request, {
      routeId,
      requestContext: loadContext
    });
    if (isRedirectResponse2(response)) {
      let headers = new Headers(response.headers);
      return headers.set("X-Remix-Redirect", headers.get("Location")), headers.set("X-Remix-Status", response.status), headers.delete("Location"), response.headers.get("Set-Cookie") !== null && headers.set("X-Remix-Revalidate", "yes"), new Response(null, {
        status: 204,
        headers
      });
    }
    if (UNSAFE_DEFERRED_SYMBOL in response) {
      let deferredData = response[UNSAFE_DEFERRED_SYMBOL], body = createDeferredReadableStream(deferredData, request.signal), init = deferredData.init || {}, headers = new Headers(init.headers);
      return headers.set("Content-Type", "text/remix-deferred"), init.headers = headers, new Response(body, init);
    }
    return response;
  } catch (error2) {
    if (isResponse2(error2))
      return error2.headers.set("X-Remix-Catch", "yes"), error2;
    let status = 500, errorInstance = error2;
    return isRouteErrorResponse(error2) && (status = error2.status, errorInstance = error2.error || errorInstance), serverMode !== ServerMode.Test && !request.signal.aborted && console.error(errorInstance), serverMode === ServerMode.Development && errorInstance instanceof Error ? errorBoundaryError(errorInstance, status) : errorBoundaryError(new Error("Unexpected Server Error"), status);
  }
}
function findParentBoundary(routes2, routeId, error2) {
  let route = routes2[routeId] || routes2.root, isCatch = isRouteErrorResponse(error2) && (!error2.error || error2.status === 404);
  return isCatch && route.module.CatchBoundary || !isCatch && route.module.ErrorBoundary || !route.parentId ? route.id : findParentBoundary(routes2, route.parentId, error2);
}
function differentiateCatchVersusErrorBoundaries(build, context2) {
  if (!context2.errors)
    return;
  let errors = {};
  for (let routeId of Object.keys(context2.errors)) {
    let error2 = context2.errors[routeId], handlingRouteId = findParentBoundary(build.routes, routeId, error2);
    errors[handlingRouteId] = error2;
  }
  context2.errors = errors;
}
async function handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext) {
  let context2;
  try {
    context2 = await staticHandler.query(request, {
      requestContext: loadContext
    });
  } catch (error2) {
    return !request.signal.aborted && serverMode !== ServerMode.Test && console.error(error2), new Response(null, {
      status: 500
    });
  }
  if (isResponse2(context2))
    return context2;
  build.future.v2_errorBoundary !== !0 && differentiateCatchVersusErrorBoundaries(build, context2);
  let headers = getDocumentHeadersRR(build, context2), entryContext = {
    manifest: build.assets,
    routeModules: createEntryRouteModules(build.routes),
    staticHandlerContext: context2,
    serverHandoffString: createServerHandoffString({
      state: {
        loaderData: context2.loaderData,
        actionData: context2.actionData,
        errors: serializeErrors(context2.errors)
      },
      future: build.future,
      dev: build.dev
    }),
    future: build.future
  }, handleDocumentRequestFunction = build.entry.module.default;
  try {
    return await handleDocumentRequestFunction(request, context2.statusCode, headers, entryContext);
  } catch (error2) {
    context2 = getStaticContextFromError(staticHandler.dataRoutes, context2, error2), build.future.v2_errorBoundary !== !0 && differentiateCatchVersusErrorBoundaries(build, context2), entryContext = {
      ...entryContext,
      staticHandlerContext: context2,
      serverHandoffString: createServerHandoffString({
        state: {
          loaderData: context2.loaderData,
          actionData: context2.actionData,
          errors: serializeErrors(context2.errors)
        },
        future: build.future
      })
    };
    try {
      return await handleDocumentRequestFunction(request, context2.statusCode, headers, entryContext);
    } catch (error3) {
      return returnLastResortErrorResponse(error3, serverMode);
    }
  }
}
async function handleResourceRequestRR(serverMode, staticHandler, routeId, request, loadContext) {
  try {
    let response = await staticHandler.queryRoute(request, {
      routeId,
      requestContext: loadContext
    });
    return invariant3(isResponse2(response), "Expected a Response to be returned from queryRoute"), response;
  } catch (error2) {
    return isResponse2(error2) ? (error2.headers.set("X-Remix-Catch", "yes"), error2) : returnLastResortErrorResponse(error2, serverMode);
  }
}
async function errorBoundaryError(error2, status) {
  return json3(await serializeError(error2), {
    status,
    headers: {
      "X-Remix-Error": "yes"
    }
  });
}
function returnLastResortErrorResponse(error2, serverMode) {
  serverMode !== ServerMode.Test && console.error(error2);
  let message = "Unexpected Server Error";
  return serverMode !== ServerMode.Production && (message += `

${String(error2)}`), new Response(message, {
    status: 500,
    headers: {
      "Content-Type": "text/plain"
    }
  });
}

// node_modules/@remix-run/server-runtime/dist/esm/sessions.js
function flash(name) {
  return `__flash_${name}__`;
}
var createSession = (initialData = {}, id = "") => {
  let map3 = new Map(Object.entries(initialData));
  return {
    get id() {
      return id;
    },
    get data() {
      return Object.fromEntries(map3);
    },
    has(name) {
      return map3.has(name) || map3.has(flash(name));
    },
    get(name) {
      if (map3.has(name))
        return map3.get(name);
      let flashName = flash(name);
      if (map3.has(flashName)) {
        let value = map3.get(flashName);
        return map3.delete(flashName), value;
      }
    },
    set(name, value) {
      map3.set(name, value);
    },
    flash(name, value) {
      map3.set(flash(name), value);
    },
    unset(name) {
      map3.delete(name);
    }
  };
};
var createSessionStorageFactory = (createCookie2) => ({
  cookie: cookieArg,
  createData,
  readData,
  updateData,
  deleteData
}) => {
  let cookie = isCookie(cookieArg) ? cookieArg : createCookie2((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
  return warnOnceAboutSigningSessionCookie(cookie), {
    async getSession(cookieHeader, options) {
      let id = cookieHeader && await cookie.parse(cookieHeader, options), data = id && await readData(id);
      return createSession(data || {}, id || "");
    },
    async commitSession(session, options) {
      let {
        id,
        data
      } = session;
      return id ? await updateData(id, data, cookie.expires) : id = await createData(data, cookie.expires), cookie.serialize(id, options);
    },
    async destroySession(session, options) {
      return await deleteData(session.id), cookie.serialize("", {
        ...options,
        expires: new Date(0)
      });
    }
  };
};
function warnOnceAboutSigningSessionCookie(cookie) {
  warnOnce2(cookie.isSigned, `The "${cookie.name}" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/utils/cookies#signing-cookies for more information.`);
}

// node_modules/@remix-run/server-runtime/dist/esm/sessions/cookieStorage.js
var createCookieSessionStorageFactory = (createCookie2) => ({
  cookie: cookieArg
} = {}) => {
  let cookie = isCookie(cookieArg) ? cookieArg : createCookie2((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
  return warnOnceAboutSigningSessionCookie(cookie), {
    async getSession(cookieHeader, options) {
      return createSession(cookieHeader && await cookie.parse(cookieHeader, options) || {});
    },
    async commitSession(session, options) {
      let serializedCookie = await cookie.serialize(session.data, options);
      if (serializedCookie.length > 4096)
        throw new Error("Cookie length will exceed browser maximum. Length: " + serializedCookie.length);
      return serializedCookie;
    },
    async destroySession(_session, options) {
      return cookie.serialize("", {
        ...options,
        expires: new Date(0)
      });
    }
  };
};

// node_modules/@remix-run/server-runtime/dist/esm/sessions/memoryStorage.js
var createMemorySessionStorageFactory = (createSessionStorage) => ({
  cookie
} = {}) => {
  let uniqueId = 0, map3 = /* @__PURE__ */ new Map();
  return createSessionStorage({
    cookie,
    async createData(data, expires) {
      let id = (++uniqueId).toString();
      return map3.set(id, {
        data,
        expires
      }), id;
    },
    async readData(id) {
      if (map3.has(id)) {
        let {
          data,
          expires
        } = map3.get(id);
        if (!expires || expires > new Date())
          return data;
        expires && map3.delete(id);
      }
      return null;
    },
    async updateData(id, data, expires) {
      map3.set(id, {
        data,
        expires
      });
    },
    async deleteData(id) {
      map3.delete(id);
    }
  });
};

// node_modules/@shopify/hydrogen/dist/production/index.js
var Le = m((p5) => {
  var E4 = Symbol.for("react.element"), ct = Symbol.for("react.portal"), ut = Symbol.for("react.fragment"), pt2 = Symbol.for("react.strict_mode"), ft = Symbol.for("react.profiler"), lt2 = Symbol.for("react.provider"), ht = Symbol.for("react.context"), gt2 = Symbol.for("react.forward_ref"), dt = Symbol.for("react.suspense"), yt = Symbol.for("react.memo"), mt = Symbol.for("react.lazy"), be = Symbol.iterator;
  function St(e3) {
    return e3 === null || typeof e3 != "object" ? null : (e3 = be && e3[be] || e3["@@iterator"], typeof e3 == "function" ? e3 : null);
  }
  var Ae = { isMounted: function() {
    return !1;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, Pe2 = Object.assign, Ie = {};
  function x2(e3, t9, r7) {
    this.props = e3, this.context = t9, this.refs = Ie, this.updater = r7 || Ae;
  }
  x2.prototype.isReactComponent = {}, x2.prototype.setState = function(e3, t9) {
    if (typeof e3 != "object" && typeof e3 != "function" && e3 != null)
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, e3, t9, "setState");
  }, x2.prototype.forceUpdate = function(e3) {
    this.updater.enqueueForceUpdate(this, e3, "forceUpdate");
  };
  function Oe() {
  }
  Oe.prototype = x2.prototype;
  function Y2(e3, t9, r7) {
    this.props = e3, this.context = t9, this.refs = Ie, this.updater = r7 || Ae;
  }
  var Z3 = Y2.prototype = new Oe();
  Z3.constructor = Y2, Pe2(Z3, x2.prototype), Z3.isPureReactComponent = !0;
  var Ee2 = Array.isArray, _e3 = Object.prototype.hasOwnProperty, ee = { current: null }, ve = { key: !0, ref: !0, __self: !0, __source: !0 };
  function Me2(e3, t9, r7) {
    var n4, o8 = {}, s10 = null, a4 = null;
    if (t9 != null)
      for (n4 in t9.ref !== void 0 && (a4 = t9.ref), t9.key !== void 0 && (s10 = "" + t9.key), t9)
        _e3.call(t9, n4) && !ve.hasOwnProperty(n4) && (o8[n4] = t9[n4]);
    var i7 = arguments.length - 2;
    if (i7 === 1)
      o8.children = r7;
    else if (1 < i7) {
      for (var c5 = Array(i7), u6 = 0; u6 < i7; u6++)
        c5[u6] = arguments[u6 + 2];
      o8.children = c5;
    }
    if (e3 && e3.defaultProps)
      for (n4 in i7 = e3.defaultProps, i7)
        o8[n4] === void 0 && (o8[n4] = i7[n4]);
    return { $$typeof: E4, type: e3, key: s10, ref: a4, props: o8, _owner: ee.current };
  }
  function Ct(e3, t9) {
    return { $$typeof: E4, type: e3.type, key: t9, ref: e3.ref, props: e3.props, _owner: e3._owner };
  }
  function te(e3) {
    return typeof e3 == "object" && e3 !== null && e3.$$typeof === E4;
  }
  function Tt(e3) {
    var t9 = { "=": "=0", ":": "=2" };
    return "$" + e3.replace(/[=:]/g, function(r7) {
      return t9[r7];
    });
  }
  var ke2 = /\/+/g;
  function X3(e3, t9) {
    return typeof e3 == "object" && e3 !== null && e3.key != null ? Tt("" + e3.key) : t9.toString(36);
  }
  function O2(e3, t9, r7, n4, o8) {
    var s10 = typeof e3;
    (s10 === "undefined" || s10 === "boolean") && (e3 = null);
    var a4 = !1;
    if (e3 === null)
      a4 = !0;
    else
      switch (s10) {
        case "string":
        case "number":
          a4 = !0;
          break;
        case "object":
          switch (e3.$$typeof) {
            case E4:
            case ct:
              a4 = !0;
          }
      }
    if (a4)
      return a4 = e3, o8 = o8(a4), e3 = n4 === "" ? "." + X3(a4, 0) : n4, Ee2(o8) ? (r7 = "", e3 != null && (r7 = e3.replace(ke2, "$&/") + "/"), O2(o8, t9, r7, "", function(u6) {
        return u6;
      })) : o8 != null && (te(o8) && (o8 = Ct(o8, r7 + (!o8.key || a4 && a4.key === o8.key ? "" : ("" + o8.key).replace(ke2, "$&/") + "/") + e3)), t9.push(o8)), 1;
    if (a4 = 0, n4 = n4 === "" ? "." : n4 + ":", Ee2(e3))
      for (var i7 = 0; i7 < e3.length; i7++) {
        s10 = e3[i7];
        var c5 = n4 + X3(s10, i7);
        a4 += O2(s10, t9, r7, c5, o8);
      }
    else if (c5 = St(e3), typeof c5 == "function")
      for (e3 = c5.call(e3), i7 = 0; !(s10 = e3.next()).done; )
        s10 = s10.value, c5 = n4 + X3(s10, i7++), a4 += O2(s10, t9, r7, c5, o8);
    else if (s10 === "object")
      throw t9 = String(e3), Error("Objects are not valid as a React child (found: " + (t9 === "[object Object]" ? "object with keys {" + Object.keys(e3).join(", ") + "}" : t9) + "). If you meant to render a collection of children, use an array instead.");
    return a4;
  }
  function I4(e3, t9, r7) {
    if (e3 == null)
      return e3;
    var n4 = [], o8 = 0;
    return O2(e3, n4, "", "", function(s10) {
      return t9.call(r7, s10, o8++);
    }), n4;
  }
  function Rt2(e3) {
    if (e3._status === -1) {
      var t9 = e3._result;
      t9 = t9(), t9.then(function(r7) {
        (e3._status === 0 || e3._status === -1) && (e3._status = 1, e3._result = r7);
      }, function(r7) {
        (e3._status === 0 || e3._status === -1) && (e3._status = 2, e3._result = r7);
      }), e3._status === -1 && (e3._status = 0, e3._result = t9);
    }
    if (e3._status === 1)
      return e3._result.default;
    throw e3._result;
  }
  var m6 = { current: null }, _2 = { transition: null }, wt = { ReactCurrentDispatcher: m6, ReactCurrentBatchConfig: _2, ReactCurrentOwner: ee };
  p5.Children = { map: I4, forEach: function(e3, t9, r7) {
    I4(e3, function() {
      t9.apply(this, arguments);
    }, r7);
  }, count: function(e3) {
    var t9 = 0;
    return I4(e3, function() {
      t9++;
    }), t9;
  }, toArray: function(e3) {
    return I4(e3, function(t9) {
      return t9;
    }) || [];
  }, only: function(e3) {
    if (!te(e3))
      throw Error("React.Children.only expected to receive a single React element child.");
    return e3;
  } }, p5.Component = x2, p5.Fragment = ut, p5.Profiler = ft, p5.PureComponent = Y2, p5.StrictMode = pt2, p5.Suspense = dt, p5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = wt, p5.cloneElement = function(e3, t9, r7) {
    if (e3 == null)
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + e3 + ".");
    var n4 = Pe2({}, e3.props), o8 = e3.key, s10 = e3.ref, a4 = e3._owner;
    if (t9 != null) {
      if (t9.ref !== void 0 && (s10 = t9.ref, a4 = ee.current), t9.key !== void 0 && (o8 = "" + t9.key), e3.type && e3.type.defaultProps)
        var i7 = e3.type.defaultProps;
      for (c5 in t9)
        _e3.call(t9, c5) && !ve.hasOwnProperty(c5) && (n4[c5] = t9[c5] === void 0 && i7 !== void 0 ? i7[c5] : t9[c5]);
    }
    var c5 = arguments.length - 2;
    if (c5 === 1)
      n4.children = r7;
    else if (1 < c5) {
      i7 = Array(c5);
      for (var u6 = 0; u6 < c5; u6++)
        i7[u6] = arguments[u6 + 2];
      n4.children = i7;
    }
    return { $$typeof: E4, type: e3.type, key: o8, ref: s10, props: n4, _owner: a4 };
  }, p5.createContext = function(e3) {
    return e3 = { $$typeof: ht, _currentValue: e3, _currentValue2: e3, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, e3.Provider = { $$typeof: lt2, _context: e3 }, e3.Consumer = e3;
  }, p5.createElement = Me2, p5.createFactory = function(e3) {
    var t9 = Me2.bind(null, e3);
    return t9.type = e3, t9;
  }, p5.createRef = function() {
    return { current: null };
  }, p5.forwardRef = function(e3) {
    return { $$typeof: gt2, render: e3 };
  }, p5.isValidElement = te, p5.lazy = function(e3) {
    return { $$typeof: mt, _payload: { _status: -1, _result: e3 }, _init: Rt2 };
  }, p5.memo = function(e3, t9) {
    return { $$typeof: yt, type: e3, compare: t9 === void 0 ? null : t9 };
  }, p5.startTransition = function(e3) {
    var t9 = _2.transition;
    _2.transition = {};
    try {
      e3();
    } finally {
      _2.transition = t9;
    }
  }, p5.unstable_act = function() {
    throw Error("act(...) is not supported in production builds of React.");
  }, p5.useCallback = function(e3, t9) {
    return m6.current.useCallback(e3, t9);
  }, p5.useContext = function(e3) {
    return m6.current.useContext(e3);
  }, p5.useDebugValue = function() {
  }, p5.useDeferredValue = function(e3) {
    return m6.current.useDeferredValue(e3);
  }, p5.useEffect = function(e3, t9) {
    return m6.current.useEffect(e3, t9);
  }, p5.useId = function() {
    return m6.current.useId();
  }, p5.useImperativeHandle = function(e3, t9, r7) {
    return m6.current.useImperativeHandle(e3, t9, r7);
  }, p5.useInsertionEffect = function(e3, t9) {
    return m6.current.useInsertionEffect(e3, t9);
  }, p5.useLayoutEffect = function(e3, t9) {
    return m6.current.useLayoutEffect(e3, t9);
  }, p5.useMemo = function(e3, t9) {
    return m6.current.useMemo(e3, t9);
  }, p5.useReducer = function(e3, t9, r7) {
    return m6.current.useReducer(e3, t9, r7);
  }, p5.useRef = function(e3) {
    return m6.current.useRef(e3);
  }, p5.useState = function(e3) {
    return m6.current.useState(e3);
  }, p5.useSyncExternalStore = function(e3, t9, r7) {
    return m6.current.useSyncExternalStore(e3, t9, r7);
  }, p5.useTransition = function() {
    return m6.current.useTransition();
  }, p5.version = "18.2.0";
}), qe = m((pr, je2) => {
  je2.exports = Le();
});
function se(e3) {
  let t9 = Array.isArray(e3) ? e3 : [e3], r7 = "";
  for (let n4 of t9)
    n4 != null && (typeof n4 == "object" ? !!n4.body && typeof n4.body == "string" ? r7 += n4.body : r7 += JSON.stringify(n4) : r7 += n4);
  return r7;
}
var N = "public", Be = "private", Ve = "no-store", ie = { maxAge: "max-age", staleWhileRevalidate: "stale-while-revalidate", sMaxAge: "s-maxage", staleIfError: "stale-if-error" };
function b(e3) {
  let t9 = [];
  return Object.keys(e3).forEach((r7) => {
    r7 === "mode" ? t9.push(e3[r7]) : ie[r7] && t9.push(`${ie[r7]}=${e3[r7]}`);
  }), t9.join(", ");
}
function F() {
  return { mode: Ve };
}
function ce(e3) {
  if ((e3 == null ? void 0 : e3.mode) && (e3 == null ? void 0 : e3.mode) !== N && (e3 == null ? void 0 : e3.mode) !== Be)
    throw Error("'mode' must be either 'public' or 'private'");
}
function T(e3) {
  return ce(e3), { mode: N, maxAge: 1, staleWhileRevalidate: 9, ...e3 };
}
function W(e3) {
  return ce(e3), { mode: N, maxAge: 3600, staleWhileRevalidate: 82800, ...e3 };
}
function B(e3) {
  return e3;
}
function A(e3, t9) {
  return e3 && t9 ? { ...e3, ...t9 } : e3 || T();
}
function V(e3) {
  return b(A(e3));
}
async function Qe(e3, t9) {
  if (!e3)
    return;
  let r7 = await e3.match(t9);
  if (!r7) {
    t9.url;
    return;
  }
  return t9.url, r7;
}
async function Ge(e3, t9, r7, n4) {
  if (!e3)
    return;
  let o8 = A(n4);
  t9.headers.set("cache-control", V(A(o8, { maxAge: (o8.maxAge || 0) + (o8.staleWhileRevalidate || 0) })));
  let s10 = V(A(o8));
  r7.headers.set("cache-control", s10), r7.headers.set("real-cache-control", s10), r7.headers.set("cache-put-date", new Date().toUTCString()), t9.url, await e3.put(t9, r7);
}
async function Ke(e3, t9) {
  !e3 || (t9.url, await e3.delete(t9));
}
function ze(e3, t9) {
  let r7 = t9.headers.get("cache-put-date"), n4 = t9.headers.get("real-cache-control"), o8 = 0;
  if (n4) {
    let c5 = n4.match(/max-age=(\d*)/);
    c5 && c5.length > 1 && (o8 = parseFloat(c5[1]));
  }
  if (!r7)
    return !1;
  let i7 = (new Date().valueOf() - new Date(r7).valueOf()) / 1e3 > o8;
  return i7 && e3.url, i7;
}
var P = { get: Qe, set: Ge, delete: Ke, generateDefaultCacheControlHeader: V, isStale: ze };
function Q(e3) {
  return `https://shopify.dev/?${e3}`;
}
function Je(e3) {
  return e3 || T();
}
async function ue(e3, t9) {
  if (!e3)
    return;
  let r7 = Q(t9), n4 = new Request(r7), o8 = await P.get(e3, n4);
  if (o8)
    return [await o8.json(), o8];
}
async function G(e3, t9, r7, n4) {
  if (!e3)
    return;
  let o8 = Q(t9), s10 = new Request(o8), a4 = new Response(JSON.stringify(r7));
  await P.set(e3, s10, a4, Je(n4));
}
function pe(e3, t9) {
  return P.isStale(new Request(Q(e3)), t9);
}
function fe(e3, t9) {
  return [e3, { status: t9.status, statusText: t9.statusText, headers: Array.from(t9.headers.entries()) }];
}
var le = (e3) => !(e3 != null && e3.errors), K = /* @__PURE__ */ new Set();
async function he(e3, t9, { cacheInstance: r7, cache: n4, cacheKey: o8 = [e3, t9], shouldCacheResponse: s10 = () => !0, waitUntil: a4, returnType: i7 = "json" } = {}) {
  !n4 && (!t9.method || t9.method === "GET") && (n4 = T());
  let c5 = async () => {
    let d9 = await fetch(e3, t9), l7;
    try {
      l7 = await d9[i7]();
    } catch {
      l7 = await d9.text();
    }
    return [l7, d9];
  };
  if (!r7 || !o8 || !n4)
    return c5();
  let u6 = se([...typeof o8 == "string" ? [o8] : o8]), h5 = await ue(r7, u6);
  if (h5) {
    let [d9, l7] = h5;
    if (!K.has(u6) && pe(u6, l7)) {
      K.add(u6);
      let q2 = Promise.resolve().then(async () => {
        try {
          let [C2, k] = await c5();
          s10(C2, k) && await G(r7, u6, fe(C2, k), n4);
        } catch (C2) {
          C2.message && (C2.message = "SWR in sub-request failed: " + C2.message), console.error(C2);
        } finally {
          K.delete(u6);
        }
      });
      a4 == null || a4(q2);
    }
    let [y2, w3] = d9;
    return [y2, new Response(y2, w3)];
  }
  let [S, f6] = await c5();
  if (s10(S, f6)) {
    let d9 = G(r7, u6, fe(S, f6), n4);
    a4 == null || a4(d9);
  }
  return [S, f6];
}
var ge = "Custom-Storefront-Request-Group-ID", de = "Shopify-Storefront-Buyer-IP", ye = "Shopify-Storefront-Id";
function me() {
  return typeof crypto < "u" && !!crypto.randomUUID ? crypto.randomUUID() : `weak-${Math.random().toString(16).substring(2)}`;
}
function Se(e3) {
  return String(e3).includes("__proto__") ? JSON.parse(e3, Xe) : JSON.parse(e3);
}
function Xe(e3, t9) {
  if (e3 !== "__proto__")
    return t9;
}
var Ce = /* @__PURE__ */ new Set(), Te = (e3) => {
  Ce.has(e3) || (console.warn(e3), Ce.add(e3));
}, z = "2023.1.5", xe = class extends Error {
}, Ze = (e3) => e3 instanceof xe, et = /(^|}\s)query[\s({]/im, tt = /(^|}\s)mutation[\s({]/im;
function Re(e3) {
  return e3.replace(/\s*#.*$/gm, "").replace(/\s+/gm, " ").trim();
}
var rt = { language: "EN", country: "US" };
function rr({ cache: e3, waitUntil: t9, buyerIp: r7, i18n: n4, requestGroupId: o8, storefrontId: s10, ...a4 }) {
  e3 || Te("Storefront API client created without a cache instance. This may slow down your sub-requests.");
  let { getPublicTokenHeaders: i7, getPrivateTokenHeaders: c5, getStorefrontApiUrl: u6, getShopifyDomain: h5 } = createStorefrontClient(a4), f6 = (a4.privateStorefrontToken ? c5 : i7)({ contentType: "json" });
  f6[ge] = o8 || me(), r7 && (f6[de] = r7), s10 && (f6[ye] = s10), f6["user-agent"] = `Hydrogen ${z}`;
  async function d9({ query: l7, mutation: y2, variables: w3, cache: q2, headers: C2 = [], storefrontApiVersion: k }) {
    let De2 = C2 instanceof Headers ? Object.fromEntries(C2.entries()) : Array.isArray(C2) ? Object.fromEntries(C2) : C2;
    l7 = l7 ?? y2;
    let U = { ...w3 };
    n4 && (!(w3 != null && w3.country) && /\$country/.test(l7) && (U.country = n4.country), !(w3 != null && w3.language) && /\$language/.test(l7) && (U.language = n4.language));
    let $e = u6({ storefrontApiVersion: k }), Ne3 = { method: "POST", headers: { ...f6, ...De2 }, body: JSON.stringify({ query: l7, variables: U }) }, [H4, D3] = await he($e, Ne3, { cacheInstance: y2 ? void 0 : e3, cache: q2 || T(), shouldCacheResponse: le, waitUntil: t9 });
    if (!D3.ok) {
      let $2;
      try {
        $2 = Se(H4);
      } catch {
        $2 = [{ message: H4 }];
      }
      we(D3, $2);
    }
    let { data: Fe2, errors: ne } = H4;
    return ne != null && ne.length && we(D3, ne, xe), Fe2;
  }
  return { storefront: { query: (l7, y2) => {
    if (l7 = Re(l7), tt.test(l7))
      throw new Error("storefront.query cannot execute mutations");
    return d9({ ...y2, query: l7 });
  }, mutate: (l7, y2) => {
    if (l7 = Re(l7), et.test(l7))
      throw new Error("storefront.mutate cannot execute queries");
    return d9({ ...y2, mutation: l7 });
  }, cache: e3, CacheNone: F, CacheLong: W, CacheShort: T, CacheCustom: B, generateCacheControlHeader: b, getPublicTokenHeaders: i7, getPrivateTokenHeaders: c5, getShopifyDomain: h5, getApiUrl: u6, isApiError: Ze, i18n: n4 ?? rt } };
}
function we(e3, t9, r7 = Error) {
  let n4 = e3.headers.get("x-request-id"), o8 = n4 ? ` - Request ID: ${n4}` : "";
  if (t9) {
    let s10 = typeof t9 == "string" ? t9 : t9.map((a4) => a4.message).join(`
`);
    throw new r7(s10 + o8);
  }
  throw new r7(`API response error: ${e3.status}` + o8);
}
var _e, _a, J = (_a = class {
  constructor() {
    __privateAdd(this, _e, void 0);
    __privateSet(this, _e, /* @__PURE__ */ new Map());
  }
  add(t9) {
    throw new Error("Method not implemented. Use `put` instead.");
  }
  addAll(t9) {
    throw new Error("Method not implemented. Use `put` instead.");
  }
  matchAll(t9, r7) {
    throw new Error("Method not implemented. Use `match` instead.");
  }
  async put(t9, r7) {
    var _a2;
    if (t9.method !== "GET")
      throw new TypeError("Cannot cache response to non-GET request.");
    if (r7.status === 206)
      throw new TypeError("Cannot cache response to a range request (206 Partial Content).");
    if ((_a2 = r7.headers.get("vary")) != null && _a2.includes("*"))
      throw new TypeError("Cannot cache response with 'Vary: *' header.");
    __privateGet(this, _e).set(t9.url, { body: new Uint8Array(await r7.arrayBuffer()), status: r7.status, headers: [...r7.headers], timestamp: Date.now() });
  }
  async match(t9) {
    var _a2, _b;
    if (t9.method !== "GET")
      return;
    let r7 = __privateGet(this, _e).get(t9.url);
    if (!r7)
      return;
    let { body: n4, timestamp: o8, ...s10 } = r7, a4 = new Headers(s10.headers), i7 = a4.get("cache-control") || a4.get("real-cache-control") || "", c5 = parseInt(((_a2 = i7.match(/max-age=(\d+)/)) == null ? void 0 : _a2[1]) || "0", 10), u6 = parseInt(((_b = i7.match(/stale-while-revalidate=(\d+)/)) == null ? void 0 : _b[1]) || "0", 10), h5 = (Date.now() - o8) / 1e3;
    if (h5 > c5 + u6) {
      __privateGet(this, _e).delete(t9.url);
      return;
    }
    let f6 = h5 > c5;
    return a4.set("cache", f6 ? "STALE" : "HIT"), a4.set("date", new Date(o8).toUTCString()), new Response(n4, { status: s10.status ?? 200, headers: a4 });
  }
  async delete(t9) {
    return __privateGet(this, _e).has(t9.url) ? (__privateGet(this, _e).delete(t9.url), !0) : !1;
  }
  keys(t9) {
    let r7 = [];
    for (let n4 of __privateGet(this, _e).keys())
      (!t9 || t9.url === n4) && r7.push(new Request(n4));
    return Promise.resolve(r7);
  }
}, _e = new WeakMap(), _a);
async function ot({ storefront: e3, request: t9, response: r7 = new Response("Not Found", { status: 404 }) }) {
  var _a2, _b, _c;
  let { pathname: n4, search: o8 } = new URL(t9.url), s10 = n4 + o8;
  try {
    let { urlRedirects: a4 } = await e3.query(st, { variables: { query: "path:" + s10 }, storefrontApiVersion: "2023-01" }), i7 = (_c = (_b = (_a2 = a4 == null ? void 0 : a4.edges) == null ? void 0 : _a2[0]) == null ? void 0 : _b.node) == null ? void 0 : _c.target;
    if (i7)
      return new Response(null, { status: 302, headers: { location: i7 } });
    let c5 = new URLSearchParams(o8), u6 = c5.get("return_to") || c5.get("redirect");
    if (u6) {
      if (at(u6))
        return redirect3(u6);
      console.warn(`Cross-domain redirects are not supported. Tried to redirect from ${s10} to ${u6}`);
    }
  } catch (a4) {
    console.error(`Failed to fetch redirects from Storefront API for route ${s10}`, a4);
  }
  return r7;
}
function at(e3) {
  try {
    new URL(e3);
  } catch {
    return !0;
  }
  return !1;
}
var st = `#graphql
  query redirects($query: String) {
    urlRedirects(first: 1, query: $query) {
      edges {
        node {
          target
        }
      }
    }
  }
`;
function it({ context: e3 } = {}) {
  if (!(e3 != null && e3.storefront))
    throw new Error("GraphiQL: Hydrogen's storefront client must be injected in the loader context.");
  let t9 = e3.storefront.getApiUrl(), r7 = e3.storefront.getPublicTokenHeaders()["X-Shopify-Storefront-Access-Token"];
  return new Response(`
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>GraphiQL</title>
    <style>
      body {
        height: 100%;
        margin: 0;
        width: 100%;
        overflow: hidden;
      }

      #graphiql {
        height: 100vh;
      }
    </style>

    <script
      src="https://unpkg.com/react@17/umd/react.development.js"
      integrity="sha512-Vf2xGDzpqUOEIKO+X2rgTLWPY+65++WPwCHkX2nFMu9IcstumPsf/uKKRd5prX3wOu8Q0GBylRpsDB26R6ExOg=="
      crossorigin="anonymous"
    ></script>
    <script
      src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"
      integrity="sha512-Wr9OKCTtq1anK0hq5bY3X/AvDI5EflDSAh0mE9gma+4hl+kXdTJPKZ3TwLMBcrgUeoY0s3dq9JjhCQc7vddtFg=="
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="https://unpkg.com/graphiql/graphiql.min.css" />
  </head>

  <body>
    <div id="graphiql">Loading...</div>
    <script
      src="https://unpkg.com/graphiql/graphiql.min.js"
      type="application/javascript"
    ></script>
    <script>
      ReactDOM.render(
        React.createElement(GraphiQL, {
          fetcher: GraphiQL.createFetcher({
            url: '${t9}',
            headers: {
              'X-Shopify-Storefront-Access-Token': '${r7}',
            }
          }),
          defaultEditorToolsVisibility: true,
          initialTabs: [{query: '{\\n  shop {\\n    name\\n  }\\n}'}]
        }),
        document.getElementById('graphiql'),
      );
    </script>
  </body>
</html>
  `, { status: 200, headers: { "content-type": "text/html" } });
}
var R = u(qe(), 1), v = "Error in SEO input: ", M = { title: { validate: (e3) => {
  if (typeof e3 == "string" && e3.length > 120)
    throw new Error(v.concat("`title` should not be longer than 120 characters"));
  return e3;
} }, description: { validate: (e3) => {
  if (typeof e3 == "string" && e3.length > 155)
    throw new Error(v.concat("`description` should not be longer than 155 characters"));
  return e3;
} }, url: { validate: (e3) => {
  if (typeof e3 == "string" && !e3.startsWith("http"))
    throw new Error(v.concat("`url` should be a valid URL"));
  return e3;
} }, handle: { validate: (e3) => {
  if (typeof e3 == "string" && !e3.startsWith("@"))
    throw new Error(v.concat("`handle` should start with `@`"));
  return e3;
} } };
function He(e3) {
  let t9 = [], r7 = { "@context": "https://schema.org", "@type": "Thing" };
  for (let o8 of Object.keys(e3)) {
    let s10 = re(e3[o8]), a4;
    if (!s10)
      return [];
    let c5 = s10.map((u6) => {
      let h5 = [];
      if (!u6)
        return h5;
      switch (o8) {
        case "title": {
          a4 = L(M.title, u6);
          let S = xt(e3 == null ? void 0 : e3.titleTemplate, a4);
          h5.push(g3("title", { title: S }), g3("meta", { property: "og:title", content: S }), g3("meta", { name: "twitter:title", content: S })), r7.name = a4;
          break;
        }
        case "description":
          a4 = L(M.description, u6), h5.push(g3("meta", { name: "description", content: a4 }), g3("meta", { property: "og:description", content: a4 }), g3("meta", { name: "twitter:description", content: a4 })), r7.description = a4;
          break;
        case "url":
          a4 = L(M.url, u6), h5.push(g3("meta", { property: "og:url", content: a4 }), g3("link", { rel: "canonical", href: a4 })), r7.url = a4, r7["@type"] = Et(a4);
          break;
        case "handle":
          a4 = L(M.handle, u6), h5.push(g3("meta", { name: "twitter:site", content: a4 }), g3("meta", { name: "twitter:creator", content: a4 }));
          break;
        case "jsonLd":
          r7 = { ...r7, ...u6 };
          break;
        case "media": {
          let S = re(u6);
          for (let f6 of S)
            if (typeof f6 == "string" && (h5.push(g3("meta", { name: "og:image", content: f6 })), r7.image = f6), f6 && typeof f6 == "object") {
              let d9 = f6.type || "image", l7 = f6 ? { url: f6 == null ? void 0 : f6.url, secure_url: f6 == null ? void 0 : f6.url, type: bt(f6.url), width: f6 == null ? void 0 : f6.width, height: f6 == null ? void 0 : f6.height, alt: f6 == null ? void 0 : f6.altText } : {};
              for (let y2 of Object.keys(l7))
                l7[y2] && (a4 = l7[y2], h5.push(g3("meta", { property: `og:${d9}:${y2}`, content: a4 }, l7.url)));
            }
          break;
        }
        case "alternates": {
          let S = re(u6);
          for (let f6 of S) {
            if (!f6)
              continue;
            let { language: d9, url: l7, default: y2 } = f6, w3 = d9 ? `${d9}${y2 ? "-default" : ""}` : void 0;
            h5.push(g3("link", { rel: "alternate", hrefLang: w3, href: l7 }));
          }
          break;
        }
      }
      return h5;
    }).flat();
    t9.push(c5.filter((u6) => !!u6));
  }
  let n4 = [g3("meta", { property: "og:type", content: "website" }), g3("meta", { name: "twitter:card", content: "summary_large_image" })];
  return [...t9, ...n4].flat().sort((o8, s10) => o8.key.localeCompare(s10.key)).concat(g3("script", { type: "application/ld+json", children: r7 })).flat();
}
function g3(e3, t9, r7) {
  let n4 = { tag: e3, props: {}, key: "" };
  return e3 === "title" ? (n4.children = t9.title, n4.key = Ue(n4), n4) : (e3 === "script" && (n4.children = JSON.stringify(t9.children), delete t9.children), n4.props = t9, Object.keys(n4.props).forEach((o8) => !n4.props[o8] && delete n4.props[o8]), n4.key = Ue(n4, r7), n4);
}
function Ue(e3, t9) {
  let { tag: r7, props: n4 } = e3;
  if (r7 === "title")
    return "0-title";
  if (r7 === "meta") {
    let o8 = n4.content === t9 && typeof n4.property == "string" && !n4.property.endsWith("secure_url") && "0";
    return [r7, t9, o8, n4.property || n4.name].filter((a4) => a4).join("-");
  }
  return r7 === "link" ? [r7, n4.rel, n4.hrefLang || n4.media].filter((s10) => s10).join("-").replace(/\s+/g, "-") : `${r7}-${n4.type}`;
}
function xt(e3, t9) {
  return e3 ? typeof e3 == "function" ? e3(t9) : e3.replace("%s", t9 ?? "") : t9;
}
function bt(e3) {
  let t9 = e3 && e3.split(".").pop();
  return t9 === "svg" ? "image/svg+xml" : t9 === "png" ? "image/png" : t9 === "jpg" || t9 === "jpeg" ? "image/jpeg" : t9 === "gif" ? "image/gif" : t9 === "swf" ? "application/x-shockwave-flash" : t9 === "mp3" ? "audio/mpeg" : "image/jpeg";
}
function Et(e3) {
  let t9 = "Thing";
  if (!e3)
    return t9;
  let n4 = [{ type: "WebSite", pattern: "^/$" }, { type: "Product", pattern: "/products/.*" }, { type: "ItemList", pattern: /\/collections$/ }, { type: "ItemList", pattern: /\/collections\/([^/]+)/ }, { type: "WebPage", pattern: /\/pages\/([^/]+)/ }, { type: "WebSite", pattern: /\/blogs\/([^/]+)/ }, { type: "BlogPosting", pattern: /\/blogs\/([^/]+)\/([^/]+)/ }, { type: "Organization", pattern: "/policies" }, { type: "Organization", pattern: /\/policies\/([^/]+)/ }].filter((o8) => {
    let { pattern: s10 } = o8;
    return new RegExp(s10).test(e3);
  });
  return n4.length > 0 ? n4[n4.length - 1].type : t9;
}
function re(e3) {
  return Array.isArray(e3) ? e3 : [e3];
}
function L(e3, t9) {
  try {
    return e3.validate(t9);
  } catch (r7) {
    let n4 = r7.message;
    return console.warn(n4), t9;
  }
}
var Pt = R.default.lazy(() => Promise.resolve().then(() => (init_log_seo_tags_GYSQ3BE2(), log_seo_tags_GYSQ3BE2_exports)));
function It({ debug: e3 }) {
  let t9 = useMatches2(), r7 = useLocation(), n4 = t9.flatMap((i7) => {
    let { handle: c5, ...u6 } = i7, h5 = { ...u6, ...r7 };
    return c5 === void 0 || c5.seo === void 0 ? [] : j(c5.seo, h5);
  }).reduce((i7, c5) => (Object.keys(c5).forEach((u6) => !c5[u6] && delete c5[u6]), { ...i7, ...c5 }), {}), o8 = He(n4);
  e3 && h(o8);
  let s10 = o8.map((i7) => i7.tag === "script" ? R.default.createElement(i7.tag, { ...i7.props, key: i7.key, dangerouslySetInnerHTML: { __html: i7.children } }) : R.default.createElement(i7.tag, { ...i7.props, key: i7.key }, i7.children)), a4 = R.default.createElement(R.default.Suspense, { fallback: null }, R.default.createElement(Pt, { headTags: o8 }));
  return R.default.createElement(R.default.Fragment, null, s10, e3 && a4);
}
function j(e3, ...t9) {
  if (e3 instanceof Function)
    return j(e3(...t9), ...t9);
  let r7 = {};
  return Array.isArray(e3) ? (r7 = e3.reduce((n4, o8) => [...n4, j(o8)], []), r7) : e3 instanceof Object ? (Object.entries(e3).forEach(([o8, s10]) => {
    r7[o8] = j(s10, ...t9);
  }), r7) : e3;
}

// node_modules/@shopify/remix-oxygen/dist/production/index.js
var s = new TextEncoder(), c = async (e3, o8) => {
  let t9 = await p2(o8, ["sign"]), r7 = s.encode(e3), n4 = await crypto.subtle.sign("HMAC", t9, r7), a4 = btoa(String.fromCharCode(...new Uint8Array(n4))).replace(/=+$/, "");
  return e3 + "." + a4;
}, u3 = async (e3, o8) => {
  let t9 = e3.lastIndexOf("."), r7 = e3.slice(0, t9), n4 = e3.slice(t9 + 1), a4 = await p2(o8, ["verify"]), l7 = s.encode(r7), y2 = g4(atob(n4));
  return await crypto.subtle.verify("HMAC", a4, y2, l7) ? r7 : !1;
};
async function p2(e3, o8) {
  return await crypto.subtle.importKey("raw", s.encode(e3), { name: "HMAC", hash: "SHA-256" }, !1, o8);
}
function g4(e3) {
  let o8 = new Uint8Array(e3.length);
  for (let t9 = 0; t9 < e3.length; t9++)
    o8[t9] = e3.charCodeAt(t9);
  return o8;
}
var i2 = createCookieFactory({ sign: c, unsign: u3 }), F2 = createCookieSessionStorageFactory(i2), d2 = createSessionStorageFactory(i2), f2 = createMemorySessionStorageFactory(d2);
function H({ build: e3, mode: o8, getLoadContext: t9 }) {
  let r7 = createRequestHandler(e3, o8);
  return async (n4) => r7(n4, await (t9 == null ? void 0 : t9(n4)));
}
function A2(e3) {
  return e3.headers.get("oxygen-buyer-ip") ?? void 0;
}

// app/root.jsx
init_groq_esm();

// node_modules/tiny-invariant/dist/esm/tiny-invariant.js
var isProduction = !1, prefix = "Invariant failed";
function invariant4(condition, message) {
  if (!condition) {
    if (isProduction)
      throw new Error(prefix);
    var provided = typeof message == "function" ? message() : message, value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
  }
}

// node_modules/class-variance-authority/dist/index.esm.js
var falsyToString = (value) => typeof value == "boolean" ? "".concat(value) : value === 0 ? "0" : value, cx = function() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++)
    classes[_key] = arguments[_key];
  return classes.flat(1 / 0).filter(Boolean).join(" ");
}, cva = (base, config2) => (props) => {
  var ref;
  if ((config2 == null ? void 0 : config2.variants) == null)
    return cx(base, props == null ? void 0 : props.class, props == null ? void 0 : props.className);
  let { variants, defaultVariants } = config2, getVariantClassNames = Object.keys(variants).map((variant) => {
    let variantProp = props == null ? void 0 : props[variant], defaultVariantProp = defaultVariants == null ? void 0 : defaultVariants[variant];
    if (variantProp === null)
      return null;
    let variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
    return variants[variant][variantKey];
  }), propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
    let [key, value] = param;
    return value === void 0 || (acc[key] = value), acc;
  }, {}), getCompoundVariantClassNames = config2 == null || (ref = config2.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1) => {
    let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param1;
    return Object.entries(compoundVariantOptions).every((param) => {
      let [key, value] = param;
      return Array.isArray(value) ? value.includes({
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key]) : {
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key] === value;
    }) ? [
      ...acc,
      cvClass,
      cvClassName
    ] : acc;
  }, []);
  return cx(base, getVariantClassNames, getCompoundVariantClassNames, props == null ? void 0 : props.class, props == null ? void 0 : props.className);
};

// app/components/parts/Layout.jsx
var import_jsx_dev_runtime2 = __toESM(require_jsx_dev_runtime()), layout = cva("layout", {
  variants: {
    intent: {
      page: [""],
      footer: ["p-4 lg:p-0 lg:py-4"],
      banner: [
        "w-full aspect-video p-6 flex flex-col justify-between gap-4 max-h-[calc(100vh-12rem)]"
      ],
      cart: ["p-4"],
      space: ["px-4 py-4 sm:p-8"],
      module: ["px-4 my-8"],
      "module-full": ["my-8"],
      "module-inline": ["prose my-8 break-inside-avoid-column"],
      text: ["py-8"],
      grid: ["grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3"],
      article: ["flex flex-col"],
      centre: [
        "flex",
        "justify-center",
        "items-center",
        "h-[calc(100vh-6rem)]",
        "pb-24"
      ],
      columns: ["md:columns-2 lg:columns-3 px-4"]
    }
  },
  defaultVariants: {
    intent: "page"
  }
}), Layout = ({ tag, className, intent, children, colour }) => {
  let ElementTag = `${tag || "section"}`;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    ElementTag,
    {
      className: layout({ intent, className }),
      style: { background: colour },
      children
    },
    void 0,
    !1,
    {
      fileName: "app/components/parts/Layout.jsx",
      lineNumber: 37,
      columnNumber: 5
    },
    this
  );
};

// app/components/parts/Link.jsx
var import_jsx_dev_runtime3 = __toESM(require_jsx_dev_runtime()), link = cva("w-max", {
  variants: {
    intent: {
      link: [
        "hover:text-accent focus-visible:text-accent focus:outline-none focus:border-none"
      ],
      block: ["focus:outline-none focus:border-none"],
      "button-sm": [
        "p-1 inline-block hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-base": [
        "p-2 inline-block  hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-lg": [
        "p-3 inline-block  hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-xl": [
        "px-4 py-2 inline-block hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-2xl": [
        "px-4 py-2 inline-block hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ]
    },
    colour: {
      light: ["text-white"],
      dark: ["text-black"],
      mono: [
        "text-white bg-black hover:text-black hover:bg-white focus-visible:text-black focus-visible:bg-white"
      ]
    }
  },
  compoundVariants: [
    {
      intent: [
        "button-sm",
        "button-base",
        "button-lg",
        "button-xl",
        "button-2xl"
      ],
      colour: "dark",
      className: "text-white bg-black"
    }
  ],
  defaultVariants: {
    intent: "link",
    colour: "dark"
  }
}), Link3 = ({ children, to, intent, colour, className }) => /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Link2, { to, className: link({ intent, colour, className }), children }, void 0, !1, {
  fileName: "app/components/parts/Link.jsx",
  lineNumber: 56,
  columnNumber: 5
}, this);

// app/components/parts/Text.jsx
var import_jsx_dev_runtime4 = __toESM(require_jsx_dev_runtime()), text = cva("break-words font-sans", {
  variants: {
    intent: {
      "ui-xs": ["ui-xs"],
      "ui-sm": ["ui-sm"],
      "ui-base": ["ui-base"],
      "ui-lg": ["ui-lg"],
      "ui-xl": ["ui-xl"],
      "ui-2xl": ["ui-2xl"],
      "ui-3xl": ["ui-3xl"],
      "ui-4xl": ["ui-4xl"],
      "ui-5xl": ["ui-5xl"],
      "ui-6xl": ["ui-6xl"],
      "button-sm": ["ui-sm"],
      "button-base": ["ui-base"],
      "button-lg": ["ui-lg"],
      "button-xl": ["ui-xl"],
      "button-2xl": ["ui-2xl"],
      "bl-heading-sm": ["bl-heading-sm"],
      "bl-heading-base": ["bl-heading-base"],
      "bl-heading-lg": ["bl-heading-lg"],
      "bl-heading-xl": ["bl-heading-xl"],
      "bl-heading-2xl": ["bl-heading-2xl"],
      "bl-heading-3xl": ["bl-heading-3xl"],
      "bl-body": ["bl-body"],
      "bl-body-alt": ["bl-body-alt"],
      "bl-body-lg": ["bl-body-lg"],
      "bl-quote": ["bl-quote"]
    }
  },
  defaultVariants: {
    intent: "ui-base"
  },
  compoundVariants: [
    {
      intent: ["bl-body"],
      className: "font-serif"
    }
  ]
}), Text = ({ tag, intent, className, children, colour }) => {
  let ElementTag = `${tag || "p"}`;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(ElementTag, { className: text({ intent, className }), style: { color: colour }, children }, void 0, !1, {
    fileName: "app/components/parts/Text.jsx",
    lineNumber: 47,
    columnNumber: 5
  }, this);
};

// app/components/error/NotFound.js
var import_jsx_dev_runtime5 = __toESM(require_jsx_dev_runtime());
function NotFound({ error: error2 }) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Layout, { intent: "center", children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Text, { tag: "h2", children: "Not Found" }, void 0, !1, {
      fileName: "app/components/error/NotFound.js",
      lineNumber: 9,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Link3, { intent: "button-xl", to: "/", children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Text, { tag: "h3", children: "Take me to homepage" }, void 0, !1, {
      fileName: "app/components/error/NotFound.js",
      lineNumber: 11,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/error/NotFound.js",
      lineNumber: 10,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Text, { children: (error2 == null ? void 0 : error2.stack) && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
      "pre",
      {
        dangerouslySetInnerHTML: {
          __html: addLinksToStackTrace(error2.stack)
        }
      },
      void 0,
      !1,
      {
        fileName: "app/components/error/NotFound.js",
        lineNumber: 15,
        columnNumber: 13
      },
      this
    ) }, void 0, !1, {
      fileName: "app/components/error/NotFound.js",
      lineNumber: 13,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/error/NotFound.js",
    lineNumber: 8,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/error/NotFound.js",
    lineNumber: 7,
    columnNumber: 5
  }, this);
}
function addLinksToStackTrace(stackTrace) {
  return stackTrace == null ? void 0 : stackTrace.replace(
    /^\s*at\s?.*?[(\s]((\/|\w\:).+)\)\n/gim,
    (all, m1) => all.replace(
      m1,
      `<a href="vscode://file${m1}" class="hover:underline">${m1}</a>`
    )
  );
}

// node_modules/remix-utils/browser/react/use-route-data.js
function useRouteData(routeId) {
  var _a2;
  return (_a2 = useMatches2().find((match2) => match2.id === routeId)) === null || _a2 === void 0 ? void 0 : _a2.data;
}

// node_modules/@portabletext/toolkit/dist/portable-text-toolkit.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i7 = 1; i7 < arguments.length; i7++) {
    var source = arguments[i7] != null ? arguments[i7] : {};
    i7 % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  return key = _toPropertyKey2(key), key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return typeof key == "symbol" ? key : String(key);
}
function _toPrimitive2(input, hint) {
  if (typeof input != "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res != "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function isPortableTextSpan(node) {
  return node._type === "span" && "text" in node && typeof node.text == "string" && (typeof node.marks > "u" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == "string"));
}
function isPortableTextBlock(node) {
  return typeof node._type == "string" && node._type[0] !== "@" && (!("markDefs" in node) || Array.isArray(node.markDefs) && node.markDefs.every((def) => typeof def._key == "string")) && "children" in node && Array.isArray(node.children) && node.children.every((child) => typeof child == "object" && "_type" in child);
}
function isPortableTextListItemBlock(block) {
  return isPortableTextBlock(block) && "listItem" in block && typeof block.listItem == "string" && (typeof block.level > "u" || typeof block.level == "number");
}
function isPortableTextToolkitList(block) {
  return block._type === "@list";
}
function isPortableTextToolkitSpan(span) {
  return span._type === "@span";
}
function isPortableTextToolkitTextNode(node) {
  return node._type === "@text";
}
var knownDecorators = ["strong", "em", "code", "underline", "strike-through"];
function sortMarksByOccurences(span, index, blockChildren) {
  if (!isPortableTextSpan(span) || !span.marks)
    return [];
  if (!span.marks.length)
    return [];
  let marks = span.marks.slice(), occurences = {};
  return marks.forEach((mark) => {
    occurences[mark] = 1;
    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {
      let sibling = blockChildren[siblingIndex];
      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1)
        occurences[mark]++;
      else
        break;
    }
  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));
}
function sortMarks(occurences, markA, markB) {
  let aOccurences = occurences[markA], bOccurences = occurences[markB];
  if (aOccurences !== bOccurences)
    return bOccurences - aOccurences;
  let aKnownPos = knownDecorators.indexOf(markA), bKnownPos = knownDecorators.indexOf(markB);
  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);
}
function buildMarksTree(block) {
  var _a2;
  let {
    children,
    markDefs = []
  } = block;
  if (!children || !children.length)
    return [];
  let sortedMarks = children.map(sortMarksByOccurences), rootNode = {
    _type: "@span",
    children: [],
    markType: "<unknown>"
  }, nodeStack = [rootNode];
  for (let i7 = 0; i7 < children.length; i7++) {
    let span = children[i7];
    if (!span)
      continue;
    let marksNeeded = sortedMarks[i7] || [], pos = 1;
    if (nodeStack.length > 1)
      for (pos; pos < nodeStack.length; pos++) {
        let mark = ((_a2 = nodeStack[pos]) == null ? void 0 : _a2.markKey) || "", index = marksNeeded.indexOf(mark);
        if (index === -1)
          break;
        marksNeeded.splice(index, 1);
      }
    nodeStack = nodeStack.slice(0, pos);
    let currentNode = nodeStack[nodeStack.length - 1];
    if (!!currentNode) {
      for (let markKey of marksNeeded) {
        let markDef = markDefs.find((def) => def._key === markKey), markType = markDef ? markDef._type : markKey, node = {
          _type: "@span",
          _key: span._key,
          children: [],
          markDef,
          markType,
          markKey
        };
        currentNode.children.push(node), nodeStack.push(node), currentNode = node;
      }
      if (isPortableTextSpan(span)) {
        let lines = span.text.split(`
`);
        for (let line = lines.length; line-- > 1; )
          lines.splice(line, 0, `
`);
        currentNode.children = currentNode.children.concat(lines.map((text2) => ({
          _type: "@text",
          text: text2
        })));
      } else
        currentNode.children = currentNode.children.concat(span);
    }
  }
  return rootNode.children;
}
function nestLists(blocks, mode) {
  let tree = [], currentList;
  for (let i7 = 0; i7 < blocks.length; i7++) {
    let block = blocks[i7];
    if (!!block) {
      if (!isPortableTextListItemBlock(block)) {
        tree.push(block), currentList = void 0;
        continue;
      }
      if (!currentList) {
        currentList = listFromBlock(block, i7, mode), tree.push(currentList);
        continue;
      }
      if (blockMatchesList(block, currentList)) {
        currentList.children.push(block);
        continue;
      }
      if ((block.level || 1) > currentList.level) {
        let newList = listFromBlock(block, i7, mode);
        if (mode === "html") {
          let lastListItem = currentList.children[currentList.children.length - 1], newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {
            children: [...lastListItem.children, newList]
          });
          currentList.children[currentList.children.length - 1] = newLastChild;
        } else
          currentList.children.push(newList);
        currentList = newList;
        continue;
      }
      if ((block.level || 1) < currentList.level) {
        let matchingBranch = tree[tree.length - 1], match2 = matchingBranch && findListMatching(matchingBranch, block);
        if (match2) {
          currentList = match2, currentList.children.push(block);
          continue;
        }
        currentList = listFromBlock(block, i7, mode), tree.push(currentList);
        continue;
      }
      if (block.listItem !== currentList.listItem) {
        let matchingBranch = tree[tree.length - 1], match2 = matchingBranch && findListMatching(matchingBranch, {
          level: block.level || 1
        });
        if (match2 && match2.listItem === block.listItem) {
          currentList = match2, currentList.children.push(block);
          continue;
        } else {
          currentList = listFromBlock(block, i7, mode), tree.push(currentList);
          continue;
        }
      }
      console.warn("Unknown state encountered for block", block), tree.push(block);
    }
  }
  return tree;
}
function blockMatchesList(block, list2) {
  return (block.level || 1) === list2.level && block.listItem === list2.listItem;
}
function listFromBlock(block, index, mode) {
  return {
    _type: "@list",
    _key: "".concat(block._key || "".concat(index), "-parent"),
    mode,
    level: block.level || 1,
    listItem: block.listItem,
    children: [block]
  };
}
function findListMatching(rootNode, matching) {
  let level = matching.level || 1, style = matching.listItem || "normal", filterOnType = typeof matching.listItem == "string";
  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || "normal") === style)
    return rootNode;
  if (!("children" in rootNode))
    return;
  let node = rootNode.children[rootNode.children.length - 1];
  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;
}
var leadingSpace = /^\s/, trailingSpace = /^\s/;
function toPlainText(block) {
  let blocks = Array.isArray(block) ? block : [block], text2 = "";
  return blocks.forEach((current, index) => {
    if (!isPortableTextBlock(current))
      return;
    let pad = !1;
    current.children.forEach((span) => {
      isPortableTextSpan(span) ? (text2 += pad && text2 && !trailingSpace.test(text2) && !leadingSpace.test(span.text) ? " " : "", text2 += span.text, pad = !1) : pad = !0;
    }), index !== blocks.length - 1 && (text2 += `

`);
  }), text2;
}
function spanToPlainText(span) {
  let text2 = "";
  return span.children.forEach((current) => {
    isPortableTextToolkitTextNode(current) ? text2 += current.text : isPortableTextToolkitSpan(current) && (text2 += spanToPlainText(current));
  }), text2;
}
var LIST_NEST_MODE_HTML = "html";

// node_modules/@portabletext/react/dist/react-portable-text.esm.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime()), import_react9 = __toESM(require_react());
function mergeComponents(parent, overrides) {
  let {
    block,
    list: list2,
    listItem,
    marks,
    types,
    ...rest
  } = overrides;
  return {
    ...parent,
    block: mergeDeeply(parent, overrides, "block"),
    list: mergeDeeply(parent, overrides, "list"),
    listItem: mergeDeeply(parent, overrides, "listItem"),
    marks: mergeDeeply(parent, overrides, "marks"),
    types: mergeDeeply(parent, overrides, "types"),
    ...rest
  };
}
function mergeDeeply(parent, overrides, key) {
  let override = overrides[key], parentVal = parent[key];
  return typeof override == "function" || override && typeof parentVal == "function" ? override : override ? {
    ...parentVal,
    ...override
  } : parentVal;
}
var link2 = (_ref) => {
  let {
    children,
    value
  } = _ref;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("a", {
    href: value == null ? void 0 : value.href,
    children
  });
}, underlineStyle = {
  textDecoration: "underline"
}, defaultMarks = {
  em: (_ref2) => {
    let {
      children
    } = _ref2;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("em", {
      children
    });
  },
  strong: (_ref3) => {
    let {
      children
    } = _ref3;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("strong", {
      children
    });
  },
  code: (_ref4) => {
    let {
      children
    } = _ref4;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("code", {
      children
    });
  },
  underline: (_ref5) => {
    let {
      children
    } = _ref5;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", {
      style: underlineStyle,
      children
    });
  },
  "strike-through": (_ref6) => {
    let {
      children
    } = _ref6;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("del", {
      children
    });
  },
  link: link2
}, defaultLists = {
  number: (_ref7) => {
    let {
      children
    } = _ref7;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("ol", {
      children
    });
  },
  bullet: (_ref8) => {
    let {
      children
    } = _ref8;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("ul", {
      children
    });
  }
}, DefaultListItem = (_ref9) => {
  let {
    children
  } = _ref9;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("li", {
    children
  });
}, getTemplate = (type, prop) => "[@portabletext/react] Unknown ".concat(type, ", specify a component for it in the `components.").concat(prop, "` prop"), unknownTypeWarning = (typeName) => getTemplate('block type "'.concat(typeName, '"'), "types"), unknownMarkWarning = (markType) => getTemplate('mark type "'.concat(markType, '"'), "marks"), unknownBlockStyleWarning = (blockStyle) => getTemplate('block style "'.concat(blockStyle, '"'), "block"), unknownListStyleWarning = (listStyle) => getTemplate('list style "'.concat(listStyle, '"'), "list"), unknownListItemStyleWarning = (listStyle) => getTemplate('list item style "'.concat(listStyle, '"'), "listItem");
function printWarning(message) {
  console.warn(message);
}
var hidden = {
  display: "none"
}, DefaultUnknownType = (_ref10) => {
  let {
    value,
    isInline
  } = _ref10, warning3 = unknownTypeWarning(value._type);
  return isInline ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", {
    style: hidden,
    children: warning3
  }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", {
    style: hidden,
    children: warning3
  });
}, DefaultUnknownMark = (_ref11) => {
  let {
    markType,
    children
  } = _ref11;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", {
    className: "unknown__pt__mark__".concat(markType),
    children
  });
}, DefaultUnknownBlockStyle = (_ref12) => {
  let {
    children
  } = _ref12;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", {
    children
  });
}, DefaultUnknownList = (_ref13) => {
  let {
    children
  } = _ref13;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("ul", {
    children
  });
}, DefaultUnknownListItem = (_ref14) => {
  let {
    children
  } = _ref14;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("li", {
    children
  });
}, DefaultHardBreak = () => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("br", {}), defaultBlockStyles = {
  normal: (_ref15) => {
    let {
      children
    } = _ref15;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", {
      children
    });
  },
  blockquote: (_ref16) => {
    let {
      children
    } = _ref16;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("blockquote", {
      children
    });
  },
  h1: (_ref17) => {
    let {
      children
    } = _ref17;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h1", {
      children
    });
  },
  h2: (_ref18) => {
    let {
      children
    } = _ref18;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h2", {
      children
    });
  },
  h3: (_ref19) => {
    let {
      children
    } = _ref19;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h3", {
      children
    });
  },
  h4: (_ref20) => {
    let {
      children
    } = _ref20;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h4", {
      children
    });
  },
  h5: (_ref21) => {
    let {
      children
    } = _ref21;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h5", {
      children
    });
  },
  h6: (_ref22) => {
    let {
      children
    } = _ref22;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h6", {
      children
    });
  }
}, defaultComponents = {
  types: {},
  block: defaultBlockStyles,
  marks: defaultMarks,
  list: defaultLists,
  listItem: DefaultListItem,
  hardBreak: DefaultHardBreak,
  unknownType: DefaultUnknownType,
  unknownMark: DefaultUnknownMark,
  unknownList: DefaultUnknownList,
  unknownListItem: DefaultUnknownListItem,
  unknownBlockStyle: DefaultUnknownBlockStyle
};
function PortableText(_ref23) {
  let {
    value: input,
    components: componentOverrides,
    listNestingMode,
    onMissingComponent: missingComponentHandler = printWarning
  } = _ref23, handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(input) ? input : [input], nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML), components2 = (0, import_react9.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]), renderNode = (0, import_react9.useMemo)(() => getNodeRenderer(components2, handleMissingComponent), [components2, handleMissingComponent]), rendered = nested.map((node, index) => renderNode({
    node,
    index,
    isInline: !1,
    renderNode
  }));
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, {
    children: rendered
  });
}
var getNodeRenderer = (components2, handleMissingComponent) => {
  function renderNode(options) {
    let {
      node,
      index,
      isInline
    } = options, key = node._key || "node-".concat(index);
    return isPortableTextToolkitList(node) ? renderList(node, index, key) : isPortableTextListItemBlock(node) ? renderListItem(node, index, key) : isPortableTextToolkitSpan(node) ? renderSpan(node, index, key) : isPortableTextBlock(node) ? renderBlock(node, index, key, isInline) : isPortableTextToolkitTextNode(node) ? renderText(node, key) : renderCustomBlock(node, index, key, isInline);
  }
  function renderListItem(node, index, key) {
    let tree = serializeBlock({
      node,
      index,
      isInline: !1,
      renderNode
    }), renderer = components2.listItem, Li = (typeof renderer == "function" ? renderer : renderer[node.listItem]) || components2.unknownListItem;
    if (Li === components2.unknownListItem) {
      let style = node.listItem || "bullet";
      handleMissingComponent(unknownListItemStyleWarning(style), {
        type: style,
        nodeType: "listItemStyle"
      });
    }
    let children = tree.children;
    if (node.style && node.style !== "normal") {
      let {
        listItem,
        ...blockNode
      } = node;
      children = renderNode({
        node: blockNode,
        index,
        isInline: !1,
        renderNode
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Li, {
      value: node,
      index,
      isInline: !1,
      renderNode,
      children
    }, key);
  }
  function renderList(node, index, key) {
    let children = node.children.map((child, childIndex) => renderNode({
      node: child._key ? child : {
        ...child,
        _key: "li-".concat(index, "-").concat(childIndex)
      },
      index,
      isInline: !1,
      renderNode
    })), component = components2.list, List = (typeof component == "function" ? component : component[node.listItem]) || components2.unknownList;
    if (List === components2.unknownList) {
      let style = node.listItem || "bullet";
      handleMissingComponent(unknownListStyleWarning(style), {
        nodeType: "listStyle",
        type: style
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(List, {
      value: node,
      index,
      isInline: !1,
      renderNode,
      children
    }, key);
  }
  function renderSpan(node, _index3, key) {
    let {
      markDef,
      markType,
      markKey
    } = node, Span = components2.marks[markType] || components2.unknownMark, children = node.children.map((child, childIndex) => renderNode({
      node: child,
      index: childIndex,
      isInline: !0,
      renderNode
    }));
    return Span === components2.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {
      nodeType: "mark",
      type: markType
    }), /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Span, {
      text: spanToPlainText(node),
      value: markDef,
      markType,
      markKey,
      renderNode,
      children
    }, key);
  }
  function renderBlock(node, index, key, isInline) {
    let {
      _key,
      ...props
    } = serializeBlock({
      node,
      index,
      isInline,
      renderNode
    }), style = props.node.style || "normal", Block = (typeof components2.block == "function" ? components2.block : components2.block[style]) || components2.unknownBlockStyle;
    return Block === components2.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {
      nodeType: "blockStyle",
      type: style
    }), /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Block, {
      ...props,
      value: props.node,
      renderNode
    }, key);
  }
  function renderText(node, key) {
    if (node.text === `
`) {
      let HardBreak = components2.hardBreak;
      return HardBreak ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(HardBreak, {}, key) : `
`;
    }
    return node.text;
  }
  function renderCustomBlock(node, index, key, isInline) {
    let Node2 = components2.types[node._type], nodeOptions = {
      value: node,
      isInline,
      index,
      renderNode
    };
    if (Node2)
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Node2, {
        ...nodeOptions
      }, key);
    handleMissingComponent(unknownTypeWarning(node._type), {
      nodeType: "block",
      type: node._type
    });
    let UnknownType = components2.unknownType;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(UnknownType, {
      ...nodeOptions
    }, key);
  }
  return renderNode;
};
function serializeBlock(options) {
  let {
    node,
    index,
    isInline,
    renderNode
  } = options, children = buildMarksTree(node).map((child, i7) => renderNode({
    node: child,
    isInline: !0,
    index: i7,
    renderNode
  }));
  return {
    _key: node._key || "block-".concat(index),
    children,
    index,
    isInline,
    node
  };
}
function noop() {
}

// app/components/parts/PortableTextPlain.jsx
var PortableTextPlain = ({ text: text2 }) => toPlainText(text2);

// app/components/modules/CollapsibleModule.jsx
var import_jsx_dev_runtime6 = __toESM(require_jsx_dev_runtime()), CollapsibleModule = ({ content }) => {
  let { name, heading, text: text2 } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(Layout, { children: [
    name && /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(Text, { tag: "h5", intent: "bl-heading-sm", className: "!mb-0", children: name }, void 0, !1, {
      fileName: "app/components/modules/CollapsibleModule.jsx",
      lineNumber: 10,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("details", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("summary", { className: "flex gap-2", children: /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(Text, { tag: "p", intent: "bl-body-lg", className: "select-none", children: heading || "Collapsible" }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 16,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 15,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(Text, { tag: "p", intent: "bl-body-alt", className: "mt-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(PortableTextPlain, { text: text2 }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 21,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 20,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/modules/CollapsibleModule.jsx",
      lineNumber: 14,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/modules/CollapsibleModule.jsx",
    lineNumber: 8,
    columnNumber: 5
  }, this);
};

// app/components/parts/SanityImage.jsx
var import_react11 = __toESM(require_react()), import_image_url = __toESM(require_image_url_umd());

// node_modules/@sanity/asset-utils/dist/asset-utils.esm.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o8) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(o9) {
    return o9.__proto__ || Object.getPrototypeOf(o9);
  }, _getPrototypeOf(o8);
}
function _setPrototypeOf(o8, p5) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o9, p6) {
    return o9.__proto__ = p6, o9;
  }, _setPrototypeOf(o8, p5);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function _construct(Parent, args, Class) {
  return _isNativeReflectConstruct() ? _construct = Reflect.construct.bind() : _construct = function(Parent2, args2, Class2) {
    var a4 = [null];
    a4.push.apply(a4, args2);
    var Constructor = Function.bind.apply(Parent2, a4), instance = new Constructor();
    return Class2 && _setPrototypeOf(instance, Class2.prototype), instance;
  }, _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return _wrapNativeSuper = function(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 != "function")
      throw new TypeError("Super expression must either be null or a function");
    if (typeof _cache < "u") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, Class2);
  }, _wrapNativeSuper(Class);
}
var UnresolvableError = /* @__PURE__ */ function(_Error) {
  _inheritsLoose(UnresolvableError2, _Error);
  function UnresolvableError2(inputSource, message) {
    var _this;
    return message === void 0 && (message = "Failed to resolve asset ID from source"), _this = _Error.call(this, message) || this, _this.unresolvable = !0, _this.input = inputSource, _this;
  }
  return UnresolvableError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
var cdnUrl = "https://cdn.sanity.io", fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\.[a-z0-9]+$/;
var imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\d+x\d+\.[a-z0-9]+$/;
var pathPattern = /^(images|files)\/([a-z0-9]+)\/([a-z0-9][-\w]*)\//, idPattern = /^(?:image-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\d+x\d+-[a-z0-9]+|file-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+)$/;
function isReference(ref) {
  return isObject(ref) && typeof ref._ref == "string";
}
function isAssetIdStub(stub) {
  return isObject(stub) && typeof stub._id == "string";
}
function isAssetPathStub(stub) {
  return isObject(stub) && typeof stub.path == "string";
}
function isAssetUrlStub(stub) {
  return isObject(stub) && typeof stub.url == "string";
}
function isAssetObjectStub(stub) {
  var item = stub;
  return isObject(item) && item.asset && typeof item.asset == "object";
}
function isObject(obj) {
  return obj !== null && !Array.isArray(obj) && typeof obj == "object";
}
function getUrlPath(url) {
  if (pathPattern.test(url))
    return url;
  if (!url.startsWith(cdnUrl + "/"))
    throw new UnresolvableError('Failed to resolve path from URL "' + url + '"');
  var qsPos = url.indexOf("?"), toIndex = qsPos === -1 ? void 0 : qsPos;
  return url.slice(cdnUrl.length + 1, toIndex);
}
var exampleImageId = "image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg";
function parseImageAssetId(documentId) {
  var _documentId$split2 = documentId.split("-"), assetId = _documentId$split2[1], dimensionString = _documentId$split2[2], extension = _documentId$split2[3], _split$map = (dimensionString || "").split("x").map(Number), width = _split$map[0], height = _split$map[1];
  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0))
    throw new Error("Malformed asset ID '" + documentId + `'. Expected an id like "` + exampleImageId + '".');
  return {
    type: "image",
    assetId,
    width,
    height,
    extension
  };
}
function getImageDimensions(src) {
  var imageId = getAssetDocumentId(src), _parseImageAssetId = parseImageAssetId(imageId), width = _parseImageAssetId.width, height = _parseImageAssetId.height, aspectRatio = width / height;
  return {
    width,
    height,
    aspectRatio
  };
}
function getAssetDocumentId(src) {
  var source = isAssetObjectStub(src) ? src.asset : src, id = "";
  typeof source == "string" ? id = getIdFromString(source) : isReference(source) ? id = source._ref : isAssetIdStub(source) ? id = source._id : isAssetPathStub(source) ? id = idFromUrl(cdnUrl + "/" + source.path) : isAssetUrlStub(source) && (id = idFromUrl(source.url));
  var hasId = id && idPattern.test(id);
  if (!hasId)
    throw new UnresolvableError(src);
  return id;
}
function getIdFromString(str) {
  if (idPattern.test(str))
    return str;
  if (str.indexOf(cdnUrl + "/images") === 0 || str.indexOf(cdnUrl + "/files") === 0)
    return idFromUrl(str);
  if (pathPattern.test(str))
    return idFromUrl(cdnUrl + "/" + str);
  if (isFileAssetFilename(str))
    return idFromUrl(cdnUrl + "/files/a/b/" + str);
  if (isImageAssetFilename(str))
    return idFromUrl(cdnUrl + "/images/a/b/" + str);
  throw new UnresolvableError(str);
}
function idFromUrl(url) {
  var path2 = getUrlPath(url), _path$split = path2.split("/"), type = _path$split[0], fileName = _path$split[3], prefix2 = type.replace(/s$/, "");
  return prefix2 + "-" + fileName.replace(/\./g, "-");
}
function isImageAssetFilename(filename) {
  return imageAssetFilenamePattern.test(filename);
}
function isFileAssetFilename(filename) {
  return fileAssetFilenamePattern.test(filename);
}

// app/components/parts/SanityImage.jsx
var import_jsx_dev_runtime7 = __toESM(require_jsx_dev_runtime());
function SanityImage({ value, isInline, className, alt }) {
  let { sanityProjectDetails } = useRouteData("root"), { width, height } = getImageDimensions(value);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(
    "img",
    {
      className: cx("not-prose h-auto w-full", className),
      src: (0, import_image_url.default)(sanityProjectDetails).image(value).width(isInline ? 100 : 800).fit("max").auto("format").url(),
      alt: alt || value.alt || "",
      loading: "lazy",
      style: {
        display: isInline ? "inline-block" : "block",
        aspectRatio: width / height
      }
    },
    void 0,
    !1,
    {
      fileName: "app/components/parts/SanityImage.jsx",
      lineNumber: 14,
      columnNumber: 5
    },
    this
  );
}

// app/components/modules/ImageModule.jsx
var import_jsx_dev_runtime8 = __toESM(require_jsx_dev_runtime()), ImageModule = ({ content }) => {
  let { caption, image, colour } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)(Layout, { intent: "module-inline", children: [
    image && /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("div", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)(SanityImage, { value: image }, void 0, !1, {
      fileName: "app/components/modules/ImageModule.jsx",
      lineNumber: 13,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/modules/ImageModule.jsx",
      lineNumber: 12,
      columnNumber: 9
    }, this),
    caption && /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)(
      Text,
      {
        tag: "figcaption",
        intent: "bl-body-alt",
        className: "my-4",
        colour,
        children: caption
      },
      void 0,
      !1,
      {
        fileName: "app/components/modules/ImageModule.jsx",
        lineNumber: 17,
        columnNumber: 9
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/modules/ImageModule.jsx",
    lineNumber: 10,
    columnNumber: 5
  }, this);
};

// app/components/modules/ImageGridModule.jsx
var import_jsx_dev_runtime9 = __toESM(require_jsx_dev_runtime()), ImageGridModule = ({ content }) => {
  let { images } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(Layout, { intent: "module-inline", children: /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: images.map((image) => /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(
    "div",
    {
      className: "w-full aspect-square",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(SanityImage, { value: image, className: "h-full object-cover" }, void 0, !1, {
        fileName: "app/components/modules/ImageGridModule.jsx",
        lineNumber: 16,
        columnNumber: 17
      }, this)
    },
    image._id || image._key,
    !1,
    {
      fileName: "app/components/modules/ImageGridModule.jsx",
      lineNumber: 12,
      columnNumber: 15
    },
    this
  )) }, void 0, !1, {
    fileName: "app/components/modules/ImageGridModule.jsx",
    lineNumber: 9,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/components/modules/ImageGridModule.jsx",
    lineNumber: 8,
    columnNumber: 7
  }, this);
};

// app/components/modules/CarouselModule.jsx
var import_react18 = __toESM(require_react());

// node_modules/swiper/react/swiper.js
var import_react16 = __toESM(require_react(), 1);

// node_modules/ssr-window/ssr-window.esm.js
function isObject2(obj) {
  return obj !== null && typeof obj == "object" && "constructor" in obj && obj.constructor === Object;
}
function extend(target = {}, src = {}) {
  Object.keys(src).forEach((key) => {
    typeof target[key] > "u" ? target[key] = src[key] : isObject2(src[key]) && isObject2(target[key]) && Object.keys(src[key]).length > 0 && extend(target[key], src[key]);
  });
}
var ssrDocument = {
  body: {},
  addEventListener() {
  },
  removeEventListener() {
  },
  activeElement: {
    blur() {
    },
    nodeName: ""
  },
  querySelector() {
    return null;
  },
  querySelectorAll() {
    return [];
  },
  getElementById() {
    return null;
  },
  createEvent() {
    return {
      initEvent() {
      }
    };
  },
  createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute() {
      },
      getElementsByTagName() {
        return [];
      }
    };
  },
  createElementNS() {
    return {};
  },
  importNode() {
    return null;
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: ""
  }
};
function getDocument() {
  let doc = typeof document < "u" ? document : {};
  return extend(doc, ssrDocument), doc;
}
var ssrWindow = {
  document: ssrDocument,
  navigator: {
    userAgent: ""
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: ""
  },
  history: {
    replaceState() {
    },
    pushState() {
    },
    go() {
    },
    back() {
    }
  },
  CustomEvent: function() {
    return this;
  },
  addEventListener() {
  },
  removeEventListener() {
  },
  getComputedStyle() {
    return {
      getPropertyValue() {
        return "";
      }
    };
  },
  Image() {
  },
  Date() {
  },
  screen: {},
  setTimeout() {
  },
  clearTimeout() {
  },
  matchMedia() {
    return {};
  },
  requestAnimationFrame(callback) {
    return typeof setTimeout > "u" ? (callback(), null) : setTimeout(callback, 0);
  },
  cancelAnimationFrame(id) {
    typeof setTimeout > "u" || clearTimeout(id);
  }
};
function getWindow() {
  let win = typeof window < "u" ? window : {};
  return extend(win, ssrWindow), win;
}

// node_modules/swiper/shared/utils.js
function deleteProps(obj) {
  let object = obj;
  Object.keys(object).forEach((key) => {
    try {
      object[key] = null;
    } catch {
    }
    try {
      delete object[key];
    } catch {
    }
  });
}
function nextTick(callback, delay = 0) {
  return setTimeout(callback, delay);
}
function now() {
  return Date.now();
}
function getComputedStyle2(el) {
  let window2 = getWindow(), style;
  return window2.getComputedStyle && (style = window2.getComputedStyle(el, null)), !style && el.currentStyle && (style = el.currentStyle), style || (style = el.style), style;
}
function getTranslate(el, axis = "x") {
  let window2 = getWindow(), matrix, curTransform, transformMatrix, curStyle = getComputedStyle2(el, null);
  return window2.WebKitCSSMatrix ? (curTransform = curStyle.transform || curStyle.webkitTransform, curTransform.split(",").length > 6 && (curTransform = curTransform.split(", ").map((a4) => a4.replace(",", ".")).join(", ")), transformMatrix = new window2.WebKitCSSMatrix(curTransform === "none" ? "" : curTransform)) : (transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,"), matrix = transformMatrix.toString().split(",")), axis === "x" && (window2.WebKitCSSMatrix ? curTransform = transformMatrix.m41 : matrix.length === 16 ? curTransform = parseFloat(matrix[12]) : curTransform = parseFloat(matrix[4])), axis === "y" && (window2.WebKitCSSMatrix ? curTransform = transformMatrix.m42 : matrix.length === 16 ? curTransform = parseFloat(matrix[13]) : curTransform = parseFloat(matrix[5])), curTransform || 0;
}
function isObject3(o8) {
  return typeof o8 == "object" && o8 !== null && o8.constructor && Object.prototype.toString.call(o8).slice(8, -1) === "Object";
}
function isNode(node) {
  return typeof window < "u" && typeof window.HTMLElement < "u" ? node instanceof HTMLElement : node && (node.nodeType === 1 || node.nodeType === 11);
}
function extend2(...args) {
  let to = Object(args[0]), noExtend = ["__proto__", "constructor", "prototype"];
  for (let i7 = 1; i7 < args.length; i7 += 1) {
    let nextSource = args[i7];
    if (nextSource != null && !isNode(nextSource)) {
      let keysArray = Object.keys(Object(nextSource)).filter((key) => noExtend.indexOf(key) < 0);
      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        let nextKey = keysArray[nextIndex], desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        desc !== void 0 && desc.enumerable && (isObject3(to[nextKey]) && isObject3(nextSource[nextKey]) ? nextSource[nextKey].__swiper__ ? to[nextKey] = nextSource[nextKey] : extend2(to[nextKey], nextSource[nextKey]) : !isObject3(to[nextKey]) && isObject3(nextSource[nextKey]) ? (to[nextKey] = {}, nextSource[nextKey].__swiper__ ? to[nextKey] = nextSource[nextKey] : extend2(to[nextKey], nextSource[nextKey])) : to[nextKey] = nextSource[nextKey]);
      }
    }
  }
  return to;
}
function setCSSProperty(el, varName, varValue) {
  el.style.setProperty(varName, varValue);
}
function animateCSSModeScroll({
  swiper,
  targetPosition,
  side
}) {
  let window2 = getWindow(), startPosition = -swiper.translate, startTime = null, time, duration = swiper.params.speed;
  swiper.wrapperEl.style.scrollSnapType = "none", window2.cancelAnimationFrame(swiper.cssModeFrameID);
  let dir = targetPosition > startPosition ? "next" : "prev", isOutOfBound = (current, target) => dir === "next" && current >= target || dir === "prev" && current <= target, animate = () => {
    time = new Date().getTime(), startTime === null && (startTime = time);
    let progress2 = Math.max(Math.min((time - startTime) / duration, 1), 0), easeProgress = 0.5 - Math.cos(progress2 * Math.PI) / 2, currentPosition = startPosition + easeProgress * (targetPosition - startPosition);
    if (isOutOfBound(currentPosition, targetPosition) && (currentPosition = targetPosition), swiper.wrapperEl.scrollTo({
      [side]: currentPosition
    }), isOutOfBound(currentPosition, targetPosition)) {
      swiper.wrapperEl.style.overflow = "hidden", swiper.wrapperEl.style.scrollSnapType = "", setTimeout(() => {
        swiper.wrapperEl.style.overflow = "", swiper.wrapperEl.scrollTo({
          [side]: currentPosition
        });
      }), window2.cancelAnimationFrame(swiper.cssModeFrameID);
      return;
    }
    swiper.cssModeFrameID = window2.requestAnimationFrame(animate);
  };
  animate();
}
function elementChildren(element, selector = "") {
  return [...element.children].filter((el) => el.matches(selector));
}
function createElement7(tag, classes = []) {
  let el = document.createElement(tag);
  return el.classList.add(...Array.isArray(classes) ? classes : [classes]), el;
}
function elementPrevAll(el, selector) {
  let prevEls = [];
  for (; el.previousElementSibling; ) {
    let prev = el.previousElementSibling;
    selector ? prev.matches(selector) && prevEls.push(prev) : prevEls.push(prev), el = prev;
  }
  return prevEls;
}
function elementNextAll(el, selector) {
  let nextEls = [];
  for (; el.nextElementSibling; ) {
    let next = el.nextElementSibling;
    selector ? next.matches(selector) && nextEls.push(next) : nextEls.push(next), el = next;
  }
  return nextEls;
}
function elementStyle(el, prop) {
  return getWindow().getComputedStyle(el, null).getPropertyValue(prop);
}
function elementIndex(el) {
  let child = el, i7;
  if (child) {
    for (i7 = 0; (child = child.previousSibling) !== null; )
      child.nodeType === 1 && (i7 += 1);
    return i7;
  }
}
function elementParents(el, selector) {
  let parents = [], parent = el.parentElement;
  for (; parent; )
    selector ? parent.matches(selector) && parents.push(parent) : parents.push(parent), parent = parent.parentElement;
  return parents;
}
function elementOuterSize(el, size, includeMargins) {
  let window2 = getWindow();
  return includeMargins ? el[size === "width" ? "offsetWidth" : "offsetHeight"] + parseFloat(window2.getComputedStyle(el, null).getPropertyValue(size === "width" ? "margin-right" : "margin-top")) + parseFloat(window2.getComputedStyle(el, null).getPropertyValue(size === "width" ? "margin-left" : "margin-bottom")) : el.offsetWidth;
}

// node_modules/swiper/shared/get-support.js
var support;
function calcSupport() {
  let window2 = getWindow(), document2 = getDocument();
  return {
    smoothScroll: document2.documentElement && "scrollBehavior" in document2.documentElement.style,
    touch: !!("ontouchstart" in window2 || window2.DocumentTouch && document2 instanceof window2.DocumentTouch)
  };
}
function getSupport() {
  return support || (support = calcSupport()), support;
}

// node_modules/swiper/shared/get-device.js
var deviceCached;
function calcDevice({
  userAgent
} = {}) {
  let support2 = getSupport(), window2 = getWindow(), platform = window2.navigator.platform, ua = userAgent || window2.navigator.userAgent, device = {
    ios: !1,
    android: !1
  }, screenWidth = window2.screen.width, screenHeight = window2.screen.height, android = ua.match(/(Android);?[\s\/]+([\d.]+)?/), ipad = ua.match(/(iPad).*OS\s([\d_]+)/), ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/), iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/), windows = platform === "Win32", macos = platform === "MacIntel", iPadScreens = ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"];
  return !ipad && macos && support2.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0 && (ipad = ua.match(/(Version)\/([\d.]+)/), ipad || (ipad = [0, 1, "13_0_0"]), macos = !1), android && !windows && (device.os = "android", device.android = !0), (ipad || iphone || ipod) && (device.os = "ios", device.ios = !0), device;
}
function getDevice(overrides = {}) {
  return deviceCached || (deviceCached = calcDevice(overrides)), deviceCached;
}

// node_modules/swiper/shared/get-browser.js
var browser;
function calcBrowser() {
  let window2 = getWindow(), needPerspectiveFix = !1;
  function isSafari() {
    let ua = window2.navigator.userAgent.toLowerCase();
    return ua.indexOf("safari") >= 0 && ua.indexOf("chrome") < 0 && ua.indexOf("android") < 0;
  }
  if (isSafari()) {
    let ua = String(window2.navigator.userAgent);
    if (ua.includes("Version/")) {
      let [major, minor] = ua.split("Version/")[1].split(" ")[0].split(".").map((num) => Number(num));
      needPerspectiveFix = major < 16 || major === 16 && minor < 2;
    }
  }
  return {
    isSafari: needPerspectiveFix || isSafari(),
    needPerspectiveFix,
    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window2.navigator.userAgent)
  };
}
function getBrowser() {
  return browser || (browser = calcBrowser()), browser;
}

// node_modules/swiper/core/modules/resize/resize.js
function Resize({
  swiper,
  on,
  emit
}) {
  let window2 = getWindow(), observer = null, animationFrame = null, resizeHandler = () => {
    !swiper || swiper.destroyed || !swiper.initialized || (emit("beforeResize"), emit("resize"));
  }, createObserver = () => {
    !swiper || swiper.destroyed || !swiper.initialized || (observer = new ResizeObserver((entries) => {
      animationFrame = window2.requestAnimationFrame(() => {
        let {
          width,
          height
        } = swiper, newWidth = width, newHeight = height;
        entries.forEach(({
          contentBoxSize,
          contentRect,
          target
        }) => {
          target && target !== swiper.el || (newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize, newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize);
        }), (newWidth !== width || newHeight !== height) && resizeHandler();
      });
    }), observer.observe(swiper.el));
  }, removeObserver = () => {
    animationFrame && window2.cancelAnimationFrame(animationFrame), observer && observer.unobserve && swiper.el && (observer.unobserve(swiper.el), observer = null);
  }, orientationChangeHandler = () => {
    !swiper || swiper.destroyed || !swiper.initialized || emit("orientationchange");
  };
  on("init", () => {
    if (swiper.params.resizeObserver && typeof window2.ResizeObserver < "u") {
      createObserver();
      return;
    }
    window2.addEventListener("resize", resizeHandler), window2.addEventListener("orientationchange", orientationChangeHandler);
  }), on("destroy", () => {
    removeObserver(), window2.removeEventListener("resize", resizeHandler), window2.removeEventListener("orientationchange", orientationChangeHandler);
  });
}

// node_modules/swiper/core/modules/observer/observer.js
function Observer({
  swiper,
  extendParams,
  on,
  emit
}) {
  let observers = [], window2 = getWindow(), attach = (target, options = {}) => {
    let ObserverFunc = window2.MutationObserver || window2.WebkitMutationObserver, observer = new ObserverFunc((mutations) => {
      if (swiper.__preventObserver__)
        return;
      if (mutations.length === 1) {
        emit("observerUpdate", mutations[0]);
        return;
      }
      let observerUpdate = function() {
        emit("observerUpdate", mutations[0]);
      };
      window2.requestAnimationFrame ? window2.requestAnimationFrame(observerUpdate) : window2.setTimeout(observerUpdate, 0);
    });
    observer.observe(target, {
      attributes: typeof options.attributes > "u" ? !0 : options.attributes,
      childList: typeof options.childList > "u" ? !0 : options.childList,
      characterData: typeof options.characterData > "u" ? !0 : options.characterData
    }), observers.push(observer);
  }, init = () => {
    if (!!swiper.params.observer) {
      if (swiper.params.observeParents) {
        let containerParents = elementParents(swiper.el);
        for (let i7 = 0; i7 < containerParents.length; i7 += 1)
          attach(containerParents[i7]);
      }
      attach(swiper.el, {
        childList: swiper.params.observeSlideChildren
      }), attach(swiper.wrapperEl, {
        attributes: !1
      });
    }
  }, destroy = () => {
    observers.forEach((observer) => {
      observer.disconnect();
    }), observers.splice(0, observers.length);
  };
  extendParams({
    observer: !1,
    observeParents: !1,
    observeSlideChildren: !1
  }), on("init", init), on("destroy", destroy);
}

// node_modules/swiper/core/events-emitter.js
var events_emitter_default = {
  on(events2, handler, priority) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || typeof handler != "function")
      return self2;
    let method = priority ? "unshift" : "push";
    return events2.split(" ").forEach((event2) => {
      self2.eventsListeners[event2] || (self2.eventsListeners[event2] = []), self2.eventsListeners[event2][method](handler);
    }), self2;
  },
  once(events2, handler, priority) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || typeof handler != "function")
      return self2;
    function onceHandler(...args) {
      self2.off(events2, onceHandler), onceHandler.__emitterProxy && delete onceHandler.__emitterProxy, handler.apply(self2, args);
    }
    return onceHandler.__emitterProxy = handler, self2.on(events2, onceHandler, priority);
  },
  onAny(handler, priority) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || typeof handler != "function")
      return self2;
    let method = priority ? "unshift" : "push";
    return self2.eventsAnyListeners.indexOf(handler) < 0 && self2.eventsAnyListeners[method](handler), self2;
  },
  offAny(handler) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || !self2.eventsAnyListeners)
      return self2;
    let index = self2.eventsAnyListeners.indexOf(handler);
    return index >= 0 && self2.eventsAnyListeners.splice(index, 1), self2;
  },
  off(events2, handler) {
    let self2 = this;
    return !self2.eventsListeners || self2.destroyed || !self2.eventsListeners || events2.split(" ").forEach((event2) => {
      typeof handler > "u" ? self2.eventsListeners[event2] = [] : self2.eventsListeners[event2] && self2.eventsListeners[event2].forEach((eventHandler, index) => {
        (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) && self2.eventsListeners[event2].splice(index, 1);
      });
    }), self2;
  },
  emit(...args) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || !self2.eventsListeners)
      return self2;
    let events2, data, context2;
    return typeof args[0] == "string" || Array.isArray(args[0]) ? (events2 = args[0], data = args.slice(1, args.length), context2 = self2) : (events2 = args[0].events, data = args[0].data, context2 = args[0].context || self2), data.unshift(context2), (Array.isArray(events2) ? events2 : events2.split(" ")).forEach((event2) => {
      self2.eventsAnyListeners && self2.eventsAnyListeners.length && self2.eventsAnyListeners.forEach((eventHandler) => {
        eventHandler.apply(context2, [event2, ...data]);
      }), self2.eventsListeners && self2.eventsListeners[event2] && self2.eventsListeners[event2].forEach((eventHandler) => {
        eventHandler.apply(context2, data);
      });
    }), self2;
  }
};

// node_modules/swiper/core/update/updateSize.js
function updateSize() {
  let swiper = this, width, height, el = swiper.el;
  typeof swiper.params.width < "u" && swiper.params.width !== null ? width = swiper.params.width : width = el.clientWidth, typeof swiper.params.height < "u" && swiper.params.height !== null ? height = swiper.params.height : height = el.clientHeight, !(width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) && (width = width - parseInt(elementStyle(el, "padding-left") || 0, 10) - parseInt(elementStyle(el, "padding-right") || 0, 10), height = height - parseInt(elementStyle(el, "padding-top") || 0, 10) - parseInt(elementStyle(el, "padding-bottom") || 0, 10), Number.isNaN(width) && (width = 0), Number.isNaN(height) && (height = 0), Object.assign(swiper, {
    width,
    height,
    size: swiper.isHorizontal() ? width : height
  }));
}

// node_modules/swiper/core/update/updateSlides.js
function updateSlides() {
  let swiper = this;
  function getDirectionLabel(property) {
    return swiper.isHorizontal() ? property : {
      width: "height",
      "margin-top": "margin-left",
      "margin-bottom ": "margin-right",
      "margin-left": "margin-top",
      "margin-right": "margin-bottom",
      "padding-left": "padding-top",
      "padding-right": "padding-bottom",
      marginRight: "marginBottom"
    }[property];
  }
  function getDirectionPropertyValue(node, label) {
    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
  }
  let params = swiper.params, {
    wrapperEl,
    slidesEl,
    size: swiperSize,
    rtlTranslate: rtl,
    wrongRTL
  } = swiper, isVirtual = swiper.virtual && params.virtual.enabled, previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length, slides = elementChildren(slidesEl, `.${swiper.params.slideClass}, swiper-slide`), slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length, snapGrid = [], slidesGrid = [], slidesSizesGrid = [], offsetBefore = params.slidesOffsetBefore;
  typeof offsetBefore == "function" && (offsetBefore = params.slidesOffsetBefore.call(swiper));
  let offsetAfter = params.slidesOffsetAfter;
  typeof offsetAfter == "function" && (offsetAfter = params.slidesOffsetAfter.call(swiper));
  let previousSnapGridLength = swiper.snapGrid.length, previousSlidesGridLength = swiper.slidesGrid.length, spaceBetween = params.spaceBetween, slidePosition = -offsetBefore, prevSlideSize = 0, index = 0;
  if (typeof swiperSize > "u")
    return;
  typeof spaceBetween == "string" && spaceBetween.indexOf("%") >= 0 && (spaceBetween = parseFloat(spaceBetween.replace("%", "")) / 100 * swiperSize), swiper.virtualSize = -spaceBetween, slides.forEach((slideEl) => {
    rtl ? slideEl.style.marginLeft = "" : slideEl.style.marginRight = "", slideEl.style.marginBottom = "", slideEl.style.marginTop = "";
  }), params.centeredSlides && params.cssMode && (setCSSProperty(wrapperEl, "--swiper-centered-offset-before", ""), setCSSProperty(wrapperEl, "--swiper-centered-offset-after", ""));
  let gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;
  gridEnabled && swiper.grid.initSlides(slidesLength);
  let slideSize, shouldResetSlideSize = params.slidesPerView === "auto" && params.breakpoints && Object.keys(params.breakpoints).filter((key) => typeof params.breakpoints[key].slidesPerView < "u").length > 0;
  for (let i7 = 0; i7 < slidesLength; i7 += 1) {
    slideSize = 0;
    let slide;
    if (slides[i7] && (slide = slides[i7]), gridEnabled && swiper.grid.updateSlide(i7, slide, slidesLength, getDirectionLabel), !(slides[i7] && elementStyle(slide, "display") === "none")) {
      if (params.slidesPerView === "auto") {
        shouldResetSlideSize && (slides[i7].style[getDirectionLabel("width")] = "");
        let slideStyles = getComputedStyle(slide), currentTransform = slide.style.transform, currentWebKitTransform = slide.style.webkitTransform;
        if (currentTransform && (slide.style.transform = "none"), currentWebKitTransform && (slide.style.webkitTransform = "none"), params.roundLengths)
          slideSize = swiper.isHorizontal() ? elementOuterSize(slide, "width", !0) : elementOuterSize(slide, "height", !0);
        else {
          let width = getDirectionPropertyValue(slideStyles, "width"), paddingLeft = getDirectionPropertyValue(slideStyles, "padding-left"), paddingRight = getDirectionPropertyValue(slideStyles, "padding-right"), marginLeft = getDirectionPropertyValue(slideStyles, "margin-left"), marginRight = getDirectionPropertyValue(slideStyles, "margin-right"), boxSizing = slideStyles.getPropertyValue("box-sizing");
          if (boxSizing && boxSizing === "border-box")
            slideSize = width + marginLeft + marginRight;
          else {
            let {
              clientWidth,
              offsetWidth
            } = slide;
            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
          }
        }
        currentTransform && (slide.style.transform = currentTransform), currentWebKitTransform && (slide.style.webkitTransform = currentWebKitTransform), params.roundLengths && (slideSize = Math.floor(slideSize));
      } else
        slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView, params.roundLengths && (slideSize = Math.floor(slideSize)), slides[i7] && (slides[i7].style[getDirectionLabel("width")] = `${slideSize}px`);
      slides[i7] && (slides[i7].swiperSlideSize = slideSize), slidesSizesGrid.push(slideSize), params.centeredSlides ? (slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween, prevSlideSize === 0 && i7 !== 0 && (slidePosition = slidePosition - swiperSize / 2 - spaceBetween), i7 === 0 && (slidePosition = slidePosition - swiperSize / 2 - spaceBetween), Math.abs(slidePosition) < 1 / 1e3 && (slidePosition = 0), params.roundLengths && (slidePosition = Math.floor(slidePosition)), index % params.slidesPerGroup === 0 && snapGrid.push(slidePosition), slidesGrid.push(slidePosition)) : (params.roundLengths && (slidePosition = Math.floor(slidePosition)), (index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0 && snapGrid.push(slidePosition), slidesGrid.push(slidePosition), slidePosition = slidePosition + slideSize + spaceBetween), swiper.virtualSize += slideSize + spaceBetween, prevSlideSize = slideSize, index += 1;
    }
  }
  if (swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter, rtl && wrongRTL && (params.effect === "slide" || params.effect === "coverflow") && (wrapperEl.style.width = `${swiper.virtualSize + params.spaceBetween}px`), params.setWrapperSize && (wrapperEl.style[getDirectionLabel("width")] = `${swiper.virtualSize + params.spaceBetween}px`), gridEnabled && swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel), !params.centeredSlides) {
    let newSlidesGrid = [];
    for (let i7 = 0; i7 < snapGrid.length; i7 += 1) {
      let slidesGridItem = snapGrid[i7];
      params.roundLengths && (slidesGridItem = Math.floor(slidesGridItem)), snapGrid[i7] <= swiper.virtualSize - swiperSize && newSlidesGrid.push(slidesGridItem);
    }
    snapGrid = newSlidesGrid, Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1 && snapGrid.push(swiper.virtualSize - swiperSize);
  }
  if (isVirtual && params.loop) {
    let size = slidesSizesGrid[0] + spaceBetween;
    if (params.slidesPerGroup > 1) {
      let groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup), groupSize = size * params.slidesPerGroup;
      for (let i7 = 0; i7 < groups; i7 += 1)
        snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
    }
    for (let i7 = 0; i7 < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i7 += 1)
      params.slidesPerGroup === 1 && snapGrid.push(snapGrid[snapGrid.length - 1] + size), slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size), swiper.virtualSize += size;
  }
  if (snapGrid.length === 0 && (snapGrid = [0]), params.spaceBetween !== 0) {
    let key = swiper.isHorizontal() && rtl ? "marginLeft" : getDirectionLabel("marginRight");
    slides.filter((_2, slideIndex) => !params.cssMode || params.loop ? !0 : slideIndex !== slides.length - 1).forEach((slideEl) => {
      slideEl.style[key] = `${spaceBetween}px`;
    });
  }
  if (params.centeredSlides && params.centeredSlidesBounds) {
    let allSlidesSize = 0;
    slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    }), allSlidesSize -= params.spaceBetween;
    let maxSnap = allSlidesSize - swiperSize;
    snapGrid = snapGrid.map((snap) => snap < 0 ? -offsetBefore : snap > maxSnap ? maxSnap + offsetAfter : snap);
  }
  if (params.centerInsufficientSlides) {
    let allSlidesSize = 0;
    if (slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    }), allSlidesSize -= params.spaceBetween, allSlidesSize < swiperSize) {
      let allSlidesOffset = (swiperSize - allSlidesSize) / 2;
      snapGrid.forEach((snap, snapIndex) => {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      }), slidesGrid.forEach((snap, snapIndex) => {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }
  if (Object.assign(swiper, {
    slides,
    snapGrid,
    slidesGrid,
    slidesSizesGrid
  }), params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {
    setCSSProperty(wrapperEl, "--swiper-centered-offset-before", `${-snapGrid[0]}px`), setCSSProperty(wrapperEl, "--swiper-centered-offset-after", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);
    let addToSnapGrid = -swiper.snapGrid[0], addToSlidesGrid = -swiper.slidesGrid[0];
    swiper.snapGrid = swiper.snapGrid.map((v3) => v3 + addToSnapGrid), swiper.slidesGrid = swiper.slidesGrid.map((v3) => v3 + addToSlidesGrid);
  }
  if (slidesLength !== previousSlidesLength && swiper.emit("slidesLengthChange"), snapGrid.length !== previousSnapGridLength && (swiper.params.watchOverflow && swiper.checkOverflow(), swiper.emit("snapGridLengthChange")), slidesGrid.length !== previousSlidesGridLength && swiper.emit("slidesGridLengthChange"), params.watchSlidesProgress && swiper.updateSlidesOffset(), !isVirtual && !params.cssMode && (params.effect === "slide" || params.effect === "fade")) {
    let backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`, hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);
    slidesLength <= params.maxBackfaceHiddenSlides ? hasClassBackfaceClassAdded || swiper.el.classList.add(backFaceHiddenClass) : hasClassBackfaceClassAdded && swiper.el.classList.remove(backFaceHiddenClass);
  }
}

// node_modules/swiper/core/update/updateAutoHeight.js
function updateAutoHeight(speed) {
  let swiper = this, activeSlides = [], isVirtual = swiper.virtual && swiper.params.virtual.enabled, newHeight = 0, i7;
  typeof speed == "number" ? swiper.setTransition(speed) : speed === !0 && swiper.setTransition(swiper.params.speed);
  let getSlideByIndex = (index) => isVirtual ? swiper.slides.filter((el) => parseInt(el.getAttribute("data-swiper-slide-index"), 10) === index)[0] : swiper.slides[index];
  if (swiper.params.slidesPerView !== "auto" && swiper.params.slidesPerView > 1)
    if (swiper.params.centeredSlides)
      (swiper.visibleSlides || []).forEach((slide) => {
        activeSlides.push(slide);
      });
    else
      for (i7 = 0; i7 < Math.ceil(swiper.params.slidesPerView); i7 += 1) {
        let index = swiper.activeIndex + i7;
        if (index > swiper.slides.length && !isVirtual)
          break;
        activeSlides.push(getSlideByIndex(index));
      }
  else
    activeSlides.push(getSlideByIndex(swiper.activeIndex));
  for (i7 = 0; i7 < activeSlides.length; i7 += 1)
    if (typeof activeSlides[i7] < "u") {
      let height = activeSlides[i7].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  (newHeight || newHeight === 0) && (swiper.wrapperEl.style.height = `${newHeight}px`);
}

// node_modules/swiper/core/update/updateSlidesOffset.js
function updateSlidesOffset() {
  let swiper = this, slides = swiper.slides, minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;
  for (let i7 = 0; i7 < slides.length; i7 += 1)
    slides[i7].swiperSlideOffset = (swiper.isHorizontal() ? slides[i7].offsetLeft : slides[i7].offsetTop) - minusOffset;
}

// node_modules/swiper/core/update/updateSlidesProgress.js
function updateSlidesProgress(translate = this && this.translate || 0) {
  let swiper = this, params = swiper.params, {
    slides,
    rtlTranslate: rtl,
    snapGrid
  } = swiper;
  if (slides.length === 0)
    return;
  typeof slides[0].swiperSlideOffset > "u" && swiper.updateSlidesOffset();
  let offsetCenter = -translate;
  rtl && (offsetCenter = translate), slides.forEach((slideEl) => {
    slideEl.classList.remove(params.slideVisibleClass);
  }), swiper.visibleSlidesIndexes = [], swiper.visibleSlides = [];
  for (let i7 = 0; i7 < slides.length; i7 += 1) {
    let slide = slides[i7], slideOffset = slide.swiperSlideOffset;
    params.cssMode && params.centeredSlides && (slideOffset -= slides[0].swiperSlideOffset);
    let slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween), originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween), slideBefore = -(offsetCenter - slideOffset), slideAfter = slideBefore + swiper.slidesSizesGrid[i7];
    (slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size) && (swiper.visibleSlides.push(slide), swiper.visibleSlidesIndexes.push(i7), slides[i7].classList.add(params.slideVisibleClass)), slide.progress = rtl ? -slideProgress : slideProgress, slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;
  }
}

// node_modules/swiper/core/update/updateProgress.js
function updateProgress(translate) {
  let swiper = this;
  if (typeof translate > "u") {
    let multiplier = swiper.rtlTranslate ? -1 : 1;
    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
  }
  let params = swiper.params, translatesDiff = swiper.maxTranslate() - swiper.minTranslate(), {
    progress: progress2,
    isBeginning,
    isEnd,
    progressLoop
  } = swiper, wasBeginning = isBeginning, wasEnd = isEnd;
  if (translatesDiff === 0)
    progress2 = 0, isBeginning = !0, isEnd = !0;
  else {
    progress2 = (translate - swiper.minTranslate()) / translatesDiff;
    let isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1, isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;
    isBeginning = isBeginningRounded || progress2 <= 0, isEnd = isEndRounded || progress2 >= 1, isBeginningRounded && (progress2 = 0), isEndRounded && (progress2 = 1);
  }
  if (params.loop) {
    let firstSlideIndex = swiper.getSlideIndex(swiper.slides.filter((el) => el.getAttribute("data-swiper-slide-index") === "0")[0]), lastSlideIndex = swiper.getSlideIndex(swiper.slides.filter((el) => el.getAttribute("data-swiper-slide-index") * 1 === swiper.slides.length - 1)[0]), firstSlideTranslate = swiper.slidesGrid[firstSlideIndex], lastSlideTranslate = swiper.slidesGrid[lastSlideIndex], translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1], translateAbs = Math.abs(translate);
    translateAbs >= firstSlideTranslate ? progressLoop = (translateAbs - firstSlideTranslate) / translateMax : progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax, progressLoop > 1 && (progressLoop -= 1);
  }
  Object.assign(swiper, {
    progress: progress2,
    progressLoop,
    isBeginning,
    isEnd
  }), (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) && swiper.updateSlidesProgress(translate), isBeginning && !wasBeginning && swiper.emit("reachBeginning toEdge"), isEnd && !wasEnd && swiper.emit("reachEnd toEdge"), (wasBeginning && !isBeginning || wasEnd && !isEnd) && swiper.emit("fromEdge"), swiper.emit("progress", progress2);
}

// node_modules/swiper/core/update/updateSlidesClasses.js
function updateSlidesClasses() {
  let swiper = this, {
    slides,
    params,
    slidesEl,
    activeIndex
  } = swiper, isVirtual = swiper.virtual && params.virtual.enabled, getFilteredSlide = (selector) => elementChildren(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];
  slides.forEach((slideEl) => {
    slideEl.classList.remove(params.slideActiveClass, params.slideNextClass, params.slidePrevClass);
  });
  let activeSlide;
  if (isVirtual)
    if (params.loop) {
      let slideIndex = activeIndex - swiper.virtual.slidesBefore;
      slideIndex < 0 && (slideIndex = swiper.virtual.slides.length + slideIndex), slideIndex >= swiper.virtual.slides.length && (slideIndex -= swiper.virtual.slides.length), activeSlide = getFilteredSlide(`[data-swiper-slide-index="${slideIndex}"]`);
    } else
      activeSlide = getFilteredSlide(`[data-swiper-slide-index="${activeIndex}"]`);
  else
    activeSlide = slides[activeIndex];
  if (activeSlide) {
    activeSlide.classList.add(params.slideActiveClass);
    let nextSlide = elementNextAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
    params.loop && !nextSlide && (nextSlide = slides[0]), nextSlide && nextSlide.classList.add(params.slideNextClass);
    let prevSlide = elementPrevAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
    params.loop && !prevSlide === 0 && (prevSlide = slides[slides.length - 1]), prevSlide && prevSlide.classList.add(params.slidePrevClass);
  }
  swiper.emitSlidesClasses();
}

// node_modules/swiper/core/update/updateActiveIndex.js
function getActiveIndexByTranslate(swiper) {
  let {
    slidesGrid,
    params
  } = swiper, translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate, activeIndex;
  for (let i7 = 0; i7 < slidesGrid.length; i7 += 1)
    typeof slidesGrid[i7 + 1] < "u" ? translate >= slidesGrid[i7] && translate < slidesGrid[i7 + 1] - (slidesGrid[i7 + 1] - slidesGrid[i7]) / 2 ? activeIndex = i7 : translate >= slidesGrid[i7] && translate < slidesGrid[i7 + 1] && (activeIndex = i7 + 1) : translate >= slidesGrid[i7] && (activeIndex = i7);
  return params.normalizeSlideIndex && (activeIndex < 0 || typeof activeIndex > "u") && (activeIndex = 0), activeIndex;
}
function updateActiveIndex(newActiveIndex) {
  let swiper = this, translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate, {
    snapGrid,
    params,
    activeIndex: previousIndex,
    realIndex: previousRealIndex,
    snapIndex: previousSnapIndex
  } = swiper, activeIndex = newActiveIndex, snapIndex, getVirtualRealIndex = (aIndex) => {
    let realIndex2 = aIndex - swiper.virtual.slidesBefore;
    return realIndex2 < 0 && (realIndex2 = swiper.virtual.slides.length + realIndex2), realIndex2 >= swiper.virtual.slides.length && (realIndex2 -= swiper.virtual.slides.length), realIndex2;
  };
  if (typeof activeIndex > "u" && (activeIndex = getActiveIndexByTranslate(swiper)), snapGrid.indexOf(translate) >= 0)
    snapIndex = snapGrid.indexOf(translate);
  else {
    let skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }
  if (snapIndex >= snapGrid.length && (snapIndex = snapGrid.length - 1), activeIndex === previousIndex) {
    snapIndex !== previousSnapIndex && (swiper.snapIndex = snapIndex, swiper.emit("snapIndexChange")), swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled && (swiper.realIndex = getVirtualRealIndex(activeIndex));
    return;
  }
  let realIndex;
  swiper.virtual && params.virtual.enabled && params.loop ? realIndex = getVirtualRealIndex(activeIndex) : swiper.slides[activeIndex] ? realIndex = parseInt(swiper.slides[activeIndex].getAttribute("data-swiper-slide-index") || activeIndex, 10) : realIndex = activeIndex, Object.assign(swiper, {
    snapIndex,
    realIndex,
    previousIndex,
    activeIndex
  }), swiper.emit("activeIndexChange"), swiper.emit("snapIndexChange"), previousRealIndex !== realIndex && swiper.emit("realIndexChange"), (swiper.initialized || swiper.params.runCallbacksOnInit) && swiper.emit("slideChange");
}

// node_modules/swiper/core/update/updateClickedSlide.js
function updateClickedSlide(e3) {
  let swiper = this, params = swiper.params, slide = e3.closest(`.${params.slideClass}, swiper-slide`), slideFound = !1, slideIndex;
  if (slide) {
    for (let i7 = 0; i7 < swiper.slides.length; i7 += 1)
      if (swiper.slides[i7] === slide) {
        slideFound = !0, slideIndex = i7;
        break;
      }
  }
  if (slide && slideFound)
    swiper.clickedSlide = slide, swiper.virtual && swiper.params.virtual.enabled ? swiper.clickedIndex = parseInt(slide.getAttribute("data-swiper-slide-index"), 10) : swiper.clickedIndex = slideIndex;
  else {
    swiper.clickedSlide = void 0, swiper.clickedIndex = void 0;
    return;
  }
  params.slideToClickedSlide && swiper.clickedIndex !== void 0 && swiper.clickedIndex !== swiper.activeIndex && swiper.slideToClickedSlide();
}

// node_modules/swiper/core/update/index.js
var update_default = {
  updateSize,
  updateSlides,
  updateAutoHeight,
  updateSlidesOffset,
  updateSlidesProgress,
  updateProgress,
  updateSlidesClasses,
  updateActiveIndex,
  updateClickedSlide
};

// node_modules/swiper/core/translate/getTranslate.js
function getSwiperTranslate(axis = this.isHorizontal() ? "x" : "y") {
  let swiper = this, {
    params,
    rtlTranslate: rtl,
    translate,
    wrapperEl
  } = swiper;
  if (params.virtualTranslate)
    return rtl ? -translate : translate;
  if (params.cssMode)
    return translate;
  let currentTranslate = getTranslate(wrapperEl, axis);
  return rtl && (currentTranslate = -currentTranslate), currentTranslate || 0;
}

// node_modules/swiper/core/translate/setTranslate.js
function setTranslate(translate, byController) {
  let swiper = this, {
    rtlTranslate: rtl,
    params,
    wrapperEl,
    progress: progress2
  } = swiper, x2 = 0, y2 = 0, z4 = 0;
  swiper.isHorizontal() ? x2 = rtl ? -translate : translate : y2 = translate, params.roundLengths && (x2 = Math.floor(x2), y2 = Math.floor(y2)), params.cssMode ? wrapperEl[swiper.isHorizontal() ? "scrollLeft" : "scrollTop"] = swiper.isHorizontal() ? -x2 : -y2 : params.virtualTranslate || (wrapperEl.style.transform = `translate3d(${x2}px, ${y2}px, ${z4}px)`), swiper.previousTranslate = swiper.translate, swiper.translate = swiper.isHorizontal() ? x2 : y2;
  let newProgress, translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  translatesDiff === 0 ? newProgress = 0 : newProgress = (translate - swiper.minTranslate()) / translatesDiff, newProgress !== progress2 && swiper.updateProgress(translate), swiper.emit("setTranslate", swiper.translate, byController);
}

// node_modules/swiper/core/translate/minTranslate.js
function minTranslate() {
  return -this.snapGrid[0];
}

// node_modules/swiper/core/translate/maxTranslate.js
function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

// node_modules/swiper/core/translate/translateTo.js
function translateTo(translate = 0, speed = this.params.speed, runCallbacks = !0, translateBounds = !0, internal) {
  let swiper = this, {
    params,
    wrapperEl
  } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition)
    return !1;
  let minTranslate2 = swiper.minTranslate(), maxTranslate2 = swiper.maxTranslate(), newTranslate;
  if (translateBounds && translate > minTranslate2 ? newTranslate = minTranslate2 : translateBounds && translate < maxTranslate2 ? newTranslate = maxTranslate2 : newTranslate = translate, swiper.updateProgress(newTranslate), params.cssMode) {
    let isH = swiper.isHorizontal();
    if (speed === 0)
      wrapperEl[isH ? "scrollLeft" : "scrollTop"] = -newTranslate;
    else {
      if (!swiper.support.smoothScroll)
        return animateCSSModeScroll({
          swiper,
          targetPosition: -newTranslate,
          side: isH ? "left" : "top"
        }), !0;
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: -newTranslate,
        behavior: "smooth"
      });
    }
    return !0;
  }
  return speed === 0 ? (swiper.setTransition(0), swiper.setTranslate(newTranslate), runCallbacks && (swiper.emit("beforeTransitionStart", speed, internal), swiper.emit("transitionEnd"))) : (swiper.setTransition(speed), swiper.setTranslate(newTranslate), runCallbacks && (swiper.emit("beforeTransitionStart", speed, internal), swiper.emit("transitionStart")), swiper.animating || (swiper.animating = !0, swiper.onTranslateToWrapperTransitionEnd || (swiper.onTranslateToWrapperTransitionEnd = function(e3) {
    !swiper || swiper.destroyed || e3.target === this && (swiper.wrapperEl.removeEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd), swiper.onTranslateToWrapperTransitionEnd = null, delete swiper.onTranslateToWrapperTransitionEnd, runCallbacks && swiper.emit("transitionEnd"));
  }), swiper.wrapperEl.addEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd))), !0;
}

// node_modules/swiper/core/translate/index.js
var translate_default = {
  getTranslate: getSwiperTranslate,
  setTranslate,
  minTranslate,
  maxTranslate,
  translateTo
};

// node_modules/swiper/core/transition/setTransition.js
function setTransition(duration, byController) {
  let swiper = this;
  swiper.params.cssMode || (swiper.wrapperEl.style.transitionDuration = `${duration}ms`), swiper.emit("setTransition", duration, byController);
}

// node_modules/swiper/core/transition/transitionEmit.js
function transitionEmit({
  swiper,
  runCallbacks,
  direction,
  step
}) {
  let {
    activeIndex,
    previousIndex
  } = swiper, dir = direction;
  if (dir || (activeIndex > previousIndex ? dir = "next" : activeIndex < previousIndex ? dir = "prev" : dir = "reset"), swiper.emit(`transition${step}`), runCallbacks && activeIndex !== previousIndex) {
    if (dir === "reset") {
      swiper.emit(`slideResetTransition${step}`);
      return;
    }
    swiper.emit(`slideChangeTransition${step}`), dir === "next" ? swiper.emit(`slideNextTransition${step}`) : swiper.emit(`slidePrevTransition${step}`);
  }
}

// node_modules/swiper/core/transition/transitionStart.js
function transitionStart(runCallbacks = !0, direction) {
  let swiper = this, {
    params
  } = swiper;
  params.cssMode || (params.autoHeight && swiper.updateAutoHeight(), transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "Start"
  }));
}

// node_modules/swiper/core/transition/transitionEnd.js
function transitionEnd(runCallbacks = !0, direction) {
  let swiper = this, {
    params
  } = swiper;
  swiper.animating = !1, !params.cssMode && (swiper.setTransition(0), transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "End"
  }));
}

// node_modules/swiper/core/transition/index.js
var transition_default = {
  setTransition,
  transitionStart,
  transitionEnd
};

// node_modules/swiper/core/slide/slideTo.js
function slideTo(index = 0, speed = this.params.speed, runCallbacks = !0, internal, initial) {
  typeof index == "string" && (index = parseInt(index, 10));
  let swiper = this, slideIndex = index;
  slideIndex < 0 && (slideIndex = 0);
  let {
    params,
    snapGrid,
    slidesGrid,
    previousIndex,
    activeIndex,
    rtlTranslate: rtl,
    wrapperEl,
    enabled
  } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial)
    return !1;
  let skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex), snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  snapIndex >= snapGrid.length && (snapIndex = snapGrid.length - 1);
  let translate = -snapGrid[snapIndex];
  if (params.normalizeSlideIndex)
    for (let i7 = 0; i7 < slidesGrid.length; i7 += 1) {
      let normalizedTranslate = -Math.floor(translate * 100), normalizedGrid = Math.floor(slidesGrid[i7] * 100), normalizedGridNext = Math.floor(slidesGrid[i7 + 1] * 100);
      typeof slidesGrid[i7 + 1] < "u" ? normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2 ? slideIndex = i7 : normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext && (slideIndex = i7 + 1) : normalizedTranslate >= normalizedGrid && (slideIndex = i7);
    }
  if (swiper.initialized && slideIndex !== activeIndex && (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate() || !swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate() && (activeIndex || 0) !== slideIndex))
    return !1;
  slideIndex !== (previousIndex || 0) && runCallbacks && swiper.emit("beforeSlideChangeStart"), swiper.updateProgress(translate);
  let direction;
  if (slideIndex > activeIndex ? direction = "next" : slideIndex < activeIndex ? direction = "prev" : direction = "reset", rtl && -translate === swiper.translate || !rtl && translate === swiper.translate)
    return swiper.updateActiveIndex(slideIndex), params.autoHeight && swiper.updateAutoHeight(), swiper.updateSlidesClasses(), params.effect !== "slide" && swiper.setTranslate(translate), direction !== "reset" && (swiper.transitionStart(runCallbacks, direction), swiper.transitionEnd(runCallbacks, direction)), !1;
  if (params.cssMode) {
    let isH = swiper.isHorizontal(), t9 = rtl ? translate : -translate;
    if (speed === 0) {
      let isVirtual = swiper.virtual && swiper.params.virtual.enabled;
      isVirtual && (swiper.wrapperEl.style.scrollSnapType = "none", swiper._immediateVirtual = !0), isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0 ? (swiper._cssModeVirtualInitialSet = !0, requestAnimationFrame(() => {
        wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t9;
      })) : wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t9, isVirtual && requestAnimationFrame(() => {
        swiper.wrapperEl.style.scrollSnapType = "", swiper._immediateVirtual = !1;
      });
    } else {
      if (!swiper.support.smoothScroll)
        return animateCSSModeScroll({
          swiper,
          targetPosition: t9,
          side: isH ? "left" : "top"
        }), !0;
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: t9,
        behavior: "smooth"
      });
    }
    return !0;
  }
  return swiper.setTransition(speed), swiper.setTranslate(translate), swiper.updateActiveIndex(slideIndex), swiper.updateSlidesClasses(), swiper.emit("beforeTransitionStart", speed, internal), swiper.transitionStart(runCallbacks, direction), speed === 0 ? swiper.transitionEnd(runCallbacks, direction) : swiper.animating || (swiper.animating = !0, swiper.onSlideToWrapperTransitionEnd || (swiper.onSlideToWrapperTransitionEnd = function(e3) {
    !swiper || swiper.destroyed || e3.target === this && (swiper.wrapperEl.removeEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd), swiper.onSlideToWrapperTransitionEnd = null, delete swiper.onSlideToWrapperTransitionEnd, swiper.transitionEnd(runCallbacks, direction));
  }), swiper.wrapperEl.addEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd)), !0;
}

// node_modules/swiper/core/slide/slideToLoop.js
function slideToLoop(index = 0, speed = this.params.speed, runCallbacks = !0, internal) {
  typeof index == "string" && (index = parseInt(index, 10));
  let swiper = this, newIndex = index;
  return swiper.params.loop && (swiper.virtual && swiper.params.virtual.enabled ? newIndex = newIndex + swiper.virtual.slidesBefore : newIndex = swiper.getSlideIndex(swiper.slides.filter((slideEl) => slideEl.getAttribute("data-swiper-slide-index") * 1 === newIndex)[0])), swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideNext.js
function slideNext(speed = this.params.speed, runCallbacks = !0, internal) {
  let swiper = this, {
    enabled,
    params,
    animating
  } = swiper;
  if (!enabled)
    return swiper;
  let perGroup = params.slidesPerGroup;
  params.slidesPerView === "auto" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto && (perGroup = Math.max(swiper.slidesPerViewDynamic("current", !0), 1));
  let increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup, isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding)
      return !1;
    swiper.loopFix({
      direction: "next"
    }), swiper._clientLeft = swiper.wrapperEl.clientLeft;
  }
  return params.rewind && swiper.isEnd ? swiper.slideTo(0, speed, runCallbacks, internal) : swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slidePrev.js
function slidePrev(speed = this.params.speed, runCallbacks = !0, internal) {
  let swiper = this, {
    params,
    snapGrid,
    slidesGrid,
    rtlTranslate,
    enabled,
    animating
  } = swiper;
  if (!enabled)
    return swiper;
  let isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding)
      return !1;
    swiper.loopFix({
      direction: "prev"
    }), swiper._clientLeft = swiper.wrapperEl.clientLeft;
  }
  let translate = rtlTranslate ? swiper.translate : -swiper.translate;
  function normalize(val) {
    return val < 0 ? -Math.floor(Math.abs(val)) : Math.floor(val);
  }
  let normalizedTranslate = normalize(translate), normalizedSnapGrid = snapGrid.map((val) => normalize(val)), prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
  if (typeof prevSnap > "u" && params.cssMode) {
    let prevSnapIndex;
    snapGrid.forEach((snap, snapIndex) => {
      normalizedTranslate >= snap && (prevSnapIndex = snapIndex);
    }), typeof prevSnapIndex < "u" && (prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex]);
  }
  let prevIndex = 0;
  if (typeof prevSnap < "u" && (prevIndex = slidesGrid.indexOf(prevSnap), prevIndex < 0 && (prevIndex = swiper.activeIndex - 1), params.slidesPerView === "auto" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto && (prevIndex = prevIndex - swiper.slidesPerViewDynamic("previous", !0) + 1, prevIndex = Math.max(prevIndex, 0))), params.rewind && swiper.isBeginning) {
    let lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
  }
  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideReset.js
function slideReset(speed = this.params.speed, runCallbacks = !0, internal) {
  let swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideToClosest.js
function slideToClosest(speed = this.params.speed, runCallbacks = !0, internal, threshold = 0.5) {
  let swiper = this, index = swiper.activeIndex, skip = Math.min(swiper.params.slidesPerGroupSkip, index), snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup), translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  if (translate >= swiper.snapGrid[snapIndex]) {
    let currentSnap = swiper.snapGrid[snapIndex], nextSnap = swiper.snapGrid[snapIndex + 1];
    translate - currentSnap > (nextSnap - currentSnap) * threshold && (index += swiper.params.slidesPerGroup);
  } else {
    let prevSnap = swiper.snapGrid[snapIndex - 1], currentSnap = swiper.snapGrid[snapIndex];
    translate - prevSnap <= (currentSnap - prevSnap) * threshold && (index -= swiper.params.slidesPerGroup);
  }
  return index = Math.max(index, 0), index = Math.min(index, swiper.slidesGrid.length - 1), swiper.slideTo(index, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideToClickedSlide.js
function slideToClickedSlide() {
  let swiper = this, {
    params,
    slidesEl
  } = swiper, slidesPerView = params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : params.slidesPerView, slideToIndex = swiper.clickedIndex, realIndex, slideSelector = swiper.isElement ? "swiper-slide" : `.${params.slideClass}`;
  if (params.loop) {
    if (swiper.animating)
      return;
    realIndex = parseInt(swiper.clickedSlide.getAttribute("data-swiper-slide-index"), 10), params.centeredSlides ? slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2 ? (swiper.loopFix(), slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]), nextTick(() => {
      swiper.slideTo(slideToIndex);
    })) : swiper.slideTo(slideToIndex) : slideToIndex > swiper.slides.length - slidesPerView ? (swiper.loopFix(), slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]), nextTick(() => {
      swiper.slideTo(slideToIndex);
    })) : swiper.slideTo(slideToIndex);
  } else
    swiper.slideTo(slideToIndex);
}

// node_modules/swiper/core/slide/index.js
var slide_default = {
  slideTo,
  slideToLoop,
  slideNext,
  slidePrev,
  slideReset,
  slideToClosest,
  slideToClickedSlide
};

// node_modules/swiper/core/loop/loopCreate.js
function loopCreate(slideRealIndex) {
  let swiper = this, {
    params,
    slidesEl
  } = swiper;
  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled)
    return;
  elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`).forEach((el, index) => {
    el.setAttribute("data-swiper-slide-index", index);
  }), swiper.loopFix({
    slideRealIndex,
    direction: params.centeredSlides ? void 0 : "next"
  });
}

// node_modules/swiper/core/loop/loopFix.js
function loopFix({
  slideRealIndex,
  slideTo: slideTo2 = !0,
  direction,
  setTranslate: setTranslate2,
  activeSlideIndex,
  byController,
  byMousewheel
} = {}) {
  let swiper = this;
  if (!swiper.params.loop)
    return;
  swiper.emit("beforeLoopFix");
  let {
    slides,
    allowSlidePrev,
    allowSlideNext,
    slidesEl,
    params
  } = swiper;
  if (swiper.allowSlidePrev = !0, swiper.allowSlideNext = !0, swiper.virtual && params.virtual.enabled) {
    slideTo2 && (!params.centeredSlides && swiper.snapIndex === 0 ? swiper.slideTo(swiper.virtual.slides.length, 0, !1, !0) : params.centeredSlides && swiper.snapIndex < params.slidesPerView ? swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, !1, !0) : swiper.snapIndex === swiper.snapGrid.length - 1 && swiper.slideTo(swiper.virtual.slidesBefore, 0, !1, !0)), swiper.allowSlidePrev = allowSlidePrev, swiper.allowSlideNext = allowSlideNext, swiper.emit("loopFix");
    return;
  }
  let slidesPerView = params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)), loopedSlides = params.loopedSlides || slidesPerView;
  loopedSlides % params.slidesPerGroup !== 0 && (loopedSlides += params.slidesPerGroup - loopedSlides % params.slidesPerGroup), swiper.loopedSlides = loopedSlides;
  let prependSlidesIndexes = [], appendSlidesIndexes = [], activeIndex = swiper.activeIndex;
  typeof activeSlideIndex > "u" ? activeSlideIndex = swiper.getSlideIndex(swiper.slides.filter((el) => el.classList.contains("swiper-slide-active"))[0]) : activeIndex = activeSlideIndex;
  let isNext = direction === "next" || !direction, isPrev = direction === "prev" || !direction, slidesPrepended = 0, slidesAppended = 0;
  if (activeSlideIndex < loopedSlides) {
    slidesPrepended = Math.max(loopedSlides - activeSlideIndex, params.slidesPerGroup);
    for (let i7 = 0; i7 < loopedSlides - activeSlideIndex; i7 += 1) {
      let index = i7 - Math.floor(i7 / slides.length) * slides.length;
      prependSlidesIndexes.push(slides.length - index - 1);
    }
  } else if (activeSlideIndex > swiper.slides.length - loopedSlides * 2) {
    slidesAppended = Math.max(activeSlideIndex - (swiper.slides.length - loopedSlides * 2), params.slidesPerGroup);
    for (let i7 = 0; i7 < slidesAppended; i7 += 1) {
      let index = i7 - Math.floor(i7 / slides.length) * slides.length;
      appendSlidesIndexes.push(index);
    }
  }
  if (isPrev && prependSlidesIndexes.forEach((index) => {
    slidesEl.prepend(swiper.slides[index]);
  }), isNext && appendSlidesIndexes.forEach((index) => {
    slidesEl.append(swiper.slides[index]);
  }), swiper.recalcSlides(), params.watchSlidesProgress && swiper.updateSlidesOffset(), slideTo2) {
    if (prependSlidesIndexes.length > 0 && isPrev)
      if (typeof slideRealIndex > "u") {
        let currentSlideTranslate = swiper.slidesGrid[activeIndex], diff2 = swiper.slidesGrid[activeIndex + slidesPrepended] - currentSlideTranslate;
        byMousewheel ? swiper.setTranslate(swiper.translate - diff2) : (swiper.slideTo(activeIndex + slidesPrepended, 0, !1, !0), setTranslate2 && (swiper.touches[swiper.isHorizontal() ? "startX" : "startY"] += diff2));
      } else
        setTranslate2 && swiper.slideToLoop(slideRealIndex, 0, !1, !0);
    else if (appendSlidesIndexes.length > 0 && isNext)
      if (typeof slideRealIndex > "u") {
        let currentSlideTranslate = swiper.slidesGrid[activeIndex], diff2 = swiper.slidesGrid[activeIndex - slidesAppended] - currentSlideTranslate;
        byMousewheel ? swiper.setTranslate(swiper.translate - diff2) : (swiper.slideTo(activeIndex - slidesAppended, 0, !1, !0), setTranslate2 && (swiper.touches[swiper.isHorizontal() ? "startX" : "startY"] += diff2));
      } else
        swiper.slideToLoop(slideRealIndex, 0, !1, !0);
  }
  if (swiper.allowSlidePrev = allowSlidePrev, swiper.allowSlideNext = allowSlideNext, swiper.controller && swiper.controller.control && !byController) {
    let loopParams = {
      slideRealIndex,
      slideTo: !1,
      direction,
      setTranslate: setTranslate2,
      activeSlideIndex,
      byController: !0
    };
    Array.isArray(swiper.controller.control) ? swiper.controller.control.forEach((c5) => {
      c5.params.loop && c5.loopFix(loopParams);
    }) : swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop && swiper.controller.control.loopFix(loopParams);
  }
  swiper.emit("loopFix");
}

// node_modules/swiper/core/loop/loopDestroy.js
function loopDestroy() {
  let swiper = this, {
    slides,
    params,
    slidesEl
  } = swiper;
  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled)
    return;
  swiper.recalcSlides();
  let newSlidesOrder = [];
  slides.forEach((slideEl) => {
    let index = typeof slideEl.swiperSlideIndex > "u" ? slideEl.getAttribute("data-swiper-slide-index") * 1 : slideEl.swiperSlideIndex;
    newSlidesOrder[index] = slideEl;
  }), slides.forEach((slideEl) => {
    slideEl.removeAttribute("data-swiper-slide-index");
  }), newSlidesOrder.forEach((slideEl) => {
    slidesEl.append(slideEl);
  }), swiper.recalcSlides(), swiper.slideTo(swiper.realIndex, 0);
}

// node_modules/swiper/core/loop/index.js
var loop_default = {
  loopCreate,
  loopFix,
  loopDestroy
};

// node_modules/swiper/core/grab-cursor/setGrabCursor.js
function setGrabCursor(moving) {
  let swiper = this;
  if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode)
    return;
  let el = swiper.params.touchEventsTarget === "container" ? swiper.el : swiper.wrapperEl;
  swiper.isElement && (swiper.__preventObserver__ = !0), el.style.cursor = "move", el.style.cursor = moving ? "grabbing" : "grab", swiper.isElement && requestAnimationFrame(() => {
    swiper.__preventObserver__ = !1;
  });
}

// node_modules/swiper/core/grab-cursor/unsetGrabCursor.js
function unsetGrabCursor() {
  let swiper = this;
  swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode || (swiper.isElement && (swiper.__preventObserver__ = !0), swiper[swiper.params.touchEventsTarget === "container" ? "el" : "wrapperEl"].style.cursor = "", swiper.isElement && requestAnimationFrame(() => {
    swiper.__preventObserver__ = !1;
  }));
}

// node_modules/swiper/core/grab-cursor/index.js
var grab_cursor_default = {
  setGrabCursor,
  unsetGrabCursor
};

// node_modules/swiper/core/events/onTouchStart.js
function closestElement(selector, base = this) {
  function __closestFrom(el) {
    if (!el || el === getDocument() || el === getWindow())
      return null;
    el.assignedSlot && (el = el.assignedSlot);
    let found = el.closest(selector);
    return !found && !el.getRootNode ? null : found || __closestFrom(el.getRootNode().host);
  }
  return __closestFrom(base);
}
function onTouchStart(event2) {
  let swiper = this, document2 = getDocument(), window2 = getWindow(), data = swiper.touchEventsData;
  data.evCache.push(event2);
  let {
    params,
    touches,
    enabled
  } = swiper;
  if (!enabled || !params.simulateTouch && event2.pointerType === "mouse" || swiper.animating && params.preventInteractionOnTransition)
    return;
  !swiper.animating && params.cssMode && params.loop && swiper.loopFix();
  let e3 = event2;
  e3.originalEvent && (e3 = e3.originalEvent);
  let targetEl = e3.target;
  if (params.touchEventsTarget === "wrapper" && !swiper.wrapperEl.contains(targetEl) || "which" in e3 && e3.which === 3 || "button" in e3 && e3.button > 0 || data.isTouched && data.isMoved)
    return;
  let swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== "", eventPath = event2.composedPath ? event2.composedPath() : event2.path;
  swipingClassHasValue && e3.target && e3.target.shadowRoot && eventPath && (targetEl = eventPath[0]);
  let noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`, isTargetShadow = !!(e3.target && e3.target.shadowRoot);
  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {
    swiper.allowClick = !0;
    return;
  }
  if (params.swipeHandler && !targetEl.closest(params.swipeHandler))
    return;
  touches.currentX = e3.pageX, touches.currentY = e3.pageY;
  let startX = touches.currentX, startY = touches.currentY, edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection, edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window2.innerWidth - edgeSwipeThreshold))
    if (edgeSwipeDetection === "prevent")
      event2.preventDefault();
    else
      return;
  Object.assign(data, {
    isTouched: !0,
    isMoved: !1,
    allowTouchCallbacks: !0,
    isScrolling: void 0,
    startMoving: void 0
  }), touches.startX = startX, touches.startY = startY, data.touchStartTime = now(), swiper.allowClick = !0, swiper.updateSize(), swiper.swipeDirection = void 0, params.threshold > 0 && (data.allowThresholdMove = !1);
  let preventDefault = !0;
  targetEl.matches(data.focusableElements) && (preventDefault = !1, targetEl.nodeName === "SELECT" && (data.isTouched = !1)), document2.activeElement && document2.activeElement.matches(data.focusableElements) && document2.activeElement !== targetEl && document2.activeElement.blur();
  let shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
  (params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable && e3.preventDefault(), swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode && swiper.freeMode.onTouchStart(), swiper.emit("touchStart", e3);
}

// node_modules/swiper/core/events/onTouchMove.js
function onTouchMove(event2) {
  let document2 = getDocument(), swiper = this, data = swiper.touchEventsData, {
    params,
    touches,
    rtlTranslate: rtl,
    enabled
  } = swiper;
  if (!enabled || !params.simulateTouch && event2.pointerType === "mouse")
    return;
  let e3 = event2;
  if (e3.originalEvent && (e3 = e3.originalEvent), !data.isTouched) {
    data.startMoving && data.isScrolling && swiper.emit("touchMoveOpposite", e3);
    return;
  }
  let pointerIndex = data.evCache.findIndex((cachedEv) => cachedEv.pointerId === e3.pointerId);
  pointerIndex >= 0 && (data.evCache[pointerIndex] = e3);
  let targetTouch = data.evCache.length > 1 ? data.evCache[0] : e3, pageX = targetTouch.pageX, pageY = targetTouch.pageY;
  if (e3.preventedByNestedSwiper) {
    touches.startX = pageX, touches.startY = pageY;
    return;
  }
  if (!swiper.allowTouchMove) {
    e3.target.matches(data.focusableElements) || (swiper.allowClick = !1), data.isTouched && (Object.assign(touches, {
      startX: pageX,
      startY: pageY,
      prevX: swiper.touches.currentX,
      prevY: swiper.touches.currentY,
      currentX: pageX,
      currentY: pageY
    }), data.touchStartTime = now());
    return;
  }
  if (params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = !1, data.isMoved = !1;
        return;
      }
    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate())
      return;
  }
  if (document2.activeElement && e3.target === document2.activeElement && e3.target.matches(data.focusableElements)) {
    data.isMoved = !0, swiper.allowClick = !1;
    return;
  }
  if (data.allowTouchCallbacks && swiper.emit("touchMove", e3), e3.targetTouches && e3.targetTouches.length > 1)
    return;
  touches.currentX = pageX, touches.currentY = pageY;
  let diffX = touches.currentX - touches.startX, diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold)
    return;
  if (typeof data.isScrolling > "u") {
    let touchAngle;
    swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX ? data.isScrolling = !1 : diffX * diffX + diffY * diffY >= 25 && (touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI, data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle);
  }
  if (data.isScrolling && swiper.emit("touchMoveOpposite", e3), typeof data.startMoving > "u" && (touches.currentX !== touches.startX || touches.currentY !== touches.startY) && (data.startMoving = !0), data.isScrolling || swiper.zoom && swiper.params.zoom && swiper.params.zoom.enabled && data.evCache.length > 1) {
    data.isTouched = !1;
    return;
  }
  if (!data.startMoving)
    return;
  swiper.allowClick = !1, !params.cssMode && e3.cancelable && e3.preventDefault(), params.touchMoveStopPropagation && !params.nested && e3.stopPropagation();
  let diff2 = swiper.isHorizontal() ? diffX : diffY, touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;
  params.oneWayMovement && (diff2 = Math.abs(diff2) * (rtl ? 1 : -1), touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1)), touches.diff = diff2, diff2 *= params.touchRatio, rtl && (diff2 = -diff2, touchesDiff = -touchesDiff);
  let prevTouchesDirection = swiper.touchesDirection;
  swiper.swipeDirection = diff2 > 0 ? "prev" : "next", swiper.touchesDirection = touchesDiff > 0 ? "prev" : "next";
  let isLoop = swiper.params.loop && !params.cssMode;
  if (!data.isMoved) {
    if (isLoop && swiper.loopFix({
      direction: swiper.swipeDirection
    }), data.startTranslate = swiper.getTranslate(), swiper.setTransition(0), swiper.animating) {
      let evt = new window.CustomEvent("transitionend", {
        bubbles: !0,
        cancelable: !0
      });
      swiper.wrapperEl.dispatchEvent(evt);
    }
    data.allowMomentumBounce = !1, params.grabCursor && (swiper.allowSlideNext === !0 || swiper.allowSlidePrev === !0) && swiper.setGrabCursor(!0), swiper.emit("sliderFirstMove", e3);
  }
  let loopFixed;
  data.isMoved && prevTouchesDirection !== swiper.touchesDirection && isLoop && Math.abs(diff2) >= 1 && (swiper.loopFix({
    direction: swiper.swipeDirection,
    setTranslate: !0
  }), loopFixed = !0), swiper.emit("sliderMove", e3), data.isMoved = !0, data.currentTranslate = diff2 + data.startTranslate;
  let disableParentSwiper = !0, resistanceRatio = params.resistanceRatio;
  if (params.touchReleaseOnEdges && (resistanceRatio = 0), diff2 > 0 ? (isLoop && !loopFixed && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.size / 2 : swiper.minTranslate()) && swiper.loopFix({
    direction: "prev",
    setTranslate: !0,
    activeSlideIndex: 0
  }), data.currentTranslate > swiper.minTranslate() && (disableParentSwiper = !1, params.resistance && (data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff2) ** resistanceRatio))) : diff2 < 0 && (isLoop && !loopFixed && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.size / 2 : swiper.maxTranslate()) && swiper.loopFix({
    direction: "next",
    setTranslate: !0,
    activeSlideIndex: swiper.slides.length - (params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))
  }), data.currentTranslate < swiper.maxTranslate() && (disableParentSwiper = !1, params.resistance && (data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff2) ** resistanceRatio))), disableParentSwiper && (e3.preventedByNestedSwiper = !0), !swiper.allowSlideNext && swiper.swipeDirection === "next" && data.currentTranslate < data.startTranslate && (data.currentTranslate = data.startTranslate), !swiper.allowSlidePrev && swiper.swipeDirection === "prev" && data.currentTranslate > data.startTranslate && (data.currentTranslate = data.startTranslate), !swiper.allowSlidePrev && !swiper.allowSlideNext && (data.currentTranslate = data.startTranslate), params.threshold > 0)
    if (Math.abs(diff2) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = !0, touches.startX = touches.currentX, touches.startY = touches.currentY, data.currentTranslate = data.startTranslate, touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  !params.followFinger || params.cssMode || ((params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) && (swiper.updateActiveIndex(), swiper.updateSlidesClasses()), swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.freeMode.onTouchMove(), swiper.updateProgress(data.currentTranslate), swiper.setTranslate(data.currentTranslate));
}

// node_modules/swiper/core/events/onTouchEnd.js
function onTouchEnd(event2) {
  let swiper = this, data = swiper.touchEventsData, pointerIndex = data.evCache.findIndex((cachedEv) => cachedEv.pointerId === event2.pointerId);
  if (pointerIndex >= 0 && data.evCache.splice(pointerIndex, 1), ["pointercancel", "pointerout", "pointerleave"].includes(event2.type) && !(event2.type === "pointercancel" && (swiper.browser.isSafari || swiper.browser.isWebView)))
    return;
  let {
    params,
    touches,
    rtlTranslate: rtl,
    slidesGrid,
    enabled
  } = swiper;
  if (!enabled || !params.simulateTouch && event2.pointerType === "mouse")
    return;
  let e3 = event2;
  if (e3.originalEvent && (e3 = e3.originalEvent), data.allowTouchCallbacks && swiper.emit("touchEnd", e3), data.allowTouchCallbacks = !1, !data.isTouched) {
    data.isMoved && params.grabCursor && swiper.setGrabCursor(!1), data.isMoved = !1, data.startMoving = !1;
    return;
  }
  params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === !0 || swiper.allowSlidePrev === !0) && swiper.setGrabCursor(!1);
  let touchEndTime = now(), timeDiff = touchEndTime - data.touchStartTime;
  if (swiper.allowClick) {
    let pathTree = e3.path || e3.composedPath && e3.composedPath();
    swiper.updateClickedSlide(pathTree && pathTree[0] || e3.target), swiper.emit("tap click", e3), timeDiff < 300 && touchEndTime - data.lastClickTime < 300 && swiper.emit("doubleTap doubleClick", e3);
  }
  if (data.lastClickTime = now(), nextTick(() => {
    swiper.destroyed || (swiper.allowClick = !0);
  }), !data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = !1, data.isMoved = !1, data.startMoving = !1;
    return;
  }
  data.isTouched = !1, data.isMoved = !1, data.startMoving = !1;
  let currentPos;
  if (params.followFinger ? currentPos = rtl ? swiper.translate : -swiper.translate : currentPos = -data.currentTranslate, params.cssMode)
    return;
  if (swiper.params.freeMode && params.freeMode.enabled) {
    swiper.freeMode.onTouchEnd({
      currentPos
    });
    return;
  }
  let stopIndex = 0, groupSize = swiper.slidesSizesGrid[0];
  for (let i7 = 0; i7 < slidesGrid.length; i7 += i7 < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
    let increment2 = i7 < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
    typeof slidesGrid[i7 + increment2] < "u" ? currentPos >= slidesGrid[i7] && currentPos < slidesGrid[i7 + increment2] && (stopIndex = i7, groupSize = slidesGrid[i7 + increment2] - slidesGrid[i7]) : currentPos >= slidesGrid[i7] && (stopIndex = i7, groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2]);
  }
  let rewindFirstIndex = null, rewindLastIndex = null;
  params.rewind && (swiper.isBeginning ? rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1 : swiper.isEnd && (rewindFirstIndex = 0));
  let ratio = (currentPos - slidesGrid[stopIndex]) / groupSize, increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
  if (timeDiff > params.longSwipesMs) {
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    swiper.swipeDirection === "next" && (ratio >= params.longSwipesRatio ? swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment) : swiper.slideTo(stopIndex)), swiper.swipeDirection === "prev" && (ratio > 1 - params.longSwipesRatio ? swiper.slideTo(stopIndex + increment) : rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio ? swiper.slideTo(rewindLastIndex) : swiper.slideTo(stopIndex));
  } else {
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    swiper.navigation && (e3.target === swiper.navigation.nextEl || e3.target === swiper.navigation.prevEl) ? e3.target === swiper.navigation.nextEl ? swiper.slideTo(stopIndex + increment) : swiper.slideTo(stopIndex) : (swiper.swipeDirection === "next" && swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment), swiper.swipeDirection === "prev" && swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex));
  }
}

// node_modules/swiper/core/events/onResize.js
var timeout;
function onResize() {
  let swiper = this, {
    params,
    el
  } = swiper;
  if (el && el.offsetWidth === 0)
    return;
  params.breakpoints && swiper.setBreakpoint();
  let {
    allowSlideNext,
    allowSlidePrev,
    snapGrid
  } = swiper, isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  swiper.allowSlideNext = !0, swiper.allowSlidePrev = !0, swiper.updateSize(), swiper.updateSlides(), swiper.updateSlidesClasses();
  let isVirtualLoop = isVirtual && params.loop;
  (params.slidesPerView === "auto" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop ? swiper.slideTo(swiper.slides.length - 1, 0, !1, !0) : swiper.params.loop && !isVirtual ? swiper.slideToLoop(swiper.realIndex, 0, !1, !0) : swiper.slideTo(swiper.activeIndex, 0, !1, !0), swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused && (clearTimeout(timeout), timeout = setTimeout(() => {
    swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused && swiper.autoplay.resume();
  }, 500)), swiper.allowSlidePrev = allowSlidePrev, swiper.allowSlideNext = allowSlideNext, swiper.params.watchOverflow && snapGrid !== swiper.snapGrid && swiper.checkOverflow();
}

// node_modules/swiper/core/events/onClick.js
function onClick(e3) {
  let swiper = this;
  !swiper.enabled || swiper.allowClick || (swiper.params.preventClicks && e3.preventDefault(), swiper.params.preventClicksPropagation && swiper.animating && (e3.stopPropagation(), e3.stopImmediatePropagation()));
}

// node_modules/swiper/core/events/onScroll.js
function onScroll() {
  let swiper = this, {
    wrapperEl,
    rtlTranslate,
    enabled
  } = swiper;
  if (!enabled)
    return;
  swiper.previousTranslate = swiper.translate, swiper.isHorizontal() ? swiper.translate = -wrapperEl.scrollLeft : swiper.translate = -wrapperEl.scrollTop, swiper.translate === 0 && (swiper.translate = 0), swiper.updateActiveIndex(), swiper.updateSlidesClasses();
  let newProgress, translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  translatesDiff === 0 ? newProgress = 0 : newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff, newProgress !== swiper.progress && swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate), swiper.emit("setTranslate", swiper.translate, !1);
}

// node_modules/swiper/shared/process-lazy-preloader.js
var processLazyPreloader = (swiper, imageEl) => {
  if (!swiper || swiper.destroyed || !swiper.params)
    return;
  let slideSelector = () => swiper.isElement ? "swiper-slide" : `.${swiper.params.slideClass}`, slideEl = imageEl.closest(slideSelector());
  if (slideEl) {
    let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);
    lazyEl && lazyEl.remove();
  }
};

// node_modules/swiper/core/events/onLoad.js
function onLoad(e3) {
  let swiper = this;
  processLazyPreloader(swiper, e3.target), swiper.update();
}

// node_modules/swiper/core/events/index.js
var dummyEventAttached = !1;
function dummyEventListener() {
}
var events = (swiper, method) => {
  let document2 = getDocument(), {
    params,
    el,
    wrapperEl,
    device
  } = swiper, capture = !!params.nested, domMethod = method === "on" ? "addEventListener" : "removeEventListener", swiperMethod = method;
  el[domMethod]("pointerdown", swiper.onTouchStart, {
    passive: !1
  }), document2[domMethod]("pointermove", swiper.onTouchMove, {
    passive: !1,
    capture
  }), document2[domMethod]("pointerup", swiper.onTouchEnd, {
    passive: !0
  }), document2[domMethod]("pointercancel", swiper.onTouchEnd, {
    passive: !0
  }), document2[domMethod]("pointerout", swiper.onTouchEnd, {
    passive: !0
  }), document2[domMethod]("pointerleave", swiper.onTouchEnd, {
    passive: !0
  }), (params.preventClicks || params.preventClicksPropagation) && el[domMethod]("click", swiper.onClick, !0), params.cssMode && wrapperEl[domMethod]("scroll", swiper.onScroll), params.updateOnWindowResize ? swiper[swiperMethod](device.ios || device.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", onResize, !0) : swiper[swiperMethod]("observerUpdate", onResize, !0), el[domMethod]("load", swiper.onLoad, {
    capture: !0
  });
};
function attachEvents() {
  let swiper = this, document2 = getDocument(), {
    params
  } = swiper;
  swiper.onTouchStart = onTouchStart.bind(swiper), swiper.onTouchMove = onTouchMove.bind(swiper), swiper.onTouchEnd = onTouchEnd.bind(swiper), params.cssMode && (swiper.onScroll = onScroll.bind(swiper)), swiper.onClick = onClick.bind(swiper), swiper.onLoad = onLoad.bind(swiper), dummyEventAttached || (document2.addEventListener("touchstart", dummyEventListener), dummyEventAttached = !0), events(swiper, "on");
}
function detachEvents() {
  events(this, "off");
}
var events_default = {
  attachEvents,
  detachEvents
};

// node_modules/swiper/core/breakpoints/setBreakpoint.js
var isGridEnabled = (swiper, params) => swiper.grid && params.grid && params.grid.rows > 1;
function setBreakpoint() {
  let swiper = this, {
    realIndex,
    initialized,
    params,
    el
  } = swiper, breakpoints = params.breakpoints;
  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0)
    return;
  let breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
  if (!breakpoint || swiper.currentBreakpoint === breakpoint)
    return;
  let breakpointParams = (breakpoint in breakpoints ? breakpoints[breakpoint] : void 0) || swiper.originalParams, wasMultiRow = isGridEnabled(swiper, params), isMultiRow = isGridEnabled(swiper, breakpointParams), wasEnabled = params.enabled;
  wasMultiRow && !isMultiRow ? (el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`), swiper.emitContainerClasses()) : !wasMultiRow && isMultiRow && (el.classList.add(`${params.containerModifierClass}grid`), (breakpointParams.grid.fill && breakpointParams.grid.fill === "column" || !breakpointParams.grid.fill && params.grid.fill === "column") && el.classList.add(`${params.containerModifierClass}grid-column`), swiper.emitContainerClasses()), ["navigation", "pagination", "scrollbar"].forEach((prop) => {
    let wasModuleEnabled = params[prop] && params[prop].enabled, isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;
    wasModuleEnabled && !isModuleEnabled && swiper[prop].disable(), !wasModuleEnabled && isModuleEnabled && swiper[prop].enable();
  });
  let directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction, needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);
  directionChanged && initialized && swiper.changeDirection(), extend2(swiper.params, breakpointParams);
  let isEnabled = swiper.params.enabled;
  Object.assign(swiper, {
    allowTouchMove: swiper.params.allowTouchMove,
    allowSlideNext: swiper.params.allowSlideNext,
    allowSlidePrev: swiper.params.allowSlidePrev
  }), wasEnabled && !isEnabled ? swiper.disable() : !wasEnabled && isEnabled && swiper.enable(), swiper.currentBreakpoint = breakpoint, swiper.emit("_beforeBreakpoint", breakpointParams), needsReLoop && initialized && (swiper.loopDestroy(), swiper.loopCreate(realIndex), swiper.updateSlides()), swiper.emit("breakpoint", breakpointParams);
}

// node_modules/swiper/core/breakpoints/getBreakpoint.js
function getBreakpoint(breakpoints, base = "window", containerEl) {
  if (!breakpoints || base === "container" && !containerEl)
    return;
  let breakpoint = !1, window2 = getWindow(), currentHeight = base === "window" ? window2.innerHeight : containerEl.clientHeight, points2 = Object.keys(breakpoints).map((point) => {
    if (typeof point == "string" && point.indexOf("@") === 0) {
      let minRatio = parseFloat(point.substr(1));
      return {
        value: currentHeight * minRatio,
        point
      };
    }
    return {
      value: point,
      point
    };
  });
  points2.sort((a4, b4) => parseInt(a4.value, 10) - parseInt(b4.value, 10));
  for (let i7 = 0; i7 < points2.length; i7 += 1) {
    let {
      point,
      value
    } = points2[i7];
    base === "window" ? window2.matchMedia(`(min-width: ${value}px)`).matches && (breakpoint = point) : value <= containerEl.clientWidth && (breakpoint = point);
  }
  return breakpoint || "max";
}

// node_modules/swiper/core/breakpoints/index.js
var breakpoints_default = {
  setBreakpoint,
  getBreakpoint
};

// node_modules/swiper/core/classes/addClasses.js
function prepareClasses(entries, prefix2) {
  let resultClasses = [];
  return entries.forEach((item) => {
    typeof item == "object" ? Object.keys(item).forEach((classNames) => {
      item[classNames] && resultClasses.push(prefix2 + classNames);
    }) : typeof item == "string" && resultClasses.push(prefix2 + item);
  }), resultClasses;
}
function addClasses() {
  let swiper = this, {
    classNames,
    params,
    rtl,
    el,
    device
  } = swiper, suffixes = prepareClasses(["initialized", params.direction, {
    "free-mode": swiper.params.freeMode && params.freeMode.enabled
  }, {
    autoheight: params.autoHeight
  }, {
    rtl
  }, {
    grid: params.grid && params.grid.rows > 1
  }, {
    "grid-column": params.grid && params.grid.rows > 1 && params.grid.fill === "column"
  }, {
    android: device.android
  }, {
    ios: device.ios
  }, {
    "css-mode": params.cssMode
  }, {
    centered: params.cssMode && params.centeredSlides
  }, {
    "watch-progress": params.watchSlidesProgress
  }], params.containerModifierClass);
  classNames.push(...suffixes), el.classList.add(...classNames), swiper.emitContainerClasses();
}

// node_modules/swiper/core/classes/removeClasses.js
function removeClasses() {
  let swiper = this, {
    el,
    classNames
  } = swiper;
  el.classList.remove(...classNames), swiper.emitContainerClasses();
}

// node_modules/swiper/core/classes/index.js
var classes_default = {
  addClasses,
  removeClasses
};

// node_modules/swiper/core/check-overflow/index.js
function checkOverflow() {
  let swiper = this, {
    isLocked: wasLocked,
    params
  } = swiper, {
    slidesOffsetBefore
  } = params;
  if (slidesOffsetBefore) {
    let lastSlideIndex = swiper.slides.length - 1, lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;
    swiper.isLocked = swiper.size > lastSlideRightEdge;
  } else
    swiper.isLocked = swiper.snapGrid.length === 1;
  params.allowSlideNext === !0 && (swiper.allowSlideNext = !swiper.isLocked), params.allowSlidePrev === !0 && (swiper.allowSlidePrev = !swiper.isLocked), wasLocked && wasLocked !== swiper.isLocked && (swiper.isEnd = !1), wasLocked !== swiper.isLocked && swiper.emit(swiper.isLocked ? "lock" : "unlock");
}
var check_overflow_default = {
  checkOverflow
};

// node_modules/swiper/core/defaults.js
var defaults_default = {
  init: !0,
  direction: "horizontal",
  oneWayMovement: !1,
  touchEventsTarget: "wrapper",
  initialSlide: 0,
  speed: 300,
  cssMode: !1,
  updateOnWindowResize: !0,
  resizeObserver: !0,
  nested: !1,
  createElements: !1,
  enabled: !0,
  focusableElements: "input, select, option, textarea, button, video, label",
  width: null,
  height: null,
  preventInteractionOnTransition: !1,
  userAgent: null,
  url: null,
  edgeSwipeDetection: !1,
  edgeSwipeThreshold: 20,
  autoHeight: !1,
  setWrapperSize: !1,
  virtualTranslate: !1,
  effect: "slide",
  breakpoints: void 0,
  breakpointsBase: "window",
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  slidesPerGroupAuto: !1,
  centeredSlides: !1,
  centeredSlidesBounds: !1,
  slidesOffsetBefore: 0,
  slidesOffsetAfter: 0,
  normalizeSlideIndex: !0,
  centerInsufficientSlides: !1,
  watchOverflow: !0,
  roundLengths: !1,
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: !0,
  shortSwipes: !0,
  longSwipes: !0,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: !0,
  allowTouchMove: !0,
  threshold: 5,
  touchMoveStopPropagation: !1,
  touchStartPreventDefault: !0,
  touchStartForcePreventDefault: !1,
  touchReleaseOnEdges: !1,
  uniqueNavElements: !0,
  resistance: !0,
  resistanceRatio: 0.85,
  watchSlidesProgress: !1,
  grabCursor: !1,
  preventClicks: !0,
  preventClicksPropagation: !0,
  slideToClickedSlide: !1,
  loop: !1,
  loopedSlides: null,
  loopPreventsSliding: !0,
  rewind: !1,
  allowSlidePrev: !0,
  allowSlideNext: !0,
  swipeHandler: null,
  noSwiping: !0,
  noSwipingClass: "swiper-no-swiping",
  noSwipingSelector: null,
  passiveListeners: !0,
  maxBackfaceHiddenSlides: 10,
  containerModifierClass: "swiper-",
  slideClass: "swiper-slide",
  slideActiveClass: "swiper-slide-active",
  slideVisibleClass: "swiper-slide-visible",
  slideNextClass: "swiper-slide-next",
  slidePrevClass: "swiper-slide-prev",
  wrapperClass: "swiper-wrapper",
  lazyPreloaderClass: "swiper-lazy-preloader",
  runCallbacksOnInit: !0,
  _emitClasses: !1
};

// node_modules/swiper/core/moduleExtendParams.js
function moduleExtendParams(params, allModulesParams) {
  return function(obj = {}) {
    let moduleParamName = Object.keys(obj)[0], moduleParams = obj[moduleParamName];
    if (typeof moduleParams != "object" || moduleParams === null) {
      extend2(allModulesParams, obj);
      return;
    }
    if (["navigation", "pagination", "scrollbar"].indexOf(moduleParamName) >= 0 && params[moduleParamName] === !0 && (params[moduleParamName] = {
      auto: !0
    }), !(moduleParamName in params && "enabled" in moduleParams)) {
      extend2(allModulesParams, obj);
      return;
    }
    params[moduleParamName] === !0 && (params[moduleParamName] = {
      enabled: !0
    }), typeof params[moduleParamName] == "object" && !("enabled" in params[moduleParamName]) && (params[moduleParamName].enabled = !0), params[moduleParamName] || (params[moduleParamName] = {
      enabled: !1
    }), extend2(allModulesParams, obj);
  };
}

// node_modules/swiper/core/core.js
var prototypes = {
  eventsEmitter: events_emitter_default,
  update: update_default,
  translate: translate_default,
  transition: transition_default,
  slide: slide_default,
  loop: loop_default,
  grabCursor: grab_cursor_default,
  events: events_default,
  breakpoints: breakpoints_default,
  checkOverflow: check_overflow_default,
  classes: classes_default
}, extendedDefaults = {}, Swiper = class {
  constructor(...args) {
    let el, params;
    args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === "Object" ? params = args[0] : [el, params] = args, params || (params = {}), params = extend2({}, params), el && !params.el && (params.el = el);
    let document2 = getDocument();
    if (params.el && typeof params.el == "string" && document2.querySelectorAll(params.el).length > 1) {
      let swipers = [];
      return document2.querySelectorAll(params.el).forEach((containerEl) => {
        let newParams = extend2({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      }), swipers;
    }
    let swiper = this;
    swiper.__swiper__ = !0, swiper.support = getSupport(), swiper.device = getDevice({
      userAgent: params.userAgent
    }), swiper.browser = getBrowser(), swiper.eventsListeners = {}, swiper.eventsAnyListeners = [], swiper.modules = [...swiper.__modules__], params.modules && Array.isArray(params.modules) && swiper.modules.push(...params.modules);
    let allModulesParams = {};
    swiper.modules.forEach((mod) => {
      mod({
        params,
        swiper,
        extendParams: moduleExtendParams(params, allModulesParams),
        on: swiper.on.bind(swiper),
        once: swiper.once.bind(swiper),
        off: swiper.off.bind(swiper),
        emit: swiper.emit.bind(swiper)
      });
    });
    let swiperParams = extend2({}, defaults_default, allModulesParams);
    return swiper.params = extend2({}, swiperParams, extendedDefaults, params), swiper.originalParams = extend2({}, swiper.params), swiper.passedParams = extend2({}, params), swiper.params && swiper.params.on && Object.keys(swiper.params.on).forEach((eventName) => {
      swiper.on(eventName, swiper.params.on[eventName]);
    }), swiper.params && swiper.params.onAny && swiper.onAny(swiper.params.onAny), Object.assign(swiper, {
      enabled: swiper.params.enabled,
      el,
      classNames: [],
      slides: [],
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      isHorizontal() {
        return swiper.params.direction === "horizontal";
      },
      isVertical() {
        return swiper.params.direction === "vertical";
      },
      activeIndex: 0,
      realIndex: 0,
      isBeginning: !0,
      isEnd: !1,
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: !1,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      touchEventsData: {
        isTouched: void 0,
        isMoved: void 0,
        allowTouchCallbacks: void 0,
        touchStartTime: void 0,
        isScrolling: void 0,
        currentTranslate: void 0,
        startTranslate: void 0,
        allowThresholdMove: void 0,
        focusableElements: swiper.params.focusableElements,
        lastClickTime: now(),
        clickTimeout: void 0,
        velocities: [],
        allowMomentumBounce: void 0,
        startMoving: void 0,
        evCache: []
      },
      allowClick: !0,
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      imagesToLoad: [],
      imagesLoaded: 0
    }), swiper.emit("_swiper"), swiper.params.init && swiper.init(), swiper;
  }
  getSlideIndex(slideEl) {
    let {
      slidesEl,
      params
    } = this, slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`), firstSlideIndex = elementIndex(slides[0]);
    return elementIndex(slideEl) - firstSlideIndex;
  }
  recalcSlides() {
    let swiper = this, {
      slidesEl,
      params
    } = swiper;
    swiper.slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
  }
  enable() {
    let swiper = this;
    swiper.enabled || (swiper.enabled = !0, swiper.params.grabCursor && swiper.setGrabCursor(), swiper.emit("enable"));
  }
  disable() {
    let swiper = this;
    !swiper.enabled || (swiper.enabled = !1, swiper.params.grabCursor && swiper.unsetGrabCursor(), swiper.emit("disable"));
  }
  setProgress(progress2, speed) {
    let swiper = this;
    progress2 = Math.min(Math.max(progress2, 0), 1);
    let min = swiper.minTranslate(), current = (swiper.maxTranslate() - min) * progress2 + min;
    swiper.translateTo(current, typeof speed > "u" ? 0 : speed), swiper.updateActiveIndex(), swiper.updateSlidesClasses();
  }
  emitContainerClasses() {
    let swiper = this;
    if (!swiper.params._emitClasses || !swiper.el)
      return;
    let cls = swiper.el.className.split(" ").filter((className) => className.indexOf("swiper") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0);
    swiper.emit("_containerClasses", cls.join(" "));
  }
  getSlideClasses(slideEl) {
    let swiper = this;
    return swiper.destroyed ? "" : slideEl.className.split(" ").filter((className) => className.indexOf("swiper-slide") === 0 || className.indexOf(swiper.params.slideClass) === 0).join(" ");
  }
  emitSlidesClasses() {
    let swiper = this;
    if (!swiper.params._emitClasses || !swiper.el)
      return;
    let updates = [];
    swiper.slides.forEach((slideEl) => {
      let classNames = swiper.getSlideClasses(slideEl);
      updates.push({
        slideEl,
        classNames
      }), swiper.emit("_slideClass", slideEl, classNames);
    }), swiper.emit("_slideClasses", updates);
  }
  slidesPerViewDynamic(view = "current", exact = !1) {
    let swiper = this, {
      params,
      slides,
      slidesGrid,
      slidesSizesGrid,
      size: swiperSize,
      activeIndex
    } = swiper, spv = 1;
    if (params.centeredSlides) {
      let slideSize = slides[activeIndex].swiperSlideSize, breakLoop;
      for (let i7 = activeIndex + 1; i7 < slides.length; i7 += 1)
        slides[i7] && !breakLoop && (slideSize += slides[i7].swiperSlideSize, spv += 1, slideSize > swiperSize && (breakLoop = !0));
      for (let i7 = activeIndex - 1; i7 >= 0; i7 -= 1)
        slides[i7] && !breakLoop && (slideSize += slides[i7].swiperSlideSize, spv += 1, slideSize > swiperSize && (breakLoop = !0));
    } else if (view === "current")
      for (let i7 = activeIndex + 1; i7 < slides.length; i7 += 1)
        (exact ? slidesGrid[i7] + slidesSizesGrid[i7] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i7] - slidesGrid[activeIndex] < swiperSize) && (spv += 1);
    else
      for (let i7 = activeIndex - 1; i7 >= 0; i7 -= 1)
        slidesGrid[activeIndex] - slidesGrid[i7] < swiperSize && (spv += 1);
    return spv;
  }
  update() {
    let swiper = this;
    if (!swiper || swiper.destroyed)
      return;
    let {
      snapGrid,
      params
    } = swiper;
    params.breakpoints && swiper.setBreakpoint(), [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach((imageEl) => {
      imageEl.complete && processLazyPreloader(swiper, imageEl);
    }), swiper.updateSize(), swiper.updateSlides(), swiper.updateProgress(), swiper.updateSlidesClasses();
    function setTranslate2() {
      let translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate, newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate), swiper.updateActiveIndex(), swiper.updateSlidesClasses();
    }
    let translated;
    swiper.params.freeMode && swiper.params.freeMode.enabled ? (setTranslate2(), swiper.params.autoHeight && swiper.updateAutoHeight()) : ((swiper.params.slidesPerView === "auto" || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides ? translated = swiper.slideTo(swiper.slides.length - 1, 0, !1, !0) : translated = swiper.slideTo(swiper.activeIndex, 0, !1, !0), translated || setTranslate2()), params.watchOverflow && snapGrid !== swiper.snapGrid && swiper.checkOverflow(), swiper.emit("update");
  }
  changeDirection(newDirection, needUpdate = !0) {
    let swiper = this, currentDirection = swiper.params.direction;
    return newDirection || (newDirection = currentDirection === "horizontal" ? "vertical" : "horizontal"), newDirection === currentDirection || newDirection !== "horizontal" && newDirection !== "vertical" || (swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`), swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`), swiper.emitContainerClasses(), swiper.params.direction = newDirection, swiper.slides.forEach((slideEl) => {
      newDirection === "vertical" ? slideEl.style.width = "" : slideEl.style.height = "";
    }), swiper.emit("changeDirection"), needUpdate && swiper.update()), swiper;
  }
  changeLanguageDirection(direction) {
    let swiper = this;
    swiper.rtl && direction === "rtl" || !swiper.rtl && direction === "ltr" || (swiper.rtl = direction === "rtl", swiper.rtlTranslate = swiper.params.direction === "horizontal" && swiper.rtl, swiper.rtl ? (swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`), swiper.el.dir = "rtl") : (swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`), swiper.el.dir = "ltr"), swiper.update());
  }
  mount(element) {
    let swiper = this;
    if (swiper.mounted)
      return !0;
    let el = element || swiper.params.el;
    if (typeof el == "string" && (el = document.querySelector(el)), !el)
      return !1;
    el.swiper = swiper, el.shadowEl && (swiper.isElement = !0);
    let getWrapperSelector = () => `.${(swiper.params.wrapperClass || "").trim().split(" ").join(".")}`, wrapperEl = (() => el && el.shadowRoot && el.shadowRoot.querySelector ? el.shadowRoot.querySelector(getWrapperSelector()) : elementChildren(el, getWrapperSelector())[0])();
    return !wrapperEl && swiper.params.createElements && (wrapperEl = createElement7("div", swiper.params.wrapperClass), el.append(wrapperEl), elementChildren(el, `.${swiper.params.slideClass}`).forEach((slideEl) => {
      wrapperEl.append(slideEl);
    })), Object.assign(swiper, {
      el,
      wrapperEl,
      slidesEl: swiper.isElement ? el : wrapperEl,
      mounted: !0,
      rtl: el.dir.toLowerCase() === "rtl" || elementStyle(el, "direction") === "rtl",
      rtlTranslate: swiper.params.direction === "horizontal" && (el.dir.toLowerCase() === "rtl" || elementStyle(el, "direction") === "rtl"),
      wrongRTL: elementStyle(wrapperEl, "display") === "-webkit-box"
    }), !0;
  }
  init(el) {
    let swiper = this;
    return swiper.initialized || swiper.mount(el) === !1 || (swiper.emit("beforeInit"), swiper.params.breakpoints && swiper.setBreakpoint(), swiper.addClasses(), swiper.updateSize(), swiper.updateSlides(), swiper.params.watchOverflow && swiper.checkOverflow(), swiper.params.grabCursor && swiper.enabled && swiper.setGrabCursor(), swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled ? swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, !1, !0) : swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, !1, !0), swiper.params.loop && swiper.loopCreate(), swiper.attachEvents(), [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach((imageEl) => {
      imageEl.complete ? processLazyPreloader(swiper, imageEl) : imageEl.addEventListener("load", (e3) => {
        processLazyPreloader(swiper, e3.target);
      });
    }), swiper.initialized = !0, swiper.emit("init"), swiper.emit("afterInit")), swiper;
  }
  destroy(deleteInstance = !0, cleanStyles = !0) {
    let swiper = this, {
      params,
      el,
      wrapperEl,
      slides
    } = swiper;
    return typeof swiper.params > "u" || swiper.destroyed || (swiper.emit("beforeDestroy"), swiper.initialized = !1, swiper.detachEvents(), params.loop && swiper.loopDestroy(), cleanStyles && (swiper.removeClasses(), el.removeAttribute("style"), wrapperEl.removeAttribute("style"), slides && slides.length && slides.forEach((slideEl) => {
      slideEl.classList.remove(params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass), slideEl.removeAttribute("style"), slideEl.removeAttribute("data-swiper-slide-index");
    })), swiper.emit("destroy"), Object.keys(swiper.eventsListeners).forEach((eventName) => {
      swiper.off(eventName);
    }), deleteInstance !== !1 && (swiper.el.swiper = null, deleteProps(swiper)), swiper.destroyed = !0), null;
  }
  static extendDefaults(newDefaults) {
    extend2(extendedDefaults, newDefaults);
  }
  static get extendedDefaults() {
    return extendedDefaults;
  }
  static get defaults() {
    return defaults_default;
  }
  static installModule(mod) {
    Swiper.prototype.__modules__ || (Swiper.prototype.__modules__ = []);
    let modules = Swiper.prototype.__modules__;
    typeof mod == "function" && modules.indexOf(mod) < 0 && modules.push(mod);
  }
  static use(module) {
    return Array.isArray(module) ? (module.forEach((m6) => Swiper.installModule(m6)), Swiper) : (Swiper.installModule(module), Swiper);
  }
};
Object.keys(prototypes).forEach((prototypeGroup) => {
  Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
  });
});
Swiper.use([Resize, Observer]);
var core_default = Swiper;

// node_modules/swiper/components-shared/utils.js
function isObject4(o8) {
  return typeof o8 == "object" && o8 !== null && o8.constructor && Object.prototype.toString.call(o8).slice(8, -1) === "Object";
}
function extend3(target, src) {
  let noExtend = ["__proto__", "constructor", "prototype"];
  Object.keys(src).filter((key) => noExtend.indexOf(key) < 0).forEach((key) => {
    typeof target[key] > "u" ? target[key] = src[key] : isObject4(src[key]) && isObject4(target[key]) && Object.keys(src[key]).length > 0 ? src[key].__swiper__ ? target[key] = src[key] : extend3(target[key], src[key]) : target[key] = src[key];
  });
}
function needsNavigation(params = {}) {
  return params.navigation && typeof params.navigation.nextEl > "u" && typeof params.navigation.prevEl > "u";
}
function needsPagination(params = {}) {
  return params.pagination && typeof params.pagination.el > "u";
}
function needsScrollbar(params = {}) {
  return params.scrollbar && typeof params.scrollbar.el > "u";
}
function uniqueClasses(classNames = "") {
  let classes = classNames.split(" ").map((c5) => c5.trim()).filter((c5) => !!c5), unique = [];
  return classes.forEach((c5) => {
    unique.indexOf(c5) < 0 && unique.push(c5);
  }), unique.join(" ");
}
function wrapperClass(className = "") {
  return className ? className.includes("swiper-wrapper") ? className : `swiper-wrapper ${className}` : "swiper-wrapper";
}

// node_modules/swiper/components-shared/params-list.js
var paramsList = [
  "modules",
  "init",
  "_direction",
  "oneWayMovement",
  "touchEventsTarget",
  "initialSlide",
  "_speed",
  "cssMode",
  "updateOnWindowResize",
  "resizeObserver",
  "nested",
  "focusableElements",
  "_enabled",
  "_width",
  "_height",
  "preventInteractionOnTransition",
  "userAgent",
  "url",
  "_edgeSwipeDetection",
  "_edgeSwipeThreshold",
  "_freeMode",
  "_autoHeight",
  "setWrapperSize",
  "virtualTranslate",
  "_effect",
  "breakpoints",
  "_spaceBetween",
  "_slidesPerView",
  "maxBackfaceHiddenSlides",
  "_grid",
  "_slidesPerGroup",
  "_slidesPerGroupSkip",
  "_slidesPerGroupAuto",
  "_centeredSlides",
  "_centeredSlidesBounds",
  "_slidesOffsetBefore",
  "_slidesOffsetAfter",
  "normalizeSlideIndex",
  "_centerInsufficientSlides",
  "_watchOverflow",
  "roundLengths",
  "touchRatio",
  "touchAngle",
  "simulateTouch",
  "_shortSwipes",
  "_longSwipes",
  "longSwipesRatio",
  "longSwipesMs",
  "_followFinger",
  "allowTouchMove",
  "_threshold",
  "touchMoveStopPropagation",
  "touchStartPreventDefault",
  "touchStartForcePreventDefault",
  "touchReleaseOnEdges",
  "uniqueNavElements",
  "_resistance",
  "_resistanceRatio",
  "_watchSlidesProgress",
  "_grabCursor",
  "preventClicks",
  "preventClicksPropagation",
  "_slideToClickedSlide",
  "_loop",
  "loopedSlides",
  "loopPreventsSliding",
  "_rewind",
  "_allowSlidePrev",
  "_allowSlideNext",
  "_swipeHandler",
  "_noSwiping",
  "noSwipingClass",
  "noSwipingSelector",
  "passiveListeners",
  "containerModifierClass",
  "slideClass",
  "slideActiveClass",
  "slideVisibleClass",
  "slideNextClass",
  "slidePrevClass",
  "wrapperClass",
  "lazyPreloaderClass",
  "runCallbacksOnInit",
  "observer",
  "observeParents",
  "observeSlideChildren",
  "a11y",
  "_autoplay",
  "_controller",
  "coverflowEffect",
  "cubeEffect",
  "fadeEffect",
  "flipEffect",
  "creativeEffect",
  "cardsEffect",
  "hashNavigation",
  "history",
  "keyboard",
  "mousewheel",
  "_navigation",
  "_pagination",
  "parallax",
  "_scrollbar",
  "_thumbs",
  "virtual",
  "zoom",
  "control",
  "injectStyles",
  "injectStylesUrls"
];

// node_modules/swiper/components-shared/get-params.js
function getParams(obj = {}, splitEvents = !0) {
  let params = {
    on: {}
  }, events2 = {}, passedParams = {};
  extend3(params, core_default.defaults), extend3(params, core_default.extendedDefaults), params._emitClasses = !0, params.init = !1;
  let rest = {}, allowedParams = paramsList.map((key) => key.replace(/_/, "")), plainObj = Object.assign({}, obj);
  return Object.keys(plainObj).forEach((key) => {
    typeof obj[key] > "u" || (allowedParams.indexOf(key) >= 0 ? isObject4(obj[key]) ? (params[key] = {}, passedParams[key] = {}, extend3(params[key], obj[key]), extend3(passedParams[key], obj[key])) : (params[key] = obj[key], passedParams[key] = obj[key]) : key.search(/on[A-Z]/) === 0 && typeof obj[key] == "function" ? splitEvents ? events2[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key] : params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key] : rest[key] = obj[key]);
  }), ["navigation", "pagination", "scrollbar"].forEach((key) => {
    params[key] === !0 && (params[key] = {}), params[key] === !1 && delete params[key];
  }), {
    params,
    passedParams,
    rest,
    events: events2
  };
}

// node_modules/swiper/components-shared/mount-swiper.js
function mountSwiper({
  el,
  nextEl,
  prevEl,
  paginationEl,
  scrollbarEl,
  swiper
}, swiperParams) {
  needsNavigation(swiperParams) && nextEl && prevEl && (swiper.params.navigation.nextEl = nextEl, swiper.originalParams.navigation.nextEl = nextEl, swiper.params.navigation.prevEl = prevEl, swiper.originalParams.navigation.prevEl = prevEl), needsPagination(swiperParams) && paginationEl && (swiper.params.pagination.el = paginationEl, swiper.originalParams.pagination.el = paginationEl), needsScrollbar(swiperParams) && scrollbarEl && (swiper.params.scrollbar.el = scrollbarEl, swiper.originalParams.scrollbar.el = scrollbarEl), swiper.init(el);
}

// node_modules/swiper/components-shared/get-changed-params.js
function getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {
  let keys = [];
  if (!oldParams)
    return keys;
  let addKey = (key) => {
    keys.indexOf(key) < 0 && keys.push(key);
  };
  if (children && oldChildren) {
    let oldChildrenKeys = oldChildren.map(getKey), childrenKeys = children.map(getKey);
    oldChildrenKeys.join("") !== childrenKeys.join("") && addKey("children"), oldChildren.length !== children.length && addKey("children");
  }
  return paramsList.filter((key) => key[0] === "_").map((key) => key.replace(/_/, "")).forEach((key) => {
    if (key in swiperParams && key in oldParams)
      if (isObject4(swiperParams[key]) && isObject4(oldParams[key])) {
        let newKeys = Object.keys(swiperParams[key]), oldKeys = Object.keys(oldParams[key]);
        newKeys.length !== oldKeys.length ? addKey(key) : (newKeys.forEach((newKey) => {
          swiperParams[key][newKey] !== oldParams[key][newKey] && addKey(key);
        }), oldKeys.forEach((oldKey) => {
          swiperParams[key][oldKey] !== oldParams[key][oldKey] && addKey(key);
        }));
      } else
        swiperParams[key] !== oldParams[key] && addKey(key);
  }), keys;
}

// node_modules/swiper/react/get-children.js
var import_react12 = __toESM(require_react(), 1);
function isChildSwiperSlide(child) {
  return child.type && child.type.displayName && child.type.displayName.includes("SwiperSlide");
}
function processChildren(c5) {
  let slides = [];
  return import_react12.default.Children.toArray(c5).forEach((child) => {
    isChildSwiperSlide(child) ? slides.push(child) : child.props && child.props.children && processChildren(child.props.children).forEach((slide) => slides.push(slide));
  }), slides;
}
function getChildren(c5) {
  let slides = [], slots = {
    "container-start": [],
    "container-end": [],
    "wrapper-start": [],
    "wrapper-end": []
  };
  return import_react12.default.Children.toArray(c5).forEach((child) => {
    if (isChildSwiperSlide(child))
      slides.push(child);
    else if (child.props && child.props.slot && slots[child.props.slot])
      slots[child.props.slot].push(child);
    else if (child.props && child.props.children) {
      let foundSlides = processChildren(child.props.children);
      foundSlides.length > 0 ? foundSlides.forEach((slide) => slides.push(slide)) : slots["container-end"].push(child);
    } else
      slots["container-end"].push(child);
  }), {
    slides,
    slots
  };
}

// node_modules/swiper/components-shared/update-swiper.js
function updateSwiper({
  swiper,
  slides,
  passedParams,
  changedParams,
  nextEl,
  prevEl,
  scrollbarEl,
  paginationEl
}) {
  let updateParams = changedParams.filter((key) => key !== "children" && key !== "direction" && key !== "wrapperClass"), {
    params: currentParams,
    pagination,
    navigation,
    scrollbar,
    virtual,
    thumbs
  } = swiper, needThumbsInit, needControllerInit, needPaginationInit, needScrollbarInit, needNavigationInit, loopNeedDestroy, loopNeedEnable, loopNeedReloop;
  changedParams.includes("thumbs") && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper && (needThumbsInit = !0), changedParams.includes("controller") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control && (needControllerInit = !0), changedParams.includes("pagination") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === !1) && pagination && !pagination.el && (needPaginationInit = !0), changedParams.includes("scrollbar") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === !1) && scrollbar && !scrollbar.el && (needScrollbarInit = !0), changedParams.includes("navigation") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === !1) && navigation && !navigation.prevEl && !navigation.nextEl && (needNavigationInit = !0);
  let destroyModule = (mod) => {
    !swiper[mod] || (swiper[mod].destroy(), mod === "navigation" ? (swiper.isElement && (swiper[mod].prevEl.remove(), swiper[mod].nextEl.remove()), currentParams[mod].prevEl = void 0, currentParams[mod].nextEl = void 0, swiper[mod].prevEl = void 0, swiper[mod].nextEl = void 0) : (swiper.isElement && swiper[mod].el.remove(), currentParams[mod].el = void 0, swiper[mod].el = void 0));
  };
  changedParams.includes("loop") && swiper.isElement && (currentParams.loop && !passedParams.loop ? loopNeedDestroy = !0 : !currentParams.loop && passedParams.loop ? loopNeedEnable = !0 : loopNeedReloop = !0), updateParams.forEach((key) => {
    if (isObject4(currentParams[key]) && isObject4(passedParams[key]))
      extend3(currentParams[key], passedParams[key]);
    else {
      let newValue = passedParams[key];
      (newValue === !0 || newValue === !1) && (key === "navigation" || key === "pagination" || key === "scrollbar") ? newValue === !1 && destroyModule(key) : currentParams[key] = passedParams[key];
    }
  }), updateParams.includes("controller") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control && (swiper.controller.control = currentParams.controller.control), changedParams.includes("children") && slides && virtual && currentParams.virtual.enabled && (virtual.slides = slides, virtual.update(!0)), changedParams.includes("children") && slides && currentParams.loop && (loopNeedReloop = !0), needThumbsInit && thumbs.init() && thumbs.update(!0), needControllerInit && (swiper.controller.control = currentParams.controller.control), needPaginationInit && (swiper.isElement && (!paginationEl || typeof paginationEl == "string") && (paginationEl = document.createElement("div"), paginationEl.classList.add("swiper-pagination"), swiper.el.shadowEl.appendChild(paginationEl)), paginationEl && (currentParams.pagination.el = paginationEl), pagination.init(), pagination.render(), pagination.update()), needScrollbarInit && (swiper.isElement && (!scrollbarEl || typeof scrollbarEl == "string") && (scrollbarEl = document.createElement("div"), scrollbarEl.classList.add("swiper-scrollbar"), swiper.el.shadowEl.appendChild(scrollbarEl)), scrollbarEl && (currentParams.scrollbar.el = scrollbarEl), scrollbar.init(), scrollbar.updateSize(), scrollbar.setTranslate()), needNavigationInit && (swiper.isElement && ((!nextEl || typeof nextEl == "string") && (nextEl = document.createElement("div"), nextEl.classList.add("swiper-button-next"), swiper.el.shadowEl.appendChild(nextEl)), (!prevEl || typeof prevEl == "string") && (prevEl = document.createElement("div"), prevEl.classList.add("swiper-button-prev"), swiper.el.shadowEl.appendChild(prevEl))), nextEl && (currentParams.navigation.nextEl = nextEl), prevEl && (currentParams.navigation.prevEl = prevEl), navigation.init(), navigation.update()), changedParams.includes("allowSlideNext") && (swiper.allowSlideNext = passedParams.allowSlideNext), changedParams.includes("allowSlidePrev") && (swiper.allowSlidePrev = passedParams.allowSlidePrev), changedParams.includes("direction") && swiper.changeDirection(passedParams.direction, !1), (loopNeedDestroy || loopNeedReloop) && swiper.loopDestroy(), (loopNeedEnable || loopNeedReloop) && swiper.loopCreate(), swiper.update();
}

// node_modules/swiper/react/virtual.js
var import_react13 = __toESM(require_react(), 1);
function renderVirtual(swiper, slides, virtualData) {
  if (!virtualData)
    return null;
  let getSlideIndex = (index) => {
    let slideIndex = index;
    return index < 0 ? slideIndex = slides.length + index : slideIndex >= slides.length && (slideIndex = slideIndex - slides.length), slideIndex;
  }, style = swiper.isHorizontal() ? {
    [swiper.rtlTranslate ? "right" : "left"]: `${virtualData.offset}px`
  } : {
    top: `${virtualData.offset}px`
  }, {
    from,
    to
  } = virtualData, loopFrom = swiper.params.loop ? -slides.length : 0, loopTo = swiper.params.loop ? slides.length * 2 : slides.length, slidesToRender = [];
  for (let i7 = loopFrom; i7 < loopTo; i7 += 1)
    i7 >= from && i7 <= to && slidesToRender.push(slides[getSlideIndex(i7)]);
  return slidesToRender.map((child) => /* @__PURE__ */ import_react13.default.cloneElement(child, {
    swiper,
    style
  }));
}

// node_modules/swiper/components-shared/update-on-virtual-data.js
var updateOnVirtualData = (swiper) => {
  !swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled || (swiper.updateSlides(), swiper.updateProgress(), swiper.updateSlidesClasses(), swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled && swiper.parallax.setTranslate());
};

// node_modules/swiper/react/use-isomorphic-layout-effect.js
var import_react14 = __toESM(require_react(), 1);
function useIsomorphicLayoutEffect(callback, deps) {
  return typeof window > "u" ? (0, import_react14.useEffect)(callback, deps) : (0, import_react14.useLayoutEffect)(callback, deps);
}

// node_modules/swiper/react/context.js
var import_react15 = __toESM(require_react(), 1), SwiperSlideContext = /* @__PURE__ */ (0, import_react15.createContext)(null);
var SwiperContext = /* @__PURE__ */ (0, import_react15.createContext)(null);

// node_modules/swiper/react/swiper.js
function _extends5() {
  return _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends5.apply(this, arguments);
}
var Swiper2 = /* @__PURE__ */ (0, import_react16.forwardRef)(function(_temp, externalElRef) {
  let {
    className,
    tag: Tag = "div",
    wrapperTag: WrapperTag = "div",
    children,
    onSwiper,
    ...rest
  } = _temp === void 0 ? {} : _temp, eventsAssigned = !1, [containerClasses, setContainerClasses] = (0, import_react16.useState)("swiper"), [virtualData, setVirtualData] = (0, import_react16.useState)(null), [breakpointChanged, setBreakpointChanged] = (0, import_react16.useState)(!1), initializedRef = (0, import_react16.useRef)(!1), swiperElRef = (0, import_react16.useRef)(null), swiperRef = (0, import_react16.useRef)(null), oldPassedParamsRef = (0, import_react16.useRef)(null), oldSlides = (0, import_react16.useRef)(null), nextElRef = (0, import_react16.useRef)(null), prevElRef = (0, import_react16.useRef)(null), paginationElRef = (0, import_react16.useRef)(null), scrollbarElRef = (0, import_react16.useRef)(null), {
    params: swiperParams,
    passedParams,
    rest: restProps,
    events: events2
  } = getParams(rest), {
    slides,
    slots
  } = getChildren(children), onBeforeBreakpoint = () => {
    setBreakpointChanged(!breakpointChanged);
  };
  Object.assign(swiperParams.on, {
    _containerClasses(swiper, classes) {
      setContainerClasses(classes);
    }
  });
  let initSwiper = () => {
    Object.assign(swiperParams.on, events2), eventsAssigned = !0;
    let passParams = {
      ...swiperParams
    };
    if (delete passParams.wrapperClass, swiperRef.current = new core_default(passParams), swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {
      swiperRef.current.virtual.slides = slides;
      let extendWith = {
        cache: !1,
        slides,
        renderExternal: setVirtualData,
        renderExternalUpdate: !1
      };
      extend3(swiperRef.current.params.virtual, extendWith), extend3(swiperRef.current.originalParams.virtual, extendWith);
    }
  };
  swiperElRef.current || initSwiper(), swiperRef.current && swiperRef.current.on("_beforeBreakpoint", onBeforeBreakpoint);
  let attachEvents2 = () => {
    eventsAssigned || !events2 || !swiperRef.current || Object.keys(events2).forEach((eventName) => {
      swiperRef.current.on(eventName, events2[eventName]);
    });
  }, detachEvents2 = () => {
    !events2 || !swiperRef.current || Object.keys(events2).forEach((eventName) => {
      swiperRef.current.off(eventName, events2[eventName]);
    });
  };
  (0, import_react16.useEffect)(() => () => {
    swiperRef.current && swiperRef.current.off("_beforeBreakpoint", onBeforeBreakpoint);
  }), (0, import_react16.useEffect)(() => {
    !initializedRef.current && swiperRef.current && (swiperRef.current.emitSlidesClasses(), initializedRef.current = !0);
  }), useIsomorphicLayoutEffect(() => {
    if (externalElRef && (externalElRef.current = swiperElRef.current), !!swiperElRef.current)
      return swiperRef.current.destroyed && initSwiper(), mountSwiper({
        el: swiperElRef.current,
        nextEl: nextElRef.current,
        prevEl: prevElRef.current,
        paginationEl: paginationElRef.current,
        scrollbarEl: scrollbarElRef.current,
        swiper: swiperRef.current
      }, swiperParams), onSwiper && onSwiper(swiperRef.current), () => {
        swiperRef.current && !swiperRef.current.destroyed && swiperRef.current.destroy(!0, !1);
      };
  }, []), useIsomorphicLayoutEffect(() => {
    attachEvents2();
    let changedParams = getChangedParams(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, (c5) => c5.key);
    return oldPassedParamsRef.current = passedParams, oldSlides.current = slides, changedParams.length && swiperRef.current && !swiperRef.current.destroyed && updateSwiper({
      swiper: swiperRef.current,
      slides,
      passedParams,
      changedParams,
      nextEl: nextElRef.current,
      prevEl: prevElRef.current,
      scrollbarEl: scrollbarElRef.current,
      paginationEl: paginationElRef.current
    }), () => {
      detachEvents2();
    };
  }), useIsomorphicLayoutEffect(() => {
    updateOnVirtualData(swiperRef.current);
  }, [virtualData]);
  function renderSlides() {
    return swiperParams.virtual ? renderVirtual(swiperRef.current, slides, virtualData) : slides.map((child, index) => /* @__PURE__ */ import_react16.default.cloneElement(child, {
      swiper: swiperRef.current,
      swiperSlideIndex: index
    }));
  }
  return /* @__PURE__ */ import_react16.default.createElement(Tag, _extends5({
    ref: swiperElRef,
    className: uniqueClasses(`${containerClasses}${className ? ` ${className}` : ""}`)
  }, restProps), /* @__PURE__ */ import_react16.default.createElement(SwiperContext.Provider, {
    value: swiperRef.current
  }, slots["container-start"], /* @__PURE__ */ import_react16.default.createElement(WrapperTag, {
    className: wrapperClass(swiperParams.wrapperClass)
  }, slots["wrapper-start"], renderSlides(), slots["wrapper-end"]), needsNavigation(swiperParams) && /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null, /* @__PURE__ */ import_react16.default.createElement("div", {
    ref: prevElRef,
    className: "swiper-button-prev"
  }), /* @__PURE__ */ import_react16.default.createElement("div", {
    ref: nextElRef,
    className: "swiper-button-next"
  })), needsScrollbar(swiperParams) && /* @__PURE__ */ import_react16.default.createElement("div", {
    ref: scrollbarElRef,
    className: "swiper-scrollbar"
  }), needsPagination(swiperParams) && /* @__PURE__ */ import_react16.default.createElement("div", {
    ref: paginationElRef,
    className: "swiper-pagination"
  }), slots["container-end"]));
});
Swiper2.displayName = "Swiper";

// node_modules/swiper/react/swiper-slide.js
var import_react17 = __toESM(require_react(), 1);
function _extends6() {
  return _extends6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends6.apply(this, arguments);
}
var SwiperSlide = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_temp, externalRef) {
  let {
    tag: Tag = "div",
    children,
    className = "",
    swiper,
    zoom,
    lazy,
    virtualIndex,
    swiperSlideIndex,
    ...rest
  } = _temp === void 0 ? {} : _temp, slideElRef = (0, import_react17.useRef)(null), [slideClasses, setSlideClasses] = (0, import_react17.useState)("swiper-slide"), [lazyLoaded, setLazyLoaded] = (0, import_react17.useState)(!1);
  function updateClasses(_s, el, classNames) {
    el === slideElRef.current && setSlideClasses(classNames);
  }
  useIsomorphicLayoutEffect(() => {
    if (typeof swiperSlideIndex < "u" && (slideElRef.current.swiperSlideIndex = swiperSlideIndex), externalRef && (externalRef.current = slideElRef.current), !(!slideElRef.current || !swiper)) {
      if (swiper.destroyed) {
        slideClasses !== "swiper-slide" && setSlideClasses("swiper-slide");
        return;
      }
      return swiper.on("_slideClass", updateClasses), () => {
        !swiper || swiper.off("_slideClass", updateClasses);
      };
    }
  }), useIsomorphicLayoutEffect(() => {
    swiper && slideElRef.current && !swiper.destroyed && setSlideClasses(swiper.getSlideClasses(slideElRef.current));
  }, [swiper]);
  let slideData = {
    isActive: slideClasses.indexOf("swiper-slide-active") >= 0,
    isVisible: slideClasses.indexOf("swiper-slide-visible") >= 0,
    isPrev: slideClasses.indexOf("swiper-slide-prev") >= 0,
    isNext: slideClasses.indexOf("swiper-slide-next") >= 0
  }, renderChildren = () => typeof children == "function" ? children(slideData) : children, onLoad2 = () => {
    setLazyLoaded(!0);
  };
  return /* @__PURE__ */ import_react17.default.createElement(Tag, _extends6({
    ref: slideElRef,
    className: uniqueClasses(`${slideClasses}${className ? ` ${className}` : ""}`),
    "data-swiper-slide-index": virtualIndex,
    onLoad: onLoad2
  }, rest), zoom && /* @__PURE__ */ import_react17.default.createElement(SwiperSlideContext.Provider, {
    value: slideData
  }, /* @__PURE__ */ import_react17.default.createElement("div", {
    className: "swiper-zoom-container",
    "data-swiper-zoom": typeof zoom == "number" ? zoom : void 0
  }, renderChildren(), lazy && !lazyLoaded && /* @__PURE__ */ import_react17.default.createElement("div", {
    className: "swiper-lazy-preloader"
  }))), !zoom && /* @__PURE__ */ import_react17.default.createElement(SwiperSlideContext.Provider, {
    value: slideData
  }, renderChildren(), lazy && !lazyLoaded && /* @__PURE__ */ import_react17.default.createElement("div", {
    className: "swiper-lazy-preloader"
  })));
});
SwiperSlide.displayName = "SwiperSlide";

// app/components/modules/TextColumnsModule.jsx
var import_jsx_dev_runtime10 = __toESM(require_jsx_dev_runtime()), TextColumnsModule = ({ content }) => /* @__PURE__ */ (0, import_jsx_dev_runtime10.jsxDEV)(Layout, { intent: "columns", style: { columnFill: "auto" }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime10.jsxDEV)(PortableText2, { text: content.text, intent: "column" }, void 0, !1, {
  fileName: "app/components/modules/TextColumnsModule.jsx",
  lineNumber: 7,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/modules/TextColumnsModule.jsx",
  lineNumber: 6,
  columnNumber: 5
}, this);

// app/components/modules/CarouselModule.jsx
var import_jsx_dev_runtime11 = __toESM(require_jsx_dev_runtime()), CarouselModule = ({ content }) => {
  let [swiperInstance, setSwiperInstance] = (0, import_react18.useState)(null), ref = (0, import_react18.useRef)(null);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(Layout, { intent: "module-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(
    "div",
    {
      className: "group relative w-full aspect-video bg-slate-200",
      onClick: (e3) => {
        e3.clientX - ref.current.getBoundingClientRect().left > window.innerHeight / 2 ? swiperInstance.slideNext() : swiperInstance.slidePrev();
      },
      ref,
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(
          "div",
          {
            className: "absolute w-full h-full hidden z-50 pointer-events-none group-hover:flex justify-between items-center p-8 text-white text-6xl",
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("div", { className: "w-1/4", children: "<" }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 29,
                columnNumber: 12
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("div", { className: "w-1/4 text-right", children: ">" }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 30,
                columnNumber: 12
              }, this)
            ]
          },
          void 0,
          !0,
          {
            fileName: "app/components/modules/CarouselModule.jsx",
            lineNumber: 24,
            columnNumber: 10
          },
          this
        ),
        /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(
          Swiper2,
          {
            onSwiper: (swiper) => setSwiperInstance(swiper),
            className: "w-full h-full",
            loop: !0,
            children: content.slide.map((slide) => /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(SwiperSlide, { children: [
              slide._type === "imageObject" && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(
                SanityImage,
                {
                  value: slide.asset,
                  className: "h-full object-cover"
                },
                void 0,
                !1,
                {
                  fileName: "app/components/modules/CarouselModule.jsx",
                  lineNumber: 41,
                  columnNumber: 20
                },
                this
              ),
              slide._type === "textObject" && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("div", { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(TextColumnsModule, { content: slide.text }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 48,
                columnNumber: 22
              }, this) }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 47,
                columnNumber: 20
              }, this)
            ] }, slide._key, !0, {
              fileName: "app/components/modules/CarouselModule.jsx",
              lineNumber: 39,
              columnNumber: 16
            }, this))
          },
          void 0,
          !1,
          {
            fileName: "app/components/modules/CarouselModule.jsx",
            lineNumber: 32,
            columnNumber: 10
          },
          this
        )
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/modules/CarouselModule.jsx",
      lineNumber: 12,
      columnNumber: 8
    },
    this
  ) }, void 0, !1, {
    fileName: "app/components/modules/CarouselModule.jsx",
    lineNumber: 11,
    columnNumber: 6
  }, this);
};

// app/components/parts/PortableText.jsx
var import_jsx_dev_runtime12 = __toESM(require_jsx_dev_runtime()), portableText = cva(
  "[&>*:not(:last-child):not(p):not(blockquote):not(section)]:mb-[1em]",
  {
    variants: {
      intent: {
        body: ["[&>p:not(:first-of-type)]:indent-5 [&>*:not(section)]:prose "],
        column: ["[&>p:not(:first-of-type)]:mb-[1em]"],
        footer: ["[&>p:not(:last-child)]:mb-[1em]"]
      }
    },
    defaultVariants: {
      intent: "body"
    }
  }
), components = (intent) => ({
  block: {
    normal: ({ children }) => {
      switch (intent) {
        case "column":
          return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Text, { tag: "p", intent: "bl-body-lg", children }, void 0, !1, {
            fileName: "app/components/parts/PortableText.jsx",
            lineNumber: 32,
            columnNumber: 15
          }, this);
        case "footer":
          return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Text, { tag: "p", intent: "bl-body-alt", children }, void 0, !1, {
            fileName: "app/components/parts/PortableText.jsx",
            lineNumber: 38,
            columnNumber: 15
          }, this);
        default:
          return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Text, { tag: "p", intent: "bl-body", children }, void 0, !1, {
            fileName: "app/components/parts/PortableText.jsx",
            lineNumber: 44,
            columnNumber: 15
          }, this);
      }
    },
    h3: ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
      Text,
      {
        tag: "h3",
        intent: "bl-heading-2xl",
        className: "break-before-column",
        children
      },
      void 0,
      !1,
      {
        fileName: "app/components/parts/PortableText.jsx",
        lineNumber: 52,
        columnNumber: 9
      },
      this
    ),
    h5: ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Text, { tag: "h4", intent: "bl-heading-lg", children }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 61,
      columnNumber: 9
    }, this),
    h6: ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Text, { tag: "h5", intent: "bl-heading-sm", className: "!mb-0", children }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 66,
      columnNumber: 9
    }, this),
    blockquote: ({ children, value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
      Text,
      {
        tag: "blockquote",
        intent: "bl-quote",
        colour: value.colour,
        className: "my-20 px-8",
        children
      },
      void 0,
      !1,
      {
        fileName: "app/components/parts/PortableText.jsx",
        lineNumber: 71,
        columnNumber: 9
      },
      this
    )
  },
  types: {
    collapsibleModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(CollapsibleModule, { content: value, inline: !0 }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 83,
      columnNumber: 9
    }, this),
    imageModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(ImageModule, { content: value, inline: !0 }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 85,
      columnNumber: 33
    }, this),
    carouselModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(CarouselModule, { content: value }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 86,
      columnNumber: 36
    }, this),
    imageGridModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(ImageGridModule, { content: value, inline: !0 }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 87,
      columnNumber: 37
    }, this)
  }
}), PortableText2 = ({ text: text2, intent, className }) => /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: portableText({ intent, className }), children: /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(PortableText, { value: text2, components: components(intent) }, void 0, !1, {
  fileName: "app/components/parts/PortableText.jsx",
  lineNumber: 95,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/parts/PortableText.jsx",
  lineNumber: 94,
  columnNumber: 5
}, this);

// app/components/global/GlobalNewsletter.jsx
var import_react22 = __toESM(require_react());

// app/components/parts/Button.jsx
var import_jsx_dev_runtime13 = __toESM(require_jsx_dev_runtime()), button = cva(
  "hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none antialiased",
  {
    variants: {
      intent: {
        link: [
          "hover:bg-transparent focus-visible:bg-transparent hover:text-accent focus-visible:text-accent"
        ],
        sm: [""],
        base: ["p-2"],
        lg: ["p-3"],
        xl: ["px-4 py-2"]
      },
      colour: {
        light: ["bg-white", "text-black"],
        mid: ["bg-zinc-500", "text-white"],
        dark: ["bg-black", "text-white"]
      }
    },
    defaultVariants: {
      intent: "base",
      colour: "light"
    }
  }
), Button = ({ type, intent, colour, className, children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("button", { type: type || "button", className: button({ intent, colour, className }), children }, void 0, !1, {
  fileName: "app/components/parts/Button.jsx",
  lineNumber: 31,
  columnNumber: 5
}, this);

// app/components/global/GlobalNewsletter.jsx
var import_jsx_dev_runtime14 = __toESM(require_jsx_dev_runtime()), GlobalNewsletter = () => {
  var _a2;
  let actionData = useActionData2(), transition = useTransition(), state = (_a2 = actionData == null ? void 0 : actionData.res) != null && _a2.statusText ? "success" : transition.submission ? "submitting" : actionData != null && actionData.subscription ? "success" : actionData != null && actionData.error ? "error" : "idle", inputRef = (0, import_react22.useRef)(null), successRef = (0, import_react22.useRef)(null), mounted = (0, import_react22.useRef)(!1);
  return (0, import_react22.useEffect)(() => {
    var _a3, _b, _c;
    state === "error" && ((_a3 = inputRef.current) == null || _a3.focus()), state === "idle" && mounted.current && ((_b = inputRef.current) == null || _b.select()), state === "success" && ((_c = successRef.current) == null || _c.focus()), mounted.current = !0;
  }, [state]), /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(Form, { method: "post", "aria-hidden": state === "success", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("h2", { className: "mb-[1em]", children: "Sign up to our newsletter" }, void 0, !1, {
      fileName: "app/components/global/GlobalNewsletter.jsx",
      lineNumber: 40,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("fieldset", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("label", { children: "email:" }, void 0, !1, {
        fileName: "app/components/global/GlobalNewsletter.jsx",
        lineNumber: 42,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: "flex max-w-sm", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(
          "input",
          {
            "aria-label": "Email address",
            "aria-describedby": "error-message",
            ref: inputRef,
            type: "email",
            name: "email",
            placeholder: "",
            className: "flex-1 text-white bg-black rounded-none border-b-2 py-2 placeholder-white mr-2 focus:outline-none"
          },
          void 0,
          !1,
          {
            fileName: "app/components/global/GlobalNewsletter.jsx",
            lineNumber: 44,
            columnNumber: 11
          },
          this
        ),
        /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(Button, { type: "submit", intent: "base", colour: "light", "aria-label": "Submit email", children: [
          state === "idle" && "Go on",
          state === "submitting" && "Subscribing...",
          state === "success" && "Subscribed!",
          state === "error" && "Error :("
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalNewsletter.jsx",
          lineNumber: 55,
          columnNumber: 11
        }, this)
      ] }, void 0, !0, {
        fileName: "app/components/global/GlobalNewsletter.jsx",
        lineNumber: 43,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/global/GlobalNewsletter.jsx",
      lineNumber: 41,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalNewsletter.jsx",
    lineNumber: 39,
    columnNumber: 5
  }, this);
}, GlobalNewsletter_default = GlobalNewsletter;

// app/components/global/GlobalFooter.jsx
var import_jsx_dev_runtime15 = __toESM(require_jsx_dev_runtime()), GlobalFooter = () => {
  let { footer } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(
    Layout,
    {
      tag: "footer",
      intent: "footer",
      className: cx(
        "bg-black text-white flex justify-between flex-col gap-8",
        "md:flex-row md:gap-0"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)("div", { className: cx("w-1/3 order-first flex flex-col", "lg:px-4"), children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(Text, { className: "text-white mb-[1em]", children: "Pages" }, void 0, !1, {
            fileName: "app/components/global/GlobalFooter.jsx",
            lineNumber: 21,
            columnNumber: 9
          }, this),
          footer.footerLinks.map((link3) => /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(
            Link3,
            {
              to: link3.slug,
              colour: "light",
              className: "w-max",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(Text, { children: link3.title }, void 0, !1, {
                fileName: "app/components/global/GlobalFooter.jsx",
                lineNumber: 30,
                columnNumber: 15
              }, this)
            },
            link3._id,
            !1,
            {
              fileName: "app/components/global/GlobalFooter.jsx",
              lineNumber: 24,
              columnNumber: 13
            },
            this
          ))
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalFooter.jsx",
          lineNumber: 20,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)("div", { className: cx("flex-1 flex gap-8 flex-col", "lg:flex-row lg:gap-0"), children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(
            "div",
            {
              className: cx(
                "max-w-prose flex-1 order-last",
                "lg:order-first lg:pr-4 lg:w-1/2"
              ),
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(PortableText2, { text: footer.footerText, intent: "footer" }, void 0, !1, {
                fileName: "app/components/global/GlobalFooter.jsx",
                lineNumber: 42,
                columnNumber: 11
              }, this)
            },
            void 0,
            !1,
            {
              fileName: "app/components/global/GlobalFooter.jsx",
              lineNumber: 36,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)("div", { className: cx("flex-1 order-first", "lg:order-last lg:pr-4"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(GlobalNewsletter_default, {}, void 0, !1, {
            fileName: "app/components/global/GlobalFooter.jsx",
            lineNumber: 45,
            columnNumber: 11
          }, this) }, void 0, !1, {
            fileName: "app/components/global/GlobalFooter.jsx",
            lineNumber: 44,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalFooter.jsx",
          lineNumber: 35,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/global/GlobalFooter.jsx",
      lineNumber: 12,
      columnNumber: 5
    },
    this
  );
}, GlobalFooter_default = GlobalFooter;

// app/components/global/GlobalHeader.jsx
var import_react46 = __toESM(require_react());

// node_modules/@headlessui/react/dist/hooks/use-iso-morphic-effect.js
var import_react23 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/env.js
var i3 = Object.defineProperty, d3 = (t9, e3, n4) => e3 in t9 ? i3(t9, e3, { enumerable: !0, configurable: !0, writable: !0, value: n4 }) : t9[e3] = n4, r2 = (t9, e3, n4) => (d3(t9, typeof e3 != "symbol" ? e3 + "" : e3, n4), n4), o = class {
  constructor() {
    r2(this, "current", this.detect()), r2(this, "handoffState", "pending"), r2(this, "currentId", 0);
  }
  set(e3) {
    this.current !== e3 && (this.handoffState = "pending", this.currentId = 0, this.current = e3);
  }
  reset() {
    this.set(this.detect());
  }
  nextId() {
    return ++this.currentId;
  }
  get isServer() {
    return this.current === "server";
  }
  get isClient() {
    return this.current === "client";
  }
  detect() {
    return typeof window > "u" || typeof document > "u" ? "server" : "client";
  }
  handoff() {
    this.handoffState === "pending" && (this.handoffState = "complete");
  }
  get isHandoffComplete() {
    return this.handoffState === "complete";
  }
}, s2 = new o();

// node_modules/@headlessui/react/dist/hooks/use-iso-morphic-effect.js
var l2 = (e3, f6) => {
  s2.isServer ? (0, import_react23.useEffect)(e3, f6) : (0, import_react23.useLayoutEffect)(e3, f6);
};

// node_modules/@headlessui/react/dist/hooks/use-latest-value.js
var import_react24 = __toESM(require_react(), 1);
function s3(e3) {
  let r7 = (0, import_react24.useRef)(e3);
  return l2(() => {
    r7.current = e3;
  }, [e3]), r7;
}

// node_modules/@headlessui/react/dist/hooks/use-disposables.js
var import_react25 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/micro-task.js
function t4(e3) {
  typeof queueMicrotask == "function" ? queueMicrotask(e3) : Promise.resolve().then(e3).catch((o8) => setTimeout(() => {
    throw o8;
  }));
}

// node_modules/@headlessui/react/dist/utils/disposables.js
function m2() {
  let a4 = [], i7 = [], r7 = { enqueue(e3) {
    i7.push(e3);
  }, addEventListener(e3, t9, n4, s10) {
    return e3.addEventListener(t9, n4, s10), r7.add(() => e3.removeEventListener(t9, n4, s10));
  }, requestAnimationFrame(...e3) {
    let t9 = requestAnimationFrame(...e3);
    return r7.add(() => cancelAnimationFrame(t9));
  }, nextFrame(...e3) {
    return r7.requestAnimationFrame(() => r7.requestAnimationFrame(...e3));
  }, setTimeout(...e3) {
    let t9 = setTimeout(...e3);
    return r7.add(() => clearTimeout(t9));
  }, microTask(...e3) {
    let t9 = { current: !0 };
    return t4(() => {
      t9.current && e3[0]();
    }), r7.add(() => {
      t9.current = !1;
    });
  }, add(e3) {
    return a4.push(e3), () => {
      let t9 = a4.indexOf(e3);
      if (t9 >= 0) {
        let [n4] = a4.splice(t9, 1);
        n4();
      }
    };
  }, dispose() {
    for (let e3 of a4.splice(0))
      e3();
  }, async workQueue() {
    for (let e3 of i7.splice(0))
      await e3();
  }, style(e3, t9, n4) {
    let s10 = e3.style.getPropertyValue(t9);
    return Object.assign(e3.style, { [t9]: n4 }), this.add(() => {
      Object.assign(e3.style, { [t9]: s10 });
    });
  } };
  return r7;
}

// node_modules/@headlessui/react/dist/hooks/use-disposables.js
function p3() {
  let [e3] = (0, import_react25.useState)(m2);
  return (0, import_react25.useEffect)(() => () => e3.dispose(), [e3]), e3;
}

// node_modules/@headlessui/react/dist/hooks/use-event.js
var import_react26 = __toESM(require_react(), 1);
var o3 = function(t9) {
  let e3 = s3(t9);
  return import_react26.default.useCallback((...r7) => e3.current(...r7), [e3]);
};

// node_modules/@headlessui/react/dist/hooks/use-id.js
var import_react28 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/hooks/use-server-handoff-complete.js
var import_react27 = __toESM(require_react(), 1);
function l3() {
  let [e3, f6] = (0, import_react27.useState)(s2.isHandoffComplete);
  return e3 && s2.isHandoffComplete === !1 && f6(!1), (0, import_react27.useEffect)(() => {
    e3 !== !0 && f6(!0);
  }, [e3]), (0, import_react27.useEffect)(() => s2.handoff(), []), e3;
}

// node_modules/@headlessui/react/dist/hooks/use-id.js
var o5, I = (o5 = import_react28.default.useId) != null ? o5 : function() {
  let n4 = l3(), [e3, u6] = import_react28.default.useState(n4 ? () => s2.nextId() : null);
  return l2(() => {
    e3 === null && u6(s2.nextId());
  }, [e3]), e3 != null ? "" + e3 : void 0;
};

// node_modules/@headlessui/react/dist/hooks/use-outside-click.js
var import_react30 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/match.js
function u4(r7, n4, ...a4) {
  if (r7 in n4) {
    let e3 = n4[r7];
    return typeof e3 == "function" ? e3(...a4) : e3;
  }
  let t9 = new Error(`Tried to handle "${r7}" but there is no handler defined. Only defined handlers are: ${Object.keys(n4).map((e3) => `"${e3}"`).join(", ")}.`);
  throw Error.captureStackTrace && Error.captureStackTrace(t9, u4), t9;
}

// node_modules/@headlessui/react/dist/utils/owner.js
function e(r7) {
  return s2.isServer ? null : r7 instanceof Node ? r7.ownerDocument : r7 != null && r7.hasOwnProperty("current") && r7.current instanceof Node ? r7.current.ownerDocument : document;
}

// node_modules/@headlessui/react/dist/utils/focus-management.js
var f3 = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map((e3) => `${e3}:not([tabindex='-1'])`).join(","), L2 = ((r7) => (r7[r7.First = 1] = "First", r7[r7.Previous = 2] = "Previous", r7[r7.Next = 4] = "Next", r7[r7.Last = 8] = "Last", r7[r7.WrapAround = 16] = "WrapAround", r7[r7.NoScroll = 32] = "NoScroll", r7))(L2 || {}), N2 = ((o8) => (o8[o8.Error = 0] = "Error", o8[o8.Overflow = 1] = "Overflow", o8[o8.Success = 2] = "Success", o8[o8.Underflow = 3] = "Underflow", o8))(N2 || {}), T2 = ((n4) => (n4[n4.Previous = -1] = "Previous", n4[n4.Next = 1] = "Next", n4))(T2 || {});
function E(e3 = document.body) {
  return e3 == null ? [] : Array.from(e3.querySelectorAll(f3)).sort((t9, n4) => Math.sign((t9.tabIndex || Number.MAX_SAFE_INTEGER) - (n4.tabIndex || Number.MAX_SAFE_INTEGER)));
}
var F3 = ((n4) => (n4[n4.Strict = 0] = "Strict", n4[n4.Loose = 1] = "Loose", n4))(F3 || {});
function h2(e3, t9 = 0) {
  var n4;
  return e3 === ((n4 = e(e3)) == null ? void 0 : n4.body) ? !1 : u4(t9, { [0]() {
    return e3.matches(f3);
  }, [1]() {
    let l7 = e3;
    for (; l7 !== null; ) {
      if (l7.matches(f3))
        return !0;
      l7 = l7.parentElement;
    }
    return !1;
  } });
}
var H2 = ["textarea", "input"].join(",");
function w(e3) {
  var t9, n4;
  return (n4 = (t9 = e3 == null ? void 0 : e3.matches) == null ? void 0 : t9.call(e3, H2)) != null ? n4 : !1;
}
function A3(e3, t9 = (n4) => n4) {
  return e3.slice().sort((n4, l7) => {
    let o8 = t9(n4), i7 = t9(l7);
    if (o8 === null || i7 === null)
      return 0;
    let r7 = o8.compareDocumentPosition(i7);
    return r7 & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : r7 & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;
  });
}
function I2(e3, t9, { sorted: n4 = !0, relativeTo: l7 = null, skipElements: o8 = [] } = {}) {
  let i7 = Array.isArray(e3) ? e3.length > 0 ? e3[0].ownerDocument : document : e3.ownerDocument, r7 = Array.isArray(e3) ? n4 ? A3(e3) : e3 : E(e3);
  o8.length > 0 && r7.length > 1 && (r7 = r7.filter((s10) => !o8.includes(s10))), l7 = l7 ?? i7.activeElement;
  let d9 = (() => {
    if (t9 & 5)
      return 1;
    if (t9 & 10)
      return -1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), x2 = (() => {
    if (t9 & 1)
      return 0;
    if (t9 & 2)
      return Math.max(0, r7.indexOf(l7)) - 1;
    if (t9 & 4)
      return Math.max(0, r7.indexOf(l7)) + 1;
    if (t9 & 8)
      return r7.length - 1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), p5 = t9 & 32 ? { preventScroll: !0 } : {}, c5 = 0, a4 = r7.length, u6;
  do {
    if (c5 >= a4 || c5 + a4 <= 0)
      return 0;
    let s10 = x2 + c5;
    if (t9 & 16)
      s10 = (s10 + a4) % a4;
    else {
      if (s10 < 0)
        return 3;
      if (s10 >= a4)
        return 1;
    }
    u6 = r7[s10], u6 == null || u6.focus(p5), c5 += d9;
  } while (u6 !== i7.activeElement);
  return t9 & 6 && w(u6) && u6.select(), u6.hasAttribute("tabindex") || u6.setAttribute("tabindex", "0"), 2;
}

// node_modules/@headlessui/react/dist/hooks/use-document-event.js
var import_react29 = __toESM(require_react(), 1);
function d4(e3, r7, n4) {
  let o8 = s3(r7);
  (0, import_react29.useEffect)(() => {
    function t9(u6) {
      o8.current(u6);
    }
    return document.addEventListener(e3, t9, n4), () => document.removeEventListener(e3, t9, n4);
  }, [e3, n4]);
}

// node_modules/@headlessui/react/dist/hooks/use-outside-click.js
function L3(m6, E4, c5 = !0) {
  let i7 = (0, import_react30.useRef)(!1);
  (0, import_react30.useEffect)(() => {
    requestAnimationFrame(() => {
      i7.current = c5;
    });
  }, [c5]);
  function f6(e3, o8) {
    if (!i7.current || e3.defaultPrevented)
      return;
    let l7 = function r7(t9) {
      return typeof t9 == "function" ? r7(t9()) : Array.isArray(t9) || t9 instanceof Set ? t9 : [t9];
    }(m6), n4 = o8(e3);
    if (n4 !== null && !!n4.getRootNode().contains(n4)) {
      for (let r7 of l7) {
        if (r7 === null)
          continue;
        let t9 = r7 instanceof HTMLElement ? r7 : r7.current;
        if (t9 != null && t9.contains(n4) || e3.composed && e3.composedPath().includes(t9))
          return;
      }
      return !h2(n4, F3.Loose) && n4.tabIndex !== -1 && e3.preventDefault(), E4(e3, n4);
    }
  }
  let u6 = (0, import_react30.useRef)(null);
  d4("mousedown", (e3) => {
    var o8, l7;
    i7.current && (u6.current = ((l7 = (o8 = e3.composedPath) == null ? void 0 : o8.call(e3)) == null ? void 0 : l7[0]) || e3.target);
  }, !0), d4("click", (e3) => {
    !u6.current || (f6(e3, () => u6.current), u6.current = null);
  }, !0), d4("blur", (e3) => f6(e3, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), !0);
}

// node_modules/@headlessui/react/dist/hooks/use-resolve-button-type.js
var import_react31 = __toESM(require_react(), 1);
function i4(t9) {
  var n4;
  if (t9.type)
    return t9.type;
  let e3 = (n4 = t9.as) != null ? n4 : "button";
  if (typeof e3 == "string" && e3.toLowerCase() === "button")
    return "button";
}
function s6(t9, e3) {
  let [n4, u6] = (0, import_react31.useState)(() => i4(t9));
  return l2(() => {
    u6(i4(t9));
  }, [t9.type, t9.as]), l2(() => {
    n4 || !e3.current || e3.current instanceof HTMLButtonElement && !e3.current.hasAttribute("type") && u6("button");
  }, [n4, e3]), n4;
}

// node_modules/@headlessui/react/dist/hooks/use-sync-refs.js
var import_react32 = __toESM(require_react(), 1);
var u5 = Symbol();
function T3(t9, n4 = !0) {
  return Object.assign(t9, { [u5]: n4 });
}
function y(...t9) {
  let n4 = (0, import_react32.useRef)(t9);
  (0, import_react32.useEffect)(() => {
    n4.current = t9;
  }, [t9]);
  let c5 = o3((e3) => {
    for (let o8 of n4.current)
      o8 != null && (typeof o8 == "function" ? o8(e3) : o8.current = e3);
  });
  return t9.every((e3) => e3 == null || (e3 == null ? void 0 : e3[u5])) ? void 0 : c5;
}

// node_modules/@headlessui/react/dist/utils/render.js
var import_react33 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/class-names.js
function e2(...n4) {
  return n4.filter(Boolean).join(" ");
}

// node_modules/@headlessui/react/dist/utils/render.js
var j2 = ((a4) => (a4[a4.None = 0] = "None", a4[a4.RenderStrategy = 1] = "RenderStrategy", a4[a4.Static = 2] = "Static", a4))(j2 || {}), w2 = ((e3) => (e3[e3.Unmount = 0] = "Unmount", e3[e3.Hidden = 1] = "Hidden", e3))(w2 || {});
function X({ ourProps: r7, theirProps: t9, slot: e3, defaultTag: a4, features: s10, visible: n4 = !0, name: l7 }) {
  let o8 = h3(t9, r7);
  if (n4)
    return m4(o8, e3, a4, l7);
  let u6 = s10 ?? 0;
  if (u6 & 2) {
    let { static: i7 = !1, ...d9 } = o8;
    if (i7)
      return m4(d9, e3, a4, l7);
  }
  if (u6 & 1) {
    let { unmount: i7 = !0, ...d9 } = o8;
    return u4(i7 ? 0 : 1, { [0]() {
      return null;
    }, [1]() {
      return m4({ ...d9, hidden: !0, style: { display: "none" } }, e3, a4, l7);
    } });
  }
  return m4(o8, e3, a4, l7);
}
function m4(r7, t9 = {}, e3, a4) {
  var y2;
  let { as: s10 = e3, children: n4, refName: l7 = "ref", ...o8 } = T4(r7, ["unmount", "static"]), u6 = r7.ref !== void 0 ? { [l7]: r7.ref } : {}, i7 = typeof n4 == "function" ? n4(t9) : n4;
  o8.className && typeof o8.className == "function" && (o8.className = o8.className(t9));
  let d9 = {};
  if (t9) {
    let f6 = !1, c5 = [];
    for (let [p5, F5] of Object.entries(t9))
      typeof F5 == "boolean" && (f6 = !0), F5 === !0 && c5.push(p5);
    f6 && (d9["data-headlessui-state"] = c5.join(" "));
  }
  if (s10 === import_react33.Fragment && Object.keys(P2(o8)).length > 0) {
    if (!(0, import_react33.isValidElement)(i7) || Array.isArray(i7) && i7.length > 1)
      throw new Error(['Passing props on "Fragment"!', "", `The current component <${a4} /> is rendering a "Fragment".`, "However we need to passthrough the following props:", Object.keys(o8).map((p5) => `  - ${p5}`).join(`
`), "", "You can apply a few solutions:", ['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".', "Render a single element as the child so that we can forward the props onto that element."].map((p5) => `  - ${p5}`).join(`
`)].join(`
`));
    let f6 = e2((y2 = i7.props) == null ? void 0 : y2.className, o8.className), c5 = f6 ? { className: f6 } : {};
    return (0, import_react33.cloneElement)(i7, Object.assign({}, h3(i7.props, P2(T4(o8, ["ref"]))), d9, u6, O(i7.ref, u6.ref), c5));
  }
  return (0, import_react33.createElement)(s10, Object.assign({}, T4(o8, ["ref"]), s10 !== import_react33.Fragment && u6, s10 !== import_react33.Fragment && d9), i7);
}
function O(...r7) {
  return { ref: r7.every((t9) => t9 == null) ? void 0 : (t9) => {
    for (let e3 of r7)
      e3 != null && (typeof e3 == "function" ? e3(t9) : e3.current = t9);
  } };
}
function h3(...r7) {
  var a4;
  if (r7.length === 0)
    return {};
  if (r7.length === 1)
    return r7[0];
  let t9 = {}, e3 = {};
  for (let s10 of r7)
    for (let n4 in s10)
      n4.startsWith("on") && typeof s10[n4] == "function" ? ((a4 = e3[n4]) != null || (e3[n4] = []), e3[n4].push(s10[n4])) : t9[n4] = s10[n4];
  if (t9.disabled || t9["aria-disabled"])
    return Object.assign(t9, Object.fromEntries(Object.keys(e3).map((s10) => [s10, void 0])));
  for (let s10 in e3)
    Object.assign(t9, { [s10](n4, ...l7) {
      let o8 = e3[s10];
      for (let u6 of o8) {
        if ((n4 instanceof Event || (n4 == null ? void 0 : n4.nativeEvent) instanceof Event) && n4.defaultPrevented)
          return;
        u6(n4, ...l7);
      }
    } });
  return t9;
}
function V2(r7) {
  var t9;
  return Object.assign((0, import_react33.forwardRef)(r7), { displayName: (t9 = r7.displayName) != null ? t9 : r7.name });
}
function P2(r7) {
  let t9 = Object.assign({}, r7);
  for (let e3 in t9)
    t9[e3] === void 0 && delete t9[e3];
  return t9;
}
function T4(r7, t9 = []) {
  let e3 = Object.assign({}, r7);
  for (let a4 of t9)
    a4 in e3 && delete e3[a4];
  return e3;
}

// node_modules/@headlessui/react/dist/utils/bugs.js
function r4(n4) {
  let e3 = n4.parentElement, l7 = null;
  for (; e3 && !(e3 instanceof HTMLFieldSetElement); )
    e3 instanceof HTMLLegendElement && (l7 = e3), e3 = e3.parentElement;
  let t9 = (e3 == null ? void 0 : e3.getAttribute("disabled")) === "";
  return t9 && i6(l7) ? !1 : t9;
}
function i6(n4) {
  if (!n4)
    return !1;
  let e3 = n4.previousElementSibling;
  for (; e3 !== null; ) {
    if (e3 instanceof HTMLLegendElement)
      return !1;
    e3 = e3.previousElementSibling;
  }
  return !0;
}

// node_modules/@headlessui/react/dist/internal/hidden.js
var a3 = "div", s7 = ((e3) => (e3[e3.None = 1] = "None", e3[e3.Focusable = 2] = "Focusable", e3[e3.Hidden = 4] = "Hidden", e3))(s7 || {}), h4 = V2(function(t9, o8) {
  let { features: e3 = 1, ...r7 } = t9, d9 = { ref: o8, "aria-hidden": (e3 & 2) === 2 ? !0 : void 0, style: { position: "fixed", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0", ...(e3 & 4) === 4 && (e3 & 2) !== 2 && { display: "none" } } };
  return X({ ourProps: d9, theirProps: r7, slot: {}, defaultTag: a3, name: "Hidden" });
});

// node_modules/@headlessui/react/dist/internal/open-closed.js
var import_react34 = __toESM(require_react(), 1), n = (0, import_react34.createContext)(null);
n.displayName = "OpenClosedContext";
var d6 = ((e3) => (e3[e3.Open = 1] = "Open", e3[e3.Closed = 2] = "Closed", e3[e3.Closing = 4] = "Closing", e3[e3.Opening = 8] = "Opening", e3))(d6 || {});
function C() {
  return (0, import_react34.useContext)(n);
}
function c3({ value: o8, children: r7 }) {
  return import_react34.default.createElement(n.Provider, { value: o8 }, r7);
}

// node_modules/@headlessui/react/dist/components/keyboard.js
var o7 = ((r7) => (r7.Space = " ", r7.Enter = "Enter", r7.Escape = "Escape", r7.Backspace = "Backspace", r7.Delete = "Delete", r7.ArrowLeft = "ArrowLeft", r7.ArrowUp = "ArrowUp", r7.ArrowRight = "ArrowRight", r7.ArrowDown = "ArrowDown", r7.Home = "Home", r7.End = "End", r7.PageUp = "PageUp", r7.PageDown = "PageDown", r7.Tab = "Tab", r7))(o7 || {});

// node_modules/@headlessui/react/dist/hooks/use-tab-direction.js
var import_react36 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/hooks/use-window-event.js
var import_react35 = __toESM(require_react(), 1);
function s8(e3, r7, n4) {
  let o8 = s3(r7);
  (0, import_react35.useEffect)(() => {
    function t9(i7) {
      o8.current(i7);
    }
    return window.addEventListener(e3, t9, n4), () => window.removeEventListener(e3, t9, n4);
  }, [e3, n4]);
}

// node_modules/@headlessui/react/dist/hooks/use-tab-direction.js
var s9 = ((r7) => (r7[r7.Forwards = 0] = "Forwards", r7[r7.Backwards = 1] = "Backwards", r7))(s9 || {});
function n2() {
  let e3 = (0, import_react36.useRef)(0);
  return s8("keydown", (o8) => {
    o8.key === "Tab" && (e3.current = o8.shiftKey ? 1 : 0);
  }, !0), e3;
}

// node_modules/@headlessui/react/dist/hooks/use-is-mounted.js
var import_react37 = __toESM(require_react(), 1);
function f4() {
  let e3 = (0, import_react37.useRef)(!1);
  return l2(() => (e3.current = !0, () => {
    e3.current = !1;
  }), []), e3;
}

// node_modules/@headlessui/react/dist/hooks/use-owner.js
var import_react38 = __toESM(require_react(), 1);
function n3(...e3) {
  return (0, import_react38.useMemo)(() => e(...e3), [...e3]);
}

// node_modules/@headlessui/react/dist/hooks/use-event-listener.js
var import_react39 = __toESM(require_react(), 1);
function E3(n4, e3, a4, t9) {
  let i7 = s3(a4);
  (0, import_react39.useEffect)(() => {
    n4 = n4 ?? window;
    function r7(o8) {
      i7.current(o8);
    }
    return n4.addEventListener(e3, r7, t9), () => n4.removeEventListener(e3, r7, t9);
  }, [n4, e3, t9]);
}

// node_modules/@headlessui/react/dist/components/popover/popover.js
var import_react40 = __toESM(require_react(), 1);
var Me = ((p5) => (p5[p5.Open = 0] = "Open", p5[p5.Closed = 1] = "Closed", p5))(Me || {}), Le2 = ((t9) => (t9[t9.TogglePopover = 0] = "TogglePopover", t9[t9.ClosePopover = 1] = "ClosePopover", t9[t9.SetButton = 2] = "SetButton", t9[t9.SetButtonId = 3] = "SetButtonId", t9[t9.SetPanel = 4] = "SetPanel", t9[t9.SetPanelId = 5] = "SetPanelId", t9))(Le2 || {}), Fe = { [0]: (n4) => ({ ...n4, popoverState: u4(n4.popoverState, { [0]: 1, [1]: 0 }) }), [1](n4) {
  return n4.popoverState === 1 ? n4 : { ...n4, popoverState: 1 };
}, [2](n4, r7) {
  return n4.button === r7.button ? n4 : { ...n4, button: r7.button };
}, [3](n4, r7) {
  return n4.buttonId === r7.buttonId ? n4 : { ...n4, buttonId: r7.buttonId };
}, [4](n4, r7) {
  return n4.panel === r7.panel ? n4 : { ...n4, panel: r7.panel };
}, [5](n4, r7) {
  return n4.panelId === r7.panelId ? n4 : { ...n4, panelId: r7.panelId };
} }, le2 = (0, import_react40.createContext)(null);
le2.displayName = "PopoverContext";
function Z(n4) {
  let r7 = (0, import_react40.useContext)(le2);
  if (r7 === null) {
    let p5 = new Error(`<${n4} /> is missing a parent <Popover /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(p5, Z), p5;
  }
  return r7;
}
var ae = (0, import_react40.createContext)(null);
ae.displayName = "PopoverAPIContext";
function ue2(n4) {
  let r7 = (0, import_react40.useContext)(ae);
  if (r7 === null) {
    let p5 = new Error(`<${n4} /> is missing a parent <Popover /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(p5, ue2), p5;
  }
  return r7;
}
var se2 = (0, import_react40.createContext)(null);
se2.displayName = "PopoverGroupContext";
function Te2() {
  return (0, import_react40.useContext)(se2);
}
var pe2 = (0, import_react40.createContext)(null);
pe2.displayName = "PopoverPanelContext";
function he2() {
  return (0, import_react40.useContext)(pe2);
}
function Be2(n4, r7) {
  return u4(r7.type, Fe, n4, r7);
}
var xe2 = "div", De = V2(function(r7, p5) {
  var x2;
  let O2 = (0, import_react40.useRef)(null), R2 = y(p5, T3((e3) => {
    O2.current = e3;
  })), C2 = (0, import_react40.useRef)([]), t9 = (0, import_react40.useReducer)(Be2, { popoverState: 1, buttons: C2, button: null, buttonId: null, panel: null, panelId: null, beforePanelSentinel: (0, import_react40.createRef)(), afterPanelSentinel: (0, import_react40.createRef)() }), [{ popoverState: o8, button: a4, buttonId: v3, panel: c5, panelId: M4, beforePanelSentinel: T6, afterPanelSentinel: d9 }, i7] = t9, u6 = n3((x2 = O2.current) != null ? x2 : a4), f6 = (0, import_react40.useMemo)(() => {
    if (!a4 || !c5)
      return !1;
    for (let K3 of document.querySelectorAll("body > *"))
      if (Number(K3 == null ? void 0 : K3.contains(a4)) ^ Number(K3 == null ? void 0 : K3.contains(c5)))
        return !0;
    let e3 = E(), l7 = e3.indexOf(a4), A4 = (l7 + e3.length - 1) % e3.length, b4 = (l7 + 1) % e3.length, G2 = e3[A4], me2 = e3[b4];
    return !c5.contains(G2) && !c5.contains(me2);
  }, [a4, c5]), g6 = s3(v3), y2 = s3(M4), L4 = (0, import_react40.useMemo)(() => ({ buttonId: g6, panelId: y2, close: () => i7({ type: 1 }) }), [g6, y2, i7]), I4 = Te2(), F5 = I4 == null ? void 0 : I4.registerPopover, V3 = o3(() => {
    var e3;
    return (e3 = I4 == null ? void 0 : I4.isFocusWithinPopoverGroup()) != null ? e3 : (u6 == null ? void 0 : u6.activeElement) && ((a4 == null ? void 0 : a4.contains(u6.activeElement)) || (c5 == null ? void 0 : c5.contains(u6.activeElement)));
  });
  (0, import_react40.useEffect)(() => F5 == null ? void 0 : F5(L4), [F5, L4]), E3(u6 == null ? void 0 : u6.defaultView, "focus", (e3) => {
    var l7, A4, b4, G2;
    o8 === 0 && (V3() || !a4 || !c5 || e3.target !== window && ((A4 = (l7 = T6.current) == null ? void 0 : l7.contains) != null && A4.call(l7, e3.target) || (G2 = (b4 = d9.current) == null ? void 0 : b4.contains) != null && G2.call(b4, e3.target) || i7({ type: 1 })));
  }, !0), L3([a4, c5], (e3, l7) => {
    i7({ type: 1 }), h2(l7, F3.Loose) || (e3.preventDefault(), a4 == null || a4.focus());
  }, o8 === 0);
  let h5 = o3((e3) => {
    i7({ type: 1 });
    let l7 = (() => e3 ? e3 instanceof HTMLElement ? e3 : "current" in e3 && e3.current instanceof HTMLElement ? e3.current : a4 : a4)();
    l7 == null || l7.focus();
  }), s10 = (0, import_react40.useMemo)(() => ({ close: h5, isPortalled: f6 }), [h5, f6]), m6 = (0, import_react40.useMemo)(() => ({ open: o8 === 0, close: h5 }), [o8, h5]), E4 = r7, P3 = { ref: R2 };
  return import_react40.default.createElement(le2.Provider, { value: t9 }, import_react40.default.createElement(ae.Provider, { value: s10 }, import_react40.default.createElement(c3, { value: u4(o8, { [0]: d6.Open, [1]: d6.Closed }) }, X({ ourProps: P3, theirProps: E4, slot: m6, defaultTag: xe2, name: "Popover" }))));
}), He2 = "button", ke = V2(function(r7, p5) {
  let O2 = I(), { id: R2 = `headlessui-popover-button-${O2}`, ...C2 } = r7, [t9, o8] = Z("Popover.Button"), { isPortalled: a4 } = ue2("Popover.Button"), v3 = (0, import_react40.useRef)(null), c5 = `headlessui-focus-sentinel-${I()}`, M4 = Te2(), T6 = M4 == null ? void 0 : M4.closeOthers, i7 = he2() !== null;
  (0, import_react40.useEffect)(() => {
    if (!i7)
      return o8({ type: 3, buttonId: R2 }), () => {
        o8({ type: 3, buttonId: null });
      };
  }, [i7, R2, o8]);
  let [u6] = (0, import_react40.useState)(() => Symbol()), f6 = y(v3, p5, i7 ? null : (e3) => {
    if (e3)
      t9.buttons.current.push(u6);
    else {
      let l7 = t9.buttons.current.indexOf(u6);
      l7 !== -1 && t9.buttons.current.splice(l7, 1);
    }
    t9.buttons.current.length > 1 && console.warn("You are already using a <Popover.Button /> but only 1 <Popover.Button /> is supported."), e3 && o8({ type: 2, button: e3 });
  }), g6 = y(v3, p5), y2 = n3(v3), L4 = o3((e3) => {
    var l7, A4, b4;
    if (i7) {
      if (t9.popoverState === 1)
        return;
      switch (e3.key) {
        case o7.Space:
        case o7.Enter:
          e3.preventDefault(), (A4 = (l7 = e3.target).click) == null || A4.call(l7), o8({ type: 1 }), (b4 = t9.button) == null || b4.focus();
          break;
      }
    } else
      switch (e3.key) {
        case o7.Space:
        case o7.Enter:
          e3.preventDefault(), e3.stopPropagation(), t9.popoverState === 1 && (T6 == null || T6(t9.buttonId)), o8({ type: 0 });
          break;
        case o7.Escape:
          if (t9.popoverState !== 0)
            return T6 == null ? void 0 : T6(t9.buttonId);
          if (!v3.current || (y2 == null ? void 0 : y2.activeElement) && !v3.current.contains(y2.activeElement))
            return;
          e3.preventDefault(), e3.stopPropagation(), o8({ type: 1 });
          break;
      }
  }), I4 = o3((e3) => {
    i7 || e3.key === o7.Space && e3.preventDefault();
  }), F5 = o3((e3) => {
    var l7, A4;
    r4(e3.currentTarget) || r7.disabled || (i7 ? (o8({ type: 1 }), (l7 = t9.button) == null || l7.focus()) : (e3.preventDefault(), e3.stopPropagation(), t9.popoverState === 1 && (T6 == null || T6(t9.buttonId)), o8({ type: 0 }), (A4 = t9.button) == null || A4.focus()));
  }), V3 = o3((e3) => {
    e3.preventDefault(), e3.stopPropagation();
  }), h5 = t9.popoverState === 0, s10 = (0, import_react40.useMemo)(() => ({ open: h5 }), [h5]), m6 = s6(r7, v3), E4 = i7 ? { ref: g6, type: m6, onKeyDown: L4, onClick: F5 } : { ref: f6, id: t9.buttonId, type: m6, "aria-expanded": r7.disabled ? void 0 : t9.popoverState === 0, "aria-controls": t9.panel ? t9.panelId : void 0, onKeyDown: L4, onKeyUp: I4, onClick: F5, onMouseDown: V3 }, P3 = n2(), x2 = o3(() => {
    let e3 = t9.panel;
    if (!e3)
      return;
    function l7() {
      u4(P3.current, { [s9.Forwards]: () => I2(e3, L2.First), [s9.Backwards]: () => I2(e3, L2.Last) }) === N2.Error && I2(E().filter((b4) => b4.dataset.headlessuiFocusGuard !== "true"), u4(P3.current, { [s9.Forwards]: L2.Next, [s9.Backwards]: L2.Previous }), { relativeTo: t9.button });
    }
    l7();
  });
  return import_react40.default.createElement(import_react40.default.Fragment, null, X({ ourProps: E4, theirProps: C2, slot: s10, defaultTag: He2, name: "Popover.Button" }), h5 && !i7 && a4 && import_react40.default.createElement(h4, { id: c5, features: s7.Focusable, "data-headlessui-focus-guard": !0, as: "button", type: "button", onFocus: x2 }));
}), Ge2 = "div", we2 = j2.RenderStrategy | j2.Static, _e2 = V2(function(r7, p5) {
  let O2 = I(), { id: R2 = `headlessui-popover-overlay-${O2}`, ...C2 } = r7, [{ popoverState: t9 }, o8] = Z("Popover.Overlay"), a4 = y(p5), v3 = C(), c5 = (() => v3 !== null ? (v3 & d6.Open) === d6.Open : t9 === 0)(), M4 = o3((i7) => {
    if (r4(i7.currentTarget))
      return i7.preventDefault();
    o8({ type: 1 });
  }), T6 = (0, import_react40.useMemo)(() => ({ open: t9 === 0 }), [t9]);
  return X({ ourProps: { ref: a4, id: R2, "aria-hidden": !0, onClick: M4 }, theirProps: C2, slot: T6, defaultTag: Ge2, features: we2, visible: c5, name: "Popover.Overlay" });
}), Ne = "div", Ke2 = j2.RenderStrategy | j2.Static, Ue2 = V2(function(r7, p5) {
  let O2 = I(), { id: R2 = `headlessui-popover-panel-${O2}`, focus: C2 = !1, ...t9 } = r7, [o8, a4] = Z("Popover.Panel"), { close: v3, isPortalled: c5 } = ue2("Popover.Panel"), M4 = `headlessui-focus-sentinel-before-${I()}`, T6 = `headlessui-focus-sentinel-after-${I()}`, d9 = (0, import_react40.useRef)(null), i7 = y(d9, p5, (s10) => {
    a4({ type: 4, panel: s10 });
  }), u6 = n3(d9);
  l2(() => (a4({ type: 5, panelId: R2 }), () => {
    a4({ type: 5, panelId: null });
  }), [R2, a4]);
  let f6 = C(), g6 = (() => f6 !== null ? (f6 & d6.Open) === d6.Open : o8.popoverState === 0)(), y2 = o3((s10) => {
    var m6;
    switch (s10.key) {
      case o7.Escape:
        if (o8.popoverState !== 0 || !d9.current || (u6 == null ? void 0 : u6.activeElement) && !d9.current.contains(u6.activeElement))
          return;
        s10.preventDefault(), s10.stopPropagation(), a4({ type: 1 }), (m6 = o8.button) == null || m6.focus();
        break;
    }
  });
  (0, import_react40.useEffect)(() => {
    var s10;
    r7.static || o8.popoverState === 1 && ((s10 = r7.unmount) != null ? s10 : !0) && a4({ type: 4, panel: null });
  }, [o8.popoverState, r7.unmount, r7.static, a4]), (0, import_react40.useEffect)(() => {
    if (!C2 || o8.popoverState !== 0 || !d9.current)
      return;
    let s10 = u6 == null ? void 0 : u6.activeElement;
    d9.current.contains(s10) || I2(d9.current, L2.First);
  }, [C2, d9, o8.popoverState]);
  let L4 = (0, import_react40.useMemo)(() => ({ open: o8.popoverState === 0, close: v3 }), [o8, v3]), I4 = { ref: i7, id: R2, onKeyDown: y2, onBlur: C2 && o8.popoverState === 0 ? (s10) => {
    var E4, P3, x2, e3, l7;
    let m6 = s10.relatedTarget;
    !m6 || !d9.current || (E4 = d9.current) != null && E4.contains(m6) || (a4({ type: 1 }), (((x2 = (P3 = o8.beforePanelSentinel.current) == null ? void 0 : P3.contains) == null ? void 0 : x2.call(P3, m6)) || ((l7 = (e3 = o8.afterPanelSentinel.current) == null ? void 0 : e3.contains) == null ? void 0 : l7.call(e3, m6))) && m6.focus({ preventScroll: !0 }));
  } : void 0, tabIndex: -1 }, F5 = n2(), V3 = o3(() => {
    let s10 = d9.current;
    if (!s10)
      return;
    function m6() {
      u4(F5.current, { [s9.Forwards]: () => {
        var P3;
        I2(s10, L2.First) === N2.Error && ((P3 = o8.afterPanelSentinel.current) == null || P3.focus());
      }, [s9.Backwards]: () => {
        var E4;
        (E4 = o8.button) == null || E4.focus({ preventScroll: !0 });
      } });
    }
    m6();
  }), h5 = o3(() => {
    let s10 = d9.current;
    if (!s10)
      return;
    function m6() {
      u4(F5.current, { [s9.Forwards]: () => {
        var A4;
        if (!o8.button)
          return;
        let E4 = E(), P3 = E4.indexOf(o8.button), x2 = E4.slice(0, P3 + 1), l7 = [...E4.slice(P3 + 1), ...x2];
        for (let b4 of l7.slice())
          if (b4.dataset.headlessuiFocusGuard === "true" || ((A4 = o8.panel) == null ? void 0 : A4.contains(b4))) {
            let G2 = l7.indexOf(b4);
            G2 !== -1 && l7.splice(G2, 1);
          }
        I2(l7, L2.First, { sorted: !1 });
      }, [s9.Backwards]: () => {
        var P3;
        I2(s10, L2.Previous) === N2.Error && ((P3 = o8.button) == null || P3.focus());
      } });
    }
    m6();
  });
  return import_react40.default.createElement(pe2.Provider, { value: R2 }, g6 && c5 && import_react40.default.createElement(h4, { id: M4, ref: o8.beforePanelSentinel, features: s7.Focusable, "data-headlessui-focus-guard": !0, as: "button", type: "button", onFocus: V3 }), X({ ourProps: I4, theirProps: t9, slot: L4, defaultTag: Ne, features: Ke2, visible: g6, name: "Popover.Panel" }), g6 && c5 && import_react40.default.createElement(h4, { id: T6, ref: o8.afterPanelSentinel, features: s7.Focusable, "data-headlessui-focus-guard": !0, as: "button", type: "button", onFocus: h5 }));
}), We = "div", je = V2(function(r7, p5) {
  let O2 = (0, import_react40.useRef)(null), R2 = y(O2, p5), [C2, t9] = (0, import_react40.useState)([]), o8 = o3((u6) => {
    t9((f6) => {
      let g6 = f6.indexOf(u6);
      if (g6 !== -1) {
        let y2 = f6.slice();
        return y2.splice(g6, 1), y2;
      }
      return f6;
    });
  }), a4 = o3((u6) => (t9((f6) => [...f6, u6]), () => o8(u6))), v3 = o3(() => {
    var g6;
    let u6 = e(O2);
    if (!u6)
      return !1;
    let f6 = u6.activeElement;
    return (g6 = O2.current) != null && g6.contains(f6) ? !0 : C2.some((y2) => {
      var L4, I4;
      return ((L4 = u6.getElementById(y2.buttonId.current)) == null ? void 0 : L4.contains(f6)) || ((I4 = u6.getElementById(y2.panelId.current)) == null ? void 0 : I4.contains(f6));
    });
  }), c5 = o3((u6) => {
    for (let f6 of C2)
      f6.buttonId.current !== u6 && f6.close();
  }), M4 = (0, import_react40.useMemo)(() => ({ registerPopover: a4, unregisterPopover: o8, isFocusWithinPopoverGroup: v3, closeOthers: c5 }), [a4, o8, v3, c5]), T6 = (0, import_react40.useMemo)(() => ({}), []), d9 = r7, i7 = { ref: R2 };
  return import_react40.default.createElement(se2.Provider, { value: M4 }, X({ ourProps: i7, theirProps: d9, slot: T6, defaultTag: We, name: "Popover.Group" }));
}), Rt = Object.assign(De, { Button: ke, Overlay: _e2, Panel: Ue2, Group: je });

// node_modules/@headlessui/react/dist/hooks/use-flags.js
var import_react41 = __toESM(require_react(), 1);
function b3(g6 = 0) {
  let [t9, l7] = (0, import_react41.useState)(g6), u6 = (0, import_react41.useCallback)((e3) => l7((a4) => a4 | e3), [t9]), n4 = (0, import_react41.useCallback)((e3) => Boolean(t9 & e3), [t9]), o8 = (0, import_react41.useCallback)((e3) => l7((a4) => a4 & ~e3), [l7]), s10 = (0, import_react41.useCallback)((e3) => l7((a4) => a4 ^ e3), [l7]);
  return { flags: t9, addFlag: u6, hasFlag: n4, removeFlag: o8, toggleFlag: s10 };
}

// node_modules/@headlessui/react/dist/components/transitions/transition.js
var import_react42 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/once.js
function l6(r7) {
  let e3 = { called: !1 };
  return (...t9) => {
    if (!e3.called)
      return e3.called = !0, r7(...t9);
  };
}

// node_modules/@headlessui/react/dist/components/transitions/utils/transition.js
function v2(t9, ...e3) {
  t9 && e3.length > 0 && t9.classList.add(...e3);
}
function f5(t9, ...e3) {
  t9 && e3.length > 0 && t9.classList.remove(...e3);
}
function F4(t9, e3) {
  let n4 = m2();
  if (!t9)
    return n4.dispose;
  let { transitionDuration: a4, transitionDelay: i7 } = getComputedStyle(t9), [m6, d9] = [a4, i7].map((o8) => {
    let [r7 = 0] = o8.split(",").filter(Boolean).map((l7) => l7.includes("ms") ? parseFloat(l7) : parseFloat(l7) * 1e3).sort((l7, g6) => g6 - l7);
    return r7;
  });
  if (m6 + d9 !== 0) {
    let o8 = n4.addEventListener(t9, "transitionend", (r7) => {
      r7.target === r7.currentTarget && (e3(), o8());
    });
  } else
    e3();
  return n4.add(() => e3()), n4.dispose;
}
function M2(t9, e3, n4, a4) {
  let i7 = n4 ? "enter" : "leave", m6 = m2(), d9 = a4 !== void 0 ? l6(a4) : () => {
  };
  i7 === "enter" && (t9.removeAttribute("hidden"), t9.style.display = "");
  let u6 = u4(i7, { enter: () => e3.enter, leave: () => e3.leave }), o8 = u4(i7, { enter: () => e3.enterTo, leave: () => e3.leaveTo }), r7 = u4(i7, { enter: () => e3.enterFrom, leave: () => e3.leaveFrom });
  return f5(t9, ...e3.enter, ...e3.enterTo, ...e3.enterFrom, ...e3.leave, ...e3.leaveFrom, ...e3.leaveTo, ...e3.entered), v2(t9, ...u6, ...r7), m6.nextFrame(() => {
    f5(t9, ...r7), v2(t9, ...o8), F4(t9, () => (f5(t9, ...u6), v2(t9, ...e3.entered), d9()));
  }), m6.dispose;
}

// node_modules/@headlessui/react/dist/hooks/use-transition.js
function D2({ container: i7, direction: t9, classes: o8, onStart: s10, onStop: u6 }) {
  let a4 = f4(), c5 = p3(), r7 = s3(t9);
  l2(() => {
    let e3 = m2();
    c5.add(e3.dispose);
    let n4 = i7.current;
    if (!!n4 && r7.current !== "idle" && !!a4.current)
      return e3.dispose(), s10.current(r7.current), e3.add(M2(n4, o8.current, r7.current === "enter", () => {
        e3.dispose(), u6.current(r7.current);
      })), e3.dispose;
  }, [t9]);
}

// node_modules/@headlessui/react/dist/components/transitions/transition.js
function H3(i7 = "") {
  return i7.split(" ").filter((e3) => e3.trim().length > 1);
}
var M3 = (0, import_react42.createContext)(null);
M3.displayName = "TransitionContext";
var Ee = ((s10) => (s10.Visible = "visible", s10.Hidden = "hidden", s10))(Ee || {});
function Se2() {
  let i7 = (0, import_react42.useContext)(M3);
  if (i7 === null)
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
  return i7;
}
function xe3() {
  let i7 = (0, import_react42.useContext)(I3);
  if (i7 === null)
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
  return i7;
}
var I3 = (0, import_react42.createContext)(null);
I3.displayName = "NestingContext";
function _(i7) {
  return "children" in i7 ? _(i7.children) : i7.current.filter(({ el: e3 }) => e3.current !== null).filter(({ state: e3 }) => e3 === "visible").length > 0;
}
function re2(i7, e3) {
  let s10 = s3(i7), n4 = (0, import_react42.useRef)([]), m6 = f4(), y2 = p3(), E4 = o3((l7, r7 = w2.Hidden) => {
    let t9 = n4.current.findIndex(({ el: o8 }) => o8 === l7);
    t9 !== -1 && (u4(r7, { [w2.Unmount]() {
      n4.current.splice(t9, 1);
    }, [w2.Hidden]() {
      n4.current[t9].state = "hidden";
    } }), y2.microTask(() => {
      var o8;
      !_(n4) && m6.current && ((o8 = s10.current) == null || o8.call(s10));
    }));
  }), S = o3((l7) => {
    let r7 = n4.current.find(({ el: t9 }) => t9 === l7);
    return r7 ? r7.state !== "visible" && (r7.state = "visible") : n4.current.push({ el: l7, state: "visible" }), () => E4(l7, w2.Unmount);
  }), x2 = (0, import_react42.useRef)([]), u6 = (0, import_react42.useRef)(Promise.resolve()), p5 = (0, import_react42.useRef)({ enter: [], leave: [], idle: [] }), d9 = o3((l7, r7, t9) => {
    x2.current.splice(0), e3 && (e3.chains.current[r7] = e3.chains.current[r7].filter(([o8]) => o8 !== l7)), e3 == null || e3.chains.current[r7].push([l7, new Promise((o8) => {
      x2.current.push(o8);
    })]), e3 == null || e3.chains.current[r7].push([l7, new Promise((o8) => {
      Promise.all(p5.current[r7].map(([f6, a4]) => a4)).then(() => o8());
    })]), r7 === "enter" ? u6.current = u6.current.then(() => e3 == null ? void 0 : e3.wait.current).then(() => t9(r7)) : t9(r7);
  }), v3 = o3((l7, r7, t9) => {
    Promise.all(p5.current[r7].splice(0).map(([o8, f6]) => f6)).then(() => {
      var o8;
      (o8 = x2.current.shift()) == null || o8();
    }).then(() => t9(r7));
  });
  return (0, import_react42.useMemo)(() => ({ children: n4, register: S, unregister: E4, onStart: d9, onStop: v3, wait: u6, chains: p5 }), [S, E4, n4, d9, v3, p5, u6]);
}
function Pe() {
}
var He3 = ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave"];
function ie3(i7) {
  var s10;
  let e3 = {};
  for (let n4 of He3)
    e3[n4] = (s10 = i7[n4]) != null ? s10 : Pe;
  return e3;
}
function Ne2(i7) {
  let e3 = (0, import_react42.useRef)(ie3(i7));
  return (0, import_react42.useEffect)(() => {
    e3.current = ie3(i7);
  }, [i7]), e3;
}
var Re2 = "div", oe = j2.RenderStrategy, se3 = V2(function(e3, s10) {
  let { beforeEnter: n4, afterEnter: m6, beforeLeave: y2, afterLeave: E4, enter: S, enterFrom: x2, enterTo: u6, entered: p5, leave: d9, leaveFrom: v3, leaveTo: l7, ...r7 } = e3, t9 = (0, import_react42.useRef)(null), o8 = y(t9, s10), f6 = r7.unmount ? w2.Unmount : w2.Hidden, { show: a4, appear: P3, initial: le3 } = Se2(), [h5, j3] = (0, import_react42.useState)(a4 ? "visible" : "hidden"), Q3 = xe3(), { register: F5, unregister: L4 } = Q3, U = (0, import_react42.useRef)(null);
  (0, import_react42.useEffect)(() => F5(t9), [F5, t9]), (0, import_react42.useEffect)(() => {
    if (f6 === w2.Hidden && !!t9.current) {
      if (a4 && h5 !== "visible") {
        j3("visible");
        return;
      }
      return u4(h5, { hidden: () => L4(t9), visible: () => F5(t9) });
    }
  }, [h5, t9, F5, L4, a4, f6]);
  let k = s3({ enter: H3(S), enterFrom: H3(x2), enterTo: H3(u6), entered: H3(p5), leave: H3(d9), leaveFrom: H3(v3), leaveTo: H3(l7) }), O2 = Ne2({ beforeEnter: n4, afterEnter: m6, beforeLeave: y2, afterLeave: E4 }), G2 = l3();
  (0, import_react42.useEffect)(() => {
    if (G2 && h5 === "visible" && t9.current === null)
      throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?");
  }, [t9, h5, G2]);
  let B3 = le3 && !P3, ae2 = (() => !G2 || B3 || U.current === a4 ? "idle" : a4 ? "enter" : "leave")(), D3 = b3(0), ue3 = o3((g6) => u4(g6, { enter: () => {
    D3.addFlag(d6.Opening), O2.current.beforeEnter();
  }, leave: () => {
    D3.addFlag(d6.Closing), O2.current.beforeLeave();
  }, idle: () => {
  } })), de2 = o3((g6) => u4(g6, { enter: () => {
    D3.removeFlag(d6.Opening), O2.current.afterEnter();
  }, leave: () => {
    D3.removeFlag(d6.Closing), O2.current.afterLeave();
  }, idle: () => {
  } })), w3 = re2(() => {
    j3("hidden"), L4(t9);
  }, Q3);
  D2({ container: t9, classes: k, direction: ae2, onStart: s3((g6) => {
    w3.onStart(t9, g6, ue3);
  }), onStop: s3((g6) => {
    w3.onStop(t9, g6, de2), g6 === "leave" && !_(w3) && (j3("hidden"), L4(t9));
  }) }), (0, import_react42.useEffect)(() => {
    !B3 || (f6 === w2.Hidden ? U.current = null : U.current = a4);
  }, [a4, B3, h5]);
  let W2 = r7, fe2 = { ref: o8 };
  return P3 && a4 && s2.isServer && (W2 = { ...W2, className: e2(r7.className, ...k.current.enter, ...k.current.enterFrom) }), import_react42.default.createElement(I3.Provider, { value: w3 }, import_react42.default.createElement(c3, { value: u4(h5, { visible: d6.Open, hidden: d6.Closed }) | D3.flags }, X({ ourProps: fe2, theirProps: W2, defaultTag: Re2, features: oe, visible: h5 === "visible", name: "Transition.Child" })));
}), K2 = V2(function(e3, s10) {
  let { show: n4, appear: m6 = !1, unmount: y2, ...E4 } = e3, S = (0, import_react42.useRef)(null), x2 = y(S, s10);
  l3();
  let u6 = C();
  if (n4 === void 0 && u6 !== null && (n4 = (u6 & d6.Open) === d6.Open), ![!0, !1].includes(n4))
    throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop.");
  let [p5, d9] = (0, import_react42.useState)(n4 ? "visible" : "hidden"), v3 = re2(() => {
    d9("hidden");
  }), [l7, r7] = (0, import_react42.useState)(!0), t9 = (0, import_react42.useRef)([n4]);
  l2(() => {
    l7 !== !1 && t9.current[t9.current.length - 1] !== n4 && (t9.current.push(n4), r7(!1));
  }, [t9, n4]);
  let o8 = (0, import_react42.useMemo)(() => ({ show: n4, appear: m6, initial: l7 }), [n4, m6, l7]);
  (0, import_react42.useEffect)(() => {
    if (n4)
      d9("visible");
    else if (!_(v3))
      d9("hidden");
    else {
      let a4 = S.current;
      if (!a4)
        return;
      let P3 = a4.getBoundingClientRect();
      P3.x === 0 && P3.y === 0 && P3.width === 0 && P3.height === 0 && d9("hidden");
    }
  }, [n4, v3]);
  let f6 = { unmount: y2 };
  return import_react42.default.createElement(I3.Provider, { value: v3 }, import_react42.default.createElement(M3.Provider, { value: o8 }, X({ ourProps: { ...f6, as: import_react42.Fragment, children: import_react42.default.createElement(se3, { ref: x2, ...f6, ...E4 }) }, theirProps: {}, defaultTag: import_react42.Fragment, features: oe, visible: p5 === "visible", name: "Transition" })));
}), ye3 = V2(function(e3, s10) {
  let n4 = (0, import_react42.useContext)(M3) !== null, m6 = C() !== null;
  return import_react42.default.createElement(import_react42.default.Fragment, null, !n4 && m6 ? import_react42.default.createElement(K2, { ref: s10, ...e3 }) : import_react42.default.createElement(se3, { ref: s10, ...e3 }));
}), Ye = Object.assign(K2, { Child: ye3, Root: K2 });

// app/components/global/GlobalMenuItemDesktop.jsx
var import_react43 = __toESM(require_react());
var import_jsx_dev_runtime16 = __toESM(require_jsx_dev_runtime()), MenuDesktop = ({ title, children }) => {
  let navigate = useNavigate();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Rt.Group, { as: "nav", className: "hidden md:flex", children: /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Rt, { className: "relative", children: ({ open }) => /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(import_jsx_dev_runtime16.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(
      Rt.Button,
      {
        className: "hover:text-accent focus-visible:text-accent focus:outline-none focus:border-none antialiased",
        onClick: () => navigate(children[0].slug),
        onMouseEnter: (e3) => e3.target.click(),
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Text, { intent: "ui-2xl", className: "font-normal", children: title }, void 0, !1, {
          fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
          lineNumber: 21,
          columnNumber: 15
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
        lineNumber: 14,
        columnNumber: 13
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Ye, { as: import_react43.Fragment, children: /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Rt.Panel, { className: "absolute", children: /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("ul", { className: "relative bg-white w-max -left-2 border-8 border-white flex flex-col gap-2", children: children.map((child) => /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("li", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Text, { intent: "ui-2xl", className: "leading-none", children: /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Link3, { to: child.slug, children: child.title }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 31,
      columnNumber: 25
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 30,
      columnNumber: 23
    }, this) }, child._id, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 29,
      columnNumber: 21
    }, this)) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 27,
      columnNumber: 17
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 26,
      columnNumber: 15
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 25,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
    lineNumber: 13,
    columnNumber: 11
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
    lineNumber: 11,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
    lineNumber: 10,
    columnNumber: 5
  }, this);
}, GlobalMenuItemDesktop_default = MenuDesktop;

// app/components/global/GlobalMenuItemMobile.jsx
var import_jsx_dev_runtime17 = __toESM(require_jsx_dev_runtime()), MenuItemMobile = ({ title, children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime17.jsxDEV)("ul", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime17.jsxDEV)("li", { children: [
  title,
  /* @__PURE__ */ (0, import_jsx_dev_runtime17.jsxDEV)("ul", { className: "ml-4", children: children.map((child) => /* @__PURE__ */ (0, import_jsx_dev_runtime17.jsxDEV)("li", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime17.jsxDEV)(Link3, { to: child.slug, children: child.title }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemMobile.jsx",
    lineNumber: 11,
    columnNumber: 15
  }, this) }, child._id, !1, {
    fileName: "app/components/global/GlobalMenuItemMobile.jsx",
    lineNumber: 10,
    columnNumber: 13
  }, this)) }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemMobile.jsx",
    lineNumber: 8,
    columnNumber: 9
  }, this)
] }, void 0, !0, {
  fileName: "app/components/global/GlobalMenuItemMobile.jsx",
  lineNumber: 6,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/global/GlobalMenuItemMobile.jsx",
  lineNumber: 5,
  columnNumber: 5
}, this), GlobalMenuItemMobile_default = MenuItemMobile;

// app/components/global/GlobalTitle.jsx
var import_jsx_dev_runtime18 = __toESM(require_jsx_dev_runtime()), GlobalTitle = () => {
  let { settings } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)(Text, { tag: "h1", intent: "ui-3xl", children: /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)(Link3, { to: "/", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)("span", { className: "sr-only md:not-sr-only", children: settings.title }, void 0, !1, {
      fileName: "app/components/global/GlobalTitle.jsx",
      lineNumber: 10,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)("span", { "aria-hidden": !0, className: "md:hidden", children: settings.shortTitle }, void 0, !1, {
      fileName: "app/components/global/GlobalTitle.jsx",
      lineNumber: 11,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalTitle.jsx",
    lineNumber: 9,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalTitle.jsx",
    lineNumber: 8,
    columnNumber: 5
  }, this);
}, GlobalTitle_default = GlobalTitle;

// app/components/parts/Badge.jsx
var import_jsx_dev_runtime19 = __toESM(require_jsx_dev_runtime()), layout2 = cva(
  "absolute aspect-square bg-black text-white rounded-full flex justify-center items-center select-none z-10",
  {
    variants: {
      intent: {
        small: ["w-6 h-6 text-sm"],
        big: ["w-12 h-12 text-xl"]
      },
      location: {
        top: ["top-0 right-0 -translate-x-1/2 translate-y-full"],
        bottom: ["bottom-0 right-0 -translate-x-1/2 -translate-y-1/2"]
      }
    },
    defaultVariants: {
      intent: "small",
      location: "bottom"
    }
  }
), Badge = ({ intent, location: location2, children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)("div", { className: layout2({ intent, location: location2 }), "aria-hidden": !0, children: /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)("span", { className: "leading-none", children }, void 0, !1, {
  fileName: "app/components/parts/Badge.jsx",
  lineNumber: 26,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/parts/Badge.jsx",
  lineNumber: 25,
  columnNumber: 5
}, this);

// app/components/icons/Icons.jsx
var import_jsx_dev_runtime20 = __toESM(require_jsx_dev_runtime()), BasketIcon = () => /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
  "svg",
  {
    id: "a",
    xmlns: "http://www.w3.org/2000/svg",
    width: "80.11",
    height: "59.56",
    viewBox: "0 0 80.11 59.56",
    className: "h-full",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "40.14",
          y1: "12.95",
          x2: "40.14",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 11,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "polygon",
        {
          points: ".86 12.88 9.75 58.85 70.75 58.85 79.26 12.88 .86 12.88",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 21,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "25.47",
          y1: "12.95",
          x2: "25.47",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 28,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "8.08",
          y1: "50.31",
          x2: "72.43",
          y2: "50.31",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 38,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "54.81",
          y1: "12.95",
          x2: "54.81",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 48,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "5.75",
          y1: "37.46",
          x2: "74.8",
          y2: "37.46",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 58,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "3.51",
          y1: "24.61",
          x2: "77.34",
          y2: "24.61",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 68,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "polyline",
        {
          points: "54.85 12.79 54.85 .71 25.46 .71 25.46 12.79",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 78,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "18.14",
          y1: "12.95",
          x2: "18.14",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 85,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "10.81",
          y1: "12.7",
          x2: "10.81",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 95,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "32.81",
          y1: "12.7",
          x2: "32.81",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 105,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "47.48",
          y1: "12.7",
          x2: "47.48",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 115,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "62.14",
          y1: "12.7",
          x2: "62.14",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 125,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "69.48",
          y1: "12.7",
          x2: "69.48",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 135,
          columnNumber: 7
        },
        this
      )
    ]
  },
  void 0,
  !0,
  {
    fileName: "app/components/icons/Icons.jsx",
    lineNumber: 3,
    columnNumber: 5
  },
  this
), BasketIconThin = () => /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
  "svg",
  {
    id: "a",
    xmlns: "http://www.w3.org/2000/svg",
    width: "219.09",
    height: "162.65",
    viewBox: "0 0 219.09 162.65",
    className: "relative w-full h-auto",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "109.78",
          y1: "34.69",
          x2: "109.78",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 158,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "polygon",
        {
          points: ".97 34.51 25.59 161.85 194.55 161.85 218.13 34.51 .97 34.51",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 168,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "69.15",
          y1: "34.69",
          x2: "69.15",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 175,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "20.97",
          y1: "138.18",
          x2: "199.21",
          y2: "138.18",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 185,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "150.41",
          y1: "34.69",
          x2: "150.41",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 195,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "14.51",
          y1: "102.59",
          x2: "205.77",
          y2: "102.59",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 205,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "8.3",
          y1: "66.99",
          x2: "212.82",
          y2: "66.99",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 215,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "polyline",
        {
          points: "150.52 34.26 150.52 .8 69.11 .8 69.11 34.26",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 225,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "48.83",
          y1: "34.69",
          x2: "48.83",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 232,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "28.52",
          y1: "34.01",
          x2: "28.52",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 242,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "89.46",
          y1: "34.01",
          x2: "89.46",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 252,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "130.09",
          y1: "34.01",
          x2: "130.09",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 262,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "170.72",
          y1: "34.01",
          x2: "170.72",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 272,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
        "line",
        {
          x1: "191.04",
          y1: "34.01",
          x2: "191.04",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 282,
          columnNumber: 8
        },
        this
      )
    ]
  },
  void 0,
  !0,
  {
    fileName: "app/components/icons/Icons.jsx",
    lineNumber: 150,
    columnNumber: 6
  },
  this
);

// app/components/global/GlobalHeader.jsx
var import_jsx_dev_runtime21 = __toESM(require_jsx_dev_runtime()), GlobalHeader = () => {
  let { menu } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(
    Rt,
    {
      className: "fixed h-24 w-screen bg-white z-50",
      as: "header",
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("div", { className: "relative w-full p-4 flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(GlobalTitle_default, {}, void 0, !1, {
            fileName: "app/components/global/GlobalHeader.jsx",
            lineNumber: 20,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("div", { className: "flex items-center gap-16", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("div", { className: "md:hidden", children: /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(
              Rt.Button,
              {
                className: " focus-visible:underline focus:border-none focus:outline-none",
                children: ({ open }) => /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("span", { children: open ? "X" : "Menu" }, void 0, !1, {
                  fileName: "app/components/global/GlobalHeader.jsx",
                  lineNumber: 29,
                  columnNumber: 28
                }, this)
              },
              void 0,
              !1,
              {
                fileName: "app/components/global/GlobalHeader.jsx",
                lineNumber: 24,
                columnNumber: 13
              },
              this
            ) }, void 0, !1, {
              fileName: "app/components/global/GlobalHeader.jsx",
              lineNumber: 23,
              columnNumber: 11
            }, this),
            menu.map((section) => /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(
              GlobalMenuItemDesktop_default,
              {
                title: section.name,
                children: section.children
              },
              section._id,
              !1,
              {
                fileName: "app/components/global/GlobalHeader.jsx",
                lineNumber: 35,
                columnNumber: 15
              },
              this
            )),
            /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(CartButton, {}, void 0, !1, {
              fileName: "app/components/global/GlobalHeader.jsx",
              lineNumber: 42,
              columnNumber: 11
            }, this)
          ] }, void 0, !0, {
            fileName: "app/components/global/GlobalHeader.jsx",
            lineNumber: 21,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalHeader.jsx",
          lineNumber: 19,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(Ye, { as: import_react46.Fragment, children: /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(
          Rt.Panel,
          {
            focus: !0,
            className: "absolute inset-0 top-20 h-[calc(100vh-5rem)] bg-white p-4 md:hidden",
            children: menu.map((section) => /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(
              GlobalMenuItemMobile_default,
              {
                title: section.name,
                children: section.children
              },
              section._id,
              !1,
              {
                fileName: "app/components/global/GlobalHeader.jsx",
                lineNumber: 53,
                columnNumber: 15
              },
              this
            ))
          },
          void 0,
          !1,
          {
            fileName: "app/components/global/GlobalHeader.jsx",
            lineNumber: 47,
            columnNumber: 9
          },
          this
        ) }, void 0, !1, {
          fileName: "app/components/global/GlobalHeader.jsx",
          lineNumber: 46,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 15,
      columnNumber: 5
    },
    this
  );
}, GlobalHeader_default = GlobalHeader, CartButton = () => {
  let { cart } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(Link3, { to: "/cart", "aria-label": "Go to cart", children: /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("div", { className: "h-14", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(BasketIcon, {}, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 73,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(import_react46.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(Badge, { intent: "small", children: "0" }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 74,
      columnNumber: 29
    }, this), children: /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(Await2, { resolve: cart, children: (cart2) => /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(Badge, { intent: "small", children: (cart2 == null ? void 0 : cart2.totalQuantity) || 0 }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 77,
      columnNumber: 15
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 75,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 74,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalHeader.jsx",
    lineNumber: 72,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalHeader.jsx",
    lineNumber: 71,
    columnNumber: 5
  }, this);
};

// app/hooks/useAnalytics.js
var import_react50 = __toESM(require_react());
function useAnalytics(hasUserConsent, locale) {
  useShopifyCookies({ hasUserConsent });
  let location2 = useLocation(), pageAnalytics = {
    ...useDataFromMatches(
      "analytics"
    ),
    currency: locale.currency,
    acceptedLanguage: locale.language,
    hasUserConsent
  };
  (0, import_react50.useEffect)(() => {
    let payload = {
      ...getClientBrowserParameters(),
      ...pageAnalytics
    };
    sendShopifyAnalytics({
      eventName: AnalyticsEventName.PAGE_VIEW,
      payload
    });
  }, [location2]);
  let cartData = useDataFromFetchers({
    formDataKey: "cartAction",
    formDataValue: "ADD_TO_CART",
    dataKey: "analytics"
  });
  if (cartData) {
    let addToCartPayload = {
      ...getClientBrowserParameters(),
      ...pageAnalytics,
      ...cartData
    };
    sendShopifyAnalytics({
      eventName: AnalyticsEventName.ADD_TO_CART,
      payload: addToCartPayload
    });
  }
}
function useDataFromMatches(dataKey) {
  let matches = useMatches2(), data = {};
  return matches.forEach((event2) => {
    let eventData = event2 == null ? void 0 : event2.data;
    eventData && eventData[dataKey] && Object.assign(data, eventData[dataKey]);
  }), data;
}
function useDataFromFetchers({
  formDataKey,
  formDataValue,
  dataKey
}) {
  var _a2;
  let fetchers = useFetchers2(), data = {};
  for (let fetcher of fetchers) {
    let formData = (_a2 = fetcher.submission) == null ? void 0 : _a2.formData, fetcherData = fetcher.data;
    if (formData && formData.get(formDataKey) === formDataValue && fetcherData && fetcherData[dataKey]) {
      Object.assign(data, fetcherData[dataKey]);
      try {
        if (formData.get(dataKey)) {
          let dataInForm = JSON.parse(String(formData.get(dataKey)));
          Object.assign(data, dataInForm);
        }
      } catch {
      }
    }
  }
  return Object.keys(data).length ? data : void 0;
}

// app/lib/queries.js
init_groq_esm();

// app/lib/fragments.js
init_groq_esm();
var blockFragment = groq`_type == 'block' => {..., "colour": coalesce(*[_id == ^.^.^._id][0].colour->colourDark, "#000000")}`, headingModuleFragment = groq`_type == 'headingModule' => @`, collapsibleModuleFragment = groq`_type == 'collapsibleModule' => @`, shopModuleFragment = groq`_type == 'shopModule' => @`, articlePreviewFragment = groq`{
    _id,
    headline,
    "slug": slug.fullUrl,
    "colour":colour->colourLight,
    author-> {name},
    media,
    image {
      alt,
      asset->{_id}
    },
    topic -> {
        topic,
        image {
          asset-> {_id}
        }
    },
}`, articlesModuleFragment = groq`_type == 'articlesModule' => {..., "articles": *[_type == "article"] [0..100]|order(date desc)${articlePreviewFragment}}`, carouselModuleFragment = groq`
    _type == 'carouselModule' => {
        _key,
        _type,
        slide[] {
            _type == "imageObject" => {
                ...,
                asset -> {_id}
            },
            _type == "textObject" => {
                ...
            }
        }
    }`, imageModuleFragment = groq`
    _type == 'imageModule' => {
        _key,
        _type,
        caption,
        image {
            ...,
            asset -> {_id}
        },
        "colour": coalesce(*[_id == ^.^._id][0].colour->colourDark, *[_id == ^.^.^.^._id][0].colour->colourDark, "#000000")
    }`, imageGridModuleFragment = groq`
    _type == 'imageGridModule' => {
        _key,
        _type,
        images[] {
            ...,
            asset -> {_id}
        },
    }`, textColumnsModuleFragment = groq`_type == 'textColumnsModule' => {
    ...,
    text[] {
        ${blockFragment},
        ${collapsibleModuleFragment},
        ${carouselModuleFragment},
        ${imageModuleFragment},
    }
}`, textBlockModuleFragment = groq`_type == 'textBlockModule' => {
    ...,
    text[] {
        ${blockFragment},
        ${collapsibleModuleFragment},
        ${carouselModuleFragment},
        ${imageModuleFragment},
        ${imageGridModuleFragment}
    }
}`, contentFragment = groq`
    content[] {
        ${textBlockModuleFragment},
        ${headingModuleFragment},
        ${collapsibleModuleFragment},
        ${textColumnsModuleFragment},
        ${carouselModuleFragment},
        ${imageModuleFragment},
        ${imageGridModuleFragment},
        ${articlesModuleFragment},
        ${shopModuleFragment},
    }`;

// app/lib/queries.js
var articleDataQuery = groq`*[_type == "article" && slug.current == $slug][0]{
        _id,
  		headline,
		date,
  		"slug": slug.fullUrl,
  		intro,
  		"colour":colour->colourLight,
  		author-> {name},
  		media[],
  		image {
  			alt,
  			asset->
  		},
		topic -> {
        topic,
			image {
			asset-> {_id}
			}
      	},
		"seoTitle": coalesce(seoTitle, headline),
		"seoDescription": coalesce(seoDescription, pt::text(intro)),
        ${contentFragment}
    }`, shopLinkQuery = groq`*[_type == "settings"][0] {
  shop->{slug{fullUrl}}
}`, pageDataQuery = groq`*[_type == "page" && slug.current == $slug][0]{
        _id,
		"seoTitle": coalesce(seoTitle, title),
		"seoDescription": seoDescription,
        ${contentFragment}
    }`;

// app/styles/app.css
var app_default = "/build/_assets/app-T36CCLCP.css";

// app/root.jsx
var import_jsx_dev_runtime22 = __toESM(require_jsx_dev_runtime()), seo = ({ data: { settings }, pathname }) => ({
  title: settings.seoTitle,
  titleTemplate: `%s | ${settings.shortTitle}`,
  description: settings.seoDescription,
  handle: settings.seoTwitter,
  url: `${settings.seoDomain}${pathname}`
}), handle = {
  seo
}, links = () => [
  { rel: "stylesheet", href: app_default },
  { rel: "preconnect", href: "https://cdn.shopify.com" },
  { rel: "preconnect", href: "https://shop.app" }
], meta = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
async function loader({ context: context2 }) {
  let [cartId, shop, allProducts, settings, menu, footer, shopLink] = await Promise.all([
    context2.session.get("cartId"),
    getShopData(context2),
    getAllProductsData(context2),
    getSettingsData(context2),
    getMenuData(context2),
    getFooterData(context2),
    getShopPage(context2)
  ]);
  return defer3({
    settings,
    menu,
    footer,
    cart: cartId ? getCart(context2, cartId) : void 0,
    allProducts,
    analytics: {
      shopifySalesChannel: ShopifySalesChannel.hydrogen,
      shopId: shop.shop.id
    },
    sanityProjectDetails: context2.sanityProjectDetails,
    shop: shopLink
  });
}
var badRequest = (data) => json3(data, { status: 400 });
async function action({ request, context: context2 }) {
  await new Promise((res) => setTimeout(res, 1e3));
  let formData = await request.formData(), apiKey = context2.mailerLiteApi, email = formData.get("email"), subscribedAt = new Date().toLocaleString("sv-SE"), subscriber = {
    email,
    subscribed_at: subscribedAt
  };
  if (!email)
    return console.log("no email"), badRequest({
      formError: "Please provide an email."
    });
  try {
    let res = await fetch("https://connect.mailerlite.com/api/subscribers", {
      method: "post",
      body: JSON.stringify(subscriber),
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: ` Bearer ${apiKey}`
      }
    });
    return json3({ res });
  } catch {
    return badRequest({
      formError: "Sorry. We could not create an account with this email. User might already exist."
    });
  }
}
function App() {
  return useAnalytics(!0, {
    label: "United Kingdom (GBP \xA3)",
    language: "EN",
    country: "GB",
    currency: "GBP"
  }), /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("html", { lang: "en", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(It, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 175,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 176,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 177,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 174,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("body", { className: "selection:bg-accent/20", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(GlobalHeader_default, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 180,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("main", { className: "min-h-screen flex flex-col pt-24", children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Outlet, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 182,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 181,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(GlobalFooter_default, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 184,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(ScrollRestoration2, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 185,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 186,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 179,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.jsx",
    lineNumber: 173,
    columnNumber: 5
  }, this);
}
function CatchBoundary() {
  let isNotFound = useCatch().status === 404;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("html", { lang: {
    label: "United Kingdom (GBP \xA3)",
    language: "EN",
    country: "GB",
    currency: "GBP"
  }.language, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("title", { children: isNotFound ? "Not found" : "Error" }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 204,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 205,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 206,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 203,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(NotFound, { error }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 209,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 210,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 208,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.jsx",
    lineNumber: 202,
    columnNumber: 5
  }, this);
}
function ErrorBoundary({ error: error2 }) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("html", { lang: {
    label: "United Kingdom (GBP \xA3)",
    language: "EN",
    country: "GB",
    currency: "GBP"
  }.language, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("title", { children: "Error" }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 226,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 227,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 228,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 225,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(NotFound, { error: error2 }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 231,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 232,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 230,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.jsx",
    lineNumber: 224,
    columnNumber: 5
  }, this);
}
async function getShopData({ storefront }) {
  let query2 = `#graphql
  {
    shop {
      id
    }
  }
  `, shop = await storefront.query(query2);
  return invariant4(shop, "No data returned from Shopify API"), shop;
}
async function getSettingsData({ sanityClient }) {
  let query2 = groq`*[_type == "settings"][0]`;
  return await sanityClient.fetch(query2);
}
async function getMenuData({ sanityClient }) {
  let query2 = groq`*[_type == 'section'] | order(orderRank asc) {
		_id,
		name,
		"children": *[_type == "page" && !(_id in path('drafts.**')) && references(^._id)] | order(orderRank asc) {
			_id,
    		title,
    		"slug":slug.current
		}
	}	
`;
  return await sanityClient.fetch(query2);
}
async function getFooterData({ sanityClient }) {
  let query2 = groq`*[_type == "settings"][0] {
  footerLinks[] -> {
    _id,
    title,
    "slug": slug.fullUrl
  },
  footerText
}
`;
  return await sanityClient.fetch(query2);
}
var CART_QUERY = `#graphql
  query CartQuery($cartId: ID!, $country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    cart(id: $cartId) {
      ...CartFragment
    }
  }

  fragment CartFragment on Cart {
    id
    checkoutUrl
    totalQuantity
    buyerIdentity {
      countryCode
      customer {
        id
        email
        firstName
        lastName
        displayName
      }
      email
      phone
    }
    lines(first: 100) {
      edges {
        node {
          id
          quantity
          attributes {
            key
            value
          }
          cost {
            totalAmount {
              amount
              currencyCode
            }
            amountPerQuantity {
              amount
              currencyCode
            }
            compareAtAmountPerQuantity {
              amount
              currencyCode
            }
          }
          merchandise {
            ... on ProductVariant {
              id
              availableForSale
              compareAtPrice {
                ...MoneyFragment
              }
              price {
                ...MoneyFragment
              }
              requiresShipping
              title
              image {
                ...ImageFragment
              }
              product {
                handle
                title
                id
              }
              selectedOptions {
                name
                value
              }
            }
          }
        }
      }
    }
    cost {
      subtotalAmount {
        ...MoneyFragment
      }
      totalAmount {
        ...MoneyFragment
      }
      totalDutyAmount {
        ...MoneyFragment
      }
      totalTaxAmount {
        ...MoneyFragment
      }
    }
    note
    attributes {
      key
      value
    }
    discountCodes {
      code
    }
  }

  fragment MoneyFragment on MoneyV2 {
    currencyCode
    amount
  }

  fragment ImageFragment on Image {
    id
    url
    altText
    width
    height
  }
`;
async function getCart({ storefront }, cartId) {
  invariant4(storefront, "missing storefront client in cart query");
  let { cart } = await storefront.query(CART_QUERY, {
    variables: {
      cartId
    },
    cache: storefront.CacheNone()
  });
  return cart;
}
var ALL_PRODUCTS_QUERY = `#graphql
  query AllProducts(
    $country: CountryCode
    $language: LanguageCode
  ) @inContext(country: $country, language: $language) {
      products(first: 100) {
        nodes {
          id
          title
          publishedAt
          handle 
          featuredImage {
            url
            altText
            width
            height
          }
          variants(first: 5) {
            nodes {
              id
              price {
                amount
                currencyCode
              }
              compareAtPrice {
                amount
                currencyCode
              }
              selectedOptions {
                name
                value
              }
              product {
                handle
                title
              }
            }
          }
        }
      }
    }
  
`;
async function getAllProductsData({ storefront }) {
  invariant4(storefront, "missing storefront client in all products query");
  let { products } = await storefront.query(ALL_PRODUCTS_QUERY, {
    variables: {
      country: storefront.i18n.country,
      language: storefront.i18n.language
    }
  });
  return products;
}
async function getShopPage({ sanityClient }) {
  return await sanityClient.fetch(shopLinkQuery);
}

// app/routes/resource/preview.jsx
var preview_exports = {};
__export(preview_exports, {
  action: () => action2,
  loader: () => loader2
});

// app/sessions.jsx
var encoder = new TextEncoder(), sign = async (value, secret) => {
  let data = encoder.encode(value), key = await createKey2(secret, ["sign"]), signature = await crypto.subtle.sign("HMAC", key, data), hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(
    /=+$/,
    ""
  );
  return value + "." + hash;
}, unsign = async (cookie, secret) => {
  let value = cookie.slice(0, cookie.lastIndexOf(".")), hash = cookie.slice(cookie.lastIndexOf(".") + 1), data = encoder.encode(value), key = await createKey2(secret, ["verify"]), signature = byteStringToUint8Array(atob(hash));
  return await crypto.subtle.verify("HMAC", key, signature, data) ? value : !1;
};
async function createKey2(secret, usages) {
  return await crypto.subtle.importKey(
    "raw",
    encoder.encode(secret),
    { name: "HMAC", hash: "SHA-256" },
    !1,
    usages
  );
}
function byteStringToUint8Array(byteString) {
  let array2 = new Uint8Array(byteString.length);
  for (let i7 = 0; i7 < byteString.length; i7++)
    array2[i7] = byteString.charCodeAt(i7);
  return array2;
}
var createCookie = createCookieFactory({ sign, unsign }), createCookieSessionStorage = createCookieSessionStorageFactory(createCookie), { getSession, commitSession, destroySession } = createCookieSessionStorage({
  cookie: {
    name: "__session",
    sameSite: "lax",
    secrets: []
  }
});

// app/routes/resource/preview.jsx
var action2 = async ({ request }) => {
  if (request.method !== "POST")
    return json3({ message: "Method not allowed" }, 405);
  let session = await getSession(request.headers.get("Cookie"));
  return redirect3("/", {
    headers: {
      "Set-Cookie": await destroySession(session)
    }
  });
}, loader2 = async ({ request }) => {
  let session = await getSession(request.headers.get("Cookie"));
  return session.set("preview", "a-random-string"), redirect3("/", {
    headers: {
      "Set-Cookie": await commitSession(session)
    }
  });
};

// app/routes/articles/$slug.jsx
var slug_exports = {};
__export(slug_exports, {
  default: () => ArticleRoute,
  handle: () => handle2,
  links: () => links2,
  loader: () => loader3
});
var import_react70 = __toESM(require_react());

// node_modules/swiper/swiper.min.css
var swiper_min_default = "/build/_assets/swiper.min-L7NXCLXG.css";

// app/components/article/Article.jsx
var import_react65 = __toESM(require_react());

// app/components/parts/Banner.jsx
var import_react52 = __toESM(require_react()), import_jsx_dev_runtime23 = __toESM(require_jsx_dev_runtime()), Banner = ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime23.jsxDEV)("div", { className: "w-full p-3 bg-white", children }, void 0, !1, {
  fileName: "app/components/parts/Banner.jsx",
  lineNumber: 4,
  columnNumber: 10
}, this);

// app/components/article/ArticleBlockBanner.jsx
var import_react54 = __toESM(require_react());

// app/components/parts/Topic.jsx
var import_react53 = __toESM(require_react());
var import_jsx_dev_runtime24 = __toESM(require_jsx_dev_runtime()), Topic = ({ topic }) => /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)("span", { className: "float inline-block h-[1em] mr-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(
  SanityImage,
  {
    value: topic.image,
    alt: `Topic: ${topic.topic}`,
    className: "h-full"
  },
  void 0,
  !1,
  {
    fileName: "app/components/parts/Topic.jsx",
    lineNumber: 7,
    columnNumber: 7
  },
  this
) }, void 0, !1, {
  fileName: "app/components/parts/Topic.jsx",
  lineNumber: 6,
  columnNumber: 5
}, this);

// app/components/article/ArticleBlockBanner.jsx
var import_jsx_dev_runtime25 = __toESM(require_jsx_dev_runtime()), ArticleBlockBanner = ({ article, link: link3 }) => {
  let { headline, intro, colour, author, category, topic } = article;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Layout, { tag: "article", intent: "banner", colour: colour || "#e3e8ef", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(
      Layout,
      {
        intent: "grid",
        tag: "div",
        className: cx("gap-4 flex-1", "md:gap-8"),
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Text, { tag: "h2", intent: "bl-heading-3xl", children: [
            topic && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Topic, { topic }, void 0, !1, {
              fileName: "app/components/article/ArticleBlockBanner.jsx",
              lineNumber: 20,
              columnNumber: 23
            }, this),
            headline || "Untitled article"
          ] }, void 0, !0, {
            fileName: "app/components/article/ArticleBlockBanner.jsx",
            lineNumber: 19,
            columnNumber: 11
          }, this) }, void 0, !1, {
            fileName: "app/components/article/ArticleBlockBanner.jsx",
            lineNumber: 18,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(
            "div",
            {
              className: cx(
                "col-span-1 columns-1 gap-8 col-fill-auto",
                "lg:col-span-2 lg:columns-2 "
              ),
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Text, { tag: "h3", intent: "bl-heading-xl", children: intro ? /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(PortableTextPlain, { text: intro }, void 0, !1, {
                  fileName: "app/components/article/ArticleBlockBanner.jsx",
                  lineNumber: 31,
                  columnNumber: 22
                }, this) : "Intro text" }, void 0, !1, {
                  fileName: "app/components/article/ArticleBlockBanner.jsx",
                  lineNumber: 30,
                  columnNumber: 11
                }, this),
                link3 && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(
                  Link3,
                  {
                    className: "mt-[1em]",
                    intent: "button-xl",
                    colour: "mono",
                    to: link3,
                    children: /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Text, { tag: "p", intent: "ui-3xl", children: "Read on" }, void 0, !1, {
                      fileName: "app/components/article/ArticleBlockBanner.jsx",
                      lineNumber: 40,
                      columnNumber: 15
                    }, this)
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/components/article/ArticleBlockBanner.jsx",
                    lineNumber: 34,
                    columnNumber: 13
                  },
                  this
                )
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/components/article/ArticleBlockBanner.jsx",
              lineNumber: 24,
              columnNumber: 9
            },
            this
          )
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/components/article/ArticleBlockBanner.jsx",
        lineNumber: 13,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "flex justify-between", children: [
      author.name && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(
        Text,
        {
          tag: "address",
          intent: "bl-heading-base",
          className: "not-italic",
          children: [
            "By ",
            author.name
          ]
        },
        void 0,
        !0,
        {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 49,
          columnNumber: 11
        },
        this
      ),
      category && category.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "flex", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("span", { children: "(" }, void 0, !1, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 59,
          columnNumber: 13
        }, this),
        category.map((cat, index) => /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Text, { tag: "p", intent: "bl-heading-base", children: [
          cat.category,
          category.length > 0 && index + 1 !== category.length && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("span", { children: ",\xA0" }, void 0, !1, {
            fileName: "app/components/article/ArticleBlockBanner.jsx",
            lineNumber: 66,
            columnNumber: 23
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 63,
          columnNumber: 19
        }, this) }, cat._id, !1, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 62,
          columnNumber: 17
        }, this)),
        /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("span", { children: ")" }, void 0, !1, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 72,
          columnNumber: 13
        }, this)
      ] }, void 0, !0, {
        fileName: "app/components/article/ArticleBlockBanner.jsx",
        lineNumber: 58,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/article/ArticleBlockBanner.jsx",
      lineNumber: 47,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/article/ArticleBlockBanner.jsx",
    lineNumber: 12,
    columnNumber: 5
  }, this);
};

// app/components/modules/ArticlesModule.jsx
var import_react57 = __toESM(require_react());

// app/components/article/ArticleBlock.jsx
var import_react55 = __toESM(require_react());
var import_jsx_dev_runtime26 = __toESM(require_jsx_dev_runtime()), ArticleBlock = ({ article }) => {
  let { headline, colour, author, category, image, topic } = article;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
    "article",
    {
      className: "group relative w-full h-full aspect-square p-6 flex flex-col justify-between gap-6 ",
      style: { background: colour || "var(--accent-colour)" },
      children: [
        (image == null ? void 0 : image.asset) && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
          "div",
          {
            className: "absolute w-full h-full inset-0 overflow-hidden hidden group-hover:block group-focus:hidden",
            style: { background: colour || "#dfdfdf" },
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
              SanityImage,
              {
                value: image.asset,
                className: "h-full mix-blend-overlay rendering-pixelated object-cover"
              },
              void 0,
              !1,
              {
                fileName: "app/components/article/ArticleBlock.jsx",
                lineNumber: 22,
                columnNumber: 11
              },
              this
            )
          },
          void 0,
          !1,
          {
            fileName: "app/components/article/ArticleBlock.jsx",
            lineNumber: 16,
            columnNumber: 9
          },
          this
        ),
        /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", { className: "filter group-focus-visible:invert", children: /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Text, { tag: "h2", intent: "bl-heading-2xl", children: [
          topic && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Topic, { topic }, void 0, !1, {
            fileName: "app/components/article/ArticleBlock.jsx",
            lineNumber: 32,
            columnNumber: 21
          }, this),
          headline || "Untitled article"
        ] }, void 0, !0, {
          fileName: "app/components/article/ArticleBlock.jsx",
          lineNumber: 31,
          columnNumber: 9
        }, this) }, void 0, !1, {
          fileName: "app/components/article/ArticleBlock.jsx",
          lineNumber: 30,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", { className: "flex justify-between filter group-focus-visible:invert", children: [
          author.name && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
            Text,
            {
              tag: "address",
              intent: "bl-heading-base",
              className: "not-italic",
              children: [
                "By ",
                author.name
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 38,
              columnNumber: 11
            },
            this
          ),
          category && category.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", { className: "flex", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("span", { children: "(" }, void 0, !1, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 48,
              columnNumber: 13
            }, this),
            category.map((cat, index) => /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Text, { tag: "p", intent: "bl-heading-base", children: [
              cat.category,
              category.length > 0 && index + 1 !== category.length && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("span", { children: ",\xA0" }, void 0, !1, {
                fileName: "app/components/article/ArticleBlock.jsx",
                lineNumber: 55,
                columnNumber: 23
              }, this)
            ] }, void 0, !0, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 52,
              columnNumber: 19
            }, this) }, cat._id, !1, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 51,
              columnNumber: 17
            }, this)),
            /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("span", { children: ")" }, void 0, !1, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 61,
              columnNumber: 13
            }, this)
          ] }, void 0, !0, {
            fileName: "app/components/article/ArticleBlock.jsx",
            lineNumber: 47,
            columnNumber: 11
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/article/ArticleBlock.jsx",
          lineNumber: 36,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/article/ArticleBlock.jsx",
      lineNumber: 9,
      columnNumber: 5
    },
    this
  );
};

// app/components/modules/ArticlesModule.jsx
var import_jsx_dev_runtime27 = __toESM(require_jsx_dev_runtime()), ArticlesModule = ({ content }) => /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(Layout, { tag: "ul", intent: "grid", className: "grid-layout", children: content.articles.map((article) => /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)("li", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(Link2, { to: article.slug, children: /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(ArticleBlock, { article }, void 0, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 13,
  columnNumber: 15
}, this) }, void 0, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 12,
  columnNumber: 13
}, this) }, article._id, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 11,
  columnNumber: 11
}, this)) }, void 0, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 8,
  columnNumber: 5
}, this);

// app/components/modules/HeadingModule.jsx
var import_react58 = __toESM(require_react());
var import_jsx_dev_runtime28 = __toESM(require_jsx_dev_runtime()), HeadingModule = ({ content }) => /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(Layout, { intent: "module", children: /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(Text, { tag: "h3", intent: "bl-heading-2xl", children: content.heading }, void 0, !1, {
  fileName: "app/components/modules/HeadingModule.jsx",
  lineNumber: 8,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/modules/HeadingModule.jsx",
  lineNumber: 7,
  columnNumber: 5
}, this);

// app/components/modules/TextBlockModule.jsx
var import_react59 = __toESM(require_react());
var import_jsx_dev_runtime29 = __toESM(require_jsx_dev_runtime()), TextBlockModule = ({ content }) => {
  let { text: text2 } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(Layout, { intent: "text", children: /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(PortableText2, { text: text2 }, void 0, !1, {
    fileName: "app/components/modules/TextBlockModule.jsx",
    lineNumber: 9,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/modules/TextBlockModule.jsx",
    lineNumber: 8,
    columnNumber: 5
  }, this);
};

// app/components/modules/ShopModule.jsx
var import_react64 = __toESM(require_react());

// app/components/parts/AddToCart.jsx
var import_react61 = __toESM(require_react());
var import_jsx_dev_runtime30 = __toESM(require_jsx_dev_runtime()), AddToCart = ({ lines, analytics }) => {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)(fetcher.Form, { method: "post", action: "/cart", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)("input", { type: "hidden", name: "cartAction", value: "ADD_TO_CART" }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 10,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)("input", { type: "hidden", name: "lines", value: JSON.stringify(lines) }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 12,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)("input", { type: "hidden", name: "analytics", value: JSON.stringify(analytics) }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 13,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)(Button, { type: "submit", colour: "mid", intent: "base", children: /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)(Text, { intent: "button-base", children: "Add to Cart" }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 15,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 14,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/parts/AddToCart.jsx",
    lineNumber: 9,
    columnNumber: 5
  }, this);
};

// app/components/parts/CartPreview.jsx
var import_react63 = __toESM(require_react());
var import_jsx_dev_runtime31 = __toESM(require_jsx_dev_runtime()), CartPreview = ({ text: text2, link: link3 }) => {
  let { cart } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: "w-full h-max max-w-sm mx-auto", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: "w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(
        import_react63.Suspense,
        {
          fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(Badge, { intent: "big", location: "top", children: "0" }, void 0, !1, {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 16,
            columnNumber: 13
          }, this),
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(Await2, { resolve: cart, children: (cart2) => /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(Badge, { intent: "big", location: "top", children: (cart2 == null ? void 0 : cart2.totalQuantity) || 0 }, void 0, !1, {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 23,
            columnNumber: 15
          }, this) }, void 0, !1, {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 21,
            columnNumber: 11
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/parts/CartPreview.jsx",
          lineNumber: 14,
          columnNumber: 9
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(BasketIconThin, {}, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 29,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: "absolute w-full h-full inset-0 -z-10 flex items-end", children: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: "relative w-full  h-[79%]", children: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(import_react63.Suspense, { fallback: null, children: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(Await2, { resolve: cart, children: (cart2) => cart2.lines.edges.map(({ node }) => {
        let rotation = Math.floor(Math.random() * 50) - 25, x2 = Math.floor(Math.random() * 75) + 1, y2 = Math.floor(Math.random() * 50) + 1;
        return /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(
          "img",
          {
            role: "presentation",
            src: node.merchandise.image.url,
            className: "absolute h-1/2",
            style: {
              transform: `rotate(${rotation}deg)`,
              left: `${x2}%`,
              top: `${y2}%`
            }
          },
          node.id,
          !1,
          {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 40,
            columnNumber: 23
          },
          this
        );
      }) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 33,
        columnNumber: 15
      }, this) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 32,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 31,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 30,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 13,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: "flex justify-center mt-8", children: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(Link3, { to: link3 || "/cart", intent: "button-2xl", colour: "dark", children: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(Text, { intent: "button-2xl", children: text2 || "View Basket" }, void 0, !1, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 61,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 60,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 59,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/parts/CartPreview.jsx",
    lineNumber: 12,
    columnNumber: 5
  }, this);
};

// app/components/modules/ShopModule.jsx
var import_jsx_dev_runtime32 = __toESM(require_jsx_dev_runtime()), ShopModule = () => {
  let { allProducts } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Layout, { intent: "space", children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(
    "div",
    {
      className: cx("grid grid-cols-1 gap-8", "sm:grid-cols-3", "md:gap-16"),
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: cx("col-span-1", "sm:col-span-2"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(
          "div",
          {
            className: cx(
              "grid grid-cols-1 gap-16 px-0",
              "sm:grid-cols-2 sm:gap-8 sm:px-0",
              "md:grid-cols-2",
              "lg:grid-cols-3 lg:gap-16"
            ),
            children: allProducts.nodes.map((product) => /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Product, { product }, product.id, !1, {
              fileName: "app/components/modules/ShopModule.jsx",
              lineNumber: 27,
              columnNumber: 15
            }, this))
          },
          void 0,
          !1,
          {
            fileName: "app/components/modules/ShopModule.jsx",
            lineNumber: 18,
            columnNumber: 11
          },
          this
        ) }, void 0, !1, {
          fileName: "app/components/modules/ShopModule.jsx",
          lineNumber: 17,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "sticky top-24 h-max hidden sm:block", children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(CartPreview, {}, void 0, !1, {
          fileName: "app/components/modules/ShopModule.jsx",
          lineNumber: 32,
          columnNumber: 11
        }, this) }, void 0, !1, {
          fileName: "app/components/modules/ShopModule.jsx",
          lineNumber: 31,
          columnNumber: 9
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 14,
      columnNumber: 7
    },
    this
  ) }, void 0, !1, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 13,
    columnNumber: 5
  }, this);
}, Product = ({ product }) => /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "h-max max-w-xs mx-auto", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(
    "img",
    {
      src: product.featuredImage.url,
      alt: product.featuredImage.altText,
      className: "w-full h-full object-cover"
    },
    void 0,
    !1,
    {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 42,
      columnNumber: 7
    },
    this
  ),
  /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Text, { tag: "h4", intent: "ui-base", className: cx("my-4", "sm:my-8"), children: product.title }, void 0, !1, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 47,
    columnNumber: 7
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "flex flex-col gap-4", children: product.variants.nodes.map((variant) => /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(
    ProductVariant,
    {
      variant,
      product
    },
    variant.id,
    !1,
    {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 52,
      columnNumber: 11
    },
    this
  )) }, void 0, !1, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 50,
    columnNumber: 7
  }, this)
] }, void 0, !0, {
  fileName: "app/components/modules/ShopModule.jsx",
  lineNumber: 41,
  columnNumber: 5
}, this), ProductVariant = ({ variant, product }) => {
  let { id, selectedOptions, title, price } = variant, productAnalytics = {
    productGid: product.id,
    variantGid: id,
    name: product.title,
    variantName: title,
    brand: product.vendor,
    price: price.amount,
    quantity: 1
  };
  return /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: cx("flex justify-between gap-2 flex-col", "sm:flex-row"), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Text, { tag: "p", intent: "ui-base", children: selectedOptions[0].value }, void 0, !1, {
        fileName: "app/components/modules/ShopModule.jsx",
        lineNumber: 79,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Money, { withoutTrailingZeros: !0, data: price, className: "ui-base" }, void 0, !1, {
        fileName: "app/components/modules/ShopModule.jsx",
        lineNumber: 82,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 78,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(
      AddToCart,
      {
        lines: [
          {
            quantity: 1,
            merchandiseId: id
          }
        ],
        analytics: {
          products: [productAnalytics],
          totalValue: parseFloat(productAnalytics.price)
        }
      },
      void 0,
      !1,
      {
        fileName: "app/components/modules/ShopModule.jsx",
        lineNumber: 84,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 77,
    columnNumber: 5
  }, this);
};

// app/components/content/Content.jsx
var import_jsx_dev_runtime33 = __toESM(require_jsx_dev_runtime()), Content = ({ content }) => {
  switch (content._type) {
    case "textBlockModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(TextBlockModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 13,
        columnNumber: 14
      }, this);
    case "headingModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(HeadingModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 15,
        columnNumber: 14
      }, this);
    case "collapsibleModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(CollapsibleModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 17,
        columnNumber: 14
      }, this);
    case "imageModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(ImageModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 19,
        columnNumber: 14
      }, this);
    case "imageGridModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(ImageGridModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 21,
        columnNumber: 14
      }, this);
    case "textColumnsModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(TextColumnsModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 23,
        columnNumber: 14
      }, this);
    case "articlesModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(ArticlesModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 25,
        columnNumber: 14
      }, this);
    case "carouselModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(CarouselModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 27,
        columnNumber: 14
      }, this);
    case "shopModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(ShopModule, {}, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 29,
        columnNumber: 14
      }, this);
    default:
      return null;
  }
};

// app/components/article/Article.jsx
var import_jsx_dev_runtime34 = __toESM(require_jsx_dev_runtime()), Article = ({ article }) => /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Layout, { intent: "article", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(ArticleBlockBanner, { article }, void 0, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 12,
    columnNumber: 7
  }, this),
  article.date && /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Banner, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("time", { children: new Date(article.date).toLocaleDateString("en-UK", {
    year: "numeric",
    month: "long",
    day: "2-digit"
  }) }, void 0, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 15,
    columnNumber: 11
  }, this) }, void 0, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 14,
    columnNumber: 9
  }, this),
  article.content.map((content) => /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Content, { content }, content._id || content._key, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 25,
    columnNumber: 16
  }, this))
] }, void 0, !0, {
  fileName: "app/components/article/Article.jsx",
  lineNumber: 11,
  columnNumber: 5
}, this);

// node_modules/@sanity/preview-kit/dist/index.js
var import_react66 = __toESM(require_react(), 1);

// node_modules/suspend-react/dist/index.js
var globalCache = [];
function shallowEqualArrays(arrA, arrB, equal = (a4, b4) => a4 === b4) {
  if (arrA === arrB)
    return !0;
  if (!arrA || !arrB)
    return !1;
  let len = arrA.length;
  if (arrB.length !== len)
    return !1;
  for (let i7 = 0; i7 < len; i7++)
    if (!equal(arrA[i7], arrB[i7]))
      return !1;
  return !0;
}
function query(fn, keys, preload = !1, config2 = {}) {
  for (let entry3 of globalCache)
    if (shallowEqualArrays(keys, entry3.keys, entry3.equal)) {
      if (preload)
        return;
      if (Object.prototype.hasOwnProperty.call(entry3, "error"))
        throw entry3.error;
      if (Object.prototype.hasOwnProperty.call(entry3, "response"))
        return entry3.response;
      if (!preload)
        throw entry3.promise;
    }
  let entry2 = {
    keys,
    equal: config2.equal,
    promise: fn(...keys).then((response) => entry2.response = response).then(() => {
      config2.lifespan && config2.lifespan > 0 && setTimeout(() => {
        let index = globalCache.indexOf(entry2);
        index !== -1 && globalCache.splice(index, 1);
      }, config2.lifespan);
    }).catch((error2) => entry2.error = error2)
  };
  if (globalCache.push(entry2), !preload)
    throw entry2.promise;
}
var suspend = (fn, keys, config2) => query(fn, keys, !1, config2);

// node_modules/@sanity/preview-kit/dist/index.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1), _checkAuth = async (projectId2, token) => {
  let headers = token ? {
    Authorization: "Bearer ".concat(token)
  } : void 0, json4 = await (await fetch("https://".concat(projectId2, ".api.sanity.io/v1/users/me"), {
    credentials: "include",
    headers
  })).json();
  return Boolean(json4 == null ? void 0 : json4.id);
}, _lazyGroqStore = async () => {
  let pkg = await Promise.resolve().then(() => (init_index_browser(), index_browser_exports)), {
    groqStore: groqStore2
  } = "default" in pkg ? pkg.default : pkg;
  return groqStore2;
}, _lazyEventSourcePolyfill = async () => {
  let pkg = await Promise.resolve().then(() => __toESM(require_eventsource(), 1)), {
    EventSourcePolyfill
  } = "default" in pkg ? pkg.default : pkg;
  return EventSourcePolyfill;
};
function useParams2(params) {
  let stringifiedParams = (0, import_react66.useMemo)(() => JSON.stringify(params || {}), [params]);
  return (0, import_react66.useMemo)(() => JSON.parse(stringifiedParams), [stringifiedParams]);
}
var _definePreview = (_ref) => {
  let {
    projectId: projectId2,
    dataset: dataset2,
    documentLimit = 3e3,
    subscriptionThrottleMs = 10,
    overlayDrafts = !0,
    importEventSourcePolyfill,
    importGroqStore,
    preload,
    onPublicAccessOnly,
    checkAuth,
    includeTypes
  } = _ref;
  if (!projectId2)
    return console.warn("No projectId set for createPreviewHook, returning dummy hook"), function() {
      return console.warn("The hook returned by createPreviewHook is a dummy as there is no projectId set, returning null"), null;
    };
  let store;
  return function(token, query2, _params, _serverSnapshot) {
    if (typeof document > "u")
      throw new Error("Calling usePreview outside a browser environment isn't supported. Ensure the component using the hook is only rendering on the client. For example by wrapping it in PreviewSuspense.");
    if (!token && token !== null)
      throw new Error("No `token` given to usePreview hook, if this is intentional then set it to `null`");
    let [serverSnapshot] = (0, import_react66.useState)(() => _serverSnapshot), params = useParams2(_params);
    store || (onPublicAccessOnly && (checkAuth(projectId2, token) || onPublicAccessOnly()), store = importGroqStore()({
      projectId: projectId2,
      dataset: dataset2,
      documentLimit,
      subscriptionThrottleMs,
      includeTypes,
      token: token === null ? void 0 : token,
      EventSource: token === null ? void 0 : importEventSourcePolyfill(),
      listen: !0,
      overlayDrafts
    }));
    let initial = serverSnapshot ?? preload(store, query2, params), syncStore = (0, import_react66.useMemo)(() => {
      let snapshot = initial;
      return {
        getServerSnapshot: serverSnapshot === void 0 ? void 0 : () => serverSnapshot,
        getSnapshot: () => snapshot,
        subscribe: (onStoreChange) => {
          let subscription = store.subscribe(query2, typeof params > "u" ? {} : params, (err, result) => {
            if (err)
              throw console.error("Error thrown in the usePreviewHook subscription", err), err;
            snapshot = result, onStoreChange();
          });
          return () => subscription.unsubscribe();
        }
      };
    }, [initial, params, query2, serverSnapshot]);
    return (0, import_react66.useEffect)(() => {
      let callback = () => {
        store.close();
      };
      return window.addEventListener("beforeunload", callback), () => window.removeEventListener("beforeunload", callback);
    }, []), (0, import_react66.useSyncExternalStore)(syncStore.subscribe, syncStore.getSnapshot, syncStore.getServerSnapshot);
  };
}, _preloadQuery = (store, query2, params) => store.query(query2, params), definePreview = (config2) => _definePreview({
  ...config2,
  importEventSourcePolyfill: () => suspend(() => _lazyEventSourcePolyfill(), ["@sanity/preview-kit", "event-source-polyfill"]),
  importGroqStore: () => suspend(() => _lazyGroqStore(), ["@sanity/preview-kit", "@sanity/groq-store"]),
  preload: (store, query2, params) => suspend(() => _preloadQuery(store, query2, params), ["@sanity/preview-kit", "preload", query2, JSON.stringify(params ?? {})]),
  checkAuth: (projectId2, token) => suspend(() => _checkAuth(projectId2, token), ["@sanity/preview-kit", "checkAuth", projectId2, token])
});
function PreviewSuspense(_ref2) {
  let {
    children,
    fallback
  } = _ref2, [mounted, mount] = (0, import_react66.useReducer)(() => !0, !1);
  return (0, import_react66.useEffect)(mount, [mount]), /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_react66.Suspense, {
    fallback,
    children: mounted ? children : fallback
  });
}

// app/components/preview/ArticlePreview.jsx
var import_react68 = __toESM(require_react());

// app/components/preview/ExitPreview.jsx
var import_react67 = __toESM(require_react()), import_jsx_dev_runtime35 = __toESM(require_jsx_dev_runtime());

// app/components/preview/ArticlePreview.jsx
var import_jsx_dev_runtime36 = __toESM(require_jsx_dev_runtime()), ArticlePreview = ({ query: query2, params }) => {
  let article = definePreview({
    projectId: "yt08sdph",
    dataset: "production"
  })(
    null,
    query2,
    params
  );
  return /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(import_jsx_dev_runtime36.Fragment, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(Article, { article }, void 0, !1, {
    fileName: "app/components/preview/ArticlePreview.jsx",
    lineNumber: 18,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/preview/ArticlePreview.jsx",
    lineNumber: 17,
    columnNumber: 5
  }, this);
};

// app/routes/articles/$slug.jsx
var import_jsx_dev_runtime37 = __toESM(require_jsx_dev_runtime()), seo2 = ({ data }) => ({
  title: data.article.seoTitle,
  description: data.article.seoDescription.length > 155 ? data.article.seoDescription.substring(0, 154) + "\u2026" : data.article.seoDescription
}), handle2 = {
  seo: seo2
}, links2 = () => [{ rel: "stylesheet", href: swiper_min_default }];
async function loader3({ context: context2, params, request }) {
  let { sanityClient, usePreview } = context2;
  if ((await getSession(request.headers.get("Cookie"))).get("preview"))
    return { preview: !0, query: articleDataQuery, params };
  let article = await sanityClient.fetch(articleDataQuery, params);
  return json3({
    article,
    usePreview
  });
}
function ArticleRoute() {
  let { preview, article, query: query2, params, usePreview } = useLoaderData2();
  return preview ? /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(PreviewSuspense, { fallback: "Loading...", children: /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(ArticlePreview, { query: query2, params, usePreview }, void 0, !1, {
    fileName: "app/routes/articles/$slug.jsx",
    lineNumber: 47,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/routes/articles/$slug.jsx",
    lineNumber: 46,
    columnNumber: 5
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(Article, { article }, void 0, !1, {
    fileName: "app/routes/articles/$slug.jsx",
    lineNumber: 50,
    columnNumber: 5
  }, this);
}

// app/routes/[sitemap.xml].tsx
var sitemap_xml_exports = {};
__export(sitemap_xml_exports, {
  loader: () => loader4
});
var MAX_URLS = 250;
async function loader4({ request, context: { storefront } }) {
  let data = await storefront.query(SITEMAP_QUERY, {
    variables: {
      urlLimits: MAX_URLS,
      language: storefront.i18n.language
    }
  });
  return invariant4(data, "Sitemap data is missing"), new Response(
    shopSitemap({ data, baseUrl: new URL(request.url).origin }),
    {
      headers: {
        "content-type": "application/xml",
        "cache-control": `max-age=${60 * 60 * 24}`
      }
    }
  );
}
function shopSitemap({
  data,
  baseUrl
}) {
  let productsData = flattenConnection(data.products).filter((product) => product.onlineStoreUrl).map((product) => {
    var _a2;
    let finalObject = {
      url: `${baseUrl}/products/${product.handle}`,
      lastMod: product.updatedAt,
      changeFreq: "daily"
    };
    return (_a2 = product.featuredImage) != null && _a2.url && (finalObject.image = {
      url: product.featuredImage.url
    }, product.title && (finalObject.image.title = product.title), product.featuredImage.altText && (finalObject.image.caption = product.featuredImage.altText)), finalObject;
  }), collectionsData = flattenConnection(data.collections).filter((collection) => collection.onlineStoreUrl).map((collection) => ({
    url: `${baseUrl}/collections/${collection.handle}`,
    lastMod: collection.updatedAt,
    changeFreq: "daily"
  })), pagesData = flattenConnection(data.pages).filter((page) => page.onlineStoreUrl).map((page) => ({
    url: `${baseUrl}/pages/${page.handle}`,
    lastMod: page.updatedAt,
    changeFreq: "weekly"
  }));
  return `
    <urlset
      xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
      xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"
    >
      ${[...productsData, ...collectionsData, ...pagesData].map((url) => renderUrlTag(url)).join("")}
    </urlset>`;
}
function renderUrlTag({
  url,
  lastMod,
  changeFreq,
  image
}) {
  return `
    <url>
      <loc>${url}</loc>
      <lastmod>${lastMod}</lastmod>
      <changefreq>${changeFreq}</changefreq>
      ${image ? `
        <image:image>
          <image:loc>${image.url}</image:loc>
          <image:title>${image.title ?? ""}</image:title>
          <image:caption>${image.caption ?? ""}</image:caption>
        </image:image>` : ""}

    </url>
  `;
}
var SITEMAP_QUERY = `#graphql
  query sitemaps($urlLimits: Int, $language: LanguageCode)
  @inContext(language: $language) {
    products(
      first: $urlLimits
      query: "published_status:'online_store:visible'"
    ) {
      nodes {
        updatedAt
        handle
        onlineStoreUrl
        title
        featuredImage {
          url
          altText
        }
      }
    }
    collections(
      first: $urlLimits
      query: "published_status:'online_store:visible'"
    ) {
      nodes {
        updatedAt
        handle
        onlineStoreUrl
      }
    }
    pages(first: $urlLimits, query: "published_status:'published'") {
      nodes {
        updatedAt
        handle
        onlineStoreUrl
      }
    }
  }
`;

// app/routes/api/countries.tsx
var countries_exports = {};
__export(countries_exports, {
  default: () => CountriesApiRoute,
  loader: () => loader5
});
async function loader5({ context: { storefront } }) {
  return json3(
    {
      default: {
        label: "United Kingdom (GBP \xA3)",
        language: "EN",
        country: "GB",
        currency: "GBP"
      }
    },
    {
      headers: {
        "cache-control": storefront.generateCacheControlHeader(
          storefront.CacheLong()
        )
      }
    }
  );
}
function CountriesApiRoute() {
  return null;
}

// app/routes/[robots.txt].tsx
var robots_txt_exports = {};
__export(robots_txt_exports, {
  loader: () => loader6
});
var loader6 = ({ request }) => {
  let url = new URL(request.url);
  return new Response(robotsTxtData({ url: url.origin }), {
    status: 200,
    headers: {
      "content-type": "text/plain",
      "cache-control": `max-age=${60 * 60 * 24}`
    }
  });
};
function robotsTxtData({ url }) {
  let sitemapUrl = url ? `${url}/sitemap.xml` : void 0;
  return `
User-agent: *
Disallow: /admin
Disallow: /cart
Disallow: /orders
Disallow: /checkouts/
Disallow: /checkout
Disallow: /carts
Disallow: /account
${sitemapUrl ? `Sitemap: ${sitemapUrl}` : ""}

# Google adsbot ignores robots.txt unless specifically named!
User-agent: adsbot-google
Disallow: /checkouts/
Disallow: /checkout
Disallow: /carts
Disallow: /orders

User-agent: Pinterest
Crawl-delay: 1
`.trim();
}

// app/routes/$slug.jsx
var slug_exports2 = {};
__export(slug_exports2, {
  default: () => PageRoute,
  handle: () => handle3,
  links: () => links3,
  loader: () => loader7
});
var import_react73 = __toESM(require_react());

// app/components/page/Page.jsx
var import_react71 = __toESM(require_react());
var import_jsx_dev_runtime38 = __toESM(require_jsx_dev_runtime()), Page = ({ page }) => /* @__PURE__ */ (0, import_jsx_dev_runtime38.jsxDEV)(Layout, { intent: "page", children: page.content.map((content) => /* @__PURE__ */ (0, import_jsx_dev_runtime38.jsxDEV)(Content, { content }, content._id || content._key, !1, {
  fileName: "app/components/page/Page.jsx",
  lineNumber: 9,
  columnNumber: 16
}, this)) }, void 0, !1, {
  fileName: "app/components/page/Page.jsx",
  lineNumber: 7,
  columnNumber: 5
}, this);

// app/routes/$slug.jsx
var import_jsx_dev_runtime39 = __toESM(require_jsx_dev_runtime()), seo3 = ({ data }) => {
  var _a2;
  return {
    title: data.page.seoTitle,
    description: (_a2 = data.page) != null && _a2.seoDescription ? data.page.seoDescription.length > 155 ? data.page.seoDescription.substring(0, 154) + "\u2026" : data.page.seoDescription : ""
  };
}, handle3 = {
  seo: seo3
}, links3 = () => [{ rel: "stylesheet", href: swiper_min_default }];
async function loader7({ context: context2, params, request }) {
  let { sanityClient, usePreview } = context2;
  if ((await getSession(request.headers.get("Cookie"))).get("preview"))
    return { preview: !0, query: pageDataQuery, params };
  let page = await sanityClient.fetch(pageDataQuery, params);
  return json3({
    page,
    usePreview
  });
}
function PageRoute() {
  let { page } = useLoaderData2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)(Page, { page }, void 0, !1, {
    fileName: "app/routes/$slug.jsx",
    lineNumber: 43,
    columnNumber: 10
  }, this);
}

// app/routes/index.jsx
var routes_exports = {};
__export(routes_exports, {
  default: () => Index,
  handle: () => handle4,
  loader: () => loader8,
  meta: () => meta2
});
init_groq_esm();
init_dist();

// app/components/home/Hero.jsx
var import_react74 = __toESM(require_react());
var import_jsx_dev_runtime40 = __toESM(require_jsx_dev_runtime()), Hero = ({ hero }) => {
  let { store, colour } = hero;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)(Layout, { tag: "article", intent: "banner", colour: colour || "#e3e8ef", children: /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)("div", { className: "relative w-full h-full", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)("div", { className: cx("relative w-full h-full flex flex-col gap-4 z-10"), children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)(Text, { intent: "ui-6xl", children: store.title }, void 0, !1, {
        fileName: "app/components/home/Hero.jsx",
        lineNumber: 13,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)(
        Link3,
        {
          intent: "button-2xl",
          colour: "mono",
          className: "flex-grow-0",
          to: store.slug.shop.slug.fullUrl,
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)(Text, { intent: "ui-3xl", children: "Buy" }, void 0, !1, {
            fileName: "app/components/home/Hero.jsx",
            lineNumber: 20,
            columnNumber: 13
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/home/Hero.jsx",
          lineNumber: 14,
          columnNumber: 11
        },
        this
      )
    ] }, void 0, !0, {
      fileName: "app/components/home/Hero.jsx",
      lineNumber: 12,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)(
      "div",
      {
        className: "absolute w-full h-full inset-0 flex justify-center items-center p-8",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)(
          "img",
          {
            src: store.image,
            alt: store.title,
            className: "w-full h-full object-contain"
          },
          void 0,
          !1,
          {
            fileName: "app/components/home/Hero.jsx",
            lineNumber: 28,
            columnNumber: 11
          },
          this
        )
      },
      void 0,
      !1,
      {
        fileName: "app/components/home/Hero.jsx",
        lineNumber: 23,
        columnNumber: 9
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/home/Hero.jsx",
    lineNumber: 11,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/home/Hero.jsx",
    lineNumber: 10,
    columnNumber: 5
  }, this);
}, Hero_default = Hero;

// app/routes/index.jsx
var import_jsx_dev_runtime41 = __toESM(require_jsx_dev_runtime()), handle4 = {
  seo: {
    title: "Home"
  }
}, meta2 = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
async function loader8({ context: context2 }) {
  let [homepage] = await Promise.all([getHomepageData(context2)]);
  return json3({
    homepage
  });
}
function Index() {
  let { homepage } = useLoaderData();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(Banner, { children: homepage.heroBanner ? homepage.heroBanner : "Currently\u2026" }, void 0, !1, {
      fileName: "app/routes/index.jsx",
      lineNumber: 36,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(Hero_default, { hero: homepage.hero }, void 0, !1, {
      fileName: "app/routes/index.jsx",
      lineNumber: 39,
      columnNumber: 7
    }, this),
    homepage.featured ? /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(import_jsx_dev_runtime41.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(Banner, { children: homepage.featuredBanner ? homepage.featuredBanner : "Featured articles" }, void 0, !1, {
        fileName: "app/routes/index.jsx",
        lineNumber: 42,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(Layout, { intent: "grid", tag: "ul", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)("li", { className: "col-span-full w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(
          ArticleBlockBanner,
          {
            article: homepage.featured[0],
            link: homepage.featured[0].slug
          },
          void 0,
          !1,
          {
            fileName: "app/routes/index.jsx",
            lineNumber: 49,
            columnNumber: 17
          },
          this
        ) }, void 0, !1, {
          fileName: "app/routes/index.jsx",
          lineNumber: 48,
          columnNumber: 13
        }, this),
        homepage.featured.map((article, index) => {
          if (index !== 0)
            return /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)("li", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(Link3, { to: article.slug, intent: "block", className: "group", children: /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(ArticleBlock, { article }, void 0, !1, {
              fileName: "app/routes/index.jsx",
              lineNumber: 61,
              columnNumber: 21
            }, this) }, void 0, !1, {
              fileName: "app/routes/index.jsx",
              lineNumber: 60,
              columnNumber: 19
            }, this) }, article._id, !1, {
              fileName: "app/routes/index.jsx",
              lineNumber: 59,
              columnNumber: 17
            }, this);
        })
      ] }, void 0, !0, {
        fileName: "app/routes/index.jsx",
        lineNumber: 47,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/index.jsx",
      lineNumber: 41,
      columnNumber: 9
    }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(Banner, { children: "No featured articles" }, void 0, !1, {
      fileName: "app/routes/index.jsx",
      lineNumber: 69,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/index.jsx",
    lineNumber: 35,
    columnNumber: 5
  }, this);
}
async function getHomepageData({ sanityClient }) {
  let query2 = groq`*[_type == "home"][0] {
		"heroBanner": heroBanner,
    "hero": hero -> {colour, store {
      title,
      "image": previewImageUrl,
      "slug": ${shopLinkQuery},
    }},
		"featuredBanner": featuredBanner,
		"featured": featured[0...3] -> {
			_id,
			headline,
			"slug": slug.fullUrl,
			intro,
			"colour":colour->colourLight,
			author-> {name},
      topic -> {
        topic,
        image {
          asset-> {_id}
        }
      },
			category[] -> {_id, category},
			image {
          		alt,
            	asset->{_id}
          	}
		}}`;
  return await sanityClient.fetch(query2);
}

// app/routes/cart.jsx
var cart_exports = {};
__export(cart_exports, {
  action: () => action3,
  cartAdd: () => cartAdd,
  cartCreate: () => cartCreate,
  cartDiscountCodesUpdate: () => cartDiscountCodesUpdate,
  cartRemove: () => cartRemove,
  cartUpdate: () => cartUpdate,
  cartUpdateBuyerIdentity: () => cartUpdateBuyerIdentity,
  default: () => CartPage,
  handle: () => handle5,
  meta: () => meta3
});
var import_react79 = __toESM(require_react());

// app/components/loaders/CartLoader.jsx
var import_react76 = __toESM(require_react());

// app/components/parts/Spinner.jsx
var import_react75 = __toESM(require_react()), import_jsx_dev_runtime42 = __toESM(require_jsx_dev_runtime()), points = 5, radius = 10, Spinner = () => /* @__PURE__ */ (0, import_jsx_dev_runtime42.jsxDEV)("div", { className: "relative w-8 h-8 animate-spin", children: Array(points).fill().map((v3, index) => {
  let x2 = radius * Math.cos(2 * Math.PI * index / points), y2 = radius * Math.sin(2 * Math.PI * index / points);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime42.jsxDEV)(
    "span",
    {
      className: "absolute w-1 h-1 rounded-full bg-black left-[calc(50%-2px)] top-[calc(50%-2px)]",
      style: { transform: `translate(${x2}px, ${y2}px)` }
    },
    index,
    !1,
    {
      fileName: "app/components/parts/Spinner.jsx",
      lineNumber: 15,
      columnNumber: 15
    },
    this
  );
}) }, void 0, !1, {
  fileName: "app/components/parts/Spinner.jsx",
  lineNumber: 8,
  columnNumber: 7
}, this), Spinner_default = Spinner;

// app/components/loaders/CartLoader.jsx
var import_jsx_dev_runtime43 = __toESM(require_jsx_dev_runtime()), CartLoader = () => /* @__PURE__ */ (0, import_jsx_dev_runtime43.jsxDEV)("div", { className: "w-full h-[calc(100vh-6rem)] flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_dev_runtime43.jsxDEV)("div", { className: "flex items-center justify-center gap-1", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime43.jsxDEV)("h2", { className: "mb-[1px] text-2xl", children: "Loading Cart" }, void 0, !1, {
    fileName: "app/components/loaders/CartLoader.jsx",
    lineNumber: 8,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime43.jsxDEV)(Spinner_default, {}, void 0, !1, {
    fileName: "app/components/loaders/CartLoader.jsx",
    lineNumber: 9,
    columnNumber: 9
  }, this)
] }, void 0, !0, {
  fileName: "app/components/loaders/CartLoader.jsx",
  lineNumber: 7,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/loaders/CartLoader.jsx",
  lineNumber: 6,
  columnNumber: 5
}, this), CartLoader_default = CartLoader;

// app/components/parts/Dash.jsx
var import_react77 = __toESM(require_react()), import_jsx_dev_runtime44 = __toESM(require_jsx_dev_runtime()), Dash = ({ className }) => /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(
  "div",
  {
    className: cx("w-full border-b-2 border-dotted border-black select-none", className),
    "aria-hidden": "true"
  },
  void 0,
  !1,
  {
    fileName: "app/components/parts/Dash.jsx",
    lineNumber: 6,
    columnNumber: 5
  },
  this
);

// app/routes/cart.jsx
var import_jsx_dev_runtime45 = __toESM(require_jsx_dev_runtime()), handle5 = {
  seo: {
    title: "Cart"
  }
}, meta3 = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
async function action3({ request, context: context2 }) {
  let { session, storefront } = context2, headers = new Headers(), [formData, storedCartId, customerAccessToken] = await Promise.all([
    request.formData(),
    session.get("cartId"),
    session.get("customerAccessToken")
  ]), cartId = storedCartId, cartAction = formData.get("cartAction");
  invariant4(cartAction, "No cartAction defined");
  let countryCode = formData.get("countryCode") ? formData.get("countryCode") : null, status = 200, result;
  switch (cartAction) {
    case "ADD_TO_CART":
      let lines = formData.get("lines") ? JSON.parse(String(formData.get("lines"))) : [];
      invariant4(lines.length, "No lines to add"), cartId ? result = await cartAdd({
        cartId,
        lines,
        storefront
      }) : result = await cartCreate({
        input: countryCode ? { lines, buyerIdentity: { countryCode } } : { lines },
        storefront
      }), cartId = result.cart.id;
      break;
    case "REMOVE_FROM_CART":
      let lineIds = formData.get("linesIds") ? JSON.parse(String(formData.get("linesIds"))) : [];
      invariant4(lineIds.length, "No lines to remove"), result = await cartRemove({
        cartId,
        lineIds,
        storefront
      }), cartId = result.cart.id;
      break;
    case "UPDATE_CART":
      let updateLines = formData.get("lines") ? JSON.parse(String(formData.get("lines"))) : [];
      invariant4(updateLines.length, "No lines to update"), result = await cartUpdate({
        cartId,
        lines: updateLines,
        storefront
      }), cartId = result.cart.id;
      break;
    case "UPDATE_DISCOUNT":
      invariant4(cartId, "Missing cartId");
      let discountCodes = [formData.get("discountCode")];
      result = await cartDiscountCodesUpdate({
        cartId,
        discountCodes,
        storefront
      }), cartId = result.cart.id;
      break;
    case "UPDATE_BUYER_IDENTITY":
      let buyerIdentity = formData.get("buyerIdentity") ? JSON.parse(String(formData.get("buyerIdentity"))) : {};
      result = cartId ? await cartUpdateBuyerIdentity({
        cartId,
        buyerIdentity: {
          ...buyerIdentity,
          customerAccessToken
        },
        storefront
      }) : await cartCreate({
        input: {
          buyerIdentity: {
            ...buyerIdentity,
            customerAccessToken
          }
        },
        storefront
      }), cartId = result.cart.id;
      break;
    default:
      invariant4(!1, `${cartAction} cart action is not defined`);
  }
  session.set("cartId", cartId), headers.set("Set-Cookie", await session.commit());
  let redirectTo = formData.get("redirectTo") ?? null;
  typeof redirectTo == "string" && isLocalPath(redirectTo) && (status = 303, headers.set("Location", redirectTo));
  let { cart, errors } = result;
  return json3(
    {
      cart,
      errors,
      analytics: {
        cartId
      }
    },
    { status, headers }
  );
}
function CartPage() {
  let { cart, shop } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(import_react79.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartLoader_default, {}, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 179,
    columnNumber: 27
  }, this), children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Await2, { resolve: cart, children: (cart2) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Cart, { cart: cart2, shop }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 180,
    columnNumber: 42
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 180,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 179,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 178,
    columnNumber: 5
  }, this);
}
var Cart = ({ cart, shop }) => {
  var _a2, _b;
  let cartHasItems = Boolean(((_b = (_a2 = cart == null ? void 0 : cart.lines) == null ? void 0 : _a2.edges) == null ? void 0 : _b.length) || 0);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(import_jsx_dev_runtime45.Fragment, { children: cartHasItems ? /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartDetails, { cart, shop }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 190,
    columnNumber: 23
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(EmptyCart, {}, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 190,
    columnNumber: 65
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 189,
    columnNumber: 5
  }, this);
}, CartDetails = ({ cart, shop }) => {
  let { lines, cost, checkoutUrl } = cart;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Layout, { intent: "cart", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text, { tag: "h2", intent: "ui-3xl", children: "Basket contents" }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 199,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(
      "div",
      {
        className: cx(
          "mt-8 grid grid-cols-1 gap-8",
          "md:grid-cols-3 md:gap-16"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(
            "div",
            {
              className: cx(
                "order-last col-span-2 flex flex-col",
                "md:order-first"
              ),
              children: [
                lines.edges.map(({ node }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartLine, { line: node }, node.id, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 215,
                  columnNumber: 13
                }, this)),
                /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartTotal, { cost }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 217,
                  columnNumber: 11
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("a", { href: checkoutUrl, target: "_self", className: "ml-auto mr-20 mt-8", children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Button, { tag: "div", intent: "xl", colour: "dark", children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text, { intent: "button-2xl", children: "Checkout" }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 220,
                  columnNumber: 15
                }, this) }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 219,
                  columnNumber: 13
                }, this) }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 218,
                  columnNumber: 11
                }, this)
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/routes/cart.jsx",
              lineNumber: 208,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartPreview, { text: "Back to shop", link: shop.shop.slug.fullUrl }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 224,
            columnNumber: 9
          }, this)
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/routes/cart.jsx",
        lineNumber: 202,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 198,
    columnNumber: 5
  }, this);
}, EmptyCart = () => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Layout, { intent: "centre", children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text, { tag: "h2", intent: "ui-2xl", children: "Basket is empty" }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 233,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 232,
  columnNumber: 5
}, this), CartLineWrapper = ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("div", { className: "w-full h-max grid grid-cols-[1fr_64px] gap-2", children }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 242,
  columnNumber: 5
}, this), CartLine = ({ line }) => {
  let { id, merchandise } = line;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartLineWrapper, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(
      "div",
      {
        className: "flex gap-2 items-baseline justify-self-stretch",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text, { tag: "h4", intent: "ui-xl", children: merchandise.product.title }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 255,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text, { tag: "h5", intent: "ui-xl", className: "text-center", children: merchandise.title }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 258,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Dash, { className: "flex-1" }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 261,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(
            Money,
            {
              withoutTrailingZeros: !0,
              data: merchandise.price,
              className: "text-right ui-xl"
            },
            void 0,
            !1,
            {
              fileName: "app/routes/cart.jsx",
              lineNumber: 262,
              columnNumber: 11
            },
            this
          )
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/routes/cart.jsx",
        lineNumber: 252,
        columnNumber: 9
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("div", { className: "justify-self-end w-16 text-right", children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartRemove, { id }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 269,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 268,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 251,
    columnNumber: 5
  }, this);
}, CartRemove = ({ id }) => {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(fetcher.Form, { action: "/cart", method: "post", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("input", { type: "hidden", name: "cartAction", value: "REMOVE_FROM_CART" }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 280,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("input", { type: "hidden", name: "linesIds", value: JSON.stringify(id) }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 281,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Button, { type: "submit", colour: "light", intent: "link", children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text, { intent: "button-xl", children: "remove" }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 283,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 282,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 279,
    columnNumber: 5
  }, this);
}, CartTotal = ({ cost }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CartLineWrapper, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("div", { className: "flex gap-2 items-baseline justify-self-stretch mt-8", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text, { tag: "h4", intent: "ui-xl", children: "Total" }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 293,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Dash, { className: "flex-1" }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 296,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(
    Money,
    {
      withoutTrailingZeros: !0,
      data: cost.totalAmount,
      className: "text-right ui-xl"
    },
    void 0,
    !1,
    {
      fileName: "app/routes/cart.jsx",
      lineNumber: 297,
      columnNumber: 9
    },
    this
  )
] }, void 0, !0, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 292,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 291,
  columnNumber: 5
}, this), USER_ERROR_FRAGMENT = `#graphql
  fragment ErrorFragment on CartUserError {
    message
    field
    code
  }
`, LINES_CART_FRAGMENT = `#graphql
  fragment CartLinesFragment on Cart {
    id
    totalQuantity
  }
`, CREATE_CART_MUTATION = `#graphql
  mutation ($input: CartInput!, $country: CountryCode = ZZ, $language: LanguageCode)
  @inContext(country: $country, language: $language) {
    cartCreate(input: $input) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
`;
async function cartCreate({ input, storefront }) {
  let { cartCreate: cartCreate2 } = await storefront.mutate(CREATE_CART_MUTATION, {
    variables: { input }
  });
  return invariant4(cartCreate2, "No data returned from cartCreate mutation"), cartCreate2;
}
var ADD_LINES_MUTATION = `#graphql
  mutation ($cartId: ID!, $lines: [CartLineInput!]!, $country: CountryCode = ZZ, $language: LanguageCode)
  @inContext(country: $country, language: $language) {
    cartLinesAdd(cartId: $cartId, lines: $lines) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
`;
async function cartAdd({ cartId, lines, storefront }) {
  let { cartLinesAdd } = await storefront.mutate(ADD_LINES_MUTATION, {
    variables: { cartId, lines }
  });
  return invariant4(cartLinesAdd, "No data returned from cartLinesAdd mutation"), cartLinesAdd;
}
var REMOVE_LINE_ITEMS_MUTATION = `#graphql
  mutation ($cartId: ID!, $lineIds: [ID!]!, $language: LanguageCode, $country: CountryCode)
  @inContext(country: $country, language: $language) {
    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {
      cart {
        id
        totalQuantity
        lines(first: 100) {
          edges {
            node {
              id
              quantity
              merchandise {
                ...on ProductVariant {
                  id
                }
              }
            }
          }
        }
      }
      errors: userErrors {
        message
        field
        code
      }
    }
  }
`;
async function cartRemove({ cartId, lineIds, storefront }) {
  let { cartLinesRemove } = await storefront.mutate(
    REMOVE_LINE_ITEMS_MUTATION,
    {
      variables: {
        cartId,
        lineIds
      }
    }
  );
  return invariant4(cartLinesRemove, "No data returned from remove lines mutation"), cartLinesRemove;
}
var LINES_UPDATE_MUTATION = `#graphql
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
  mutation ($cartId: ID!, $lines: [CartLineUpdateInput!]!, $language: LanguageCode, $country: CountryCode)
  @inContext(country: $country, language: $language) {
    cartLinesUpdate(cartId: $cartId, lines: $lines) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
`;
async function cartUpdate({ cartId, lines, storefront }) {
  let { cartLinesUpdate } = await storefront.mutate(LINES_UPDATE_MUTATION, {
    variables: { cartId, lines }
  });
  return invariant4(
    cartLinesUpdate,
    "No data returned from update lines items mutation"
  ), cartLinesUpdate;
}
var UPDATE_CART_BUYER_COUNTRY = `#graphql
 mutation(
   $cartId: ID!
   $buyerIdentity: CartBuyerIdentityInput!
   $country: CountryCode = ZZ
   $language: LanguageCode
 ) @inContext(country: $country, language: $language) {
   cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {
     cart {
       id
       buyerIdentity {
         email
         phone
         countryCode
       }
     }
     errors: userErrors {
       message
       field
       code
     }
   }
 }
`;
async function cartUpdateBuyerIdentity({
  cartId,
  buyerIdentity,
  storefront
}) {
  let { cartBuyerIdentityUpdate } = await storefront.mutate(
    UPDATE_CART_BUYER_COUNTRY,
    {
      variables: {
        cartId,
        buyerIdentity
      }
    }
  );
  return invariant4(
    cartBuyerIdentityUpdate,
    "No data returned from cart buyer identity update mutation"
  ), cartBuyerIdentityUpdate;
}
var DISCOUNT_CODES_UPDATE = `#graphql
  mutation cartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!], $country: CountryCode = ZZ)
    @inContext(country: $country) {
    cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {
      cart {
        id
        discountCodes {
          code
        }
      }
      errors: userErrors {
        field
        message
      }
    }
  }
`;
async function cartDiscountCodesUpdate({
  cartId,
  discountCodes,
  storefront
}) {
  let { cartDiscountCodesUpdate: cartDiscountCodesUpdate2 } = await storefront.mutate(
    DISCOUNT_CODES_UPDATE,
    {
      variables: {
        cartId,
        discountCodes
      }
    }
  );
  return invariant4(
    cartDiscountCodesUpdate2,
    "No data returned from the cartDiscountCodesUpdate mutation"
  ), cartDiscountCodesUpdate2;
}

// app/routes/$.tsx
var __exports = {};
__export(__exports, {
  default: () => Component2,
  loader: () => loader9
});
async function loader9() {
  throw new Response("Not found", { status: 404 });
}
function Component2() {
  return null;
}

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/routes/graphiql.jsx
var graphiql_exports = {};
__export(graphiql_exports, {
  loader: () => loader10
});
var loader10 = it;

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx
var virtual_root_exports = {};
__export(virtual_root_exports, {
  default: () => App2,
  links: () => links4,
  meta: () => meta4
});

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/assets/styles.css
var styles_default = "/build/_assets/styles-O7MQZLJO.css";

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/assets/favicon.svg
var favicon_default = "/build/_assets/favicon-5FIZBM2K.svg";

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/components/Layout.jsx
var import_jsx_dev_runtime46 = __toESM(require_jsx_dev_runtime(), 1);
function Layout2(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime46.jsxDEV)("div", { className: "hydrogen-virtual-route", children: props.children }, void 0, !1, {
    fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/components/Layout.jsx",
    lineNumber: 2,
    columnNumber: 10
  }, this);
}

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx
var import_jsx_dev_runtime47 = __toESM(require_jsx_dev_runtime(), 1), links4 = () => [
  { rel: "stylesheet", href: styles_default },
  { rel: "icon", type: "image/svg+xml", href: favicon_default }
], meta4 = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
function App2() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)("html", { lang: "en", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 24,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 25,
        columnNumber: 7
      }, this)
    ] }, void 0, !0, {
      fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
      lineNumber: 23,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(Layout2, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(Outlet, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 28,
        columnNumber: 15
      }, this) }, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 28,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(ScrollRestoration2, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 29,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 30,
        columnNumber: 7
      }, this)
    ] }, void 0, !0, {
      fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
      lineNumber: 27,
      columnNumber: 5
    }, this)
  ] }, void 0, !0, {
    fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
    lineNumber: 22,
    columnNumber: 10
  }, this);
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { version: "2cbf4522", entry: { module: "/build/entry.client-OKERB4MM.js", imports: ["/build/_shared/chunk-66Q2ORQR.js", "/build/_shared/chunk-5KL4PAQL.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-HWQJGKLM.js", imports: ["/build/_shared/chunk-AUYLHJJM.js", "/build/_shared/chunk-4FYRCE6B.js", "/build/_shared/chunk-UGZJF77U.js", "/build/_shared/chunk-37MA56SS.js", "/build/_shared/chunk-M2ZFJSOH.js", "/build/_shared/chunk-BWK6FPRY.js", "/build/_shared/chunk-V65A42ED.js", "/build/_shared/chunk-TKX6R6MJ.js"], hasAction: !0, hasLoader: !0, hasCatchBoundary: !0, hasErrorBoundary: !0 }, "routes/$": { id: "routes/$", parentId: "root", path: "*", index: void 0, caseSensitive: void 0, module: "/build/routes/$-UTJQRW44.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/$slug": { id: "routes/$slug", parentId: "root", path: ":slug", index: void 0, caseSensitive: void 0, module: "/build/routes/$slug-RMIAASY5.js", imports: ["/build/_shared/chunk-EHWD6G22.js", "/build/_shared/chunk-T63E7VI6.js", "/build/_shared/chunk-NWZXRDRY.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/[robots.txt]": { id: "routes/[robots.txt]", parentId: "root", path: "robots.txt", index: void 0, caseSensitive: void 0, module: "/build/routes/[robots.txt]-VQ27HJRM.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/[sitemap.xml]": { id: "routes/[sitemap.xml]", parentId: "root", path: "sitemap.xml", index: void 0, caseSensitive: void 0, module: "/build/routes/[sitemap.xml]-LMNECGY7.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/api/countries": { id: "routes/api/countries", parentId: "root", path: "api/countries", index: void 0, caseSensitive: void 0, module: "/build/routes/api/countries-VV6C7QBM.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/articles/$slug": { id: "routes/articles/$slug", parentId: "root", path: "articles/:slug", index: void 0, caseSensitive: void 0, module: "/build/routes/articles/$slug-QIDSKSTJ.js", imports: ["/build/_shared/chunk-B6B6KJGD.js", "/build/_shared/chunk-EHWD6G22.js", "/build/_shared/chunk-T63E7VI6.js", "/build/_shared/chunk-NWZXRDRY.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/cart": { id: "routes/cart", parentId: "root", path: "cart", index: void 0, caseSensitive: void 0, module: "/build/routes/cart-AXZOTFJ4.js", imports: ["/build/_shared/chunk-NWZXRDRY.js"], hasAction: !0, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/index": { id: "routes/index", parentId: "root", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/index-ARSNMH7O.js", imports: ["/build/_shared/chunk-B6B6KJGD.js", "/build/_shared/chunk-T63E7VI6.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/resource/preview": { id: "routes/resource/preview", parentId: "root", path: "resource/preview", index: void 0, caseSensitive: void 0, module: "/build/routes/resource/preview-YVVN57HZ.js", imports: void 0, hasAction: !0, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "virtual-routes/routes/graphiql": { id: "virtual-routes/routes/graphiql", parentId: "virtual-routes/virtual-root", path: "graphiql", index: void 0, caseSensitive: void 0, module: "/build/virtual-routes/routes/graphiql-GPDYRMZP.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "virtual-routes/virtual-root": { id: "virtual-routes/virtual-root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/virtual-routes/virtual-root-WQPYWL65.js", imports: void 0, hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 } }, cssBundleHref: void 0, url: "/build/manifest-2CBF4522.js" };

// server-entry-module:@remix-run/dev/server-build
var assetsBuildDirectory = "dist/client/build", future = { unstable_cssModules: !1, unstable_cssSideEffectImports: !1, unstable_dev: !1, unstable_vanillaExtract: !1, v2_errorBoundary: !1, v2_meta: !1, v2_routeConvention: !1 }, publicPath = "/build/", entry = { module: entry_server_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/resource/preview": {
    id: "routes/resource/preview",
    parentId: "root",
    path: "resource/preview",
    index: void 0,
    caseSensitive: void 0,
    module: preview_exports
  },
  "routes/articles/$slug": {
    id: "routes/articles/$slug",
    parentId: "root",
    path: "articles/:slug",
    index: void 0,
    caseSensitive: void 0,
    module: slug_exports
  },
  "routes/[sitemap.xml]": {
    id: "routes/[sitemap.xml]",
    parentId: "root",
    path: "sitemap.xml",
    index: void 0,
    caseSensitive: void 0,
    module: sitemap_xml_exports
  },
  "routes/api/countries": {
    id: "routes/api/countries",
    parentId: "root",
    path: "api/countries",
    index: void 0,
    caseSensitive: void 0,
    module: countries_exports
  },
  "routes/[robots.txt]": {
    id: "routes/[robots.txt]",
    parentId: "root",
    path: "robots.txt",
    index: void 0,
    caseSensitive: void 0,
    module: robots_txt_exports
  },
  "routes/$slug": {
    id: "routes/$slug",
    parentId: "root",
    path: ":slug",
    index: void 0,
    caseSensitive: void 0,
    module: slug_exports2
  },
  "routes/index": {
    id: "routes/index",
    parentId: "root",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: routes_exports
  },
  "routes/cart": {
    id: "routes/cart",
    parentId: "root",
    path: "cart",
    index: void 0,
    caseSensitive: void 0,
    module: cart_exports
  },
  "routes/$": {
    id: "routes/$",
    parentId: "root",
    path: "*",
    index: void 0,
    caseSensitive: void 0,
    module: __exports
  },
  "virtual-routes/routes/graphiql": {
    id: "virtual-routes/routes/graphiql",
    parentId: "virtual-routes/virtual-root",
    path: "graphiql",
    index: void 0,
    caseSensitive: void 0,
    module: graphiql_exports
  },
  "virtual-routes/virtual-root": {
    id: "virtual-routes/virtual-root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: virtual_root_exports
  }
};

// app/lib/session.server.ts
var encoder2 = new TextEncoder(), sign2 = async (value, secret) => {
  let data = encoder2.encode(value), key = await createKey3(secret, ["sign"]), signature = await crypto.subtle.sign("HMAC", key, data), hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(
    /=+$/,
    ""
  );
  return value + "." + hash;
}, unsign2 = async (cookie, secret) => {
  let value = cookie.slice(0, cookie.lastIndexOf(".")), hash = cookie.slice(cookie.lastIndexOf(".") + 1), data = encoder2.encode(value), key = await createKey3(secret, ["verify"]), signature = byteStringToUint8Array2(atob(hash));
  return await crypto.subtle.verify("HMAC", key, signature, data) ? value : !1;
};
async function createKey3(secret, usages) {
  return await crypto.subtle.importKey(
    "raw",
    encoder2.encode(secret),
    { name: "HMAC", hash: "SHA-256" },
    !1,
    usages
  );
}
function byteStringToUint8Array2(byteString) {
  let array2 = new Uint8Array(byteString.length);
  for (let i7 = 0; i7 < byteString.length; i7++)
    array2[i7] = byteString.charCodeAt(i7);
  return array2;
}
var HydrogenSession = class {
  constructor(sessionStorage2, session) {
    this.sessionStorage = sessionStorage2;
    this.session = session;
  }
  static async init(request, secrets) {
    let createCookie2 = createCookieFactory({ sign: sign2, unsign: unsign2 }), storage = createCookieSessionStorageFactory(createCookie2)({
      cookie: {
        name: "session",
        httpOnly: !0,
        path: "/",
        sameSite: "lax",
        secrets
      }
    }), session = await storage.getSession(request.headers.get("Cookie"));
    return new this(storage, session);
  }
  get(key) {
    return this.session.get(key);
  }
  destroy() {
    return this.sessionStorage.destroySession(this.session);
  }
  flash(key, value) {
    this.session.flash(key, value);
  }
  unset(key) {
    this.session.unset(key);
  }
  set(key, value) {
    this.session.set(key, value);
  }
  commit() {
    return this.sessionStorage.commitSession(this.session);
  }
};

// node_modules/get-it/dist/_chunks/defaultOptionsValidator-4ba94809.js
var isReactNative = typeof navigator > "u" ? !1 : navigator.product === "ReactNative", defaultOptions = {
  timeout: isReactNative ? 6e4 : 12e4
};
function processOptions(opts) {
  let options = typeof opts == "string" ? Object.assign({
    url: opts
  }, defaultOptions) : Object.assign({}, defaultOptions, opts), url = new URL(options.url, "http://localhost");
  if (options.timeout = normalizeTimeout(options.timeout), options.query) {
    for (let [key, value] of Object.entries(options.query))
      if (value !== void 0)
        if (Array.isArray(value))
          for (let v3 of value)
            url.searchParams.append(key, v3);
        else
          url.searchParams.append(key, value);
  }
  return options.method = options.body && !options.method ? "POST" : (options.method || "GET").toUpperCase(), options.url = url.origin === "http://localhost" ? "".concat(url.pathname, "?").concat(url.searchParams) : url.toString(), options;
}
function normalizeTimeout(time) {
  if (time === !1 || time === 0)
    return !1;
  if (time.connect || time.socket)
    return time;
  let delay = Number(time);
  return isNaN(delay) ? normalizeTimeout(defaultOptions.timeout) : {
    connect: delay,
    socket: delay
  };
}
var validUrl = /^https?:\/\//i;
function validateOptions(options) {
  if (!validUrl.test(options.url))
    throw new Error('"'.concat(options.url, '" is not a valid URL'));
}

// node_modules/get-it/dist/index.browser.js
var import_parse_headers = __toESM(require_parse_headers(), 1), middlewareReducer = (middleware) => function(hook, defaultValue) {
  let bailEarly = hook === "onError", value = defaultValue;
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)
    args[_key - 2] = arguments[_key];
  for (let i7 = 0; i7 < middleware[hook].length; i7++) {
    let handler = middleware[hook][i7];
    if (value = handler(value, ...args), bailEarly && !value)
      break;
  }
  return value;
};
function createPubSub() {
  let subscribers = /* @__PURE__ */ Object.create(null), nextId = 0;
  function subscribe(subscriber) {
    let id = nextId++;
    return subscribers[id] = subscriber, function() {
      delete subscribers[id];
    };
  }
  function publish(event2) {
    for (let id in subscribers)
      subscribers[id](event2);
  }
  return {
    publish,
    subscribe
  };
}
var channelNames = ["request", "response", "progress", "error", "abort"], middlehooks = ["processOptions", "validateOptions", "interceptRequest", "finalizeOptions", "onRequest", "onResponse", "onError", "onReturn", "onHeaders"];
function createRequester(initMiddleware, httpRequest2) {
  let loadedMiddleware = [], middleware = middlehooks.reduce((ware, name) => (ware[name] = ware[name] || [], ware), {
    processOptions: [processOptions],
    validateOptions: [validateOptions]
  });
  function request(opts) {
    let channels = channelNames.reduce((target, name) => (target[name] = createPubSub(), target), {}), applyMiddleware = middlewareReducer(middleware), options = applyMiddleware("processOptions", opts);
    applyMiddleware("validateOptions", options);
    let context2 = {
      options,
      channels,
      applyMiddleware
    }, ongoingRequest = null, unsubscribe = channels.request.subscribe((ctx) => {
      ongoingRequest = httpRequest2(ctx, (err, res) => onResponse(err, res, ctx));
    });
    channels.abort.subscribe(() => {
      unsubscribe(), ongoingRequest && ongoingRequest.abort();
    });
    let returnValue = applyMiddleware("onReturn", channels, context2);
    return returnValue === channels && channels.request.publish(context2), returnValue;
    function onResponse(reqErr, res, ctx) {
      let error2 = reqErr, response = res;
      if (!error2)
        try {
          response = applyMiddleware("onResponse", res, ctx);
        } catch (err) {
          response = null, error2 = err;
        }
      error2 = error2 && applyMiddleware("onError", error2, ctx), error2 ? channels.error.publish(error2) : response && channels.response.publish(response);
    }
  }
  return request.use = function(newMiddleware) {
    if (!newMiddleware)
      throw new Error("Tried to add middleware that resolved to falsey value");
    if (typeof newMiddleware == "function")
      throw new Error("Tried to add middleware that was a function. It probably expects you to pass options to it.");
    if (newMiddleware.onReturn && middleware.onReturn.length > 0)
      throw new Error("Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event");
    return middlehooks.forEach((key) => {
      newMiddleware[key] && middleware[key].push(newMiddleware[key]);
    }), loadedMiddleware.push(newMiddleware), request;
  }, request.clone = function() {
    return createRequester(loadedMiddleware, httpRequest2);
  }, initMiddleware.forEach(request.use), request;
}
var __accessCheck2 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet2 = (obj, member, getter) => (__accessCheck2(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd2 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet2 = (obj, member, value, setter) => (__accessCheck2(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _method, _url, _resHeaders, _headers, _controller, FetchXhr = class {
  constructor() {
    this.readyState = 0, __privateAdd2(this, _method, void 0), __privateAdd2(this, _url, void 0), __privateAdd2(this, _resHeaders, void 0), __privateAdd2(this, _headers, {}), __privateAdd2(this, _controller, void 0);
  }
  open(method, url, _async) {
    __privateSet2(this, _method, method), __privateSet2(this, _url, url), __privateSet2(this, _resHeaders, ""), this.readyState = 1, this.onreadystatechange(), __privateSet2(this, _controller, void 0);
  }
  abort() {
    __privateGet2(this, _controller) && __privateGet2(this, _controller).abort();
  }
  getAllResponseHeaders() {
    return __privateGet2(this, _resHeaders);
  }
  setRequestHeader(name, value) {
    __privateGet2(this, _headers)[name] = value;
  }
  send(body) {
    let textBody = this.responseType !== "arraybuffer", options = {
      method: __privateGet2(this, _method),
      headers: __privateGet2(this, _headers),
      signal: null,
      body
    };
    typeof AbortController == "function" && (__privateSet2(this, _controller, new AbortController()), options.signal = __privateGet2(this, _controller).signal), typeof document < "u" && (options.credentials = this.withCredentials ? "include" : "omit"), fetch(__privateGet2(this, _url), options).then((res) => (res.headers.forEach((value, key) => {
      __privateSet2(this, _resHeaders, __privateGet2(this, _resHeaders) + "".concat(key, ": ").concat(value, `\r
`));
    }), this.status = res.status, this.statusText = res.statusText, this.readyState = 3, textBody ? res.text() : res.arrayBuffer())).then((resBody) => {
      typeof resBody == "string" ? this.responseText = resBody : this.response = resBody, this.readyState = 4, this.onreadystatechange();
    }).catch((err) => {
      var _a2;
      if (err.name === "AbortError") {
        this.onabort();
        return;
      }
      (_a2 = this.onerror) == null || _a2.call(this, err);
    });
  }
};
_method = /* @__PURE__ */ new WeakMap();
_url = /* @__PURE__ */ new WeakMap();
_resHeaders = /* @__PURE__ */ new WeakMap();
_headers = /* @__PURE__ */ new WeakMap();
_controller = /* @__PURE__ */ new WeakMap();
var adapter = typeof XMLHttpRequest == "function" ? "xhr" : "fetch", XmlHttpRequest = adapter === "xhr" ? XMLHttpRequest : FetchXhr, httpRequester = (context2, callback) => {
  let opts = context2.options, options = context2.applyMiddleware("finalizeOptions", opts), timers = {}, injectedResponse = context2.applyMiddleware("interceptRequest", void 0, {
    adapter,
    context: context2
  });
  if (injectedResponse) {
    let cbTimer = setTimeout(callback, 0, null, injectedResponse);
    return {
      abort: () => clearTimeout(cbTimer)
    };
  }
  let xhr = new XmlHttpRequest(), headers = options.headers, delays = options.timeout, aborted = !1, loaded = !1, timedOut = !1;
  if (xhr.onerror = onError, xhr.ontimeout = onError, xhr.onabort = () => {
    stopTimers(!0), aborted = !0;
  }, xhr.onreadystatechange = () => {
    resetTimers(), !(aborted || xhr.readyState !== 4) && xhr.status !== 0 && onLoad2();
  }, xhr.open(
    options.method,
    options.url,
    !0
  ), xhr.withCredentials = !!options.withCredentials, headers && xhr.setRequestHeader)
    for (let key in headers)
      headers.hasOwnProperty(key) && xhr.setRequestHeader(key, headers[key]);
  return options.rawBody && (xhr.responseType = "arraybuffer"), context2.applyMiddleware("onRequest", {
    options,
    adapter,
    request: xhr,
    context: context2
  }), xhr.send(options.body || null), delays && (timers.connect = setTimeout(() => timeoutRequest("ETIMEDOUT"), delays.connect)), {
    abort
  };
  function abort() {
    aborted = !0, xhr && xhr.abort();
  }
  function timeoutRequest(code) {
    timedOut = !0, xhr.abort();
    let error2 = new Error(code === "ESOCKETTIMEDOUT" ? "Socket timed out on request to ".concat(options.url) : "Connection timed out on request to ".concat(options.url));
    error2.code = code, context2.channels.error.publish(error2);
  }
  function resetTimers() {
    !delays || (stopTimers(), timers.socket = setTimeout(() => timeoutRequest("ESOCKETTIMEDOUT"), delays.socket));
  }
  function stopTimers(force) {
    (force || aborted || xhr.readyState >= 2 && timers.connect) && clearTimeout(timers.connect), timers.socket && clearTimeout(timers.socket);
  }
  function onError(error2) {
    if (loaded)
      return;
    stopTimers(!0), loaded = !0, xhr = null;
    let err = error2 || new Error("Network error while attempting to reach ".concat(options.url));
    err.isNetworkError = !0, err.request = options, callback(err);
  }
  function reduceResponse() {
    return {
      body: xhr.response || xhr.responseText,
      url: options.url,
      method: options.method,
      headers: (0, import_parse_headers.default)(xhr.getAllResponseHeaders()),
      statusCode: xhr.status,
      statusMessage: xhr.statusText
    };
  }
  function onLoad2() {
    if (!(aborted || loaded || timedOut)) {
      if (xhr.status === 0) {
        onError(new Error("Unknown XHR error"));
        return;
      }
      stopTimers(), loaded = !0, callback(null, reduceResponse());
    }
  }
}, getIt = function() {
  let initMiddleware = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], httpRequest2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : httpRequester;
  return createRequester(initMiddleware, httpRequest2);
};

// node_modules/get-it/dist/middleware.browser.js
var import_debug = __toESM(require_browser(), 1);

// node_modules/is-plain-object/dist/is-plain-object.mjs
function isObject5(o8) {
  return Object.prototype.toString.call(o8) === "[object Object]";
}
function isPlainObject(o8) {
  var ctor, prot;
  return isObject5(o8) === !1 ? !1 : (ctor = o8.constructor, ctor === void 0 ? !0 : (prot = ctor.prototype, !(isObject5(prot) === !1 || prot.hasOwnProperty("isPrototypeOf") === !1)));
}

// node_modules/get-it/dist/middleware.browser.js
var isBuffer = typeof Buffer > "u" ? () => !1 : (obj) => Buffer.isBuffer(obj), serializeTypes = ["boolean", "string", "number"];
function jsonRequest() {
  return {
    processOptions: (options) => {
      let body = options.body;
      return !body || !(!(typeof body.pipe == "function") && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))) ? options : Object.assign({}, options, {
        body: JSON.stringify(options.body),
        headers: Object.assign({}, options.headers, {
          "Content-Type": "application/json"
        })
      });
    }
  };
}
function jsonResponse(opts) {
  return {
    onResponse: (response) => {
      let contentType = response.headers["content-type"] || "", shouldDecode = opts && opts.force || contentType.indexOf("application/json") !== -1;
      return !response.body || !contentType || !shouldDecode ? response : Object.assign({}, response, {
        body: tryParse(response.body)
      });
    },
    processOptions: (options) => Object.assign({}, options, {
      headers: Object.assign({
        Accept: "application/json"
      }, options.headers)
    })
  };
  function tryParse(body) {
    try {
      return JSON.parse(body);
    } catch (err) {
      throw err.message = "Failed to parsed response body as JSON: ".concat(err.message), err;
    }
  }
}
var actualGlobal;
typeof globalThis < "u" ? actualGlobal = globalThis : typeof window < "u" ? actualGlobal = window : typeof globalThis < "u" ? actualGlobal = globalThis : typeof self < "u" ? actualGlobal = self : actualGlobal = {};
var global$1 = actualGlobal;
function observable() {
  let Observable2 = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}).implementation || global$1.Observable;
  if (!Observable2)
    throw new Error("`Observable` is not available in global scope, and no implementation was passed");
  return {
    onReturn: (channels, context2) => new Observable2((observer) => (channels.error.subscribe((err) => observer.error(err)), channels.progress.subscribe((event2) => observer.next(Object.assign({
      type: "progress"
    }, event2))), channels.response.subscribe((response) => {
      observer.next(Object.assign({
        type: "response"
      }, response)), observer.complete();
    }), channels.request.publish(context2), () => channels.abort.publish()))
  };
}
function progress() {
  return {
    onRequest: (evt) => {
      if (evt.adapter !== "xhr")
        return;
      let xhr = evt.request, context2 = evt.context;
      "upload" in xhr && "onprogress" in xhr.upload && (xhr.upload.onprogress = handleProgress("upload")), "onprogress" in xhr && (xhr.onprogress = handleProgress("download"));
      function handleProgress(stage) {
        return (event2) => {
          let percent = event2.lengthComputable ? event2.loaded / event2.total * 100 : -1;
          context2.channels.progress.publish({
            stage,
            percent,
            total: event2.total,
            loaded: event2.loaded,
            lengthComputable: event2.lengthComputable
          });
        };
      }
    }
  };
}
var promise = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, PromiseImplementation = options.implementation || Promise;
  if (!PromiseImplementation)
    throw new Error("`Promise` is not available in global scope, and no implementation was passed");
  return {
    onReturn: (channels, context2) => new PromiseImplementation((resolve, reject) => {
      let cancel = context2.options.cancelToken;
      cancel && cancel.promise.then((reason) => {
        channels.abort.publish(reason), reject(reason);
      }), channels.error.subscribe(reject), channels.response.subscribe((response) => {
        resolve(options.onlyBody ? response.body : response);
      }), setTimeout(() => {
        try {
          channels.request.publish(context2);
        } catch (err) {
          reject(err);
        }
      }, 0);
    })
  };
}, Cancel = class {
  constructor(message) {
    this.__CANCEL__ = !0, this.message = message;
  }
  toString() {
    return "Cancel".concat(this.message ? ": ".concat(this.message) : "");
  }
}, _CancelToken = class {
  constructor(executor) {
    if (typeof executor != "function")
      throw new TypeError("executor must be a function.");
    let resolvePromise = null;
    this.promise = new Promise((resolve) => {
      resolvePromise = resolve;
    }), executor((message) => {
      this.reason || (this.reason = new Cancel(message), resolvePromise(this.reason));
    });
  }
}, CancelToken = _CancelToken;
CancelToken.source = () => {
  let cancel;
  return {
    token: new _CancelToken((can) => {
      cancel = can;
    }),
    cancel
  };
};
var isCancel = (value) => !!(value && value.__CANCEL__);
promise.Cancel = Cancel;
promise.CancelToken = CancelToken;
promise.isCancel = isCancel;
var defaultShouldRetry = (err, attempt, options) => options.method !== "GET" && options.method !== "HEAD" ? !1 : err.isNetworkError || !1, isStream = (stream) => stream !== null && typeof stream == "object" && typeof stream.pipe == "function", sharedRetry = (opts) => {
  let maxRetries = opts.maxRetries || 5, retryDelay = opts.retryDelay || getRetryDelay, allowRetry = opts.shouldRetry;
  return {
    onError: (err, context2) => {
      let options = context2.options, max = options.maxRetries || maxRetries, shouldRetry = options.shouldRetry || allowRetry, attemptNumber = options.attemptNumber || 0;
      if (isStream(options.body) || !shouldRetry(err, attemptNumber, options) || attemptNumber >= max)
        return err;
      let newContext = Object.assign({}, context2, {
        options: Object.assign({}, options, {
          attemptNumber: attemptNumber + 1
        })
      });
      return setTimeout(() => context2.channels.request.publish(newContext), retryDelay(attemptNumber)), null;
    }
  };
};
function getRetryDelay(attemptNum) {
  return 100 * Math.pow(2, attemptNum) + Math.random() * 100;
}
var retry = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return sharedRetry({
    shouldRetry: defaultShouldRetry,
    ...opts
  });
};
retry.shouldRetry = defaultShouldRetry;

// node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1), {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
  return typeof value == "function";
}

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance), instance.stack = new Error().stack;
  }, ctorFunc = createImpl(_super);
  return ctorFunc.prototype = Object.create(Error.prototype), ctorFunc.prototype.constructor = ctorFunc, ctorFunc;
}

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function(errors) {
    _super(this), this.message = errors ? errors.length + ` errors occurred during unsubscription:
` + errors.map(function(err, i7) {
      return i7 + 1 + ") " + err.toString();
    }).join(`
  `) : "", this.name = "UnsubscriptionError", this.errors = errors;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown, this.closed = !1, this._parentage = null, this._finalizers = null;
  }
  return Subscription2.prototype.unsubscribe = function() {
    var e_1, _a2, e_2, _b, errors;
    if (!this.closed) {
      this.closed = !0;
      var _parentage = this._parentage;
      if (_parentage)
        if (this._parentage = null, Array.isArray(_parentage))
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              _parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return) && _a2.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        else
          _parentage.remove(this);
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer))
        try {
          initialFinalizer();
        } catch (e3) {
          errors = e3 instanceof UnsubscriptionError ? e3.errors : [e3];
        }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors ?? [], err instanceof UnsubscriptionError ? errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors)) : errors.push(err);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            _finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return) && _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors)
        throw new UnsubscriptionError(errors);
    }
  }, Subscription2.prototype.add = function(teardown) {
    var _a2;
    if (teardown && teardown !== this)
      if (this.closed)
        execFinalizer(teardown);
      else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this))
            return;
          teardown._addParent(this);
        }
        (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
      }
  }, Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  }, Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  }, Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    _parentage === parent ? this._parentage = null : Array.isArray(_parentage) && arrRemove(_parentage, parent);
  }, Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown), teardown instanceof Subscription2 && teardown._removeParent(this);
  }, Subscription2.EMPTY = function() {
    var empty = new Subscription2();
    return empty.closed = !0, empty;
  }(), Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  isFunction(finalizer) ? finalizer() : finalizer.unsubscribe();
}

// node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: !1,
  useDeprecatedNextContext: !1
};

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    for (var args = [], _i = 2; _i < arguments.length; _i++)
      args[_i - 2] = arguments[_i];
    var delegate = timeoutProvider.delegate;
    return delegate != null && delegate.setTimeout ? delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args))) : setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle6) {
    var delegate = timeoutProvider.delegate;
    return ((delegate == null ? void 0 : delegate.clearTimeout) || clearTimeout)(handle6);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError)
      onUnhandledError(err);
    else
      throw err;
  });
}

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop3() {
}

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error2) {
  return createNotification("E", void 0, error2);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error2) {
  return {
    kind,
    value,
    error: error2
  };
}

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot && (context = { errorThrown: !1, error: null }), cb(), isRoot) {
      var _a2 = context, errorThrown = _a2.errorThrown, error2 = _a2.error;
      if (context = null, errorThrown)
        throw error2;
    }
  } else
    cb();
}
function captureError(err) {
  config.useDeprecatedSynchronousErrorHandling && context && (context.errorThrown = !0, context.error = err);
}

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    return _this.isStopped = !1, destination ? (_this.destination = destination, isSubscription(destination) && destination.add(_this)) : _this.destination = EMPTY_OBSERVER, _this;
  }
  return Subscriber2.create = function(next, error2, complete) {
    return new SafeSubscriber(next, error2, complete);
  }, Subscriber2.prototype.next = function(value) {
    this.isStopped ? handleStoppedNotification(nextNotification(value), this) : this._next(value);
  }, Subscriber2.prototype.error = function(err) {
    this.isStopped ? handleStoppedNotification(errorNotification(err), this) : (this.isStopped = !0, this._error(err));
  }, Subscriber2.prototype.complete = function() {
    this.isStopped ? handleStoppedNotification(COMPLETE_NOTIFICATION, this) : (this.isStopped = !0, this._complete());
  }, Subscriber2.prototype.unsubscribe = function() {
    this.closed || (this.isStopped = !0, _super.prototype.unsubscribe.call(this), this.destination = null);
  }, Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  }, Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  }, Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }, Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  return ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next)
      try {
        partialObserver.next(value);
      } catch (error2) {
        handleUnhandledError(error2);
      }
  }, ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error)
      try {
        partialObserver.error(err);
      } catch (error2) {
        handleUnhandledError(error2);
      }
    else
      handleUnhandledError(err);
  }, ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete)
      try {
        partialObserver.complete();
      } catch (error2) {
        handleUnhandledError(error2);
      }
  }, ConsumerObserver2;
}(), SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error2, complete) {
    var _this = _super.call(this) || this, partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext)
      partialObserver = {
        next: observerOrNext ?? void 0,
        error: error2 ?? void 0,
        complete: complete ?? void 0
      };
    else {
      var context_1;
      _this && config.useDeprecatedNextContext ? (context_1 = Object.create(observerOrNext), context_1.unsubscribe = function() {
        return _this.unsubscribe();
      }, partialObserver = {
        next: observerOrNext.next && bind(observerOrNext.next, context_1),
        error: observerOrNext.error && bind(observerOrNext.error, context_1),
        complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
      }) : partialObserver = observerOrNext;
    }
    return _this.destination = new ConsumerObserver(partialObserver), _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error2) {
  config.useDeprecatedSynchronousErrorHandling ? captureError(error2) : reportUnhandledError(error2);
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: !0,
  next: noop3,
  error: defaultErrorHandler,
  complete: noop3
};

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable2 = function() {
  return typeof Symbol == "function" && Symbol.observable || "@@observable";
}();

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity2(x2) {
  return x2;
}

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  return fns.length === 0 ? identity2 : fns.length === 1 ? fns[0] : function(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    subscribe && (this._subscribe = subscribe);
  }
  return Observable2.prototype.lift = function(operator) {
    var observable3 = new Observable2();
    return observable3.source = this, observable3.operator = operator, observable3;
  }, Observable2.prototype.subscribe = function(observerOrNext, error2, complete) {
    var _this = this, subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error2, complete);
    return errorContext(function() {
      var _a2 = _this, operator = _a2.operator, source = _a2.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    }), subscriber;
  }, Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  }, Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    return promiseCtor = getPromiseCtor(promiseCtor), new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err), subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  }, Observable2.prototype._subscribe = function(subscriber) {
    var _a2;
    return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
  }, Observable2.prototype[observable2] = function() {
    return this;
  }, Observable2.prototype.pipe = function() {
    for (var operations = [], _i = 0; _i < arguments.length; _i++)
      operations[_i] = arguments[_i];
    return pipeFromArray(operations)(this);
  }, Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    return promiseCtor = getPromiseCtor(promiseCtor), new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x2) {
        return value = x2;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  }, Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  }, Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a2;
  return (_a2 = promiseCtor ?? config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction(source == null ? void 0 : source.lift);
}
function operate(init) {
  return function(source) {
    if (hasLift(source))
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    return _this.onFinalize = onFinalize, _this.shouldUnsubscribe = shouldUnsubscribe, _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next, _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error, _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete, _this;
  }
  return OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a2;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this), !closed_1 && ((_a2 = this.onFinalize) === null || _a2 === void 0 || _a2.call(this));
    }
  }, OperatorSubscriber2;
}(Subscriber);

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var EmptyError = createErrorClass(function(_super) {
  return function() {
    _super(this), this.name = "EmptyError", this.message = "no elements in sequence";
  };
});

// node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
function lastValueFrom(source, config2) {
  var hasConfig = typeof config2 == "object";
  return new Promise(function(resolve, reject) {
    var _hasValue = !1, _value;
    source.subscribe({
      next: function(value) {
        _value = value, _hasValue = !0;
      },
      error: reject,
      complete: function() {
        _hasValue ? resolve(_value) : hasConfig ? resolve(config2.defaultValue) : reject(new EmptyError());
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/map.js
function map2(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}

// node_modules/@sanity/client/dist/index.browser.js
var import_eventsource = __toESM(require_browser2(), 1), envMiddleware = [], ClientError = class extends Error {
  constructor(res) {
    let props = extractErrorProps(res);
    super(props.message), this.statusCode = 400, Object.assign(this, props);
  }
}, ServerError = class extends Error {
  constructor(res) {
    let props = extractErrorProps(res);
    super(props.message), this.statusCode = 500, Object.assign(this, props);
  }
};
function extractErrorProps(res) {
  let body = res.body, props = {
    response: res,
    statusCode: res.statusCode,
    responseBody: stringifyBody(body, res),
    message: "",
    details: void 0
  };
  return body.error && body.message ? (props.message = "".concat(body.error, " - ").concat(body.message), props) : body.error && body.error.description ? (props.message = body.error.description, props.details = body.error, props) : (props.message = body.error || body.message || httpErrorMessage(res), props);
}
function httpErrorMessage(res) {
  let statusMessage = res.statusMessage ? " ".concat(res.statusMessage) : "";
  return "".concat(res.method, "-request to ").concat(res.url, " resulted in HTTP ").concat(res.statusCode).concat(statusMessage);
}
function stringifyBody(body, res) {
  return (res.headers["content-type"] || "").toLowerCase().indexOf("application/json") !== -1 ? JSON.stringify(body, null, 2) : body;
}
var httpError = {
  onResponse: (res) => {
    if (res.statusCode >= 500)
      throw new ServerError(res);
    if (res.statusCode >= 400)
      throw new ClientError(res);
    return res;
  }
}, printWarnings = {
  onResponse: (res) => {
    let warn = res.headers["x-sanity-warning"];
    return (Array.isArray(warn) ? warn : [warn]).filter(Boolean).forEach((msg) => console.warn(msg)), res;
  }
};
function defineHttpRequest(envMiddleware2) {
  let request = getIt([...envMiddleware2, printWarnings, jsonRequest(), jsonResponse(), progress(), httpError, observable({
    implementation: Observable
  })]);
  function httpRequest2(options) {
    return (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : request)({
      maxRedirects: 0,
      ...options
    });
  }
  return httpRequest2.defaultRequester = request, httpRequest2;
}
var projectHeader = "X-Sanity-Project-ID";
function requestOptions(config2) {
  let overrides = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, headers = {}, token = overrides.token || config2.token;
  token && (headers.Authorization = "Bearer ".concat(token)), !overrides.useGlobalApi && !config2.useProjectHostname && config2.projectId && (headers[projectHeader] = config2.projectId);
  let withCredentials = Boolean(typeof overrides.withCredentials > "u" ? config2.token || config2.withCredentials : overrides.withCredentials), timeout2 = typeof overrides.timeout > "u" ? config2.timeout : overrides.timeout;
  return Object.assign({}, overrides, {
    headers: Object.assign({}, headers, overrides.headers || {}),
    timeout: typeof timeout2 > "u" ? 5 * 60 * 1e3 : timeout2,
    proxy: overrides.proxy || config2.proxy,
    json: !0,
    withCredentials
  });
}
function getSelection(sel) {
  if (typeof sel == "string" || Array.isArray(sel))
    return {
      id: sel
    };
  if (typeof sel == "object" && sel !== null && "query" in sel && typeof sel.query == "string")
    return "params" in sel && typeof sel.params == "object" && sel.params !== null ? {
      query: sel.query,
      params: sel.params
    } : {
      query: sel.query
    };
  let selectionOpts = ["* Document ID (<docId>)", "* Array of document IDs", "* Object containing `query`"].join(`
`);
  throw new Error(`Unknown selection - must be one of:

`.concat(selectionOpts));
}
var VALID_ASSET_TYPES = ["image", "file"], VALID_INSERT_LOCATIONS = ["before", "after", "replace"], dataset = (name) => {
  if (!/^(~[a-z0-9]{1}[-\w]{0,63}|[a-z0-9]{1}[-\w]{0,63})$/.test(name))
    throw new Error("Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters");
}, projectId = (id) => {
  if (!/^[-a-z0-9]+$/i.test(id))
    throw new Error("`projectId` can only contain only a-z, 0-9 and dashes");
}, validateAssetType = (type) => {
  if (VALID_ASSET_TYPES.indexOf(type) === -1)
    throw new Error("Invalid asset type: ".concat(type, ". Must be one of ").concat(VALID_ASSET_TYPES.join(", ")));
}, validateObject = (op, val) => {
  if (val === null || typeof val != "object" || Array.isArray(val))
    throw new Error("".concat(op, "() takes an object of properties"));
}, validateDocumentId = (op, id) => {
  if (typeof id != "string" || !/^[a-z0-9_.-]+$/i.test(id))
    throw new Error("".concat(op, '(): "').concat(id, '" is not a valid document ID'));
}, requireDocumentId = (op, doc) => {
  if (!doc._id)
    throw new Error("".concat(op, '() requires that the document contains an ID ("_id" property)'));
  validateDocumentId(op, doc._id);
}, validateInsert = (at2, selector, items) => {
  let signature = "insert(at, selector, items)";
  if (VALID_INSERT_LOCATIONS.indexOf(at2) === -1) {
    let valid = VALID_INSERT_LOCATIONS.map((loc) => '"'.concat(loc, '"')).join(", ");
    throw new Error("".concat(signature, ' takes an "at"-argument which is one of: ').concat(valid));
  }
  if (typeof selector != "string")
    throw new Error("".concat(signature, ' takes a "selector"-argument which must be a string'));
  if (!Array.isArray(items))
    throw new Error("".concat(signature, ' takes an "items"-argument which must be an array'));
}, hasDataset = (config2) => {
  if (!config2.dataset)
    throw new Error("`dataset` must be provided to perform queries");
  return config2.dataset || "";
}, requestTag = (tag) => {
  if (typeof tag != "string" || !/^[a-z0-9._-]{1,75}$/i.test(tag))
    throw new Error("Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.");
  return tag;
}, encodeQueryString = (_ref) => {
  let {
    query: query2,
    params = {},
    options = {}
  } = _ref, searchParams = new URLSearchParams(), {
    tag,
    ...opts
  } = options;
  tag && searchParams.set("tag", tag), searchParams.set("query", query2);
  for (let [key, value] of Object.entries(params))
    searchParams.set("$".concat(key), JSON.stringify(value));
  for (let [key, value] of Object.entries(opts))
    value && searchParams.set(key, "".concat(value));
  return "?".concat(searchParams);
}, __accessCheck$6 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$6 = (obj, member, getter) => (__accessCheck$6(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$6 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$6 = (obj, member, value, setter) => (__accessCheck$6(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$5, _client2$5, BasePatch = class {
  constructor(selection) {
    let operations = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.selection = selection, this.operations = operations;
  }
  set(attrs) {
    return this._assign("set", attrs);
  }
  setIfMissing(attrs) {
    return this._assign("setIfMissing", attrs);
  }
  diffMatchPatch(attrs) {
    return validateObject("diffMatchPatch", attrs), this._assign("diffMatchPatch", attrs);
  }
  unset(attrs) {
    if (!Array.isArray(attrs))
      throw new Error("unset(attrs) takes an array of attributes to unset, non-array given");
    return this.operations = Object.assign({}, this.operations, {
      unset: attrs
    }), this;
  }
  inc(attrs) {
    return this._assign("inc", attrs);
  }
  dec(attrs) {
    return this._assign("dec", attrs);
  }
  insert(at2, selector, items) {
    return validateInsert(at2, selector, items), this._assign("insert", {
      [at2]: selector,
      items
    });
  }
  append(selector, items) {
    return this.insert("after", "".concat(selector, "[-1]"), items);
  }
  prepend(selector, items) {
    return this.insert("before", "".concat(selector, "[0]"), items);
  }
  splice(selector, start, deleteCount, items) {
    let delAll = typeof deleteCount > "u" || deleteCount === -1, startIndex = start < 0 ? start - 1 : start, delCount = delAll ? -1 : Math.max(0, start + deleteCount), delRange = startIndex < 0 && delCount >= 0 ? "" : delCount, rangeSelector = "".concat(selector, "[").concat(startIndex, ":").concat(delRange, "]");
    return this.insert("replace", rangeSelector, items || []);
  }
  ifRevisionId(rev) {
    return this.operations.ifRevisionID = rev, this;
  }
  serialize() {
    return {
      ...getSelection(this.selection),
      ...this.operations
    };
  }
  toJSON() {
    return this.serialize();
  }
  reset() {
    return this.operations = {}, this;
  }
  _assign(op, props) {
    let merge = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    return validateObject(op, props), this.operations = Object.assign({}, this.operations, {
      [op]: Object.assign({}, merge && this.operations[op] || {}, props)
    }), this;
  }
  _set(op, props) {
    return this._assign(op, props, !1);
  }
}, _ObservablePatch = class extends BasePatch {
  constructor(selection, operations, client) {
    super(selection, operations), __privateAdd$6(this, _client$5, void 0), __privateSet$6(this, _client$5, client);
  }
  clone() {
    return new _ObservablePatch(this.selection, {
      ...this.operations
    }, __privateGet$6(this, _client$5));
  }
  commit(options) {
    if (!__privateGet$6(this, _client$5))
      throw new Error("No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method");
    let returnFirst = typeof this.selection == "string", opts = Object.assign({
      returnFirst,
      returnDocuments: !0
    }, options);
    return __privateGet$6(this, _client$5).mutate({
      patch: this.serialize()
    }, opts);
  }
}, ObservablePatch = _ObservablePatch;
_client$5 = /* @__PURE__ */ new WeakMap();
var _Patch = class extends BasePatch {
  constructor(selection, operations, client) {
    super(selection, operations), __privateAdd$6(this, _client2$5, void 0), __privateSet$6(this, _client2$5, client);
  }
  clone() {
    return new _Patch(this.selection, {
      ...this.operations
    }, __privateGet$6(this, _client2$5));
  }
  commit(options) {
    if (!__privateGet$6(this, _client2$5))
      throw new Error("No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method");
    let returnFirst = typeof this.selection == "string", opts = Object.assign({
      returnFirst,
      returnDocuments: !0
    }, options);
    return __privateGet$6(this, _client2$5).mutate({
      patch: this.serialize()
    }, opts);
  }
}, Patch = _Patch;
_client2$5 = /* @__PURE__ */ new WeakMap();
var __accessCheck$5 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$5 = (obj, member, getter) => (__accessCheck$5(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$5 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$5 = (obj, member, value, setter) => (__accessCheck$5(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$4, _client2$4, defaultMutateOptions = {
  returnDocuments: !1
}, BaseTransaction = class {
  constructor() {
    let operations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], transactionId = arguments.length > 1 ? arguments[1] : void 0;
    this.operations = operations, this.trxId = transactionId;
  }
  create(doc) {
    return validateObject("create", doc), this._add({
      create: doc
    });
  }
  createIfNotExists(doc) {
    let op = "createIfNotExists";
    return validateObject(op, doc), requireDocumentId(op, doc), this._add({
      [op]: doc
    });
  }
  createOrReplace(doc) {
    let op = "createOrReplace";
    return validateObject(op, doc), requireDocumentId(op, doc), this._add({
      [op]: doc
    });
  }
  delete(documentId) {
    return validateDocumentId("delete", documentId), this._add({
      delete: {
        id: documentId
      }
    });
  }
  transactionId(id) {
    return id ? (this.trxId = id, this) : this.trxId;
  }
  serialize() {
    return [...this.operations];
  }
  toJSON() {
    return this.serialize();
  }
  reset() {
    return this.operations = [], this;
  }
  _add(mut) {
    return this.operations.push(mut), this;
  }
}, _Transaction = class extends BaseTransaction {
  constructor(operations, client, transactionId) {
    super(operations, transactionId), __privateAdd$5(this, _client$4, void 0), __privateSet$5(this, _client$4, client);
  }
  clone() {
    return new _Transaction([...this.operations], __privateGet$5(this, _client$4), this.trxId);
  }
  commit(options) {
    if (!__privateGet$5(this, _client$4))
      throw new Error("No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method");
    return __privateGet$5(this, _client$4).mutate(this.serialize(), Object.assign({
      transactionId: this.trxId
    }, defaultMutateOptions, options || {}));
  }
  patch(patchOrDocumentId, patchOps) {
    let isBuilder = typeof patchOps == "function";
    if (typeof patchOrDocumentId != "string" && patchOrDocumentId instanceof Patch)
      return this._add({
        patch: patchOrDocumentId.serialize()
      });
    if (isBuilder) {
      let patch = patchOps(new Patch(patchOrDocumentId, {}, __privateGet$5(this, _client$4)));
      if (!(patch instanceof Patch))
        throw new Error("function passed to `patch()` must return the patch");
      return this._add({
        patch: patch.serialize()
      });
    }
    return this._add({
      patch: {
        id: patchOrDocumentId,
        ...patchOps
      }
    });
  }
}, Transaction = _Transaction;
_client$4 = /* @__PURE__ */ new WeakMap();
var _ObservableTransaction = class extends BaseTransaction {
  constructor(operations, client, transactionId) {
    super(operations, transactionId), __privateAdd$5(this, _client2$4, void 0), __privateSet$5(this, _client2$4, client);
  }
  clone() {
    return new _ObservableTransaction([...this.operations], __privateGet$5(this, _client2$4), this.trxId);
  }
  commit(options) {
    if (!__privateGet$5(this, _client2$4))
      throw new Error("No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method");
    return __privateGet$5(this, _client2$4).mutate(this.serialize(), Object.assign({
      transactionId: this.trxId
    }, defaultMutateOptions, options || {}));
  }
  patch(patchOrDocumentId, patchOps) {
    let isBuilder = typeof patchOps == "function";
    if (typeof patchOrDocumentId != "string" && patchOrDocumentId instanceof ObservablePatch)
      return this._add({
        patch: patchOrDocumentId.serialize()
      });
    if (isBuilder) {
      let patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, __privateGet$5(this, _client2$4)));
      if (!(patch instanceof ObservablePatch))
        throw new Error("function passed to `patch()` must return the patch");
      return this._add({
        patch: patch.serialize()
      });
    }
    return this._add({
      patch: {
        id: patchOrDocumentId,
        ...patchOps
      }
    });
  }
}, ObservableTransaction = _ObservableTransaction;
_client2$4 = /* @__PURE__ */ new WeakMap();
var excludeFalsey = (param, defValue) => param === !1 ? void 0 : typeof param > "u" ? defValue : param, getMutationQuery = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    dryRun: options.dryRun,
    returnIds: !0,
    returnDocuments: excludeFalsey(options.returnDocuments, !0),
    visibility: options.visibility || "sync",
    autoGenerateArrayKeys: options.autoGenerateArrayKeys,
    skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation
  };
}, isResponse3 = (event2) => event2.type === "response", getBody = (event2) => event2.body, indexBy = (docs, attr) => docs.reduce((indexed, doc) => (indexed[attr(doc)] = doc, indexed), /* @__PURE__ */ Object.create(null)), getQuerySizeLimit = 11264;
function _fetch(client, httpRequest2, query2, params) {
  let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, mapResponse = options.filterResponse === !1 ? (res) => res : (res) => res.result;
  return _dataRequest(client, httpRequest2, "query", {
    query: query2,
    params
  }, options).pipe(map2(mapResponse));
}
function _getDocument(client, httpRequest2, id) {
  let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, options = {
    uri: _getDataUrl(client, "doc", id),
    json: !0,
    tag: opts.tag
  };
  return _requestObservable(client, httpRequest2, options).pipe(filter(isResponse3), map2((event2) => event2.body.documents && event2.body.documents[0]));
}
function _getDocuments(client, httpRequest2, ids) {
  let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, options = {
    uri: _getDataUrl(client, "doc", ids.join(",")),
    json: !0,
    tag: opts.tag
  };
  return _requestObservable(client, httpRequest2, options).pipe(filter(isResponse3), map2((event2) => {
    let indexed = indexBy(event2.body.documents || [], (doc) => doc._id);
    return ids.map((id) => indexed[id] || null);
  }));
}
function _createIfNotExists(client, httpRequest2, doc, options) {
  return requireDocumentId("createIfNotExists", doc), _create(client, httpRequest2, doc, "createIfNotExists", options);
}
function _createOrReplace(client, httpRequest2, doc, options) {
  return requireDocumentId("createOrReplace", doc), _create(client, httpRequest2, doc, "createOrReplace", options);
}
function _delete(client, httpRequest2, selection, options) {
  return _dataRequest(client, httpRequest2, "mutate", {
    mutations: [{
      delete: getSelection(selection)
    }]
  }, options);
}
function _mutate(client, httpRequest2, mutations, options) {
  let mut = mutations instanceof Patch || mutations instanceof ObservablePatch || mutations instanceof Transaction || mutations instanceof ObservableTransaction ? mutations.serialize() : mutations, muts = Array.isArray(mut) ? mut : [mut], transactionId = options && options.transactionId;
  return _dataRequest(client, httpRequest2, "mutate", {
    mutations: muts,
    transactionId
  }, options);
}
function _dataRequest(client, httpRequest2, endpoint, body) {
  let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, isMutation = endpoint === "mutate", isQuery = endpoint === "query", strQuery = isMutation ? "" : encodeQueryString(body), useGet = !isMutation && strQuery.length < getQuerySizeLimit, stringQuery = useGet ? strQuery : "", returnFirst = options.returnFirst, {
    timeout: timeout2,
    token,
    tag,
    headers
  } = options, uri = _getDataUrl(client, endpoint, stringQuery), reqOptions = {
    method: useGet ? "GET" : "POST",
    uri,
    json: !0,
    body: useGet ? void 0 : body,
    query: isMutation && getMutationQuery(options),
    timeout: timeout2,
    headers,
    token,
    tag,
    canUseCdn: isQuery,
    signal: options.signal
  };
  return _requestObservable(client, httpRequest2, reqOptions).pipe(filter(isResponse3), map2(getBody), map2((res) => {
    if (!isMutation)
      return res;
    let results = res.results || [];
    if (options.returnDocuments)
      return returnFirst ? results[0] && results[0].document : results.map((mut) => mut.document);
    let key = returnFirst ? "documentId" : "documentIds", ids = returnFirst ? results[0] && results[0].id : results.map((mut) => mut.id);
    return {
      transactionId: res.transactionId,
      results,
      [key]: ids
    };
  }));
}
function _create(client, httpRequest2, doc, op) {
  let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, mutation = {
    [op]: doc
  }, opts = Object.assign({
    returnFirst: !0,
    returnDocuments: !0
  }, options);
  return _dataRequest(client, httpRequest2, "mutate", {
    mutations: [mutation]
  }, opts);
}
function _requestObservable(client, httpRequest2, options) {
  let uri = options.url || options.uri, config2 = client.config(), canUseCdn = typeof options.canUseCdn > "u" ? ["GET", "HEAD"].indexOf(options.method || "GET") >= 0 && uri.indexOf("/data/") === 0 : options.canUseCdn, useCdn = config2.useCdn && canUseCdn, tag = options.tag && config2.requestTagPrefix ? [config2.requestTagPrefix, options.tag].join(".") : options.tag || config2.requestTagPrefix;
  tag && (options.query = {
    tag: requestTag(tag),
    ...options.query
  });
  let reqOptions = requestOptions(config2, Object.assign({}, options, {
    url: _getUrl(client, uri, useCdn)
  })), request = new Observable((subscriber) => httpRequest2(reqOptions, config2.requester).subscribe(subscriber));
  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;
}
function _request(client, httpRequest2, options) {
  return _requestObservable(client, httpRequest2, options).pipe(filter((event2) => event2.type === "response"), map2((event2) => event2.body));
}
function _getDataUrl(client, operation, path2) {
  let config2 = client.config(), catalog = hasDataset(config2), baseUri = "/".concat(operation, "/").concat(catalog), uri = path2 ? "".concat(baseUri, "/").concat(path2) : baseUri;
  return "/data".concat(uri).replace(/\/($|\?)/, "$1");
}
function _getUrl(client, uri) {
  let canUseCdn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, {
    url,
    cdnUrl: cdnUrl2
  } = client.config(), base = canUseCdn ? cdnUrl2 : url;
  return "".concat(base, "/").concat(uri.replace(/^\//, ""));
}
function _withAbortSignal(signal) {
  return (input) => new Observable((observer) => {
    let abort = () => observer.error(_createAbortError(signal));
    if (signal && signal.aborted) {
      abort();
      return;
    }
    let subscription = input.subscribe(observer);
    return signal.addEventListener("abort", abort), () => {
      signal.removeEventListener("abort", abort), subscription.unsubscribe();
    };
  });
}
var isDomExceptionSupported = Boolean(globalThis.DOMException);
function _createAbortError(signal) {
  var _a2, _b;
  if (isDomExceptionSupported)
    return new DOMException((_a2 = signal == null ? void 0 : signal.reason) != null ? _a2 : "The operation was aborted.", "AbortError");
  let error2 = new Error((_b = signal == null ? void 0 : signal.reason) != null ? _b : "The operation was aborted.");
  return error2.name = "AbortError", error2;
}
var __accessCheck$4 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$4 = (obj, member, getter) => (__accessCheck$4(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$4 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$4 = (obj, member, value, setter) => (__accessCheck$4(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$3, _httpRequest$4, _client2$3, _httpRequest2$4, ObservableAssetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$4(this, _client$3, void 0), __privateAdd$4(this, _httpRequest$4, void 0), __privateSet$4(this, _client$3, client), __privateSet$4(this, _httpRequest$4, httpRequest2);
  }
  upload(assetType, body, options) {
    return _upload(__privateGet$4(this, _client$3), __privateGet$4(this, _httpRequest$4), assetType, body, options);
  }
};
_client$3 = /* @__PURE__ */ new WeakMap();
_httpRequest$4 = /* @__PURE__ */ new WeakMap();
var AssetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$4(this, _client2$3, void 0), __privateAdd$4(this, _httpRequest2$4, void 0), __privateSet$4(this, _client2$3, client), __privateSet$4(this, _httpRequest2$4, httpRequest2);
  }
  upload(assetType, body, options) {
    let observable3 = _upload(__privateGet$4(this, _client2$3), __privateGet$4(this, _httpRequest2$4), assetType, body, options);
    return lastValueFrom(observable3.pipe(filter((event2) => event2.type === "response"), map2((event2) => event2.body.document)));
  }
};
_client2$3 = /* @__PURE__ */ new WeakMap();
_httpRequest2$4 = /* @__PURE__ */ new WeakMap();
function _upload(client, httpRequest2, assetType, body) {
  let opts = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
  validateAssetType(assetType);
  let meta5 = opts.extract || void 0;
  meta5 && !meta5.length && (meta5 = ["none"]);
  let dataset2 = hasDataset(client.config()), assetEndpoint = assetType === "image" ? "images" : "files", options = optionsFromFile(opts, body), {
    tag,
    label,
    title,
    description,
    creditLine,
    filename,
    source
  } = options, query2 = {
    label,
    title,
    description,
    filename,
    meta: meta5,
    creditLine
  };
  return source && (query2.sourceId = source.id, query2.sourceName = source.name, query2.sourceUrl = source.url), _requestObservable(client, httpRequest2, {
    tag,
    method: "POST",
    timeout: options.timeout || 0,
    uri: "/assets/".concat(assetEndpoint, "/").concat(dataset2),
    headers: options.contentType ? {
      "Content-Type": options.contentType
    } : {},
    query: query2,
    body
  });
}
function optionsFromFile(opts, file) {
  return typeof window > "u" || !(file instanceof window.File) ? opts : Object.assign({
    filename: opts.preserveFilename === !1 ? void 0 : file.name,
    contentType: file.type
  }, opts);
}
var BASE_URL = "https://www.sanity.io/help/";
function generateHelpUrl(slug) {
  return BASE_URL + slug;
}
function once(fn) {
  let didCall = !1, returnValue;
  return function() {
    return didCall || (returnValue = fn(...arguments), didCall = !0), returnValue;
  };
}
var createWarningPrinter = (message) => once(function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
    args[_key] = arguments[_key];
  return console.warn(message.join(" "), ...args);
}), printCdnWarning = createWarningPrinter(["You are not using the Sanity CDN. That means your data is always fresh, but the CDN is faster and", "cheaper. Think about it! For more info, see ".concat(generateHelpUrl("js-client-cdn-configuration"), " "), "To hide this warning, please set the `useCdn` option to either `true` or `false` when creating", "the client."]), printBrowserTokenWarning = createWarningPrinter(["You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.", "See ".concat(generateHelpUrl("js-client-browser-token"), " for more information and how to hide this warning.")]), printNoApiVersionSpecifiedWarning = createWarningPrinter(["Using the Sanity client without specifying an API version is deprecated.", "See ".concat(generateHelpUrl("js-client-api-version"))]), printNoDefaultExport = createWarningPrinter(["The default export of @sanity/client has been deprecated. Use the named export `createClient` instead"]), defaultCdnHost = "apicdn.sanity.io", defaultConfig = {
  apiHost: "https://api.sanity.io",
  apiVersion: "1",
  useProjectHostname: !0
}, LOCALHOSTS = ["localhost", "127.0.0.1", "0.0.0.0"], isLocal = (host) => LOCALHOSTS.indexOf(host) !== -1, validateApiVersion = function(apiVersion) {
  if (apiVersion === "1" || apiVersion === "X")
    return;
  let apiDate = new Date(apiVersion);
  if (!(/^\d{4}-\d{2}-\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0))
    throw new Error("Invalid API version string, expected `1` or date in format `YYYY-MM-DD`");
}, initConfig = (config2, prevConfig) => {
  let specifiedConfig = Object.assign({}, prevConfig, config2);
  specifiedConfig.apiVersion || printNoApiVersionSpecifiedWarning();
  let newConfig = Object.assign({}, defaultConfig, specifiedConfig), projectBased = newConfig.useProjectHostname;
  if (typeof Promise > "u") {
    let helpUrl = generateHelpUrl("js-client-promise-polyfill");
    throw new Error("No native Promise-implementation found, polyfill needed - see ".concat(helpUrl));
  }
  if (projectBased && !newConfig.projectId)
    throw new Error("Configuration must contain `projectId`");
  let isBrowser3 = typeof window < "u" && window.location && window.location.hostname, isLocalhost = isBrowser3 && isLocal(window.location.hostname);
  isBrowser3 && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== !0 ? printBrowserTokenWarning() : typeof newConfig.useCdn > "u" && printCdnWarning(), projectBased && projectId(newConfig.projectId), newConfig.dataset && dataset(newConfig.dataset), "requestTagPrefix" in newConfig && (newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\.+$/, "") : void 0), newConfig.apiVersion = "".concat(newConfig.apiVersion).replace(/^v/, ""), newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost, newConfig.useCdn = Boolean(newConfig.useCdn) && !newConfig.withCredentials, validateApiVersion(newConfig.apiVersion);
  let hostParts = newConfig.apiHost.split("://", 2), protocol = hostParts[0], host = hostParts[1], cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;
  return newConfig.useProjectHostname ? (newConfig.url = "".concat(protocol, "://").concat(newConfig.projectId, ".").concat(host, "/v").concat(newConfig.apiVersion), newConfig.cdnUrl = "".concat(protocol, "://").concat(newConfig.projectId, ".").concat(cdnHost, "/v").concat(newConfig.apiVersion)) : (newConfig.url = "".concat(newConfig.apiHost, "/v").concat(newConfig.apiVersion), newConfig.cdnUrl = newConfig.url), newConfig;
}, defaults = (obj, defaults2) => Object.keys(defaults2).concat(Object.keys(obj)).reduce((target, prop) => (target[prop] = typeof obj[prop] > "u" ? defaults2[prop] : obj[prop], target), {}), pick = (obj, props) => props.reduce((selection, prop) => (typeof obj[prop] > "u" || (selection[prop] = obj[prop]), selection), {}), MAX_URL_LENGTH = 16e3 - 1200, EventSource = import_eventsource.default, possibleOptions = ["includePreviousRevision", "includeResult", "visibility", "effectFormat", "tag"], defaultOptions2 = {
  includeResult: !0
};
function _listen(query2, params) {
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, {
    url,
    token,
    withCredentials,
    requestTagPrefix
  } = this.config(), tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join(".") : opts.tag, options = {
    ...defaults(opts, defaultOptions2),
    tag
  }, listenOpts = pick(options, possibleOptions), qs = encodeQueryString({
    query: query2,
    params,
    options: {
      tag,
      ...listenOpts
    }
  }), uri = "".concat(url).concat(_getDataUrl(this, "listen", qs));
  if (uri.length > MAX_URL_LENGTH)
    return new Observable((observer) => observer.error(new Error("Query too large for listener")));
  let listenFor = options.events ? options.events : ["mutation"], shouldEmitReconnect = listenFor.indexOf("reconnect") !== -1, esOptions = {};
  return (token || withCredentials) && (esOptions.withCredentials = !0), token && (esOptions.headers = {
    Authorization: "Bearer ".concat(token)
  }), new Observable((observer) => {
    let es = getEventSource(), reconnectTimer, stopped = !1;
    function onError() {
      stopped || (emitReconnect(), !stopped && es.readyState === EventSource.CLOSED && (unsubscribe(), clearTimeout(reconnectTimer), reconnectTimer = setTimeout(open, 100)));
    }
    function onChannelError(err) {
      observer.error(cooerceError(err));
    }
    function onMessage(evt) {
      let event2 = parseEvent(evt);
      return event2 instanceof Error ? observer.error(event2) : observer.next(event2);
    }
    function onDisconnect() {
      stopped = !0, unsubscribe(), observer.complete();
    }
    function unsubscribe() {
      es.removeEventListener("error", onError, !1), es.removeEventListener("channelError", onChannelError, !1), es.removeEventListener("disconnect", onDisconnect, !1), listenFor.forEach((type) => es.removeEventListener(type, onMessage, !1)), es.close();
    }
    function emitReconnect() {
      shouldEmitReconnect && observer.next({
        type: "reconnect"
      });
    }
    function getEventSource() {
      let evs = new EventSource(uri, esOptions);
      return evs.addEventListener("error", onError, !1), evs.addEventListener("channelError", onChannelError, !1), evs.addEventListener("disconnect", onDisconnect, !1), listenFor.forEach((type) => evs.addEventListener(type, onMessage, !1)), evs;
    }
    function open() {
      es = getEventSource();
    }
    function stop() {
      stopped = !0, unsubscribe();
    }
    return stop;
  });
}
function parseEvent(event2) {
  try {
    let data = event2.data && JSON.parse(event2.data) || {};
    return Object.assign({
      type: event2.type
    }, data);
  } catch (err) {
    return err;
  }
}
function cooerceError(err) {
  if (err instanceof Error)
    return err;
  let evt = parseEvent(err);
  return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));
}
function extractErrorMessage(err) {
  return err.error ? err.error.description ? err.error.description : typeof err.error == "string" ? err.error : JSON.stringify(err.error, null, 2) : err.message || "Unknown listener error";
}
var __accessCheck$3 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$3 = (obj, member, getter) => (__accessCheck$3(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$3 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$3 = (obj, member, value, setter) => (__accessCheck$3(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$2, _httpRequest$3, _client2$2, _httpRequest2$3, ObservableDatasetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$3(this, _client$2, void 0), __privateAdd$3(this, _httpRequest$3, void 0), __privateSet$3(this, _client$2, client), __privateSet$3(this, _httpRequest$3, httpRequest2);
  }
  create(name, options) {
    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), "PUT", name, options);
  }
  edit(name, options) {
    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), "PATCH", name, options);
  }
  delete(name) {
    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), "DELETE", name);
  }
  list() {
    return _request(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), {
      uri: "/datasets"
    });
  }
};
_client$2 = /* @__PURE__ */ new WeakMap();
_httpRequest$3 = /* @__PURE__ */ new WeakMap();
var DatasetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$3(this, _client2$2, void 0), __privateAdd$3(this, _httpRequest2$3, void 0), __privateSet$3(this, _client2$2, client), __privateSet$3(this, _httpRequest2$3, httpRequest2);
  }
  create(name, options) {
    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), "PUT", name, options));
  }
  edit(name, options) {
    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), "PATCH", name, options));
  }
  delete(name) {
    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), "DELETE", name));
  }
  list() {
    return lastValueFrom(_request(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), {
      uri: "/datasets"
    }));
  }
};
_client2$2 = /* @__PURE__ */ new WeakMap();
_httpRequest2$3 = /* @__PURE__ */ new WeakMap();
function _modify(client, httpRequest2, method, name, options) {
  return dataset(name), _request(client, httpRequest2, {
    method,
    uri: "/datasets/".concat(name),
    body: options
  });
}
var __accessCheck$2 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$2 = (obj, member, getter) => (__accessCheck$2(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$2 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$2 = (obj, member, value, setter) => (__accessCheck$2(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$1, _httpRequest$2, _client2$1, _httpRequest2$2, ObservableProjectsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$2(this, _client$1, void 0), __privateAdd$2(this, _httpRequest$2, void 0), __privateSet$2(this, _client$1, client), __privateSet$2(this, _httpRequest$2, httpRequest2);
  }
  list() {
    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {
      uri: "/projects"
    });
  }
  getById(projectId2) {
    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {
      uri: "/projects/".concat(projectId2)
    });
  }
};
_client$1 = /* @__PURE__ */ new WeakMap();
_httpRequest$2 = /* @__PURE__ */ new WeakMap();
var ProjectsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$2(this, _client2$1, void 0), __privateAdd$2(this, _httpRequest2$2, void 0), __privateSet$2(this, _client2$1, client), __privateSet$2(this, _httpRequest2$2, httpRequest2);
  }
  list() {
    return lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {
      uri: "/projects"
    }));
  }
  getById(projectId2) {
    return lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {
      uri: "/projects/".concat(projectId2)
    }));
  }
};
_client2$1 = /* @__PURE__ */ new WeakMap();
_httpRequest2$2 = /* @__PURE__ */ new WeakMap();
var __accessCheck$1 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$1 = (obj, member, getter) => (__accessCheck$1(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$1 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$1 = (obj, member, value, setter) => (__accessCheck$1(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client, _httpRequest$1, _client2, _httpRequest2$1, ObservableUsersClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$1(this, _client, void 0), __privateAdd$1(this, _httpRequest$1, void 0), __privateSet$1(this, _client, client), __privateSet$1(this, _httpRequest$1, httpRequest2);
  }
  getById(id) {
    return _request(__privateGet$1(this, _client), __privateGet$1(this, _httpRequest$1), {
      uri: "/users/".concat(id)
    });
  }
};
_client = /* @__PURE__ */ new WeakMap();
_httpRequest$1 = /* @__PURE__ */ new WeakMap();
var UsersClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$1(this, _client2, void 0), __privateAdd$1(this, _httpRequest2$1, void 0), __privateSet$1(this, _client2, client), __privateSet$1(this, _httpRequest2$1, httpRequest2);
  }
  getById(id) {
    return lastValueFrom(_request(__privateGet$1(this, _client2), __privateGet$1(this, _httpRequest2$1), {
      uri: "/users/".concat(id)
    }));
  }
};
_client2 = /* @__PURE__ */ new WeakMap();
_httpRequest2$1 = /* @__PURE__ */ new WeakMap();
var __accessCheck3 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet3 = (obj, member, getter) => (__accessCheck3(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd3 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet3 = (obj, member, value, setter) => (__accessCheck3(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _clientConfig, _httpRequest, _clientConfig2, _httpRequest2, _ObservableSanityClient = class {
  constructor(httpRequest2) {
    let config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultConfig;
    __privateAdd3(this, _clientConfig, void 0), __privateAdd3(this, _httpRequest, void 0), this.listen = _listen, this.config(config2), __privateSet3(this, _httpRequest, httpRequest2), this.assets = new ObservableAssetsClient(this, __privateGet3(this, _httpRequest)), this.datasets = new ObservableDatasetsClient(this, __privateGet3(this, _httpRequest)), this.projects = new ObservableProjectsClient(this, __privateGet3(this, _httpRequest)), this.users = new ObservableUsersClient(this, __privateGet3(this, _httpRequest));
  }
  clone() {
    return new _ObservableSanityClient(__privateGet3(this, _httpRequest), this.config());
  }
  config(newConfig) {
    if (newConfig === void 0)
      return {
        ...__privateGet3(this, _clientConfig)
      };
    if (__privateGet3(this, _clientConfig) && __privateGet3(this, _clientConfig).allowReconfigure === !1)
      throw new Error("Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client");
    return __privateSet3(this, _clientConfig, initConfig(newConfig, __privateGet3(this, _clientConfig) || {})), this;
  }
  withConfig(newConfig) {
    return new _ObservableSanityClient(__privateGet3(this, _httpRequest), {
      ...this.config(),
      ...newConfig
    });
  }
  fetch(query2, params) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return _fetch(this, __privateGet3(this, _httpRequest), query2, params, options);
  }
  getDocument(id, options) {
    return _getDocument(this, __privateGet3(this, _httpRequest), id, options);
  }
  getDocuments(ids, options) {
    return _getDocuments(this, __privateGet3(this, _httpRequest), ids, options);
  }
  create(document2, options) {
    return _create(this, __privateGet3(this, _httpRequest), document2, "create", options);
  }
  createIfNotExists(document2, options) {
    return _createIfNotExists(this, __privateGet3(this, _httpRequest), document2, options);
  }
  createOrReplace(document2, options) {
    return _createOrReplace(this, __privateGet3(this, _httpRequest), document2, options);
  }
  delete(selection, options) {
    return _delete(this, __privateGet3(this, _httpRequest), selection, options);
  }
  mutate(operations, options) {
    return _mutate(this, __privateGet3(this, _httpRequest), operations, options);
  }
  patch(documentId, operations) {
    return new ObservablePatch(documentId, operations, this);
  }
  transaction(operations) {
    return new ObservableTransaction(operations, this);
  }
  request(options) {
    return _request(this, __privateGet3(this, _httpRequest), options);
  }
  getUrl(uri, canUseCdn) {
    return _getUrl(this, uri, canUseCdn);
  }
  getDataUrl(operation, path2) {
    return _getDataUrl(this, operation, path2);
  }
}, ObservableSanityClient = _ObservableSanityClient;
_clientConfig = /* @__PURE__ */ new WeakMap();
_httpRequest = /* @__PURE__ */ new WeakMap();
var _SanityClient = class {
  constructor(httpRequest2) {
    let config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultConfig;
    __privateAdd3(this, _clientConfig2, void 0), __privateAdd3(this, _httpRequest2, void 0), this.listen = _listen, this.config(config2), __privateSet3(this, _httpRequest2, httpRequest2), this.assets = new AssetsClient(this, __privateGet3(this, _httpRequest2)), this.datasets = new DatasetsClient(this, __privateGet3(this, _httpRequest2)), this.projects = new ProjectsClient(this, __privateGet3(this, _httpRequest2)), this.users = new UsersClient(this, __privateGet3(this, _httpRequest2)), this.observable = new ObservableSanityClient(httpRequest2, config2);
  }
  clone() {
    return new _SanityClient(__privateGet3(this, _httpRequest2), this.config());
  }
  config(newConfig) {
    if (newConfig === void 0)
      return {
        ...__privateGet3(this, _clientConfig2)
      };
    if (__privateGet3(this, _clientConfig2) && __privateGet3(this, _clientConfig2).allowReconfigure === !1)
      throw new Error("Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client");
    return this.observable && this.observable.config(newConfig), __privateSet3(this, _clientConfig2, initConfig(newConfig, __privateGet3(this, _clientConfig2) || {})), this;
  }
  withConfig(newConfig) {
    return new _SanityClient(__privateGet3(this, _httpRequest2), {
      ...this.config(),
      ...newConfig
    });
  }
  fetch(query2, params) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return lastValueFrom(_fetch(this, __privateGet3(this, _httpRequest2), query2, params, options));
  }
  getDocument(id, options) {
    return lastValueFrom(_getDocument(this, __privateGet3(this, _httpRequest2), id, options));
  }
  getDocuments(ids, options) {
    return lastValueFrom(_getDocuments(this, __privateGet3(this, _httpRequest2), ids, options));
  }
  create(document2, options) {
    return lastValueFrom(_create(this, __privateGet3(this, _httpRequest2), document2, "create", options));
  }
  createIfNotExists(document2, options) {
    return lastValueFrom(_createIfNotExists(this, __privateGet3(this, _httpRequest2), document2, options));
  }
  createOrReplace(document2, options) {
    return lastValueFrom(_createOrReplace(this, __privateGet3(this, _httpRequest2), document2, options));
  }
  delete(selection, options) {
    return lastValueFrom(_delete(this, __privateGet3(this, _httpRequest2), selection, options));
  }
  mutate(operations, options) {
    return lastValueFrom(_mutate(this, __privateGet3(this, _httpRequest2), operations, options));
  }
  patch(documentId, operations) {
    return new Patch(documentId, operations, this);
  }
  transaction(operations) {
    return new Transaction(operations, this);
  }
  request(options) {
    return lastValueFrom(_request(this, __privateGet3(this, _httpRequest2), options));
  }
  dataRequest(endpoint, body, options) {
    return lastValueFrom(_dataRequest(this, __privateGet3(this, _httpRequest2), endpoint, body, options));
  }
  getUrl(uri, canUseCdn) {
    return _getUrl(this, uri, canUseCdn);
  }
  getDataUrl(operation, path2) {
    return _getDataUrl(this, operation, path2);
  }
}, SanityClient = _SanityClient;
_clientConfig2 = /* @__PURE__ */ new WeakMap();
_httpRequest2 = /* @__PURE__ */ new WeakMap();
var httpRequest = defineHttpRequest(envMiddleware), requester = httpRequest.defaultRequester, createClient = (config2) => new SanityClient(httpRequest, config2);

// server-dev.ts
var server_dev_default = {
  async fetch(request, env, executionContext) {
    try {
      if (!(env != null && env.SESSION_SECRET))
        throw new Error("SESSION_SECRET environment variable is not set");
      let waitUntil = (p5) => executionContext.waitUntil(p5), [cache, session] = await Promise.all([
        caches.open("hydrogen"),
        HydrogenSession.init(request, [env.SESSION_SECRET])
      ]), { storefront } = rr({
        cache,
        waitUntil,
        buyerIp: A2(request),
        publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,
        privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,
        storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,
        storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || "2023-01",
        requestGroupId: request.headers.get("request-id")
      }), projectId2 = env.SANITY_PUBLIC_PROJECT_ID, dataset2 = env.SANITY_PUBLIC_DATASET, apiVersion = env.SANITY_PUBLIC_API_VERSION, sanityClient = createClient({
        projectId: projectId2,
        dataset: dataset2,
        apiVersion,
        useCdn: !0
      }), usePreview = definePreview({ projectId: projectId2, dataset: dataset2 }), sanityProjectDetails = {
        projectId: env.SANITY_PUBLIC_PROJECT_ID,
        dataset: env.SANITY_PUBLIC_DATASET,
        apiVersion: env.SANITY_PUBLIC_API_VERSION
      }, mailerLiteApi = env.MAILERLITE_API_KEY, response = await H({
        build: server_build_exports,
        mode: "development",
        getLoadContext: () => ({
          cache,
          session,
          waitUntil,
          storefront,
          env,
          sanityClient,
          usePreview,
          sanityProjectDetails,
          mailerLiteApi
        })
      })(request);
      return response.status === 404 ? ot({ request, response, storefront }) : response;
    } catch (error2) {
      return console.error(error2), new Response("An unexpected error occurred", { status: 500 });
    }
  }
};
export {
  server_dev_default as default
};
//# sourceMappingURL=index.js.map

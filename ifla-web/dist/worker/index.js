var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var ReactVersion = "18.2.0", REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactCurrentDispatcher = {
        current: null
      }, ReactCurrentBatchConfig = {
        transition: null
      }, ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1
      }, ReactCurrentOwner = {
        current: null
      }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
      }
      ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
      }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = "";
        currentExtraStackFrame && (stack += currentExtraStackFrame);
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        return impl && (stack += impl() || ""), stack;
      };
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame, ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning2("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey])
            return;
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return !1;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      }, assign = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      function Component4(props, context2, updater) {
        this.props = props, this.context = context2, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      Component4.prototype.isReactComponent = {}, Component4.prototype.setState = function(partialState, callback) {
        if (typeof partialState != "object" && typeof partialState != "function" && partialState != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      }, Component4.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component4.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
          });
        };
        for (var fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component4.prototype;
      function PureComponent(props, context2, updater) {
        this.props = props, this.context = context2, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent, assign(pureComponentPrototype, Component4.prototype), pureComponentPrototype.isPureReactComponent = !0;
      function createRef() {
        var refObject = {
          current: null
        };
        return Object.seal(refObject), refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: !0
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: !0
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function createElement9(type, config2, children) {
        var propName, props = {}, key = null, ref = null, self2 = null, source = null;
        if (config2 != null) {
          hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2)), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), self2 = config2.__self === void 0 ? null : config2.__self, source = config2.__source === void 0 ? null : config2.__source;
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i9 = 0; i9 < childrenLength; i9++)
            childArray[i9] = arguments[i9 + 2];
          Object.freeze && Object.freeze(childArray), props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
        }
        if (key || ref) {
          var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
          key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config2, children) {
        if (element == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName, props = assign({}, element.props), key = element.key, ref = element.ref, self2 = element._self, source = element._source, owner = element._owner;
        if (config2 != null) {
          hasValidRef(config2) && (ref = config2.ref, owner = ReactCurrentOwner.current), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key);
          var defaultProps;
          element.type && element.type.defaultProps && (defaultProps = element.type.defaultProps);
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config2[propName] === void 0 && defaultProps !== void 0 ? props[propName] = defaultProps[propName] : props[propName] = config2[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i9 = 0; i9 < childrenLength; i9++)
            childArray[i9] = arguments[i9 + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".", SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g, escaperLookup = {
          "=": "=0",
          ":": "=2"
        }, escapedString = key.replace(escapeRegex, function(match2) {
          return escaperLookup[match2];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text2) {
        return text2.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        return typeof element == "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
      }
      function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        (type === "undefined" || type === "boolean") && (children = null);
        var invokeCallback = !1;
        if (children === null)
          invokeCallback = !0;
        else
          switch (type) {
            case "string":
            case "number":
              invokeCallback = !0;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = !0;
              }
          }
        if (invokeCallback) {
          var _child = children, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c9) {
              return c9;
            });
          } else
            mappedChild != null && (isValidElement2(mappedChild) && (mappedChild.key && (!_child || _child.key !== mappedChild.key) && checkKeyStringCoercion(mappedChild.key), mappedChild = cloneAndReplaceKey(
              mappedChild,
              escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
            )), array2.push(mappedChild));
          return 1;
        }
        var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children))
          for (var i9 = 0; i9 < children.length; i9++)
            child = children[i9], nextName = nextNamePrefix + getElementKey(child, i9), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
        else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn == "function") {
            var iterableChildren = children;
            iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            for (var iterator = iteratorFn.call(iterableChildren), step, ii = 0; !(step = iterator.next()).done; )
              child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context2) {
        if (children == null)
          return children;
        var result = [], count2 = 0;
        return mapIntoArray(children, result, "", "", function(child) {
          return func.call(context2, child, count2++);
        }), result;
      }
      function countChildren(children) {
        var n4 = 0;
        return mapChildren(children, function() {
          n4++;
        }), n4;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement2(children))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
      function createContext5(defaultValue) {
        var context2 = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context2.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context2
        };
        var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context2
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context2.Provider;
              },
              set: function(_Provider) {
                context2.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context2._currentValue;
              },
              set: function(_currentValue) {
                context2._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context2._currentValue2;
              },
              set: function(_currentValue2) {
                context2._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context2._threadCount;
              },
              set: function(_threadCount) {
                context2._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context2.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context2.displayName;
              },
              set: function(displayName) {
                hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
              }
            }
          }), context2.Consumer = Consumer;
        }
        return context2._currentRenderer = null, context2._currentRenderer2 = null, context2;
      }
      var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result, thenable = ctor();
          if (thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved, resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected, rejected._result = error2;
            }
          }), payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending, pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          return moduleObject === void 0 && error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, moduleObject), "default" in moduleObject || error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject), moduleObject.default;
        } else
          throw payload._result;
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        }, lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps, propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: !0,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: !0
                });
              }
            },
            propTypes: {
              configurable: !0,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                  enumerable: !0
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef6(render) {
        render != null && render.$$typeof === REACT_MEMO_TYPE ? error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render != "function" ? error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render != null && (render.defaultProps != null || render.propTypes != null) && error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !render.name && !render.displayName && (render.displayName = name);
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function memo(type, compare) {
        isValidElementType(type) || error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !type.name && !type.displayName && (type.displayName = name);
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        return dispatcher === null && error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), dispatcher;
      }
      function useContext7(Context) {
        var dispatcher = resolveDispatcher();
        if (Context._context !== void 0) {
          var realContext = Context._context;
          realContext.Consumer === Context ? error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
      }
      function useState16(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer2(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef12(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect22(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect5(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback5(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo13(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue2(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition2() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId2() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x5) {
              var match2 = x5.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s14 = sampleLines.length - 1, c9 = controlLines.length - 1; s14 >= 1 && c9 >= 0 && sampleLines[s14] !== controlLines[c9]; )
              c9--;
            for (; s14 >= 1 && c9 >= 0; s14--, c9--)
              if (sampleLines[s14] !== controlLines[c9]) {
                if (s14 !== 1 || c9 !== 1)
                  do
                    if (s14--, c9--, c9 < 0 || sampleLines[s14] !== controlLines[c9]) {
                      var _frame = `
` + sampleLines[s14].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s14 >= 1 && c9 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component5) {
        var prototype = Component5.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else
          setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name)
            return `

Check the render method of \`` + name + "`.";
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
          parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!(!element._store || element._store.validated || element.key != null)) {
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
            var childOwner = "";
            element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node == "object") {
          if (isArray(node))
            for (var i9 = 0; i9 < node.length; i9++) {
              var child = node[i9];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i9 = 0; i9 < keys.length; i9++) {
            var key = keys[i9];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
          var typeString;
          type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement9.apply(this, arguments);
        if (element == null)
          return element;
        if (validType)
          for (var i9 = 2; i9 < arguments.length; i9++)
            validateChildKeys(arguments[i9], type);
        return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
      }
      var didWarnAboutDeprecatedCreateFactory = !1;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        return validatedFactory.type = type, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
          enumerable: !1,
          get: function() {
            return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: type
            }), type;
          }
        }), validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        for (var newElement = cloneElement.apply(this, arguments), i9 = 2; i9 < arguments.length; i9++)
          validateChildKeys(arguments[i9], newElement.type);
        return validatePropTypes(newElement), newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          scope();
        } finally {
          if (ReactCurrentBatchConfig.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      var didWarnAboutMessageChannel = !1, enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7), nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch {
            enqueueTaskImpl = function(callback) {
              didWarnAboutMessageChannel === !1 && (didWarnAboutMessageChannel = !0, typeof MessageChannel > "u" && error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback, channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0, didWarnNoAwaitAct = !1;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++, ReactCurrentActQueue.current === null && (ReactCurrentActQueue.current = []);
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy, result;
          try {
            if (ReactCurrentActQueue.isBatchingLegacy = !0, result = callback(), !prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              queue !== null && (ReactCurrentActQueue.didScheduleLegacyUpdate = !1, flushActQueue(queue));
            }
          } catch (error2) {
            throw popActScope(prevActScopeDepth), error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result == "object" && typeof result.then == "function") {
            var thenableResult = result, wasAwaited = !1, thenable = {
              then: function(resolve, reject) {
                wasAwaited = !0, thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth), actScopeDepth === 0 ? recursivelyFlushAsyncActWork(returnValue2, resolve, reject) : resolve(returnValue2);
                }, function(error2) {
                  popActScope(prevActScopeDepth), reject(error2);
                });
              }
            };
            return !didWarnNoAwaitAct && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              wasAwaited || (didWarnNoAwaitAct = !0, error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), thenable;
          } else {
            var returnValue = result;
            if (popActScope(prevActScopeDepth), actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              _queue !== null && (flushActQueue(_queue), ReactCurrentActQueue.current = null);
              var _thenable = {
                then: function(resolve, reject) {
                  ReactCurrentActQueue.current === null ? (ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject)) : resolve(returnValue);
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null)
            try {
              flushActQueue(queue), enqueueTask(function() {
                queue.length === 0 ? (ReactCurrentActQueue.current = null, resolve(returnValue)) : recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
            } catch (error2) {
              reject(error2);
            }
          else
            resolve(returnValue);
        }
      }
      var isFlushing = !1;
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = !0;
          var i9 = 0;
          try {
            for (; i9 < queue.length; i9++) {
              var callback = queue[i9];
              do
                callback = callback(!0);
              while (callback !== null);
            }
            queue.length = 0;
          } catch (error2) {
            throw queue = queue.slice(i9 + 1), error2;
          } finally {
            isFlushing = !1;
          }
        }
      }
      var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children2 = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children2, exports.Component = Component4, exports.Fragment = REACT_FRAGMENT_TYPE, exports.Profiler = REACT_PROFILER_TYPE, exports.PureComponent = PureComponent, exports.StrictMode = REACT_STRICT_MODE_TYPE, exports.Suspense = REACT_SUSPENSE_TYPE, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.cloneElement = cloneElement$1, exports.createContext = createContext5, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef, exports.forwardRef = forwardRef6, exports.isValidElement = isValidElement2, exports.lazy = lazy, exports.memo = memo, exports.startTransition = startTransition, exports.unstable_act = act, exports.useCallback = useCallback5, exports.useContext = useContext7, exports.useDebugValue = useDebugValue2, exports.useDeferredValue = useDeferredValue, exports.useEffect = useEffect22, exports.useId = useId2, exports.useImperativeHandle = useImperativeHandle, exports.useInsertionEffect = useInsertionEffect, exports.useLayoutEffect = useLayoutEffect5, exports.useMemo = useMemo13, exports.useReducer = useReducer2, exports.useRef = useRef12, exports.useState = useState16, exports.useSyncExternalStore = useSyncExternalStore3, exports.useTransition = useTransition2, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    module.exports = require_react_development();
  }
});

// node_modules/@remix-run/router/dist/router.js
var router_exports = {};
__export(router_exports, {
  AbortedDeferredError: () => AbortedDeferredError,
  Action: () => Action,
  ErrorResponse: () => ErrorResponse,
  IDLE_BLOCKER: () => IDLE_BLOCKER,
  IDLE_FETCHER: () => IDLE_FETCHER,
  IDLE_NAVIGATION: () => IDLE_NAVIGATION,
  UNSAFE_DEFERRED_SYMBOL: () => UNSAFE_DEFERRED_SYMBOL,
  UNSAFE_DeferredData: () => DeferredData,
  UNSAFE_convertRoutesToDataRoutes: () => convertRoutesToDataRoutes,
  UNSAFE_getPathContributingMatches: () => getPathContributingMatches,
  createBrowserHistory: () => createBrowserHistory,
  createHashHistory: () => createHashHistory,
  createMemoryHistory: () => createMemoryHistory,
  createPath: () => createPath,
  createRouter: () => createRouter,
  createStaticHandler: () => createStaticHandler,
  defer: () => defer,
  generatePath: () => generatePath,
  getStaticContextFromError: () => getStaticContextFromError,
  getToPathname: () => getToPathname,
  invariant: () => invariant,
  isRouteErrorResponse: () => isRouteErrorResponse,
  joinPaths: () => joinPaths,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  normalizePathname: () => normalizePathname,
  parsePath: () => parsePath,
  redirect: () => redirect,
  resolvePath: () => resolvePath,
  resolveTo: () => resolveTo,
  stripBasename: () => stripBasename,
  warning: () => warning
});
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i9 = 1; i9 < arguments.length; i9++) {
      var source = arguments[i9];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends.apply(this, arguments);
}
function createMemoryHistory(options) {
  options === void 0 && (options = {});
  let {
    initialEntries = ["/"],
    initialIndex,
    v5Compat = !1
  } = options, entries;
  entries = initialEntries.map((entry2, index2) => createMemoryLocation(entry2, typeof entry2 == "string" ? null : entry2.state, index2 === 0 ? "default" : void 0));
  let index = clampIndex(initialIndex ?? entries.length - 1), action4 = Action.Pop, listener = null;
  function clampIndex(n4) {
    return Math.min(Math.max(n4, 0), entries.length - 1);
  }
  function getCurrentLocation() {
    return entries[index];
  }
  function createMemoryLocation(to, state, key) {
    state === void 0 && (state = null);
    let location2 = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
    return warning$1(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to)), location2;
  }
  function createHref(to) {
    return typeof to == "string" ? to : createPath(to);
  }
  return {
    get index() {
      return index;
    },
    get action() {
      return action4;
    },
    get location() {
      return getCurrentLocation();
    },
    createHref,
    createURL(to) {
      return new URL(createHref(to), "http://localhost");
    },
    encodeLocation(to) {
      let path2 = typeof to == "string" ? parsePath(to) : to;
      return {
        pathname: path2.pathname || "",
        search: path2.search || "",
        hash: path2.hash || ""
      };
    },
    push(to, state) {
      action4 = Action.Push;
      let nextLocation = createMemoryLocation(to, state);
      index += 1, entries.splice(index, entries.length, nextLocation), v5Compat && listener && listener({
        action: action4,
        location: nextLocation,
        delta: 1
      });
    },
    replace(to, state) {
      action4 = Action.Replace;
      let nextLocation = createMemoryLocation(to, state);
      entries[index] = nextLocation, v5Compat && listener && listener({
        action: action4,
        location: nextLocation,
        delta: 0
      });
    },
    go(delta2) {
      action4 = Action.Pop;
      let nextIndex = clampIndex(index + delta2), nextLocation = entries[nextIndex];
      index = nextIndex, listener && listener({
        action: action4,
        location: nextLocation,
        delta: delta2
      });
    },
    listen(fn) {
      return listener = fn, () => {
        listener = null;
      };
    }
  };
}
function createBrowserHistory(options) {
  options === void 0 && (options = {});
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search,
      hash
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to == "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function createHashHistory(options) {
  options === void 0 && (options = {});
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substr(1));
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base"), href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href, hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to == "string" ? to : createPath(to));
  }
  function validateHashLocation(location2, to) {
    warning$1(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value, message) {
  if (value === !1 || value === null || typeof value > "u")
    throw new Error(message);
}
function warning$1(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location2, index) {
  return {
    usr: location2.state,
    key: location2.key,
    idx: index
  };
}
function createLocation(current, to, state, key) {
  return state === void 0 && (state = null), _extends({
    pathname: typeof current == "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to == "string" ? parsePath(to) : to, {
    state,
    key: to && to.key || key || createKey()
  });
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  return search && search !== "?" && (pathname += search.charAt(0) === "?" ? search : "?" + search), hash && hash !== "#" && (pathname += hash.charAt(0) === "#" ? hash : "#" + hash), pathname;
}
function parsePath(path2) {
  let parsedPath = {};
  if (path2) {
    let hashIndex = path2.indexOf("#");
    hashIndex >= 0 && (parsedPath.hash = path2.substr(hashIndex), path2 = path2.substr(0, hashIndex));
    let searchIndex = path2.indexOf("?");
    searchIndex >= 0 && (parsedPath.search = path2.substr(searchIndex), path2 = path2.substr(0, searchIndex)), path2 && (parsedPath.pathname = path2);
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  options === void 0 && (options = {});
  let {
    window: window2 = document.defaultView,
    v5Compat = !1
  } = options, globalHistory = window2.history, action4 = Action.Pop, listener = null, index = getIndex();
  index == null && (index = 0, globalHistory.replaceState(_extends({}, globalHistory.state, {
    idx: index
  }), ""));
  function getIndex() {
    return (globalHistory.state || {
      idx: null
    }).idx;
  }
  function handlePop() {
    action4 = Action.Pop;
    let nextIndex = getIndex(), delta2 = nextIndex == null ? null : nextIndex - index;
    index = nextIndex, listener && listener({
      action: action4,
      location: history.location,
      delta: delta2
    });
  }
  function push(to, state) {
    action4 = Action.Push;
    let location2 = createLocation(history.location, to, state);
    validateLocation && validateLocation(location2, to), index = getIndex() + 1;
    let historyState = getHistoryState(location2, index), url = history.createHref(location2);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch {
      window2.location.assign(url);
    }
    v5Compat && listener && listener({
      action: action4,
      location: history.location,
      delta: 1
    });
  }
  function replace(to, state) {
    action4 = Action.Replace;
    let location2 = createLocation(history.location, to, state);
    validateLocation && validateLocation(location2, to), index = getIndex();
    let historyState = getHistoryState(location2, index), url = history.createHref(location2);
    globalHistory.replaceState(historyState, "", url), v5Compat && listener && listener({
      action: action4,
      location: history.location,
      delta: 0
    });
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href, href = typeof to == "string" ? to : createPath(to);
    return invariant(base, "No window.location.(origin|href) available to create URL for href: " + href), new URL(href, base);
  }
  let history = {
    get action() {
      return action4;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener)
        throw new Error("A history only accepts one active listener");
      return window2.addEventListener(PopStateEventType, handlePop), listener = fn, () => {
        window2.removeEventListener(PopStateEventType, handlePop), listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n4) {
      return globalHistory.go(n4);
    }
  };
  return history;
}
function isIndexRoute(route) {
  return route.index === !0;
}
function convertRoutesToDataRoutes(routes2, parentPath, allIds) {
  return parentPath === void 0 && (parentPath = []), allIds === void 0 && (allIds = /* @__PURE__ */ new Set()), routes2.map((route, index) => {
    let treePath = [...parentPath, index], id = typeof route.id == "string" ? route.id : treePath.join("-");
    return invariant(route.index !== !0 || !route.children, "Cannot specify children on an index route"), invariant(!allIds.has(id), 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`), allIds.add(id), isIndexRoute(route) ? _extends({}, route, {
      id
    }) : _extends({}, route, {
      id,
      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : void 0
    });
  });
}
function matchRoutes(routes2, locationArg, basename) {
  basename === void 0 && (basename = "/");
  let location2 = typeof locationArg == "string" ? parsePath(locationArg) : locationArg, pathname = stripBasename(location2.pathname || "/", basename);
  if (pathname == null)
    return null;
  let branches = flattenRoutes(routes2);
  rankRouteBranches(branches);
  let matches = null;
  for (let i9 = 0; matches == null && i9 < branches.length; ++i9)
    matches = matchRouteBranch(
      branches[i9],
      safelyDecodeURI(pathname)
    );
  return matches;
}
function flattenRoutes(routes2, branches, parentsMeta, parentPath) {
  branches === void 0 && (branches = []), parentsMeta === void 0 && (parentsMeta = []), parentPath === void 0 && (parentPath = "");
  let flattenRoute = (route, index, relativePath) => {
    let meta5 = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === !0,
      childrenIndex: index,
      route
    };
    meta5.relativePath.startsWith("/") && (invariant(meta5.relativePath.startsWith(parentPath), 'Absolute route path "' + meta5.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."), meta5.relativePath = meta5.relativePath.slice(parentPath.length));
    let path2 = joinPaths([parentPath, meta5.relativePath]), routesMeta = parentsMeta.concat(meta5);
    route.children && route.children.length > 0 && (invariant(
      route.index !== !0,
      "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path2 + '".')
    ), flattenRoutes(route.children, branches, routesMeta, path2)), !(route.path == null && !route.index) && branches.push({
      path: path2,
      score: computeScore(path2, route.index),
      routesMeta
    });
  };
  return routes2.forEach((route, index) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?")))
      flattenRoute(route, index);
    else
      for (let exploded of explodeOptionalSegments(route.path))
        flattenRoute(route, index, exploded);
  }), branches;
}
function explodeOptionalSegments(path2) {
  let segments = path2.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments, isOptional = first.endsWith("?"), required = first.replace(/\?$/, "");
  if (rest.length === 0)
    return isOptional ? [required, ""] : [required];
  let restExploded = explodeOptionalSegments(rest.join("/")), result = [];
  return result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/"))), isOptional && result.push(...restExploded), result.map((exploded) => path2.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a9, b5) => a9.score !== b5.score ? b5.score - a9.score : compareIndexes(a9.routesMeta.map((meta5) => meta5.childrenIndex), b5.routesMeta.map((meta5) => meta5.childrenIndex)));
}
function computeScore(path2, index) {
  let segments = path2.split("/"), initialScore = segments.length;
  return segments.some(isSplat) && (initialScore += splatPenalty), index && (initialScore += indexRouteValue), segments.filter((s14) => !isSplat(s14)).reduce((score2, segment) => score2 + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a9, b5) {
  return a9.length === b5.length && a9.slice(0, -1).every((n4, i9) => n4 === b5[i9]) ? a9[a9.length - 1] - b5[b5.length - 1] : 0;
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch, matchedParams = {}, matchedPathname = "/", matches = [];
  for (let i9 = 0; i9 < routesMeta.length; ++i9) {
    let meta5 = routesMeta[i9], end = i9 === routesMeta.length - 1, remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/", match2 = matchPath({
      path: meta5.relativePath,
      caseSensitive: meta5.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta5.route;
    matches.push({
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    }), match2.pathnameBase !== "/" && (matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]));
  }
  return matches;
}
function generatePath(originalPath, params) {
  params === void 0 && (params = {});
  let path2 = originalPath;
  return path2.endsWith("*") && path2 !== "*" && !path2.endsWith("/*") && (warning(!1, 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".')), path2 = path2.replace(/\*$/, "/*")), path2.replace(/^:(\w+)(\??)/g, (_3, key, optional) => {
    let param = params[key];
    return optional === "?" ? param ?? "" : (param == null && invariant(!1, 'Missing ":' + key + '" param'), param);
  }).replace(/\/:(\w+)(\??)/g, (_3, key, optional) => {
    let param = params[key];
    return optional === "?" ? param == null ? "" : "/" + param : (param == null && invariant(!1, 'Missing ":' + key + '" param'), "/" + param);
  }).replace(/\?/g, "").replace(/(\/?)\*/, (_3, prefix2, __, str) => {
    let star = "*";
    return params[star] == null ? str === "/*" ? "/" : "" : "" + prefix2 + params[star];
  });
}
function matchPath(pattern, pathname) {
  typeof pattern == "string" && (pattern = {
    path: pattern,
    caseSensitive: !1,
    end: !0
  });
  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end), match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0], pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1"), captureGroups = match2.slice(1);
  return {
    params: paramNames.reduce((memo, paramName, index) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      return memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName), memo;
    }, {}),
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path2, caseSensitive, end) {
  caseSensitive === void 0 && (caseSensitive = !1), end === void 0 && (end = !0), warning(path2 === "*" || !path2.endsWith("*") || path2.endsWith("/*"), 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".'));
  let paramNames = [], regexpSource = "^" + path2.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_3, paramName) => (paramNames.push(paramName), "/([^\\/]+)"));
  return path2.endsWith("*") ? (paramNames.push("*"), regexpSource += path2 === "*" || path2 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : end ? regexpSource += "\\/*$" : path2 !== "" && path2 !== "/" && (regexpSource += "(?:(?=\\/|$))"), [new RegExp(regexpSource, caseSensitive ? void 0 : "i"), paramNames];
}
function safelyDecodeURI(value) {
  try {
    return decodeURI(value);
  } catch (error) {
    return warning(!1, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ").")), value;
  }
}
function safelyDecodeURIComponent(value, paramName) {
  try {
    return decodeURIComponent(value);
  } catch (error) {
    return warning(!1, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ").")), value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase()))
    return null;
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length, nextChar = pathname.charAt(startIndex);
  return nextChar && nextChar !== "/" ? null : pathname.slice(startIndex) || "/";
}
function warning(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
function resolvePath(to, fromPathname) {
  fromPathname === void 0 && (fromPathname = "/");
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to == "string" ? parsePath(to) : to;
  return {
    pathname: toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  return relativePath.split("/").forEach((segment) => {
    segment === ".." ? segments.length > 1 && segments.pop() : segment !== "." && segments.push(segment);
  }), segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path2) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path2) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match2, index) => index === 0 || match2.route.path && match2.route.path.length > 0);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  isPathRelative === void 0 && (isPathRelative = !1);
  let to;
  typeof toArg == "string" ? to = parsePath(toArg) : (to = _extends({}, toArg), invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to)), invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to)), invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to)));
  let isEmptyPath = toArg === "" || to.pathname === "", toPathname = isEmptyPath ? "/" : to.pathname, from;
  if (isPathRelative || toPathname == null)
    from = locationPathname;
  else {
    let routePathnameIndex = routePathnames.length - 1;
    if (toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      for (; toSegments[0] === ".."; )
        toSegments.shift(), routePathnameIndex -= 1;
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path2 = resolvePath(to, from), hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/"), hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  return !path2.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash) && (path2.pathname += "/"), path2;
}
function getToPathname(to) {
  return to === "" || to.pathname === "" ? "/" : typeof to == "string" ? parsePath(to).pathname : to.pathname;
}
function isTrackedPromise(value) {
  return value instanceof Promise && value._tracked === !0;
}
function unwrapTrackedPromise(value) {
  if (!isTrackedPromise(value))
    return value;
  if (value._error)
    throw value._error;
  return value._data;
}
function isRouteErrorResponse(error) {
  return error != null && typeof error.status == "number" && typeof error.statusText == "string" && typeof error.internal == "boolean" && "data" in error;
}
function createRouter(init) {
  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let dataRoutes = convertRoutesToDataRoutes(init.routes), unlistenHistory = null, subscribers = /* @__PURE__ */ new Set(), savedScrollPositions2 = null, getScrollRestorationKey = null, getScrollPosition = null, initialScrollRestored = init.hydrationData != null, initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename), initialErrors = null;
  if (initialMatches == null) {
    let error = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    }), {
      matches,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches, initialErrors = {
      [route.id]: error
    };
  }
  let initialized = !initialMatches.some((m11) => m11.route.loader) || init.hydrationData != null, router, state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    restoreScrollPosition: init.hydrationData != null ? !1 : null,
    preventScrollReset: !1,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  }, pendingAction = Action.Pop, pendingPreventScrollReset = !1, pendingNavigationController, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [], fetchControllers = /* @__PURE__ */ new Map(), incrementingLoadId = 0, pendingNavigationLoadId = -1, fetchReloadIds = /* @__PURE__ */ new Map(), fetchRedirectIds = /* @__PURE__ */ new Set(), fetchLoadMatches = /* @__PURE__ */ new Map(), activeDeferreds = /* @__PURE__ */ new Map(), activeBlocker = null, blockerFunctions = /* @__PURE__ */ new Map(), ignoreNextHistoryUpdate = !1;
  function initialize() {
    return unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location: location2,
        delta: delta2
      } = _ref;
      if (ignoreNextHistoryUpdate) {
        ignoreNextHistoryUpdate = !1;
        return;
      }
      warning(activeBlocker != null && delta2 === null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey2 = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location2,
        historyAction
      });
      if (blockerKey2 && delta2 != null) {
        ignoreNextHistoryUpdate = !0, init.history.go(delta2 * -1), updateBlocker(blockerKey2, {
          state: "blocked",
          location: location2,
          proceed() {
            updateBlocker(blockerKey2, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location: location2
            }), init.history.go(delta2);
          },
          reset() {
            deleteBlocker(blockerKey2), updateState({
              blockers: new Map(router.state.blockers)
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location2);
    }), state.initialized || startNavigation(Action.Pop, state.location), router;
  }
  function dispose() {
    unlistenHistory && unlistenHistory(), subscribers.clear(), pendingNavigationController && pendingNavigationController.abort(), state.fetchers.forEach((_3, key) => deleteFetcher(key)), state.blockers.forEach((_3, key) => deleteBlocker(key));
  }
  function subscribe(fn) {
    return subscribers.add(fn), () => subscribers.delete(fn);
  }
  function updateState(newState) {
    state = _extends({}, state, newState), subscribers.forEach((subscriber) => subscriber(state));
  }
  function completeNavigation(location2, newState) {
    var _location$state, _location$state2;
    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location2.state) == null ? void 0 : _location$state._isRedirect) !== !0, actionData;
    newState.actionData ? Object.keys(newState.actionData).length > 0 ? actionData = newState.actionData : actionData = null : isActionReload ? actionData = state.actionData : actionData = null;
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
    for (let [key] of blockerFunctions)
      deleteBlocker(key);
    let preventScrollReset = pendingPreventScrollReset === !0 || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location2.state) == null ? void 0 : _location$state2._isRedirect) !== !0;
    updateState(_extends({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location: location2,
      initialized: !0,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location2, newState.matches || state.matches),
      preventScrollReset,
      blockers: new Map(state.blockers)
    })), isUninterruptedRevalidation || pendingAction === Action.Pop || (pendingAction === Action.Push ? init.history.push(location2, location2.state) : pendingAction === Action.Replace && init.history.replace(location2, location2.state)), pendingAction = Action.Pop, pendingPreventScrollReset = !1, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [];
  }
  async function navigate(to, opts) {
    if (typeof to == "number") {
      init.history.go(to);
      return;
    }
    let {
      path: path2,
      submission,
      error
    } = normalizeNavigateOptions(to, opts), currentLocation = state.location, nextLocation = createLocation(state.location, path2, opts && opts.state);
    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0, historyAction = Action.Push;
    userReplace === !0 ? historyAction = Action.Replace : userReplace === !1 || submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search && (historyAction = Action.Replace);
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === !0 : void 0, blockerKey2 = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey2) {
      updateBlocker(blockerKey2, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey2, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          }), navigate(to, opts);
        },
        reset() {
          deleteBlocker(blockerKey2), updateState({
            blockers: new Map(state.blockers)
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      pendingError: error,
      preventScrollReset,
      replace: opts && opts.replace
    });
  }
  function revalidate() {
    if (interruptActiveLoads(), updateState({
      revalidation: "loading"
    }), state.navigation.state !== "submitting") {
      if (state.navigation.state === "idle") {
        startNavigation(state.historyAction, state.location, {
          startUninterruptedRevalidation: !0
        });
        return;
      }
      startNavigation(pendingAction || state.historyAction, state.navigation.location, {
        overrideNavigation: state.navigation
      });
    }
  }
  async function startNavigation(historyAction, location2, opts) {
    pendingNavigationController && pendingNavigationController.abort(), pendingNavigationController = null, pendingAction = historyAction, isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === !0, saveScrollPosition(state.location, state.matches), pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0;
    let loadingNavigation = opts && opts.overrideNavigation, matches = matchRoutes(dataRoutes, location2, init.basename);
    if (!matches) {
      let error = getInternalRouterError(404, {
        pathname: location2.pathname
      }), {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      cancelActiveDeferreds(), completeNavigation(location2, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error
        }
      });
      return;
    }
    if (isHashChangeOnly(state.location, location2) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location2, {
        matches
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location2, pendingNavigationController.signal, opts && opts.submission), pendingActionData, pendingError;
    if (opts && opts.pendingError)
      pendingError = {
        [findNearestBoundary(matches).route.id]: opts.pendingError
      };
    else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionOutput = await handleAction(request, location2, opts.submission, matches, {
        replace: opts.replace
      });
      if (actionOutput.shortCircuited)
        return;
      pendingActionData = actionOutput.pendingActionData, pendingError = actionOutput.pendingActionError, loadingNavigation = _extends({
        state: "loading",
        location: location2
      }, opts.submission), request = new Request(request.url, {
        signal: request.signal
      });
    }
    let {
      shortCircuited,
      loaderData,
      errors
    } = await handleLoaders(request, location2, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);
    shortCircuited || (pendingNavigationController = null, completeNavigation(location2, _extends({
      matches
    }, pendingActionData ? {
      actionData: pendingActionData
    } : {}, {
      loaderData,
      errors
    })));
  }
  async function handleAction(request, location2, submission, matches, opts) {
    interruptActiveLoads();
    let navigation = _extends({
      state: "submitting",
      location: location2
    }, submission);
    updateState({
      navigation
    });
    let result, actionMatch = getTargetMatch(matches, location2);
    if (!actionMatch.route.action)
      result = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location2.pathname,
          routeId: actionMatch.route.id
        })
      };
    else if (result = await callLoaderOrAction("action", request, actionMatch, matches, router.basename), request.signal.aborted)
      return {
        shortCircuited: !0
      };
    if (isRedirectResult(result)) {
      let replace;
      return opts && opts.replace != null ? replace = opts.replace : replace = result.location === state.location.pathname + state.location.search, await startRedirectNavigation(state, result, {
        submission,
        replace
      }), {
        shortCircuited: !0
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
      return (opts && opts.replace) !== !0 && (pendingAction = Action.Push), {
        pendingActionData: {},
        pendingActionError: {
          [boundaryMatch.route.id]: result.error
        }
      };
    }
    if (isDeferredResult(result))
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    return {
      pendingActionData: {
        [actionMatch.route.id]: result.data
      }
    };
  }
  async function handleLoaders(request, location2, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {
    let loadingNavigation = overrideNavigation;
    loadingNavigation || (loadingNavigation = _extends({
      state: "loading",
      location: location2,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, submission));
    let activeSubmission = submission || (loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {
      formMethod: loadingNavigation.formMethod,
      formAction: loadingNavigation.formAction,
      formData: loadingNavigation.formData,
      formEncType: loadingNavigation.formEncType
    } : void 0), [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location2, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches);
    if (cancelActiveDeferreds((routeId) => !(matches && matches.some((m11) => m11.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m11) => m11.route.id === routeId)), matchesToLoad.length === 0 && revalidatingFetchers.length === 0)
      return completeNavigation(location2, _extends({
        matches,
        loaderData: {},
        errors: pendingError || null
      }, pendingActionData ? {
        actionData: pendingActionData
      } : {})), {
        shortCircuited: !0
      };
    if (!isUninterruptedRevalidation) {
      revalidatingFetchers.forEach((rf) => {
        let fetcher = state.fetchers.get(rf.key), revalidatingFetcher = {
          state: "loading",
          data: fetcher && fetcher.data,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          " _hasFetcherDoneAnything ": !0
        };
        state.fetchers.set(rf.key, revalidatingFetcher);
      });
      let actionData = pendingActionData || state.actionData;
      updateState(_extends({
        navigation: loadingNavigation
      }, actionData ? Object.keys(actionData).length === 0 ? {
        actionData: null
      } : {
        actionData
      } : {}, revalidatingFetchers.length > 0 ? {
        fetchers: new Map(state.fetchers)
      } : {}));
    }
    pendingNavigationLoadId = ++incrementingLoadId, revalidatingFetchers.forEach((rf) => fetchControllers.set(rf.key, pendingNavigationController));
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted)
      return {
        shortCircuited: !0
      };
    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
    let redirect4 = findRedirect(results);
    if (redirect4)
      return await startRedirectNavigation(state, redirect4, {
        replace
      }), {
        shortCircuited: !0
      };
    let {
      loaderData,
      errors
    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        (aborted || deferredData.done) && activeDeferreds.delete(routeId);
      });
    }), markFetchRedirectsDone();
    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
    return _extends({
      loaderData,
      errors
    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function getFetcher(key) {
    return state.fetchers.get(key) || IDLE_FETCHER;
  }
  function fetch2(key, routeId, href, opts) {
    if (isServer)
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    fetchControllers.has(key) && abortFetcher(key);
    let matches = matchRoutes(dataRoutes, href, init.basename);
    if (!matches) {
      setFetcherError(key, routeId, getInternalRouterError(404, {
        pathname: href
      }));
      return;
    }
    let {
      path: path2,
      submission
    } = normalizeNavigateOptions(href, opts, !0), match2 = getTargetMatch(matches, path2);
    if (pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0, submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key, routeId, path2, match2, matches, submission);
      return;
    }
    fetchLoadMatches.set(key, {
      routeId,
      path: path2,
      match: match2,
      matches
    }), handleFetcherLoader(key, routeId, path2, match2, matches, submission);
  }
  async function handleFetcherAction(key, routeId, path2, match2, requestMatches, submission) {
    if (interruptActiveLoads(), fetchLoadMatches.delete(key), !match2.route.action) {
      let error = getInternalRouterError(405, {
        method: submission.formMethod,
        pathname: path2,
        routeId
      });
      setFetcherError(key, routeId, error);
      return;
    }
    let existingFetcher = state.fetchers.get(key), fetcher = _extends({
      state: "submitting"
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": !0
    });
    state.fetchers.set(key, fetcher), updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path2, abortController.signal, submission);
    fetchControllers.set(key, abortController);
    let actionResult = await callLoaderOrAction("action", fetchRequest, match2, requestMatches, router.basename);
    if (fetchRequest.signal.aborted) {
      fetchControllers.get(key) === abortController && fetchControllers.delete(key);
      return;
    }
    if (isRedirectResult(actionResult)) {
      fetchControllers.delete(key), fetchRedirectIds.add(key);
      let loadingFetcher = _extends({
        state: "loading"
      }, submission, {
        data: void 0,
        " _hasFetcherDoneAnything ": !0
      });
      return state.fetchers.set(key, loadingFetcher), updateState({
        fetchers: new Map(state.fetchers)
      }), startRedirectNavigation(state, actionResult, {
        isFetchActionRedirect: !0
      });
    }
    if (isErrorResult(actionResult)) {
      setFetcherError(key, routeId, actionResult.error);
      return;
    }
    if (isDeferredResult(actionResult))
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    let nextLocation = state.navigation.location || state.location, revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal), matches = state.navigation.state !== "idle" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;
    invariant(matches, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key, loadId);
    let loadFetcher = _extends({
      state: "loading",
      data: actionResult.data
    }, submission, {
      " _hasFetcherDoneAnything ": !0
    });
    state.fetchers.set(key, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
      init.history,
      state,
      matches,
      submission,
      nextLocation,
      isRevalidationRequired,
      cancelledDeferredRoutes,
      cancelledFetcherLoads,
      {
        [match2.route.id]: actionResult.data
      },
      void 0,
      fetchLoadMatches
    );
    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
      let staleKey = rf.key, existingFetcher2 = state.fetchers.get(staleKey), revalidatingFetcher = {
        state: "loading",
        data: existingFetcher2 && existingFetcher2.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": !0
      };
      state.fetchers.set(staleKey, revalidatingFetcher), fetchControllers.set(staleKey, abortController);
    }), updateState({
      fetchers: new Map(state.fetchers)
    });
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted)
      return;
    fetchReloadIds.delete(key), fetchControllers.delete(key), revalidatingFetchers.forEach((r12) => fetchControllers.delete(r12.key));
    let redirect4 = findRedirect(results);
    if (redirect4)
      return startRedirectNavigation(state, redirect4);
    let {
      loaderData,
      errors
    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds), doneFetcher = {
      state: "idle",
      data: actionResult.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": !0
    };
    state.fetchers.set(key, doneFetcher);
    let didAbortFetchLoads = abortStaleFetchLoads(loadId);
    state.navigation.state === "loading" && loadId > pendingNavigationLoadId ? (invariant(pendingAction, "Expected pending action"), pendingNavigationController && pendingNavigationController.abort(), completeNavigation(state.navigation.location, {
      matches,
      loaderData,
      errors,
      fetchers: new Map(state.fetchers)
    })) : (updateState(_extends({
      errors,
      loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
    }, didAbortFetchLoads ? {
      fetchers: new Map(state.fetchers)
    } : {})), isRevalidationRequired = !1);
  }
  async function handleFetcherLoader(key, routeId, path2, match2, matches, submission) {
    let existingFetcher = state.fetchers.get(key), loadingFetcher = _extends({
      state: "loading",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": !0
    });
    state.fetchers.set(key, loadingFetcher), updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path2, abortController.signal);
    fetchControllers.set(key, abortController);
    let result = await callLoaderOrAction("loader", fetchRequest, match2, matches, router.basename);
    if (isDeferredResult(result) && (result = await resolveDeferredData(result, fetchRequest.signal, !0) || result), fetchControllers.get(key) === abortController && fetchControllers.delete(key), fetchRequest.signal.aborted)
      return;
    if (isRedirectResult(result)) {
      await startRedirectNavigation(state, result);
      return;
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, routeId);
      state.fetchers.delete(key), updateState({
        fetchers: new Map(state.fetchers),
        errors: {
          [boundaryMatch.route.id]: result.error
        }
      });
      return;
    }
    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
    let doneFetcher = {
      state: "idle",
      data: result.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": !0
    };
    state.fetchers.set(key, doneFetcher), updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  async function startRedirectNavigation(state2, redirect4, _temp) {
    var _window;
    let {
      submission,
      replace,
      isFetchActionRedirect
    } = _temp === void 0 ? {} : _temp;
    redirect4.revalidate && (isRevalidationRequired = !0);
    let redirectLocation = createLocation(
      state2.location,
      redirect4.location,
      _extends({
        _isRedirect: !0
      }, isFetchActionRedirect ? {
        _isFetchActionRedirect: !0
      } : {})
    );
    if (invariant(redirectLocation, "Expected a location on the redirect navigation"), isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) < "u") {
      let newOrigin = init.history.createURL(redirect4.location).origin;
      if (window.location.origin !== newOrigin) {
        replace ? window.location.replace(redirect4.location) : window.location.assign(redirect4.location);
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace === !0 ? Action.Replace : Action.Push, {
      formMethod,
      formAction,
      formEncType,
      formData
    } = state2.navigation;
    !submission && formMethod && formAction && formData && formEncType && (submission = {
      formMethod,
      formAction,
      formEncType,
      formData
    }), redirectPreserveMethodStatusCodes.has(redirect4.status) && submission && isMutationMethod(submission.formMethod) ? await startNavigation(redirectHistoryAction, redirectLocation, {
      submission: _extends({}, submission, {
        formAction: redirect4.location
      }),
      preventScrollReset: pendingPreventScrollReset
    }) : await startNavigation(redirectHistoryAction, redirectLocation, {
      overrideNavigation: {
        state: "loading",
        location: redirectLocation,
        formMethod: submission ? submission.formMethod : void 0,
        formAction: submission ? submission.formAction : void 0,
        formEncType: submission ? submission.formEncType : void 0,
        formData: submission ? submission.formData : void 0
      },
      preventScrollReset: pendingPreventScrollReset
    });
  }
  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, router.basename)), ...fetchersToLoad.map((f9) => callLoaderOrAction("loader", createClientSideRequest(init.history, f9.path, request.signal), f9.match, f9.matches, router.basename))]), loaderResults = results.slice(0, matchesToLoad.length), fetcherResults = results.slice(matchesToLoad.length);
    return await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, !1, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f9) => f9.match), fetcherResults, request.signal, !0)]), {
      results,
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = !0, cancelledDeferredRoutes.push(...cancelActiveDeferreds()), fetchLoadMatches.forEach((_3, key) => {
      fetchControllers.has(key) && (cancelledFetcherLoads.push(key), abortFetcher(key));
    });
  }
  function setFetcherError(key, routeId, error) {
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key), updateState({
      errors: {
        [boundaryMatch.route.id]: error
      },
      fetchers: new Map(state.fetchers)
    });
  }
  function deleteFetcher(key) {
    fetchControllers.has(key) && abortFetcher(key), fetchLoadMatches.delete(key), fetchReloadIds.delete(key), fetchRedirectIds.delete(key), state.fetchers.delete(key);
  }
  function abortFetcher(key) {
    let controller = fetchControllers.get(key);
    invariant(controller, "Expected fetch controller: " + key), controller.abort(), fetchControllers.delete(key);
  }
  function markFetchersDone(keys) {
    for (let key of keys) {
      let doneFetcher = {
        state: "idle",
        data: getFetcher(key).data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": !0
      };
      state.fetchers.set(key, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    for (let key of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key);
      invariant(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (fetchRedirectIds.delete(key), doneKeys.push(key));
    }
    markFetchersDone(doneKeys);
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key, id] of fetchReloadIds)
      if (id < landedId) {
        let fetcher = state.fetchers.get(key);
        invariant(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (abortFetcher(key), fetchReloadIds.delete(key), yeetedKeys.push(key));
      }
    return markFetchersDone(yeetedKeys), yeetedKeys.length > 0;
  }
  function getBlocker(key, fn) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    return blockerFunctions.get(key) !== fn && (blockerFunctions.set(key, fn), activeBlocker == null ? activeBlocker = key : key !== activeBlocker && warning(!1, "A router only supports one blocker at a time")), blocker;
  }
  function deleteBlocker(key) {
    state.blockers.delete(key), blockerFunctions.delete(key), activeBlocker === key && (activeBlocker = null);
  }
  function updateBlocker(key, newBlocker) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state), state.blockers.set(key, newBlocker), updateState({
      blockers: new Map(state.blockers)
    });
  }
  function shouldBlockNavigation(_ref2) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref2;
    if (activeBlocker == null)
      return;
    let blockerFunction = blockerFunctions.get(activeBlocker);
    invariant(blockerFunction, "Could not find a function for the active blocker");
    let blocker = state.blockers.get(activeBlocker);
    if (!(blocker && blocker.state === "proceeding") && blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    }))
      return activeBlocker;
  }
  function cancelActiveDeferreds(predicate) {
    let cancelledRouteIds = [];
    return activeDeferreds.forEach((dfd, routeId) => {
      (!predicate || predicate(routeId)) && (dfd.cancel(), cancelledRouteIds.push(routeId), activeDeferreds.delete(routeId));
    }), cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    if (savedScrollPositions2 = positions, getScrollPosition = getPosition, getScrollRestorationKey = getKey || ((location2) => location2.key), !initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = !0;
      let y4 = getSavedScrollPosition(state.location, state.matches);
      y4 != null && updateState({
        restoreScrollPosition: y4
      });
    }
    return () => {
      savedScrollPositions2 = null, getScrollPosition = null, getScrollRestorationKey = null;
    };
  }
  function saveScrollPosition(location2, matches) {
    if (savedScrollPositions2 && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m11) => createUseMatchesMatch(m11, state.loaderData)), key = getScrollRestorationKey(location2, userMatches) || location2.key;
      savedScrollPositions2[key] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location2, matches) {
    if (savedScrollPositions2 && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m11) => createUseMatchesMatch(m11, state.loaderData)), key = getScrollRestorationKey(location2, userMatches) || location2.key, y4 = savedScrollPositions2[key];
      if (typeof y4 == "number")
        return y4;
    }
    return null;
  }
  return router = {
    get basename() {
      return init.basename;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    initialize,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    createHref: (to) => init.history.createHref(to),
    encodeLocation: (to) => init.history.encodeLocation(to),
    getFetcher,
    deleteFetcher,
    dispose,
    getBlocker,
    deleteBlocker,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds
  }, router;
}
function createStaticHandler(routes2, opts) {
  invariant(routes2.length > 0, "You must provide a non-empty routes array to createStaticHandler");
  let dataRoutes = convertRoutesToDataRoutes(routes2), basename = (opts ? opts.basename : null) || "/";
  async function query2(request, _temp2) {
    let {
      requestContext
    } = _temp2 === void 0 ? {} : _temp2, url = new URL(request.url), method = request.method.toLowerCase(), location2 = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location2, basename);
    if (!isValidMethod(method) && method !== "head") {
      let error = getInternalRouterError(405, {
        method
      }), {
        matches: methodNotAllowedMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      return {
        basename,
        location: location2,
        matches: methodNotAllowedMatches,
        loaderData: {},
        actionData: null,
        errors: {
          [route.id]: error
        },
        statusCode: error.status,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    } else if (!matches) {
      let error = getInternalRouterError(404, {
        pathname: location2.pathname
      }), {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      return {
        basename,
        location: location2,
        matches: notFoundMatches,
        loaderData: {},
        actionData: null,
        errors: {
          [route.id]: error
        },
        statusCode: error.status,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    }
    let result = await queryImpl(request, location2, matches, requestContext);
    return isResponse(result) ? result : _extends({
      location: location2,
      basename
    }, result);
  }
  async function queryRoute(request, _temp3) {
    let {
      routeId,
      requestContext
    } = _temp3 === void 0 ? {} : _temp3, url = new URL(request.url), method = request.method.toLowerCase(), location2 = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location2, basename);
    if (!isValidMethod(method) && method !== "head" && method !== "options")
      throw getInternalRouterError(405, {
        method
      });
    if (!matches)
      throw getInternalRouterError(404, {
        pathname: location2.pathname
      });
    let match2 = routeId ? matches.find((m11) => m11.route.id === routeId) : getTargetMatch(matches, location2);
    if (routeId && !match2)
      throw getInternalRouterError(403, {
        pathname: location2.pathname,
        routeId
      });
    if (!match2)
      throw getInternalRouterError(404, {
        pathname: location2.pathname
      });
    let result = await queryImpl(request, location2, matches, requestContext, match2);
    if (isResponse(result))
      return result;
    let error = result.errors ? Object.values(result.errors)[0] : void 0;
    if (error !== void 0)
      throw error;
    if (result.actionData)
      return Object.values(result.actionData)[0];
    if (result.loaderData) {
      var _result$activeDeferre;
      let data = Object.values(result.loaderData)[0];
      return (_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match2.route.id] && (data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match2.route.id]), data;
    }
  }
  async function queryImpl(request, location2, matches, requestContext, routeMatch) {
    invariant(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
    try {
      if (isMutationMethod(request.method.toLowerCase()))
        return await submit(request, matches, routeMatch || getTargetMatch(matches, location2), requestContext, routeMatch != null);
      let result = await loadRouteData(request, matches, requestContext, routeMatch);
      return isResponse(result) ? result : _extends({}, result, {
        actionData: null,
        actionHeaders: {}
      });
    } catch (e5) {
      if (isQueryRouteResponse(e5)) {
        if (e5.type === ResultType.error && !isRedirectResponse(e5.response))
          throw e5.response;
        return e5.response;
      }
      if (isRedirectResponse(e5))
        return e5;
      throw e5;
    }
  }
  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
    let result;
    if (actionMatch.route.action) {
      if (result = await callLoaderOrAction("action", request, actionMatch, matches, basename, !0, isRouteRequest, requestContext), request.signal.aborted) {
        let method = isRouteRequest ? "queryRoute" : "query";
        throw new Error(method + "() call aborted");
      }
    } else {
      let error = getInternalRouterError(405, {
        method: request.method,
        pathname: new URL(request.url).pathname,
        routeId: actionMatch.route.id
      });
      if (isRouteRequest)
        throw error;
      result = {
        type: ResultType.error,
        error
      };
    }
    if (isRedirectResult(result))
      throw new Response(null, {
        status: result.status,
        headers: {
          Location: result.location
        }
      });
    if (isDeferredResult(result)) {
      let error = getInternalRouterError(400, {
        type: "defer-action"
      });
      if (isRouteRequest)
        throw error;
      result = {
        type: ResultType.error,
        error
      };
    }
    if (isRouteRequest) {
      if (isErrorResult(result))
        throw result.error;
      return {
        matches: [actionMatch],
        loaderData: {},
        actionData: {
          [actionMatch.route.id]: result.data
        },
        errors: null,
        statusCode: 200,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id), context3 = await loadRouteData(request, matches, requestContext, void 0, {
        [boundaryMatch.route.id]: result.error
      });
      return _extends({}, context3, {
        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,
        actionData: null,
        actionHeaders: _extends({}, result.headers ? {
          [actionMatch.route.id]: result.headers
        } : {})
      });
    }
    let loaderRequest = new Request(request.url, {
      headers: request.headers,
      redirect: request.redirect,
      signal: request.signal
    }), context2 = await loadRouteData(loaderRequest, matches, requestContext);
    return _extends({}, context2, result.statusCode ? {
      statusCode: result.statusCode
    } : {}, {
      actionData: {
        [actionMatch.route.id]: result.data
      },
      actionHeaders: _extends({}, result.headers ? {
        [actionMatch.route.id]: result.headers
      } : {})
    });
  }
  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {
    let isRouteRequest = routeMatch != null;
    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader))
      throw getInternalRouterError(400, {
        method: request.method,
        pathname: new URL(request.url).pathname,
        routeId: routeMatch == null ? void 0 : routeMatch.route.id
      });
    let matchesToLoad = (routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0])).filter((m11) => m11.route.loader);
    if (matchesToLoad.length === 0)
      return {
        matches,
        loaderData: matches.reduce((acc, m11) => Object.assign(acc, {
          [m11.route.id]: null
        }), {}),
        errors: pendingActionError || null,
        statusCode: 200,
        loaderHeaders: {},
        activeDeferreds: null
      };
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, basename, !0, isRouteRequest, requestContext))]);
    if (request.signal.aborted) {
      let method = isRouteRequest ? "queryRoute" : "query";
      throw new Error(method + "() call aborted");
    }
    let activeDeferreds = /* @__PURE__ */ new Map(), context2 = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds), executedLoaders = new Set(matchesToLoad.map((match2) => match2.route.id));
    return matches.forEach((match2) => {
      executedLoaders.has(match2.route.id) || (context2.loaderData[match2.route.id] = null);
    }), _extends({}, context2, {
      matches,
      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
    });
  }
  return {
    dataRoutes,
    query: query2,
    queryRoute
  };
}
function getStaticContextFromError(routes2, context2, error) {
  return _extends({}, context2, {
    statusCode: 500,
    errors: {
      [context2._deepestRenderedBoundaryId || routes2[0].id]: error
    }
  });
}
function isSubmissionNavigation(opts) {
  return opts != null && "formData" in opts;
}
function normalizeNavigateOptions(to, opts, isFetcher) {
  isFetcher === void 0 && (isFetcher = !1);
  let path2 = typeof to == "string" ? to : createPath(to);
  if (!opts || !isSubmissionNavigation(opts))
    return {
      path: path2
    };
  if (opts.formMethod && !isValidMethod(opts.formMethod))
    return {
      path: path2,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  let submission;
  if (opts.formData && (submission = {
    formMethod: opts.formMethod || "get",
    formAction: stripHashFromPath(path2),
    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
    formData: opts.formData
  }, isMutationMethod(submission.formMethod)))
    return {
      path: path2,
      submission
    };
  let parsedPath = parsePath(path2), searchParams = convertFormDataToSearchParams(opts.formData);
  return isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search) && searchParams.append("index", ""), parsedPath.search = "?" + searchParams, {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches, boundaryId) {
  let boundaryMatches = matches;
  if (boundaryId) {
    let index = matches.findIndex((m11) => m11.route.id === boundaryId);
    index >= 0 && (boundaryMatches = matches.slice(0, index));
  }
  return boundaryMatches;
}
function getMatchesToLoad(history, state, matches, submission, location2, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {
  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0, currentUrl = history.createURL(state.location), nextUrl = history.createURL(location2), defaultShouldRevalidate = isRevalidationRequired || currentUrl.toString() === nextUrl.toString() || currentUrl.search !== nextUrl.search, boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0, navigationMatches = getLoaderMatchesUntilBoundary(matches, boundaryId).filter((match2, index) => {
    if (match2.route.loader == null)
      return !1;
    if (isNewLoader(state.loaderData, state.matches[index], match2) || cancelledDeferredRoutes.some((id) => id === match2.route.id))
      return !0;
    let currentRouteMatch = state.matches[index], nextRouteMatch = match2;
    return shouldRevalidateLoader(match2, _extends({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
    }));
  }), revalidatingFetchers = [];
  return fetchLoadMatches && fetchLoadMatches.forEach((f9, key) => {
    if (matches.some((m11) => m11.route.id === f9.routeId))
      cancelledFetcherLoads.includes(key) ? revalidatingFetchers.push(_extends({
        key
      }, f9)) : shouldRevalidateLoader(f9.match, _extends({
        currentUrl,
        currentParams: state.matches[state.matches.length - 1].params,
        nextUrl,
        nextParams: matches[matches.length - 1].params
      }, submission, {
        actionResult,
        defaultShouldRevalidate
      })) && revalidatingFetchers.push(_extends({
        key
      }, f9));
    else
      return;
  }), [navigationMatches, revalidatingFetchers];
}
function isNewLoader(currentLoaderData, currentMatch, match2) {
  let isNew = !currentMatch || match2.route.id !== currentMatch.route.id, isMissingData = currentLoaderData[match2.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match2) {
  let currentPath = currentMatch.route.path;
  return currentMatch.pathname !== match2.pathname || currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"];
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice == "boolean")
      return routeChoice;
  }
  return arg.defaultShouldRevalidate;
}
async function callLoaderOrAction(type, request, match2, matches, basename, isStaticRequest, isRouteRequest, requestContext) {
  basename === void 0 && (basename = "/"), isStaticRequest === void 0 && (isStaticRequest = !1), isRouteRequest === void 0 && (isRouteRequest = !1);
  let resultType, result, reject, abortPromise = new Promise((_3, r12) => reject = r12), onReject = () => reject();
  request.signal.addEventListener("abort", onReject);
  try {
    let handler = match2.route[type];
    invariant(handler, "Could not find the " + type + ' to run on the "' + match2.route.id + '" route'), result = await Promise.race([handler({
      request,
      params: match2.params,
      context: requestContext
    }), abortPromise]), invariant(result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e5) {
    resultType = ResultType.error, result = e5;
  } finally {
    request.signal.removeEventListener("abort", onReject);
  }
  if (isResponse(result)) {
    let status = result.status;
    if (redirectStatusCodes.has(status)) {
      let location2 = result.headers.get("Location");
      if (invariant(location2, "Redirects returned/thrown from loaders/actions must have a Location header"), /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i.test(location2)) {
        if (!isStaticRequest) {
          let currentUrl = new URL(request.url), url = location2.startsWith("//") ? new URL(currentUrl.protocol + location2) : new URL(location2);
          url.origin === currentUrl.origin && (location2 = url.pathname + url.search + url.hash);
        }
      } else {
        let activeMatches = matches.slice(0, matches.indexOf(match2) + 1), routePathnames = getPathContributingMatches(activeMatches).map((match3) => match3.pathnameBase), resolvedLocation = resolveTo(location2, routePathnames, new URL(request.url).pathname);
        if (invariant(createPath(resolvedLocation), "Unable to resolve redirect location: " + location2), basename) {
          let path2 = resolvedLocation.pathname;
          resolvedLocation.pathname = path2 === "/" ? basename : joinPaths([basename, path2]);
        }
        location2 = createPath(resolvedLocation);
      }
      if (isStaticRequest)
        throw result.headers.set("Location", location2), result;
      return {
        type: ResultType.redirect,
        status,
        location: location2,
        revalidate: result.headers.get("X-Remix-Revalidate") !== null
      };
    }
    if (isRouteRequest)
      throw {
        type: resultType || ResultType.data,
        response: result
      };
    let data, contentType = result.headers.get("Content-Type");
    return contentType && /\bapplication\/json\b/.test(contentType) ? data = await result.json() : data = await result.text(), resultType === ResultType.error ? {
      type: resultType,
      error: new ErrorResponse(status, result.statusText, data),
      headers: result.headers
    } : {
      type: ResultType.data,
      data,
      statusCode: result.status,
      headers: result.headers
    };
  }
  return resultType === ResultType.error ? {
    type: resultType,
    error: result
  } : result instanceof DeferredData ? {
    type: ResultType.deferred,
    deferredData: result
  } : {
    type: ResultType.data,
    data: result
  };
}
function createClientSideRequest(history, location2, signal, submission) {
  let url = history.createURL(stripHashFromPath(location2)).toString(), init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType,
      formData
    } = submission;
    init.method = formMethod.toUpperCase(), init.body = formEncType === "application/x-www-form-urlencoded" ? convertFormDataToSearchParams(formData) : formData;
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key, value] of formData.entries())
    searchParams.append(key, value instanceof File ? value.name : value);
  return searchParams;
}
function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
  let loaderData = {}, errors = null, statusCode, foundError = !1, loaderHeaders = {};
  return results.forEach((result, index) => {
    let id = matchesToLoad[index].route.id;
    if (invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData"), isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, id), error = result.error;
      pendingError && (error = Object.values(pendingError)[0], pendingError = void 0), errors = errors || {}, errors[boundaryMatch.route.id] == null && (errors[boundaryMatch.route.id] = error), loaderData[id] = void 0, foundError || (foundError = !0, statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500), result.headers && (loaderHeaders[id] = result.headers);
    } else
      isDeferredResult(result) ? (activeDeferreds.set(id, result.deferredData), loaderData[id] = result.deferredData.data) : loaderData[id] = result.data, result.statusCode != null && result.statusCode !== 200 && !foundError && (statusCode = result.statusCode), result.headers && (loaderHeaders[id] = result.headers);
  }), pendingError && (errors = pendingError, loaderData[Object.keys(pendingError)[0]] = void 0), {
    loaderData,
    errors,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors
  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
  for (let index = 0; index < revalidatingFetchers.length; index++) {
    let {
      key,
      match: match2
    } = revalidatingFetchers[index];
    invariant(fetcherResults !== void 0 && fetcherResults[index] !== void 0, "Did not find corresponding fetcher result");
    let result = fetcherResults[index];
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, match2.route.id);
      errors && errors[boundaryMatch.route.id] || (errors = _extends({}, errors, {
        [boundaryMatch.route.id]: result.error
      })), state.fetchers.delete(key);
    } else if (isRedirectResult(result))
      invariant(!1, "Unhandled fetcher revalidation redirect");
    else if (isDeferredResult(result))
      invariant(!1, "Unhandled fetcher deferred data");
    else {
      let doneFetcher = {
        state: "idle",
        data: result.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": !0
      };
      state.fetchers.set(key, doneFetcher);
    }
  }
  return {
    loaderData,
    errors
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
  let mergedLoaderData = _extends({}, newLoaderData);
  for (let match2 of matches) {
    let id = match2.route.id;
    if (newLoaderData.hasOwnProperty(id) ? newLoaderData[id] !== void 0 && (mergedLoaderData[id] = newLoaderData[id]) : loaderData[id] !== void 0 && (mergedLoaderData[id] = loaderData[id]), errors && errors.hasOwnProperty(id))
      break;
  }
  return mergedLoaderData;
}
function findNearestBoundary(matches, routeId) {
  return (routeId ? matches.slice(0, matches.findIndex((m11) => m11.route.id === routeId) + 1) : [...matches]).reverse().find((m11) => m11.route.hasErrorBoundary === !0) || matches[0];
}
function getShortCircuitMatches(routes2) {
  let route = routes2.find((r12) => r12.index || !r12.path || r12.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp4) {
  let {
    pathname,
    routeId,
    method,
    type
  } = _temp4 === void 0 ? {} : _temp4, statusText = "Unknown Server Error", errorMessage = "Unknown @remix-run/router error";
  return status === 400 ? (statusText = "Bad Request", method && pathname && routeId ? errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request." : type === "defer-action" && (errorMessage = "defer() is not supported in actions")) : status === 403 ? (statusText = "Forbidden", errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"') : status === 404 ? (statusText = "Not Found", errorMessage = 'No route matches URL "' + pathname + '"') : status === 405 && (statusText = "Method Not Allowed", method && pathname && routeId ? errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request." : method && (errorMessage = 'Invalid request method "' + method.toUpperCase() + '"')), new ErrorResponse(status || 500, statusText, new Error(errorMessage), !0);
}
function findRedirect(results) {
  for (let i9 = results.length - 1; i9 >= 0; i9--) {
    let result = results[i9];
    if (isRedirectResult(result))
      return result;
  }
}
function stripHashFromPath(path2) {
  let parsedPath = typeof path2 == "string" ? parsePath(path2) : path2;
  return createPath(_extends({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a9, b5) {
  return a9.pathname === b5.pathname && a9.search === b5.search && a9.hash !== b5.hash;
}
function isDeferredResult(result) {
  return result.type === ResultType.deferred;
}
function isErrorResult(result) {
  return result.type === ResultType.error;
}
function isRedirectResult(result) {
  return (result && result.type) === ResultType.redirect;
}
function isResponse(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
function isRedirectResponse(result) {
  if (!isResponse(result))
    return !1;
  let status = result.status, location2 = result.headers.get("Location");
  return status >= 300 && status <= 399 && location2 != null;
}
function isQueryRouteResponse(obj) {
  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);
}
function isValidMethod(method) {
  return validRequestMethods.has(method);
}
function isMutationMethod(method) {
  return validMutationMethods.has(method);
}
async function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {
  for (let index = 0; index < results.length; index++) {
    let result = results[index], match2 = matchesToLoad[index], currentMatch = currentMatches.find((m11) => m11.route.id === match2.route.id), isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
    isDeferredResult(result) && (isFetcher || isRevalidatingLoader) && await resolveDeferredData(result, signal, isFetcher).then((result2) => {
      result2 && (results[index] = result2 || results[index]);
    });
  }
}
async function resolveDeferredData(result, signal, unwrap) {
  if (unwrap === void 0 && (unwrap = !1), !await result.deferredData.resolveData(signal)) {
    if (unwrap)
      try {
        return {
          type: ResultType.data,
          data: result.deferredData.unwrappedData
        };
      } catch (e5) {
        return {
          type: ResultType.error,
          error: e5
        };
      }
    return {
      type: ResultType.data,
      data: result.deferredData.data
    };
  }
}
function hasNakedIndexQuery(search) {
  return new URLSearchParams(search).getAll("index").some((v5) => v5 === "");
}
function createUseMatchesMatch(match2, loaderData) {
  let {
    route,
    pathname,
    params
  } = match2;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function getTargetMatch(matches, location2) {
  let search = typeof location2 == "string" ? parsePath(location2).search : location2.search;
  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || ""))
    return matches[matches.length - 1];
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches[pathMatches.length - 1];
}
var Action, PopStateEventType, ResultType, paramRe, dynamicSegmentValue, indexRouteValue, emptySegmentValue, staticSegmentValue, splatPenalty, isSplat, joinPaths, normalizePathname, normalizeSearch, normalizeHash, json, AbortedDeferredError, DeferredData, defer, redirect, ErrorResponse, validMutationMethodsArr, validMutationMethods, validRequestMethodsArr, validRequestMethods, redirectStatusCodes, redirectPreserveMethodStatusCodes, IDLE_NAVIGATION, IDLE_FETCHER, IDLE_BLOCKER, isBrowser, isServer, UNSAFE_DEFERRED_SYMBOL, init_router = __esm({
  "node_modules/@remix-run/router/dist/router.js"() {
    (function(Action2) {
      Action2.Pop = "POP", Action2.Push = "PUSH", Action2.Replace = "REPLACE";
    })(Action || (Action = {}));
    PopStateEventType = "popstate";
    (function(ResultType2) {
      ResultType2.data = "data", ResultType2.deferred = "deferred", ResultType2.redirect = "redirect", ResultType2.error = "error";
    })(ResultType || (ResultType = {}));
    paramRe = /^:\w+$/, dynamicSegmentValue = 3, indexRouteValue = 2, emptySegmentValue = 1, staticSegmentValue = 10, splatPenalty = -2, isSplat = (s14) => s14 === "*";
    joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/"), normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/"), normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search, normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash, json = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init, headers = new Headers(responseInit.headers);
      return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), _extends({}, responseInit, {
        headers
      }));
    }, AbortedDeferredError = class extends Error {
    }, DeferredData = class {
      constructor(data, responseInit) {
        this.pendingKeysSet = /* @__PURE__ */ new Set(), this.subscribers = /* @__PURE__ */ new Set(), this.deferredKeys = [], invariant(data && typeof data == "object" && !Array.isArray(data), "defer() only accepts plain objects");
        let reject;
        this.abortPromise = new Promise((_3, r12) => reject = r12), this.controller = new AbortController();
        let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
        this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort), this.controller.signal.addEventListener("abort", onAbort), this.data = Object.entries(data).reduce((acc, _ref) => {
          let [key, value] = _ref;
          return Object.assign(acc, {
            [key]: this.trackPromise(key, value)
          });
        }, {}), this.done && this.unlistenAbortSignal(), this.init = responseInit;
      }
      trackPromise(key, value) {
        if (!(value instanceof Promise))
          return value;
        this.deferredKeys.push(key), this.pendingKeysSet.add(key);
        let promise2 = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise2, key, null, data), (error) => this.onSettle(promise2, key, error));
        return promise2.catch(() => {
        }), Object.defineProperty(promise2, "_tracked", {
          get: () => !0
        }), promise2;
      }
      onSettle(promise2, key, error, data) {
        return this.controller.signal.aborted && error instanceof AbortedDeferredError ? (this.unlistenAbortSignal(), Object.defineProperty(promise2, "_error", {
          get: () => error
        }), Promise.reject(error)) : (this.pendingKeysSet.delete(key), this.done && this.unlistenAbortSignal(), error ? (Object.defineProperty(promise2, "_error", {
          get: () => error
        }), this.emit(!1, key), Promise.reject(error)) : (Object.defineProperty(promise2, "_data", {
          get: () => data
        }), this.emit(!1, key), data));
      }
      emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
      }
      subscribe(fn) {
        return this.subscribers.add(fn), () => this.subscribers.delete(fn);
      }
      cancel() {
        this.controller.abort(), this.pendingKeysSet.forEach((v5, k2) => this.pendingKeysSet.delete(k2)), this.emit(!0);
      }
      async resolveData(signal) {
        let aborted = !1;
        if (!this.done) {
          let onAbort = () => this.cancel();
          signal.addEventListener("abort", onAbort), aborted = await new Promise((resolve) => {
            this.subscribe((aborted2) => {
              signal.removeEventListener("abort", onAbort), (aborted2 || this.done) && resolve(aborted2);
            });
          });
        }
        return aborted;
      }
      get done() {
        return this.pendingKeysSet.size === 0;
      }
      get unwrappedData() {
        return invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds"), Object.entries(this.data).reduce((acc, _ref2) => {
          let [key, value] = _ref2;
          return Object.assign(acc, {
            [key]: unwrapTrackedPromise(value)
          });
        }, {});
      }
      get pendingKeys() {
        return Array.from(this.pendingKeysSet);
      }
    };
    defer = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init;
      return new DeferredData(data, responseInit);
    }, redirect = function(url, init) {
      init === void 0 && (init = 302);
      let responseInit = init;
      typeof responseInit == "number" ? responseInit = {
        status: responseInit
      } : typeof responseInit.status > "u" && (responseInit.status = 302);
      let headers = new Headers(responseInit.headers);
      return headers.set("Location", url), new Response(null, _extends({}, responseInit, {
        headers
      }));
    }, ErrorResponse = class {
      constructor(status, statusText, data, internal) {
        internal === void 0 && (internal = !1), this.status = status, this.statusText = statusText || "", this.internal = internal, data instanceof Error ? (this.data = data.toString(), this.error = data) : this.data = data;
      }
    };
    validMutationMethodsArr = ["post", "put", "patch", "delete"], validMutationMethods = new Set(validMutationMethodsArr), validRequestMethodsArr = ["get", ...validMutationMethodsArr], validRequestMethods = new Set(validRequestMethodsArr), redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]), redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]), IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    }, isBrowser = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", isServer = !isBrowser;
    UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
  }
});

// node_modules/react-router/dist/index.js
function _extends2() {
  return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i9 = 1; i9 < arguments.length; i9++) {
      var source = arguments[i9];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends2.apply(this, arguments);
}
function isPolyfill(x5, y4) {
  return x5 === y4 && (x5 !== 0 || 1 / x5 === 1 / y4) || x5 !== x5 && y4 !== y4;
}
function useSyncExternalStore$2(subscribe, getSnapshot, getServerSnapshot) {
  didWarnOld18Alpha || "startTransition" in React && (didWarnOld18Alpha = !0, console.error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
  let value = getSnapshot();
  if (!didWarnUncachedGetSnapshot) {
    let cachedValue = getSnapshot();
    is(value, cachedValue) || (console.error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
  }
  let [{
    inst
  }, forceUpdate] = useState2({
    inst: {
      value,
      getSnapshot
    }
  });
  return useLayoutEffect2(() => {
    inst.value = value, inst.getSnapshot = getSnapshot, checkIfSnapshotChanged(inst) && forceUpdate({
      inst
    });
  }, [subscribe, value, getSnapshot]), useEffect2(() => (checkIfSnapshotChanged(inst) && forceUpdate({
    inst
  }), subscribe(() => {
    checkIfSnapshotChanged(inst) && forceUpdate({
      inst
    });
  })), [subscribe]), useDebugValue(value), value;
}
function checkIfSnapshotChanged(inst) {
  let latestGetSnapshot = inst.getSnapshot, prevValue = inst.value;
  try {
    let nextValue = latestGetSnapshot();
    return !is(prevValue, nextValue);
  } catch {
    return !0;
  }
}
function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
  return getSnapshot();
}
function useHref(to, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  useInRouterContext() || invariant(
    !1,
    "useHref() may be used only in the context of a <Router> component."
  );
  let {
    basename,
    navigator: navigator2
  } = React.useContext(NavigationContext), {
    hash,
    pathname,
    search
  } = useResolvedPath(to, {
    relative
  }), joinedPathname = pathname;
  return basename !== "/" && (joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname])), navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash
  });
}
function useInRouterContext() {
  return React.useContext(LocationContext) != null;
}
function useLocation() {
  return useInRouterContext() || invariant(
    !1,
    "useLocation() may be used only in the context of a <Router> component."
  ), React.useContext(LocationContext).location;
}
function useNavigationType() {
  return React.useContext(LocationContext).navigationType;
}
function useMatch(pattern) {
  useInRouterContext() || invariant(
    !1,
    "useMatch() may be used only in the context of a <Router> component."
  );
  let {
    pathname
  } = useLocation();
  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);
}
function useNavigate() {
  useInRouterContext() || invariant(
    !1,
    "useNavigate() may be used only in the context of a <Router> component."
  );
  let {
    basename,
    navigator: navigator2
  } = React.useContext(NavigationContext), {
    matches
  } = React.useContext(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase)), activeRef = React.useRef(!1);
  return React.useEffect(() => {
    activeRef.current = !0;
  }), React.useCallback(function(to, options) {
    if (options === void 0 && (options = {}), warning(activeRef.current, "You should call navigate() in a React.useEffect(), not when your component is first rendered."), !activeRef.current)
      return;
    if (typeof to == "number") {
      navigator2.go(to);
      return;
    }
    let path2 = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    basename !== "/" && (path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname])), (options.replace ? navigator2.replace : navigator2.push)(path2, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname]);
}
function useOutletContext() {
  return React.useContext(OutletContext);
}
function useOutlet(context2) {
  let outlet = React.useContext(RouteContext).outlet;
  return outlet && /* @__PURE__ */ React.createElement(OutletContext.Provider, {
    value: context2
  }, outlet);
}
function useParams() {
  let {
    matches
  } = React.useContext(RouteContext), routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2, {
    matches
  } = React.useContext(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
}
function useRoutes(routes2, locationArg) {
  useInRouterContext() || invariant(
    !1,
    "useRoutes() may be used only in the context of a <Router> component."
  );
  let {
    navigator: navigator2
  } = React.useContext(NavigationContext), dataRouterStateContext = React.useContext(DataRouterStateContext), {
    matches: parentMatches
  } = React.useContext(RouteContext), routeMatch = parentMatches[parentMatches.length - 1], parentParams = routeMatch ? routeMatch.params : {}, parentPathname = routeMatch ? routeMatch.pathname : "/", parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/", parentRoute = routeMatch && routeMatch.route;
  {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation(), location2;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg == "string" ? parsePath(locationArg) : locationArg;
    parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase)) || invariant(!1, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')), location2 = parsedLocationArg;
  } else
    location2 = locationFromContext;
  let pathname = location2.pathname || "/", remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/", matches = matchRoutes(routes2, {
    pathname: remainingPathname
  });
  warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" '), warning(matches == null || matches[matches.length - 1].route.element !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.');
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterStateContext || void 0);
  return locationArg && renderedMatches ? /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    value: {
      location: _extends2({
        pathname: "/",
        search: "",
        hash: "",
        state: null,
        key: "default"
      }, location2),
      navigationType: Action.Pop
    }
  }, renderedMatches) : renderedMatches;
}
function DefaultErrorElement() {
  let error = useRouteError(), message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error), stack = error instanceof Error ? error.stack : null, lightgrey = "rgba(200,200,200, 0.5)", preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  }, codeStyles = {
    padding: "2px 4px",
    backgroundColor: lightgrey
  }, devInfo = null;
  return devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own\xA0", /* @__PURE__ */ React.createElement("code", {
    style: codeStyles
  }, "errorElement"), " props on\xA0", /* @__PURE__ */ React.createElement("code", {
    style: codeStyles
  }, "<Route>"))), /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref, dataRouterContext = React.useContext(DataRouterContext);
  return dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && match2.route.errorElement && (dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id), /* @__PURE__ */ React.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState) {
  if (parentMatches === void 0 && (parentMatches = []), matches == null)
    if (dataRouterState != null && dataRouterState.errors)
      matches = dataRouterState.matches;
    else
      return null;
  let renderedMatches = matches, errors = dataRouterState == null ? void 0 : dataRouterState.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m11) => m11.route.id && (errors == null ? void 0 : errors[m11.route.id]));
    errorIndex >= 0 || invariant(!1, "Could not find a matching route for the current errors: " + errors), renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  return renderedMatches.reduceRight((outlet, match2, index) => {
    let error = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null, errorElement = dataRouterState ? match2.route.errorElement || /* @__PURE__ */ React.createElement(DefaultErrorElement, null) : null, matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1)), getChildren2 = () => /* @__PURE__ */ React.createElement(RenderedRoute, {
      match: match2,
      routeContext: {
        outlet,
        matches: matches2
      }
    }, error ? errorElement : match2.route.element !== void 0 ? match2.route.element : outlet);
    return dataRouterState && (match2.route.errorElement || index === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      component: errorElement,
      error,
      children: getChildren2(),
      routeContext: {
        outlet: null,
        matches: matches2
      }
    }) : getChildren2();
  }, null);
}
function getDataRouterConsoleError(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext(hookName) {
  let ctx = React.useContext(DataRouterContext);
  return ctx || invariant(!1, getDataRouterConsoleError(hookName)), ctx;
}
function useDataRouterState(hookName) {
  let state = React.useContext(DataRouterStateContext);
  return state || invariant(!1, getDataRouterConsoleError(hookName)), state;
}
function useRouteContext(hookName) {
  let route = React.useContext(RouteContext);
  return route || invariant(!1, getDataRouterConsoleError(hookName)), route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName), thisRoute = route.matches[route.matches.length - 1];
  return thisRoute.route.id || invariant(!1, hookName + ' can only be used on routes that contain a unique "id"'), thisRoute.route.id;
}
function useNavigation() {
  return useDataRouterState(DataRouterStateHook.UseNavigation).navigation;
}
function useRevalidator() {
  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator), state = useDataRouterState(DataRouterStateHook.UseRevalidator);
  return {
    revalidate: dataRouterContext.router.revalidate,
    state: state.revalidation
  };
}
function useMatches() {
  let {
    matches,
    loaderData
  } = useDataRouterState(DataRouterStateHook.UseMatches);
  return React.useMemo(() => matches.map((match2) => {
    let {
      pathname,
      params
    } = match2;
    return {
      id: match2.route.id,
      pathname,
      params,
      data: loaderData[match2.route.id],
      handle: match2.route.handle
    };
  }), [matches, loaderData]);
}
function useLoaderData() {
  let state = useDataRouterState(DataRouterStateHook.UseLoaderData), routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
  if (state.errors && state.errors[routeId] != null) {
    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
    return;
  }
  return state.loaderData[routeId];
}
function useRouteLoaderData(routeId) {
  return useDataRouterState(DataRouterStateHook.UseRouteLoaderData).loaderData[routeId];
}
function useActionData() {
  let state = useDataRouterState(DataRouterStateHook.UseActionData);
  return React.useContext(RouteContext) || invariant(!1, "useActionData must be used inside a RouteContext"), Object.values((state == null ? void 0 : state.actionData) || {})[0];
}
function useRouteError() {
  var _state$errors;
  let error = React.useContext(RouteErrorContext), state = useDataRouterState(DataRouterStateHook.UseRouteError), routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
  return error || ((_state$errors = state.errors) == null ? void 0 : _state$errors[routeId]);
}
function useAsyncValue() {
  let value = React.useContext(AwaitContext);
  return value == null ? void 0 : value._data;
}
function useAsyncError() {
  let value = React.useContext(AwaitContext);
  return value == null ? void 0 : value._error;
}
function useBlocker(shouldBlock) {
  let {
    router
  } = useDataRouterContext(DataRouterHook.UseBlocker), blockerFunction = React.useCallback((args) => typeof shouldBlock == "function" ? !!shouldBlock(args) : !!shouldBlock, [shouldBlock]), blocker = router.getBlocker(blockerKey, blockerFunction);
  return React.useEffect(() => () => router.deleteBlocker(blockerKey), [router]), blocker;
}
function warningOnce(key, cond, message) {
  !cond && !alreadyWarned[key] && (alreadyWarned[key] = !0, warning(!1, message));
}
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router
  } = _ref, state = useSyncExternalStore(
    router.subscribe,
    () => router.state,
    () => router.state
  ), navigator2 = React.useMemo(() => ({
    createHref: router.createHref,
    encodeLocation: router.encodeLocation,
    go: (n4) => router.navigate(n4),
    push: (to, state2, opts) => router.navigate(to, {
      state: state2,
      preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
    }),
    replace: (to, state2, opts) => router.navigate(to, {
      replace: !0,
      state: state2,
      preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
    })
  }), [router]), basename = router.basename || "/";
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DataRouterContext.Provider, {
    value: {
      router,
      navigator: navigator2,
      static: !1,
      basename
    }
  }, /* @__PURE__ */ React.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ React.createElement(Router, {
    basename: router.basename,
    location: router.state.location,
    navigationType: router.state.historyAction,
    navigator: navigator2
  }, router.state.initialized ? /* @__PURE__ */ React.createElement(Routes, null) : fallbackElement))), null);
}
function MemoryRouter(_ref2) {
  let {
    basename,
    children,
    initialEntries,
    initialIndex
  } = _ref2, historyRef = React.useRef();
  historyRef.current == null && (historyRef.current = createMemoryHistory({
    initialEntries,
    initialIndex,
    v5Compat: !0
  }));
  let history = historyRef.current, [state, setState] = React.useState({
    action: history.action,
    location: history.location
  });
  return React.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function Navigate(_ref3) {
  let {
    to,
    replace,
    state,
    relative
  } = _ref3;
  useInRouterContext() || invariant(
    !1,
    "<Navigate> may be used only in the context of a <Router> component."
  ), warning(!React.useContext(NavigationContext).static, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
  let dataRouterState = React.useContext(DataRouterStateContext), navigate = useNavigate();
  return React.useEffect(() => {
    dataRouterState && dataRouterState.navigation.state !== "idle" || navigate(to, {
      replace,
      state,
      relative
    });
  }), null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant(!1, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
}
function Router(_ref4) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = !1
  } = _ref4;
  useInRouterContext() && invariant(!1, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");
  let basename = basenameProp.replace(/^\/*/, "/"), navigationContext = React.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp
  }), [basename, navigator2, staticProp]);
  typeof locationProp == "string" && (locationProp = parsePath(locationProp));
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp, location2 = React.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    return trailingPathname == null ? null : {
      pathname: trailingPathname,
      search,
      hash,
      state,
      key
    };
  }, [basename, pathname, search, hash, state, key]);
  return warning(location2 != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything."), location2 == null ? null : /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    children,
    value: {
      location: location2,
      navigationType
    }
  }));
}
function Routes(_ref5) {
  let {
    children,
    location: location2
  } = _ref5, dataRouterContext = React.useContext(DataRouterContext), routes2 = dataRouterContext && !children ? dataRouterContext.router.routes : createRoutesFromChildren(children);
  return useRoutes(routes2, location2);
}
function Await(_ref6) {
  let {
    children,
    errorElement,
    resolve
  } = _ref6;
  return /* @__PURE__ */ React.createElement(AwaitErrorBoundary, {
    resolve,
    errorElement
  }, /* @__PURE__ */ React.createElement(ResolveAwait, null, children));
}
function ResolveAwait(_ref7) {
  let {
    children
  } = _ref7, data = useAsyncValue(), toRender = typeof children == "function" ? children(data) : children;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, toRender);
}
function createRoutesFromChildren(children, parentPath) {
  parentPath === void 0 && (parentPath = []);
  let routes2 = [];
  return React.Children.forEach(children, (element, index) => {
    if (!/* @__PURE__ */ React.isValidElement(element))
      return;
    if (element.type === React.Fragment) {
      routes2.push.apply(routes2, createRoutesFromChildren(element.props.children, parentPath));
      return;
    }
    element.type !== Route && invariant(!1, "[" + (typeof element.type == "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>"), !element.props.index || !element.props.children || invariant(!1, "An index route cannot have child routes.");
    let treePath = [...parentPath, index], route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      hasErrorBoundary: element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle
    };
    element.props.children && (route.children = createRoutesFromChildren(element.props.children, treePath)), routes2.push(route);
  }), routes2;
}
function renderMatches(matches) {
  return _renderMatches(matches);
}
function enhanceManualRouteObjects(routes2) {
  return routes2.map((route) => {
    let routeClone = _extends2({}, route);
    return routeClone.hasErrorBoundary == null && (routeClone.hasErrorBoundary = routeClone.errorElement != null), routeClone.children && (routeClone.children = enhanceManualRouteObjects(routeClone.children)), routeClone;
  });
}
function createMemoryRouter(routes2, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    history: createMemoryHistory({
      initialEntries: opts == null ? void 0 : opts.initialEntries,
      initialIndex: opts == null ? void 0 : opts.initialIndex
    }),
    hydrationData: opts == null ? void 0 : opts.hydrationData,
    routes: enhanceManualRouteObjects(routes2)
  }).initialize();
}
var React, is, useState2, useEffect2, useLayoutEffect2, useDebugValue, didWarnOld18Alpha, didWarnUncachedGetSnapshot, canUseDOM, isServerEnvironment, shim, useSyncExternalStore, DataRouterContext, DataRouterStateContext, AwaitContext, NavigationContext, LocationContext, RouteContext, RouteErrorContext, OutletContext, RenderErrorBoundary, DataRouterHook, DataRouterStateHook, blockerKey, alreadyWarned, AwaitRenderStatus, neverSettledPromise, AwaitErrorBoundary, init_dist = __esm({
  "node_modules/react-router/dist/index.js"() {
    init_router();
    init_router();
    React = __toESM(require_react());
    is = typeof Object.is == "function" ? Object.is : isPolyfill, {
      useState: useState2,
      useEffect: useEffect2,
      useLayoutEffect: useLayoutEffect2,
      useDebugValue
    } = React, didWarnOld18Alpha = !1, didWarnUncachedGetSnapshot = !1;
    canUseDOM = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", isServerEnvironment = !canUseDOM, shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore$2, useSyncExternalStore = "useSyncExternalStore" in React ? ((module) => module.useSyncExternalStore)(React) : shim, DataRouterContext = /* @__PURE__ */ React.createContext(null);
    DataRouterContext.displayName = "DataRouter";
    DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
    DataRouterStateContext.displayName = "DataRouterState";
    AwaitContext = /* @__PURE__ */ React.createContext(null);
    AwaitContext.displayName = "Await";
    NavigationContext = /* @__PURE__ */ React.createContext(null);
    NavigationContext.displayName = "Navigation";
    LocationContext = /* @__PURE__ */ React.createContext(null);
    LocationContext.displayName = "Location";
    RouteContext = /* @__PURE__ */ React.createContext({
      outlet: null,
      matches: []
    });
    RouteContext.displayName = "Route";
    RouteErrorContext = /* @__PURE__ */ React.createContext(null);
    RouteErrorContext.displayName = "RouteError";
    OutletContext = /* @__PURE__ */ React.createContext(null);
    RenderErrorBoundary = class extends React.Component {
      constructor(props) {
        super(props), this.state = {
          location: props.location,
          error: props.error
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      static getDerivedStateFromProps(props, state) {
        return state.location !== props.location ? {
          error: props.error,
          location: props.location
        } : {
          error: props.error || state.error,
          location: state.location
        };
      }
      componentDidCatch(error, errorInfo) {
        console.error("React Router caught the following error during render", error, errorInfo);
      }
      render() {
        return this.state.error ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
          value: this.props.routeContext
        }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
          value: this.state.error,
          children: this.props.component
        })) : this.props.children;
      }
    };
    (function(DataRouterHook3) {
      DataRouterHook3.UseBlocker = "useBlocker", DataRouterHook3.UseRevalidator = "useRevalidator";
    })(DataRouterHook || (DataRouterHook = {}));
    (function(DataRouterStateHook3) {
      DataRouterStateHook3.UseLoaderData = "useLoaderData", DataRouterStateHook3.UseActionData = "useActionData", DataRouterStateHook3.UseRouteError = "useRouteError", DataRouterStateHook3.UseNavigation = "useNavigation", DataRouterStateHook3.UseRouteLoaderData = "useRouteLoaderData", DataRouterStateHook3.UseMatches = "useMatches", DataRouterStateHook3.UseRevalidator = "useRevalidator";
    })(DataRouterStateHook || (DataRouterStateHook = {}));
    blockerKey = "blocker-singleton";
    alreadyWarned = {};
    (function(AwaitRenderStatus2) {
      AwaitRenderStatus2[AwaitRenderStatus2.pending = 0] = "pending", AwaitRenderStatus2[AwaitRenderStatus2.success = 1] = "success", AwaitRenderStatus2[AwaitRenderStatus2.error = 2] = "error";
    })(AwaitRenderStatus || (AwaitRenderStatus = {}));
    neverSettledPromise = new Promise(() => {
    }), AwaitErrorBoundary = class extends React.Component {
      constructor(props) {
        super(props), this.state = {
          error: null
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      componentDidCatch(error, errorInfo) {
        console.error("<Await> caught the following error during render", error, errorInfo);
      }
      render() {
        let {
          children,
          errorElement,
          resolve
        } = this.props, promise2 = null, status = AwaitRenderStatus.pending;
        if (!(resolve instanceof Promise))
          status = AwaitRenderStatus.success, promise2 = Promise.resolve(), Object.defineProperty(promise2, "_tracked", {
            get: () => !0
          }), Object.defineProperty(promise2, "_data", {
            get: () => resolve
          });
        else if (this.state.error) {
          status = AwaitRenderStatus.error;
          let renderError = this.state.error;
          promise2 = Promise.reject().catch(() => {
          }), Object.defineProperty(promise2, "_tracked", {
            get: () => !0
          }), Object.defineProperty(promise2, "_error", {
            get: () => renderError
          });
        } else
          resolve._tracked ? (promise2 = resolve, status = promise2._error !== void 0 ? AwaitRenderStatus.error : promise2._data !== void 0 ? AwaitRenderStatus.success : AwaitRenderStatus.pending) : (status = AwaitRenderStatus.pending, Object.defineProperty(resolve, "_tracked", {
            get: () => !0
          }), promise2 = resolve.then((data) => Object.defineProperty(resolve, "_data", {
            get: () => data
          }), (error) => Object.defineProperty(resolve, "_error", {
            get: () => error
          })));
        if (status === AwaitRenderStatus.error && promise2._error instanceof AbortedDeferredError)
          throw neverSettledPromise;
        if (status === AwaitRenderStatus.error && !errorElement)
          throw promise2._error;
        if (status === AwaitRenderStatus.error)
          return /* @__PURE__ */ React.createElement(AwaitContext.Provider, {
            value: promise2,
            children: errorElement
          });
        if (status === AwaitRenderStatus.success)
          return /* @__PURE__ */ React.createElement(AwaitContext.Provider, {
            value: promise2,
            children
          });
        throw promise2;
      }
    };
  }
});

// node_modules/react-router-dom/dist/index.js
var dist_exports = {};
__export(dist_exports, {
  AbortedDeferredError: () => AbortedDeferredError,
  Await: () => Await,
  BrowserRouter: () => BrowserRouter,
  Form: () => Form,
  HashRouter: () => HashRouter,
  Link: () => Link,
  MemoryRouter: () => MemoryRouter,
  NavLink: () => NavLink,
  Navigate: () => Navigate,
  NavigationType: () => Action,
  Outlet: () => Outlet,
  Route: () => Route,
  Router: () => Router,
  RouterProvider: () => RouterProvider,
  Routes: () => Routes,
  ScrollRestoration: () => ScrollRestoration,
  UNSAFE_DataRouterContext: () => DataRouterContext,
  UNSAFE_DataRouterStateContext: () => DataRouterStateContext,
  UNSAFE_LocationContext: () => LocationContext,
  UNSAFE_NavigationContext: () => NavigationContext,
  UNSAFE_RouteContext: () => RouteContext,
  UNSAFE_enhanceManualRouteObjects: () => enhanceManualRouteObjects,
  UNSAFE_useScrollRestoration: () => useScrollRestoration,
  createBrowserRouter: () => createBrowserRouter,
  createHashRouter: () => createHashRouter,
  createMemoryRouter: () => createMemoryRouter,
  createPath: () => createPath,
  createRoutesFromChildren: () => createRoutesFromChildren,
  createRoutesFromElements: () => createRoutesFromChildren,
  createSearchParams: () => createSearchParams,
  defer: () => defer,
  generatePath: () => generatePath,
  isRouteErrorResponse: () => isRouteErrorResponse,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  parsePath: () => parsePath,
  redirect: () => redirect,
  renderMatches: () => renderMatches,
  resolvePath: () => resolvePath,
  unstable_HistoryRouter: () => HistoryRouter,
  unstable_useBlocker: () => useBlocker,
  unstable_usePrompt: () => usePrompt,
  useActionData: () => useActionData,
  useAsyncError: () => useAsyncError,
  useAsyncValue: () => useAsyncValue,
  useBeforeUnload: () => useBeforeUnload,
  useFetcher: () => useFetcher,
  useFetchers: () => useFetchers,
  useFormAction: () => useFormAction,
  useHref: () => useHref,
  useInRouterContext: () => useInRouterContext,
  useLinkClickHandler: () => useLinkClickHandler,
  useLoaderData: () => useLoaderData,
  useLocation: () => useLocation,
  useMatch: () => useMatch,
  useMatches: () => useMatches,
  useNavigate: () => useNavigate,
  useNavigation: () => useNavigation,
  useNavigationType: () => useNavigationType,
  useOutlet: () => useOutlet,
  useOutletContext: () => useOutletContext,
  useParams: () => useParams,
  useResolvedPath: () => useResolvedPath,
  useRevalidator: () => useRevalidator,
  useRouteError: () => useRouteError,
  useRouteLoaderData: () => useRouteLoaderData,
  useRoutes: () => useRoutes,
  useSearchParams: () => useSearchParams,
  useSubmit: () => useSubmit
});
function _extends3() {
  return _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i9 = 1; i9 < arguments.length; i9++) {
      var source = arguments[i9];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i9;
  for (i9 = 0; i9 < sourceKeys.length; i9++)
    key = sourceKeys[i9], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function isHtmlElement(object) {
  return object != null && typeof object.tagName == "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event2) {
  return !!(event2.metaKey || event2.altKey || event2.ctrlKey || event2.shiftKey);
}
function shouldProcessLinkClick(event2, target) {
  return event2.button === 0 && (!target || target === "_self") && !isModifiedEvent(event2);
}
function createSearchParams(init) {
  return init === void 0 && (init = ""), new URLSearchParams(typeof init == "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
    let value = init[key];
    return memo.concat(Array.isArray(value) ? value.map((v5) => [key, v5]) : [[key, value]]);
  }, []));
}
function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
  let searchParams = createSearchParams(locationSearch);
  if (defaultSearchParams)
    for (let key of defaultSearchParams.keys())
      searchParams.has(key) || defaultSearchParams.getAll(key).forEach((value) => {
        searchParams.append(key, value);
      });
  return searchParams;
}
function getFormSubmissionInfo(target, defaultAction, options) {
  let method, action4, encType, formData;
  if (isFormElement(target)) {
    let submissionTrigger = options.submissionTrigger;
    method = options.method || target.getAttribute("method") || defaultMethod, action4 = options.action || target.getAttribute("action") || defaultAction, encType = options.encType || target.getAttribute("enctype") || defaultEncType, formData = new FormData(target), submissionTrigger && submissionTrigger.name && formData.append(submissionTrigger.name, submissionTrigger.value);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null)
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    method = options.method || target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod, action4 = options.action || target.getAttribute("formaction") || form.getAttribute("action") || defaultAction, encType = options.encType || target.getAttribute("formenctype") || form.getAttribute("enctype") || defaultEncType, formData = new FormData(form), target.name && formData.append(target.name, target.value);
  } else {
    if (isHtmlElement(target))
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    if (method = options.method || defaultMethod, action4 = options.action || defaultAction, encType = options.encType || defaultEncType, target instanceof FormData)
      formData = target;
    else if (formData = new FormData(), target instanceof URLSearchParams)
      for (let [name, value] of target)
        formData.append(name, value);
    else if (target != null)
      for (let name of Object.keys(target))
        formData.append(name, target[name]);
  }
  let {
    protocol,
    host
  } = window.location;
  return {
    url: new URL(action4, protocol + "//" + host),
    method: method.toLowerCase(),
    encType,
    formData
  };
}
function createBrowserRouter(routes2, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    history: createBrowserHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes: enhanceManualRouteObjects(routes2)
  }).initialize();
}
function createHashRouter(routes2, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    history: createHashHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes: enhanceManualRouteObjects(routes2)
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  return state && state.errors && (state = _extends3({}, state, {
    errors: deserializeErrors(state.errors)
  })), state;
}
function deserializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors), serialized = {};
  for (let [key, val] of entries)
    if (val && val.__type === "RouteErrorResponse")
      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === !0);
    else if (val && val.__type === "Error") {
      let error = new Error(val.message);
      error.stack = "", serialized[key] = error;
    } else
      serialized[key] = val;
  return serialized;
}
function BrowserRouter(_ref) {
  let {
    basename,
    children,
    window: window2
  } = _ref, historyRef = React2.useRef();
  historyRef.current == null && (historyRef.current = createBrowserHistory({
    window: window2,
    v5Compat: !0
  }));
  let history = historyRef.current, [state, setState] = React2.useState({
    action: history.action,
    location: history.location
  });
  return React2.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function HashRouter(_ref2) {
  let {
    basename,
    children,
    window: window2
  } = _ref2, historyRef = React2.useRef();
  historyRef.current == null && (historyRef.current = createHashHistory({
    window: window2,
    v5Compat: !0
  }));
  let history = historyRef.current, [state, setState] = React2.useState({
    action: history.action,
    location: history.location
  });
  return React2.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function HistoryRouter(_ref3) {
  let {
    basename,
    children,
    history
  } = _ref3, [state, setState] = React2.useState({
    action: history.action,
    location: history.location
  });
  return React2.useLayoutEffect(() => history.listen(setState), [history]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
function ScrollRestoration(_ref7) {
  let {
    getKey,
    storageKey
  } = _ref7;
  return useScrollRestoration({
    getKey,
    storageKey
  }), null;
}
function getDataRouterConsoleError2(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext2(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  return ctx || invariant(!1, getDataRouterConsoleError2(hookName)), ctx;
}
function useDataRouterState2(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  return state || invariant(!1, getDataRouterConsoleError2(hookName)), state;
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative
  } = _temp === void 0 ? {} : _temp, navigate = useNavigate(), location2 = useLocation(), path2 = useResolvedPath(to, {
    relative
  });
  return React2.useCallback((event2) => {
    if (shouldProcessLinkClick(event2, target)) {
      event2.preventDefault();
      let replace = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path2);
      navigate(to, {
        replace,
        state,
        preventScrollReset,
        relative
      });
    }
  }, [location2, navigate, path2, replaceProp, state, target, to, preventScrollReset, relative]);
}
function useSearchParams(defaultInit) {
  warning2(typeof URLSearchParams < "u", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.");
  let defaultSearchParamsRef = React2.useRef(createSearchParams(defaultInit)), hasSetSearchParamsRef = React2.useRef(!1), location2 = useLocation(), searchParams = React2.useMemo(() => getSearchParamsForLocation(location2.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location2.search]), navigate = useNavigate(), setSearchParams = React2.useCallback((nextInit, navigateOptions) => {
    let newSearchParams = createSearchParams(typeof nextInit == "function" ? nextInit(searchParams) : nextInit);
    hasSetSearchParamsRef.current = !0, navigate("?" + newSearchParams, navigateOptions);
  }, [navigate, searchParams]);
  return [searchParams, setSearchParams];
}
function useSubmit() {
  return useSubmitImpl();
}
function useSubmitImpl(fetcherKey, routeId) {
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseSubmitImpl), defaultAction = useFormAction();
  return React2.useCallback(function(target, options) {
    if (options === void 0 && (options = {}), typeof document > "u")
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    let {
      method,
      encType,
      formData,
      url
    } = getFormSubmissionInfo(target, defaultAction, options), href = url.pathname + url.search, opts = {
      replace: options.replace,
      preventScrollReset: options.preventScrollReset,
      formData,
      formMethod: method,
      formEncType: encType
    };
    fetcherKey ? (routeId == null && invariant(!1, "No routeId available for useFetcher()"), router.fetch(fetcherKey, routeId, href, opts)) : router.navigate(href, opts);
  }, [defaultAction, router, fetcherKey, routeId]);
}
function useFormAction(action4, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2, {
    basename
  } = React2.useContext(NavigationContext), routeContext = React2.useContext(RouteContext);
  routeContext || invariant(!1, "useFormAction must be used inside a RouteContext");
  let [match2] = routeContext.matches.slice(-1), path2 = _extends3({}, useResolvedPath(action4 || ".", {
    relative
  })), location2 = useLocation();
  if (action4 == null && (path2.search = location2.search, path2.hash = location2.hash, match2.route.index)) {
    let params = new URLSearchParams(path2.search);
    params.delete("index"), path2.search = params.toString() ? "?" + params.toString() : "";
  }
  return (!action4 || action4 === ".") && match2.route.index && (path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index"), basename !== "/" && (path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname])), createPath(path2);
}
function createFetcherForm(fetcherKey, routeId) {
  let FetcherForm = /* @__PURE__ */ React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(FormImpl, _extends3({}, props, {
    ref,
    fetcherKey,
    routeId
  })));
  return FetcherForm.displayName = "fetcher.Form", FetcherForm;
}
function useFetcher() {
  var _route$matches;
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseFetcher), route = React2.useContext(RouteContext);
  route || invariant(!1, "useFetcher must be used inside a RouteContext");
  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
  routeId == null && invariant(!1, 'useFetcher can only be used on routes that contain a unique "id"');
  let [fetcherKey] = React2.useState(() => String(++fetcherId)), [Form2] = React2.useState(() => (routeId || invariant(!1, "No routeId available for fetcher.Form()"), createFetcherForm(fetcherKey, routeId))), [load] = React2.useState(() => (href) => {
    router || invariant(!1, "No router available for fetcher.load()"), routeId || invariant(!1, "No routeId available for fetcher.load()"), router.fetch(fetcherKey, routeId, href);
  }), submit = useSubmitImpl(fetcherKey, routeId), fetcher = router.getFetcher(fetcherKey), fetcherWithComponents = React2.useMemo(() => _extends3({
    Form: Form2,
    submit,
    load
  }, fetcher), [fetcher, Form2, submit, load]);
  return React2.useEffect(() => () => {
    if (!router) {
      console.warn("No fetcher available to clean up from useFetcher()");
      return;
    }
    router.deleteFetcher(fetcherKey);
  }, [router, fetcherKey]), fetcherWithComponents;
}
function useFetchers() {
  return [...useDataRouterState2(DataRouterStateHook2.UseFetchers).fetchers.values()];
}
function useScrollRestoration(_temp3) {
  let {
    getKey,
    storageKey
  } = _temp3 === void 0 ? {} : _temp3, {
    router
  } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration), {
    restoreScrollPosition,
    preventScrollReset
  } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration), location2 = useLocation(), matches = useMatches(), navigation = useNavigation();
  React2.useEffect(() => (window.history.scrollRestoration = "manual", () => {
    window.history.scrollRestoration = "auto";
  }), []), usePageHide(React2.useCallback(() => {
    if (navigation.state === "idle") {
      let key = (getKey ? getKey(location2, matches) : null) || location2.key;
      savedScrollPositions[key] = window.scrollY;
    }
    sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions)), window.history.scrollRestoration = "auto";
  }, [storageKey, getKey, navigation.state, location2, matches])), typeof document < "u" && (React2.useLayoutEffect(() => {
    try {
      let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
      sessionPositions && (savedScrollPositions = JSON.parse(sessionPositions));
    } catch {
    }
  }, [storageKey]), React2.useLayoutEffect(() => {
    let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);
    return () => disableScrollRestoration && disableScrollRestoration();
  }, [router, getKey]), React2.useLayoutEffect(() => {
    if (restoreScrollPosition !== !1) {
      if (typeof restoreScrollPosition == "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location2.hash) {
        let el = document.getElementById(location2.hash.slice(1));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      preventScrollReset !== !0 && window.scrollTo(0, 0);
    }
  }, [location2, restoreScrollPosition, preventScrollReset]));
}
function useBeforeUnload(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    return window.addEventListener("beforeunload", callback, opts), () => {
      window.removeEventListener("beforeunload", callback, opts);
    };
  }, [callback, capture]);
}
function usePageHide(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    return window.addEventListener("pagehide", callback, opts), () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function usePrompt(_ref8) {
  let {
    when,
    message
  } = _ref8, blocker = useBlocker(when);
  React2.useEffect(() => {
    blocker.state === "blocked" && !when && blocker.reset();
  }, [blocker, when]), React2.useEffect(() => {
    blocker.state === "blocked" && (window.confirm(message) ? setTimeout(blocker.proceed, 0) : blocker.reset());
  }, [blocker, message]);
}
function warning2(cond, message) {
  if (!cond) {
    typeof console < "u" && console.warn(message);
    try {
      throw new Error(message);
    } catch {
    }
  }
}
var React2, defaultMethod, defaultEncType, _excluded, _excluded2, _excluded3, isBrowser2, Link, NavLink, Form, FormImpl, DataRouterHook2, DataRouterStateHook2, fetcherId, SCROLL_RESTORATION_STORAGE_KEY, savedScrollPositions, init_dist2 = __esm({
  "node_modules/react-router-dom/dist/index.js"() {
    React2 = __toESM(require_react());
    init_dist();
    init_dist();
    init_router();
    defaultMethod = "get", defaultEncType = "application/x-www-form-urlencoded";
    _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"], _excluded3 = ["reloadDocument", "replace", "method", "action", "onSubmit", "fetcherKey", "routeId", "relative", "preventScrollReset"];
    HistoryRouter.displayName = "unstable_HistoryRouter";
    isBrowser2 = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", Link = /* @__PURE__ */ React2.forwardRef(function(_ref4, ref) {
      let {
        onClick: onClick2,
        relative,
        reloadDocument,
        replace,
        state,
        target,
        to,
        preventScrollReset
      } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded), location2 = typeof to == "string" ? to : createPath(to), isAbsolute = /^[a-z+]+:\/\//i.test(location2) || location2.startsWith("//"), navigationLocation = location2, isExternal = !1;
      if (isBrowser2 && isAbsolute) {
        let currentUrl = new URL(window.location.href), targetUrl = location2.startsWith("//") ? new URL(currentUrl.protocol + location2) : new URL(location2);
        targetUrl.origin === currentUrl.origin ? navigationLocation = targetUrl.pathname + targetUrl.search + targetUrl.hash : isExternal = !0;
      }
      let href = useHref(navigationLocation, {
        relative
      }), internalOnClick = useLinkClickHandler(navigationLocation, {
        replace,
        state,
        target,
        preventScrollReset,
        relative
      });
      function handleClick(event2) {
        onClick2 && onClick2(event2), event2.defaultPrevented || internalOnClick(event2);
      }
      return /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
        href: isAbsolute ? location2 : href,
        onClick: isExternal || reloadDocument ? onClick2 : handleClick,
        ref,
        target
      }));
    });
    Link.displayName = "Link";
    NavLink = /* @__PURE__ */ React2.forwardRef(function(_ref5, ref) {
      let {
        "aria-current": ariaCurrentProp = "page",
        caseSensitive = !1,
        className: classNameProp = "",
        end = !1,
        style: styleProp,
        to,
        children
      } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2), path2 = useResolvedPath(to, {
        relative: rest.relative
      }), location2 = useLocation(), routerState = React2.useContext(DataRouterStateContext), {
        navigator: navigator2
      } = React2.useContext(NavigationContext), toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path2).pathname : path2.pathname, locationPathname = location2.pathname, nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      caseSensitive || (locationPathname = locationPathname.toLowerCase(), nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null, toPathname = toPathname.toLowerCase());
      let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/", isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/"), ariaCurrent = isActive ? ariaCurrentProp : void 0, className;
      typeof classNameProp == "function" ? className = classNameProp({
        isActive,
        isPending
      }) : className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
      let style = typeof styleProp == "function" ? styleProp({
        isActive,
        isPending
      }) : styleProp;
      return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to
      }), typeof children == "function" ? children({
        isActive,
        isPending
      }) : children);
    });
    NavLink.displayName = "NavLink";
    Form = /* @__PURE__ */ React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(FormImpl, _extends3({}, props, {
      ref
    })));
    Form.displayName = "Form";
    FormImpl = /* @__PURE__ */ React2.forwardRef((_ref6, forwardedRef) => {
      let {
        reloadDocument,
        replace,
        method = defaultMethod,
        action: action4,
        onSubmit,
        fetcherKey,
        routeId,
        relative,
        preventScrollReset
      } = _ref6, props = _objectWithoutPropertiesLoose(_ref6, _excluded3), submit = useSubmitImpl(fetcherKey, routeId), formMethod = method.toLowerCase() === "get" ? "get" : "post", formAction = useFormAction(action4, {
        relative
      });
      return /* @__PURE__ */ React2.createElement("form", _extends3({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : (event2) => {
          if (onSubmit && onSubmit(event2), event2.defaultPrevented)
            return;
          event2.preventDefault();
          let submitter = event2.nativeEvent.submitter, submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
          submit(submitter || event2.currentTarget, {
            method: submitMethod,
            replace,
            relative,
            preventScrollReset
          });
        }
      }, props));
    });
    FormImpl.displayName = "FormImpl";
    ScrollRestoration.displayName = "ScrollRestoration";
    (function(DataRouterHook3) {
      DataRouterHook3.UseScrollRestoration = "useScrollRestoration", DataRouterHook3.UseSubmitImpl = "useSubmitImpl", DataRouterHook3.UseFetcher = "useFetcher";
    })(DataRouterHook2 || (DataRouterHook2 = {}));
    (function(DataRouterStateHook3) {
      DataRouterStateHook3.UseFetchers = "useFetchers", DataRouterStateHook3.UseScrollRestoration = "useScrollRestoration";
    })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
    fetcherId = 0;
    SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions", savedScrollPositions = {};
  }
});

// node_modules/react-router-dom/server.js
var require_server = __commonJS({
  "node_modules/react-router-dom/server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var React33 = require_react(), router = (init_router(), __toCommonJS(router_exports)), reactRouterDom = (init_dist2(), __toCommonJS(dist_exports));
    function _interopNamespace(e5) {
      if (e5 && e5.__esModule)
        return e5;
      var n4 = /* @__PURE__ */ Object.create(null);
      return e5 && Object.keys(e5).forEach(function(k2) {
        if (k2 !== "default") {
          var d15 = Object.getOwnPropertyDescriptor(e5, k2);
          Object.defineProperty(n4, k2, d15.get ? d15 : {
            enumerable: !0,
            get: function() {
              return e5[k2];
            }
          });
        }
      }), n4.default = e5, Object.freeze(n4);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React33);
    function StaticRouter({
      basename,
      children,
      location: locationProp = "/"
    }) {
      typeof locationProp == "string" && (locationProp = reactRouterDom.parsePath(locationProp));
      let action4 = router.Action.Pop, location2 = {
        pathname: locationProp.pathname || "/",
        search: locationProp.search || "",
        hash: locationProp.hash || "",
        state: locationProp.state || null,
        key: locationProp.key || "default"
      }, staticNavigator = getStatelessNavigator();
      return /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename,
        children,
        location: location2,
        navigationType: action4,
        navigator: staticNavigator,
        static: !0
      });
    }
    function StaticRouterProvider2({
      context: context2,
      router: router$1,
      hydrate = !0,
      nonce
    }) {
      router$1 && context2 || router.invariant(!1, "You must provide `router` and `context` to <StaticRouterProvider>");
      let dataRouterContext = {
        router: router$1,
        navigator: getStatelessNavigator(),
        static: !0,
        staticContext: context2,
        basename: context2.basename || "/"
      }, hydrateScript = "";
      if (hydrate !== !1) {
        let data = {
          loaderData: context2.loaderData,
          actionData: context2.actionData,
          errors: serializeErrors2(context2.errors)
        };
        hydrateScript = `window.__staticRouterHydrationData = JSON.parse(${JSON.stringify(JSON.stringify(data))});`;
      }
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterContext.Provider, {
        value: dataRouterContext
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterStateContext.Provider, {
        value: dataRouterContext.router.state
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename: dataRouterContext.basename,
        location: dataRouterContext.router.state.location,
        navigationType: dataRouterContext.router.state.historyAction,
        navigator: dataRouterContext.navigator
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Routes, null)))), hydrateScript ? /* @__PURE__ */ React__namespace.createElement("script", {
        suppressHydrationWarning: !0,
        nonce,
        dangerouslySetInnerHTML: {
          __html: hydrateScript
        }
      }) : null);
    }
    function serializeErrors2(errors) {
      if (!errors)
        return null;
      let entries = Object.entries(errors), serialized = {};
      for (let [key, val] of entries)
        router.isRouteErrorResponse(val) ? serialized[key] = {
          ...val,
          __type: "RouteErrorResponse"
        } : val instanceof Error ? serialized[key] = {
          message: val.message,
          __type: "Error"
        } : serialized[key] = val;
      return serialized;
    }
    function getStatelessNavigator() {
      return {
        createHref,
        encodeLocation,
        push(to) {
          throw new Error(`You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)})\` somewhere in your app.`);
        },
        replace(to) {
          throw new Error(`You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)}, { replace: true })\` somewhere in your app.`);
        },
        go(delta2) {
          throw new Error(`You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${delta2})\` somewhere in your app.`);
        },
        back() {
          throw new Error("You cannot use navigator.back() on the server because it is a stateless environment.");
        },
        forward() {
          throw new Error("You cannot use navigator.forward() on the server because it is a stateless environment.");
        }
      };
    }
    function generateManifest(routes2, manifest = /* @__PURE__ */ new Map()) {
      return routes2.forEach((route) => {
        manifest.set(route.id, route), route.children && generateManifest(route.children, manifest);
      }), manifest;
    }
    function createStaticRouter2(routes2, context2) {
      let dataRoutes = router.UNSAFE_convertRoutesToDataRoutes(reactRouterDom.UNSAFE_enhanceManualRouteObjects(routes2)), manifest = generateManifest(dataRoutes), matches = context2.matches.map((match2) => {
        let route = manifest.get(match2.route.id) || match2.route;
        return {
          ...match2,
          route
        };
      }), msg = (method) => `You cannot use router.${method}() on the server because it is a stateless environment`;
      return {
        get basename() {
          return context2.basename;
        },
        get state() {
          return {
            historyAction: router.Action.Pop,
            location: context2.location,
            matches,
            loaderData: context2.loaderData,
            actionData: context2.actionData,
            errors: context2.errors,
            initialized: !0,
            navigation: router.IDLE_NAVIGATION,
            restoreScrollPosition: null,
            preventScrollReset: !1,
            revalidation: "idle",
            fetchers: /* @__PURE__ */ new Map(),
            blockers: /* @__PURE__ */ new Map()
          };
        },
        get routes() {
          return dataRoutes;
        },
        initialize() {
          throw msg("initialize");
        },
        subscribe() {
          throw msg("subscribe");
        },
        enableScrollRestoration() {
          throw msg("enableScrollRestoration");
        },
        navigate() {
          throw msg("navigate");
        },
        fetch() {
          throw msg("fetch");
        },
        revalidate() {
          throw msg("revalidate");
        },
        createHref,
        encodeLocation,
        getFetcher() {
          return router.IDLE_FETCHER;
        },
        deleteFetcher() {
          throw msg("deleteFetcher");
        },
        dispose() {
          throw msg("dispose");
        },
        getBlocker() {
          throw msg("getBlocker");
        },
        deleteBlocker() {
          throw msg("deleteBlocker");
        },
        _internalFetchControllers: /* @__PURE__ */ new Map(),
        _internalActiveDeferreds: /* @__PURE__ */ new Map()
      };
    }
    function createHref(to) {
      return typeof to == "string" ? to : reactRouterDom.createPath(to);
    }
    function encodeLocation(to) {
      let path2 = typeof to == "string" ? reactRouterDom.parsePath(to) : to;
      return {
        pathname: path2.pathname || "",
        search: path2.search || "",
        hash: path2.hash || ""
      };
    }
    exports.StaticRouter = StaticRouter;
    exports.StaticRouterProvider = StaticRouterProvider2;
    exports.createStaticRouter = createStaticRouter2;
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
var require_react_dom_server_legacy_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React33 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React33.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning2("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      function beginWriting(destination) {
      }
      function writeChunk(destination, chunk) {
        writeChunkAndReturn(destination, chunk);
      }
      function writeChunkAndReturn(destination, chunk) {
        return destination.push(chunk);
      }
      function completeWriting(destination) {
      }
      function close(destination) {
        destination.push(null);
      }
      function stringToChunk(content) {
        return content;
      }
      function stringToPrecomputedChunk(content) {
        return content;
      }
      function closeWithError(destination, error2) {
        destination.destroy(error2);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          name,
          null,
          !1,
          !1
        );
      }), [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !0,
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string3) {
          return string3.replace(hyphenPattern, function(_3, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml3(string3) {
        checkHtmlStringCoercion(string3);
        var str = "" + string3, match2 = matchHtmlRegExp.exec(str);
        if (!match2)
          return str;
        var escape, html = "", index, lastIndex = 0;
        for (index = match2.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape = "&quot;";
              break;
            case 38:
              escape = "&amp;";
              break;
            case 39:
              escape = "&#x27;";
              break;
            case 60:
              escape = "&lt;";
              break;
            case 62:
              escape = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text2) {
        return typeof text2 == "boolean" || typeof text2 == "number" ? "" + text2 : escapeHtml3(text2);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      var startInlineScript = "<script>", endInlineScript = "</script>", startScriptSrc = '<script src="', startModuleSrc = '<script type="module" src="', endAsyncScript = '" async=""></script>';
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match2, prefix3, s14, suffix) {
        return "" + prefix3 + (s14 === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : '<script nonce="' + escapeTextForBrowser(nonce) + '">', bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, escapeBootstrapScriptContent(bootstrapScriptContent), endInlineScript), bootstrapScripts !== void 0)
          for (var i9 = 0; i9 < bootstrapScripts.length; i9++)
            bootstrapChunks.push(startScriptSrc, escapeTextForBrowser(bootstrapScripts[i9]), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, escapeTextForBrowser(bootstrapModules[_i]), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: idPrefix + "P:",
          segmentPrefix: idPrefix + "S:",
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return responseState.boundaryPrefix + generatedID.toString(16);
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text2) {
        return escapeTextForBrowser(text2);
      }
      var textSeparator = "<!-- -->";
      function pushTextInstance(target, text2, responseState, textEmbedded) {
        return text2 === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(encodeHTMLTextNode(text2)), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = escapeTextForBrowser(hyphenateStyleName(styleName));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = ' style="', styleAssign = ":", styleSeparator = ";";
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (!!hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = escapeTextForBrowser(styleName), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim())) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = styleValue + "px" : valueChunk = "" + styleValue : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim()))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = " ", attributeAssign = '="', attributeEnd = '"', attributeEmptyString = '=""';
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (!(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = attributeName;
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, name, attributeAssign, escapeTextForBrowser(value), attributeEnd);
          }
        }
      }
      var endOfStartTag = ">", endOfStartTagSelfClosing = "/>";
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push("" + html));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array2 = isArray(value);
            props.multiple && !array2 ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array2 && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React33.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = ' selected=""';
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i9 = 0; i9 < selectedValue.length; i9++) {
              checkAttributeStringCoercion(selectedValue[i9], "value");
              var v5 = "" + selectedValue[i9];
              if (v5 === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(encodeHTMLTextNode("" + value))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(encodeHTMLTextNode(children)), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, propKey, attributeAssign, escapeTextForBrowser(propValue), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = `
`;
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, html) : (checkHtmlStringCoercion(html), target.push("" + html)));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = "<" + tag, validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = "<!DOCTYPE html>";
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = "</", endTag2 = ">";
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, type, endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i9 = 0; i9 < bootstrapChunks.length - 1; i9++)
          writeChunk(destination, bootstrapChunks[i9]);
        return i9 < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i9]) : !0;
      }
      var placeholder1 = '<template id="', placeholder2 = '"></template>';
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = id.toString(16);
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = "<!--$-->", startPendingSuspenseBoundary1 = '<!--$?--><template id="', startPendingSuspenseBoundary2 = '"></template>', startClientRenderedSuspenseBoundary = "<!--$!-->", endSuspenseBoundary = "<!--/$-->", clientRenderedSuspenseBoundaryError1 = "<template", clientRenderedSuspenseBoundaryErrorAttrInterstitial = '"', clientRenderedSuspenseBoundaryError1A = ' data-dgst="', clientRenderedSuspenseBoundaryError1B = ' data-msg="', clientRenderedSuspenseBoundaryError1C = ' data-stck="', clientRenderedSuspenseBoundaryError2 = "></template>";
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, escapeTextForBrowser(errorDigest)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, escapeTextForBrowser(errorMesssage)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, escapeTextForBrowser(errorComponentStack)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = '<div hidden id="', startSegmentHTML2 = '">', endSegmentHTML = "</div>", startSegmentSVG = '<svg aria-hidden="true" style="display:none" id="', startSegmentSVG2 = '">', endSegmentSVG = "</svg>", startSegmentMathML = '<math aria-hidden="true" style="display:none" id="', startSegmentMathML2 = '">', endSegmentMathML = "</math>", startSegmentTable = '<table hidden id="', startSegmentTable2 = '">', endSegmentTable = "</table>", startSegmentTableBody = '<table hidden><tbody id="', startSegmentTableBody2 = '">', endSegmentTableBody = "</tbody></table>", startSegmentTableRow = '<table hidden><tr id="', startSegmentTableRow2 = '">', endSegmentTableRow = "</tr></table>", startSegmentColGroup = '<table hidden><colgroup id="', startSegmentColGroup2 = '">', endSegmentColGroup = "</colgroup></table>";
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = completeSegmentFunction + ';$RS("', completeSegmentScript1Partial = '$RS("', completeSegmentScript2 = '","', completeSegmentScript3 = '")</script>';
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = contentSegmentID.toString(16);
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = completeBoundaryFunction + ';$RC("', completeBoundaryScript1Partial = '$RC("', completeBoundaryScript2 = '","', completeBoundaryScript3 = '")</script>';
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = contentSegmentID.toString(16);
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = clientRenderFunction + ';$RX("', clientRenderScript1Partial = '$RX("', clientRenderScript1A = '"', clientRenderScript2 = ")</script>", clientRenderErrorScriptArgInterstitial = ",";
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorDigest || ""))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorMessage || ""))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorComponentStack))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match2) {
          switch (match2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      function createResponseState$1(generateStaticMarkup, identifierPrefix) {
        var responseState = createResponseState(identifierPrefix, void 0);
        return {
          bootstrapChunks: responseState.bootstrapChunks,
          startInlineScript: responseState.startInlineScript,
          placeholderPrefix: responseState.placeholderPrefix,
          segmentPrefix: responseState.segmentPrefix,
          boundaryPrefix: responseState.boundaryPrefix,
          idPrefix: responseState.idPrefix,
          nextSuspenseID: responseState.nextSuspenseID,
          sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
          sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
          sentClientRenderFunction: responseState.sentClientRenderFunction,
          generateStaticMarkup
        };
      }
      function createRootFormatContext() {
        return {
          insertionMode: HTML_MODE,
          selectedValue: null
        };
      }
      function pushTextInstance$1(target, text2, responseState, textEmbedded) {
        return responseState.generateStaticMarkup ? (target.push(escapeTextForBrowser(text2)), !1) : pushTextInstance(target, text2, responseState, textEmbedded);
      }
      function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
        if (!responseState.generateStaticMarkup)
          return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
      }
      function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeStartCompletedSuspenseBoundary(destination);
      }
      function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
        return responseState.generateStaticMarkup ? !0 : writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
      }
      function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndCompletedSuspenseBoundary(destination);
      }
      function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndClientRenderedSuspenseBoundary(destination);
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x5) {
              var match2 = x5.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s14 = sampleLines.length - 1, c9 = controlLines.length - 1; s14 >= 1 && c9 >= 0 && sampleLines[s14] !== controlLines[c9]; )
              c9--;
            for (; s14 >= 1 && c9 >= 0; s14--, c9--)
              if (sampleLines[s14] !== controlLines[c9]) {
                if (s14 !== 1 || c9 !== 1)
                  do
                    if (s14--, c9--, c9 < 0 || sampleLines[s14] !== controlLines[c9]) {
                      var _frame = `
` + sampleLines[s14].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s14 >= 1 && c9 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component4) {
        var prototype = Component4.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context2 = {};
          for (var key in contextTypes)
            context2[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context2, "context", name);
          }
          return context2;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue2 = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue2 = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context2, nextValue) {
        var prevValue;
        prevValue = context2._currentValue2, context2._currentValue2 = nextValue, context2._currentRenderer2 !== void 0 && context2._currentRenderer2 !== null && context2._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer2 = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context: context2,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context2) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context2 && error("The parent context is not the expected context. This is probably a bug in React.");
        {
          var _value = prevSnapshot.parentValue;
          _value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue2 = _value, context2._currentRenderer2 !== void 0 && context2._currentRenderer2 !== null && context2._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer2 = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context2) {
        var value = context2._currentValue2;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context2 = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context2 = readContext(contextType) : context2 = maskedLegacyContext;
        var instance = new ctor(props, context2);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i9 = oldReplace ? 1 : 0; i9 < oldQueue.length; i9++) {
              var partial = oldQueue[i9], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context2) {
        var overflow = context2.overflow, idWithLeadingBit = context2.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length2 = getBitLength(totalChildren) + baseLength;
        if (length2 > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length2 | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x5) {
        var asUint = x5 >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is2(x5, y4) {
        return x5 === y4 && (x5 !== 0 || 1 / x5 === 1 / y4) || x5 !== x5 && y4 !== y4;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is2, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i9 = 0; i9 < prevDeps.length && i9 < nextDeps.length; i9++)
          if (!objectIs(nextDeps[i9], prevDeps[i9]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component4, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component4(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context2) {
        return isInHookUserCodeInDev && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context2);
      }
      function useContext7(context2) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context2);
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function useState16(initialState) {
        return currentHookNameInDev = "useState", useReducer2(
          basicStateReducer,
          initialState
        );
      }
      function useReducer2(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action4 = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action4), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo13(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef12(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action4) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action: action4,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback5(callback, deps) {
        return useMemo13(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition2() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId2() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop4() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext7,
        useMemo: useMemo13,
        useReducer: useReducer2,
        useRef: useRef12,
        useState: useState16,
        useInsertionEffect: noop4,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback5,
        useImperativeHandle: noop4,
        useEffect: noop4,
        useDebugValue: noop4,
        useDeferredValue,
        useTransition: useTransition2,
        useId: useId2,
        useMutableSource,
        useSyncExternalStore: useSyncExternalStore3
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x5) {
          return `
Error generating stack: ` + x5.message + `
` + x5.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler2(error2) {
        return console.error(error2), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError2 === void 0 ? defaultErrorHandler2 : onError2,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context2, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context: context2,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          index,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error2) {
        {
          var errorMessage;
          typeof error2 == "string" ? errorMessage = error2 : error2 && typeof error2.message == "string" ? errorMessage = error2.message : errorMessage = String(error2);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error2) {
        var errorDigest = request.onError(error2);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error2) {
        var onShellError = request.onShellError;
        onShellError(error2);
        var onFatalError = request.onFatalError;
        onFatalError(error2), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error2)) : (request.status = CLOSING, request.fatalError = error2);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error2) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error2), captureBoundaryErrorDetailsDev(newBoundary, error2);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component4) {
        return Component4.prototype && Component4.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component4, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component4(props, secondArg);
        return finishHooks(Component4, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component4, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component4) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component4.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component4, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component4, props) {
        pushClassComponentStackInDEV(task, Component4);
        var maskedContext = getMaskedContext(Component4, task.legacyContext), instance = constructClassInstance(Component4, props, maskedContext);
        mountClassInstance(instance, Component4, props, maskedContext), finishClassComponent(request, task, instance, Component4, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component4, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component4, task.legacyContext), pushFunctionComponentStackInDEV(task, Component4), Component4.prototype && typeof Component4.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component4) || "Unknown";
          didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component4, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component4) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component4, props, legacyContext), finishClassComponent(request, task, value, Component4, props);
        } else if (validateFunctionComponentInDev(Component4), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component4) {
        {
          if (Component4 && Component4.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component4.displayName || Component4.name || "Component"), typeof Component4.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component4.contextType == "object" && Component4.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component4, baseProps) {
        if (Component4 && Component4.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component4.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context2, props) {
        context2._context === void 0 ? context2 !== context2.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context2 = context2._context;
        var render = props.children;
        typeof render != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context2), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context2 = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context2, value), renderNodeDestructive(request, task, children), task.context = popProvider(context2), prevSnapshot !== task.context && error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component4 = init(payload), resolvedProps = resolveDefaultProps(Component4, props);
        renderElement(request, task, Component4, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x5) {
          throw typeof x5 == "object" && x5 !== null && typeof x5.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x5;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x5) {
                throw typeof x5 == "object" && x5 !== null && typeof x5.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x5;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i9 = 0; i9 < totalChildren; i9++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i9);
          try {
            renderNode(request, task, children[i9]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x5) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          segment.lastPushedText,
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x5.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x5) {
          if (resetHooksState(), typeof x5 == "object" && x5 !== null && typeof x5.then == "function") {
            spawnNewSuspendedTask(request, task, x5), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x5;
        }
      }
      function erroredTask(request, boundary, segment, error2) {
        var errorDigest = logRecoverableError(request, error2);
        if (boundary === null ? fatalError(request, error2) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error2), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x5) {
            if (resetHooksState(), typeof x5 == "object" && x5 !== null && typeof x5.then == "function") {
              var ping = task.ping;
              x5.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x5);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i9;
            for (i9 = 0; i9 < pingedTasks.length; i9++) {
              var task = pingedTasks[i9];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i9), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r12 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r12 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r12 = writeChunkAndReturn(destination, chunks[chunkIdx])), r12;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i9 = 0; i9 < completedSegments.length; i9++) {
          var segment = completedSegments[i9];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i9 = 0; i9 < completedSegments.length; i9++) {
          var segment = completedSegments[i9];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i9++, completedSegments.splice(0, i9), !1;
        }
        return completedSegments.splice(0, i9), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i9;
          for (i9 = 0; i9 < clientRenderedBoundaries.length; i9++) {
            var boundary = clientRenderedBoundaries[i9];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i9++, clientRenderedBoundaries.splice(0, i9);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i9);
          var completedBoundaries = request.completedBoundaries;
          for (i9 = 0; i9 < completedBoundaries.length; i9++) {
            var _boundary = completedBoundaries[i9];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i9++, completedBoundaries.splice(0, i9);
              return;
            }
          }
          completedBoundaries.splice(0, i9);
          var partialBoundaries = request.partialBoundaries;
          for (i9 = 0; i9 < partialBoundaries.length; i9++) {
            var _boundary2 = partialBoundaries[i9];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i9++, partialBoundaries.splice(0, i9);
              return;
            }
          }
          partialBoundaries.splice(0, i9);
          var largeBoundaries = request.completedBoundaries;
          for (i9 = 0; i9 < largeBoundaries.length; i9++) {
            var _boundary3 = largeBoundaries[i9];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i9++, largeBoundaries.splice(0, i9);
              return;
            }
          }
          largeBoundaries.splice(0, i9);
        } finally {
          request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error2) {
          logRecoverableError(request, error2), fatalError(request, error2);
        }
      }
      function onError() {
      }
      function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
        var didFatal = !1, fatalError2 = null, result = "", destination = {
          push: function(chunk) {
            return chunk !== null && (result += chunk), !0;
          },
          destroy: function(error2) {
            didFatal = !0, fatalError2 = error2;
          }
        }, readyToStream = !1;
        function onShellReady() {
          readyToStream = !0;
        }
        var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), 1 / 0, onError, void 0, onShellReady, void 0, void 0);
        if (startWork(request), abort(request, abortReason), startFlowing(request, destination), didFatal)
          throw fatalError2;
        if (!readyToStream)
          throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
        return result;
      }
      function renderToString(children, options) {
        return renderToStringImpl(children, options, !1, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToStaticMarkup(children, options) {
        return renderToStringImpl(children, options, !0, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToNodeStream() {
        throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
      }
      function renderToStaticNodeStream() {
        throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
      }
      exports.renderToNodeStream = renderToNodeStream, exports.renderToStaticMarkup = renderToStaticMarkup, exports.renderToStaticNodeStream = renderToStaticNodeStream, exports.renderToString = renderToString, exports.version = ReactVersion;
    })();
  }
});

// node_modules/react-dom/cjs/react-dom-server.browser.development.js
var require_react_dom_server_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React33 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React33.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning2("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      var VIEW_SIZE = 512, currentView = null, writtenBytes = 0;
      function beginWriting(destination) {
        currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0;
      }
      function writeChunk(destination, chunk) {
        if (chunk.length !== 0) {
          if (chunk.length > VIEW_SIZE) {
            writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk, allowableBytes = currentView.length - writtenBytes;
          allowableBytes < bytesToWrite.length && (allowableBytes === 0 ? destination.enqueue(currentView) : (currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes), destination.enqueue(currentView), bytesToWrite = bytesToWrite.subarray(allowableBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), currentView.set(bytesToWrite, writtenBytes), writtenBytes += bytesToWrite.length;
        }
      }
      function writeChunkAndReturn(destination, chunk) {
        return writeChunk(destination, chunk), !0;
      }
      function completeWriting(destination) {
        currentView && writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = null, writtenBytes = 0);
      }
      function close(destination) {
        destination.close();
      }
      var textEncoder = new TextEncoder();
      function stringToChunk(content) {
        return textEncoder.encode(content);
      }
      function stringToPrecomputedChunk(content) {
        return textEncoder.encode(content);
      }
      function closeWithError(destination, error2) {
        typeof destination.error == "function" ? destination.error(error2) : destination.close();
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          name,
          null,
          !1,
          !1
        );
      }), [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !0,
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string3) {
          return string3.replace(hyphenPattern, function(_3, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml3(string3) {
        checkHtmlStringCoercion(string3);
        var str = "" + string3, match2 = matchHtmlRegExp.exec(str);
        if (!match2)
          return str;
        var escape, html = "", index, lastIndex = 0;
        for (index = match2.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape = "&quot;";
              break;
            case 38:
              escape = "&amp;";
              break;
            case 39:
              escape = "&#x27;";
              break;
            case 60:
              escape = "&lt;";
              break;
            case 62:
              escape = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text2) {
        return typeof text2 == "boolean" || typeof text2 == "number" ? "" + text2 : escapeHtml3(text2);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      var startInlineScript = stringToPrecomputedChunk("<script>"), endInlineScript = stringToPrecomputedChunk("</script>"), startScriptSrc = stringToPrecomputedChunk('<script src="'), startModuleSrc = stringToPrecomputedChunk('<script type="module" src="'), endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match2, prefix3, s14, suffix) {
        return "" + prefix3 + (s14 === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">'), bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript), bootstrapScripts !== void 0)
          for (var i9 = 0; i9 < bootstrapScripts.length; i9++)
            bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i9])), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
          segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function createRootFormatContext(namespaceURI) {
        var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
        return createFormatContext(insertionMode, null);
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text2) {
        return escapeTextForBrowser(text2);
      }
      var textSeparator = stringToPrecomputedChunk("<!-- -->");
      function pushTextInstance(target, text2, responseState, textEmbedded) {
        return text2 === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(stringToChunk(encodeHTMLTextNode(text2))), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = stringToPrecomputedChunk(' style="'), styleAssign = stringToPrecomputedChunk(":"), styleSeparator = stringToPrecomputedChunk(";");
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (!!hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = stringToChunk(escapeTextForBrowser(styleName)), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()))) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = stringToChunk(styleValue + "px") : valueChunk = stringToChunk("" + styleValue) : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim())))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = stringToPrecomputedChunk(" "), attributeAssign = stringToPrecomputedChunk('="'), attributeEnd = stringToPrecomputedChunk('"'), attributeEmptyString = stringToPrecomputedChunk('=""');
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (!(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
      }
      var endOfStartTag = stringToPrecomputedChunk(">"), endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html)));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array2 = isArray(value);
            props.multiple && !array2 ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array2 && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React33.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i9 = 0; i9 < selectedValue.length; i9++) {
              checkAttributeStringCoercion(selectedValue[i9], "value");
              var v5 = "" + selectedValue[i9];
              if (v5 === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(stringToChunk(encodeHTMLTextNode("" + value)))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(stringToChunk(encodeHTMLTextNode(children))), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = stringToPrecomputedChunk(`
`);
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, stringToChunk(html)) : (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html))));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = stringToPrecomputedChunk("<" + tag), validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = stringToPrecomputedChunk("</"), endTag2 = stringToPrecomputedChunk(">");
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, stringToChunk(type), endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i9 = 0; i9 < bootstrapChunks.length - 1; i9++)
          writeChunk(destination, bootstrapChunks[i9]);
        return i9 < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i9]) : !0;
      }
      var placeholder1 = stringToPrecomputedChunk('<template id="'), placeholder2 = stringToPrecomputedChunk('"></template>');
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = stringToChunk(id.toString(16));
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->"), startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="'), startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>'), startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->"), endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->"), clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template"), clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"'), clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="'), clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="'), clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="'), clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="'), startSegmentHTML2 = stringToPrecomputedChunk('">'), endSegmentHTML = stringToPrecomputedChunk("</div>"), startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="'), startSegmentSVG2 = stringToPrecomputedChunk('">'), endSegmentSVG = stringToPrecomputedChunk("</svg>"), startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="'), startSegmentMathML2 = stringToPrecomputedChunk('">'), endSegmentMathML = stringToPrecomputedChunk("</math>"), startSegmentTable = stringToPrecomputedChunk('<table hidden id="'), startSegmentTable2 = stringToPrecomputedChunk('">'), endSegmentTable = stringToPrecomputedChunk("</table>"), startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="'), startSegmentTableBody2 = stringToPrecomputedChunk('">'), endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>"), startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="'), startSegmentTableRow2 = stringToPrecomputedChunk('">'), endSegmentTableRow = stringToPrecomputedChunk("</tr></table>"), startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="'), startSegmentColGroup2 = stringToPrecomputedChunk('">'), endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("'), completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("'), completeSegmentScript2 = stringToPrecomputedChunk('","'), completeSegmentScript3 = stringToPrecomputedChunk('")</script>');
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("'), completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("'), completeBoundaryScript2 = stringToPrecomputedChunk('","'), completeBoundaryScript3 = stringToPrecomputedChunk('")</script>');
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("'), clientRenderScript1Partial = stringToPrecomputedChunk('$RX("'), clientRenderScript1A = stringToPrecomputedChunk('"'), clientRenderScript2 = stringToPrecomputedChunk(")</script>"), clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match2) {
          switch (match2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x5) {
              var match2 = x5.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s14 = sampleLines.length - 1, c9 = controlLines.length - 1; s14 >= 1 && c9 >= 0 && sampleLines[s14] !== controlLines[c9]; )
              c9--;
            for (; s14 >= 1 && c9 >= 0; s14--, c9--)
              if (sampleLines[s14] !== controlLines[c9]) {
                if (s14 !== 1 || c9 !== 1)
                  do
                    if (s14--, c9--, c9 < 0 || sampleLines[s14] !== controlLines[c9]) {
                      var _frame = `
` + sampleLines[s14].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s14 >= 1 && c9 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component4) {
        var prototype = Component4.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context2 = {};
          for (var key in contextTypes)
            context2[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context2, "context", name);
          }
          return context2;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context2, nextValue) {
        var prevValue;
        prevValue = context2._currentValue, context2._currentValue = nextValue, context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context: context2,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context2) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context2 && error("The parent context is not the expected context. This is probably a bug in React.");
        {
          var value = prevSnapshot.parentValue;
          value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue = value, context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context2) {
        var value = context2._currentValue;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context2 = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context2 = readContext(contextType) : context2 = maskedLegacyContext;
        var instance = new ctor(props, context2);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i9 = oldReplace ? 1 : 0; i9 < oldQueue.length; i9++) {
              var partial = oldQueue[i9], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context2) {
        var overflow = context2.overflow, idWithLeadingBit = context2.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length2 = getBitLength(totalChildren) + baseLength;
        if (length2 > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length2 | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x5) {
        var asUint = x5 >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is2(x5, y4) {
        return x5 === y4 && (x5 !== 0 || 1 / x5 === 1 / y4) || x5 !== x5 && y4 !== y4;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is2, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i9 = 0; i9 < prevDeps.length && i9 < nextDeps.length; i9++)
          if (!objectIs(nextDeps[i9], prevDeps[i9]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component4, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component4(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context2) {
        return isInHookUserCodeInDev && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context2);
      }
      function useContext7(context2) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context2);
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function useState16(initialState) {
        return currentHookNameInDev = "useState", useReducer2(
          basicStateReducer,
          initialState
        );
      }
      function useReducer2(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action4 = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action4), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo13(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef12(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action4) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action: action4,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback5(callback, deps) {
        return useMemo13(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition2() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId2() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop4() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext7,
        useMemo: useMemo13,
        useReducer: useReducer2,
        useRef: useRef12,
        useState: useState16,
        useInsertionEffect: noop4,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback5,
        useImperativeHandle: noop4,
        useEffect: noop4,
        useDebugValue: noop4,
        useDeferredValue,
        useTransition: useTransition2,
        useId: useId2,
        useMutableSource,
        useSyncExternalStore: useSyncExternalStore3
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x5) {
          return `
Error generating stack: ` + x5.message + `
` + x5.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler2(error2) {
        return console.error(error2), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError === void 0 ? defaultErrorHandler2 : onError,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context2, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context: context2,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          index,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error2) {
        {
          var errorMessage;
          typeof error2 == "string" ? errorMessage = error2 : error2 && typeof error2.message == "string" ? errorMessage = error2.message : errorMessage = String(error2);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error2) {
        var errorDigest = request.onError(error2);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error2) {
        var onShellError = request.onShellError;
        onShellError(error2);
        var onFatalError = request.onFatalError;
        onFatalError(error2), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error2)) : (request.status = CLOSING, request.fatalError = error2);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error2) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error2), captureBoundaryErrorDetailsDev(newBoundary, error2);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component4) {
        return Component4.prototype && Component4.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component4, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component4(props, secondArg);
        return finishHooks(Component4, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component4, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component4) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component4.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component4, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component4, props) {
        pushClassComponentStackInDEV(task, Component4);
        var maskedContext = getMaskedContext(Component4, task.legacyContext), instance = constructClassInstance(Component4, props, maskedContext);
        mountClassInstance(instance, Component4, props, maskedContext), finishClassComponent(request, task, instance, Component4, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component4, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component4, task.legacyContext), pushFunctionComponentStackInDEV(task, Component4), Component4.prototype && typeof Component4.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component4) || "Unknown";
          didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component4, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component4) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component4, props, legacyContext), finishClassComponent(request, task, value, Component4, props);
        } else if (validateFunctionComponentInDev(Component4), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component4) {
        {
          if (Component4 && Component4.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component4.displayName || Component4.name || "Component"), typeof Component4.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component4.contextType == "object" && Component4.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component4, baseProps) {
        if (Component4 && Component4.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component4.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context2, props) {
        context2._context === void 0 ? context2 !== context2.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context2 = context2._context;
        var render = props.children;
        typeof render != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context2), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context2 = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context2, value), renderNodeDestructive(request, task, children), task.context = popProvider(context2), prevSnapshot !== task.context && error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component4 = init(payload), resolvedProps = resolveDefaultProps(Component4, props);
        renderElement(request, task, Component4, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x5) {
          throw typeof x5 == "object" && x5 !== null && typeof x5.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x5;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x5) {
                throw typeof x5 == "object" && x5 !== null && typeof x5.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x5;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i9 = 0; i9 < totalChildren; i9++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i9);
          try {
            renderNode(request, task, children[i9]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x5) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          segment.lastPushedText,
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x5.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x5) {
          if (resetHooksState(), typeof x5 == "object" && x5 !== null && typeof x5.then == "function") {
            spawnNewSuspendedTask(request, task, x5), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x5;
        }
      }
      function erroredTask(request, boundary, segment, error2) {
        var errorDigest = logRecoverableError(request, error2);
        if (boundary === null ? fatalError(request, error2) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error2), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x5) {
            if (resetHooksState(), typeof x5 == "object" && x5 !== null && typeof x5.then == "function") {
              var ping = task.ping;
              x5.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x5);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i9;
            for (i9 = 0; i9 < pingedTasks.length; i9++) {
              var task = pingedTasks[i9];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i9), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r12 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r12 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r12 = writeChunkAndReturn(destination, chunks[chunkIdx])), r12;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i9 = 0; i9 < completedSegments.length; i9++) {
          var segment = completedSegments[i9];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i9 = 0; i9 < completedSegments.length; i9++) {
          var segment = completedSegments[i9];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i9++, completedSegments.splice(0, i9), !1;
        }
        return completedSegments.splice(0, i9), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        beginWriting();
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i9;
          for (i9 = 0; i9 < clientRenderedBoundaries.length; i9++) {
            var boundary = clientRenderedBoundaries[i9];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i9++, clientRenderedBoundaries.splice(0, i9);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i9);
          var completedBoundaries = request.completedBoundaries;
          for (i9 = 0; i9 < completedBoundaries.length; i9++) {
            var _boundary = completedBoundaries[i9];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i9++, completedBoundaries.splice(0, i9);
              return;
            }
          }
          completedBoundaries.splice(0, i9), completeWriting(destination), beginWriting(destination);
          var partialBoundaries = request.partialBoundaries;
          for (i9 = 0; i9 < partialBoundaries.length; i9++) {
            var _boundary2 = partialBoundaries[i9];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i9++, partialBoundaries.splice(0, i9);
              return;
            }
          }
          partialBoundaries.splice(0, i9);
          var largeBoundaries = request.completedBoundaries;
          for (i9 = 0; i9 < largeBoundaries.length; i9++) {
            var _boundary3 = largeBoundaries[i9];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i9++, largeBoundaries.splice(0, i9);
              return;
            }
          }
          largeBoundaries.splice(0, i9);
        } finally {
          completeWriting(destination), request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error2) {
          logRecoverableError(request, error2), fatalError(request, error2);
        }
      }
      function renderToReadableStream2(children, options) {
        return new Promise(function(resolve, reject) {
          var onFatalError, onAllReady, allReady = new Promise(function(res, rej) {
            onAllReady = res, onFatalError = rej;
          });
          function onShellReady() {
            var stream = new ReadableStream(
              {
                type: "bytes",
                pull: function(controller) {
                  startFlowing(request, controller);
                },
                cancel: function(reason) {
                  abort(request);
                }
              },
              {
                highWaterMark: 0
              }
            );
            stream.allReady = allReady, resolve(stream);
          }
          function onShellError(error2) {
            allReady.catch(function() {
            }), reject(error2);
          }
          var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
          if (options && options.signal) {
            var signal = options.signal, listener = function() {
              abort(request, signal.reason), signal.removeEventListener("abort", listener);
            };
            signal.addEventListener("abort", listener);
          }
          startWork(request);
        });
      }
      exports.renderToReadableStream = renderToReadableStream2, exports.version = ReactVersion;
    })();
  }
});

// node_modules/react-dom/server.browser.js
var require_server_browser = __commonJS({
  "node_modules/react-dom/server.browser.js"(exports) {
    "use strict";
    var l12, s14;
    l12 = require_react_dom_server_legacy_browser_development(), s14 = require_react_dom_server_browser_development();
    exports.version = l12.version;
    exports.renderToString = l12.renderToString;
    exports.renderToStaticMarkup = l12.renderToStaticMarkup;
    exports.renderToNodeStream = l12.renderToNodeStream;
    exports.renderToStaticNodeStream = l12.renderToStaticNodeStream;
    exports.renderToReadableStream = s14.renderToReadableStream;
  }
});

// node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-dev-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React33 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React33.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x5) {
              var match2 = x5.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s14 = sampleLines.length - 1, c9 = controlLines.length - 1; s14 >= 1 && c9 >= 0 && sampleLines[s14] !== controlLines[c9]; )
              c9--;
            for (; s14 >= 1 && c9 >= 0; s14--, c9--)
              if (sampleLines[s14] !== controlLines[c9]) {
                if (s14 !== 1 || c9 !== 1)
                  do
                    if (s14--, c9--, c9 < 0 || sampleLines[s14] !== controlLines[c9]) {
                      var _frame = `
` + sampleLines[s14].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s14 >= 1 && c9 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component4) {
        var prototype = Component4.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV75(type, config2, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2, self2));
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i9 = 0; i9 < node.length; i9++) {
              var child = node[i9];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i9 = 0; i9 < keys.length; i9++) {
            var key = keys[i9];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV75(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i9 = 0; i9 < children.length; i9++)
                    validateChildKeys(children[i9], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsxDEV = jsxDEV$1;
    })();
  }
});

// node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS({
  "node_modules/react/jsx-dev-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_dev_runtime_development();
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse3;
    exports.serialize = serialize2;
    var decode = decodeURIComponent, encode = encodeURIComponent, fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options) {
      if (typeof str != "string")
        throw new TypeError("argument str must be a string");
      for (var obj = {}, opt = options || {}, pairs = str.split(";"), dec = opt.decode || decode, i9 = 0; i9 < pairs.length; i9++) {
        var pair = pairs[i9], index = pair.indexOf("=");
        if (!(index < 0)) {
          var key = pair.substring(0, index).trim();
          if (obj[key] == null) {
            var val = pair.substring(index + 1, pair.length).trim();
            val[0] === '"' && (val = val.slice(1, -1)), obj[key] = tryDecode(val, dec);
          }
        }
      }
      return obj;
    }
    function serialize2(name, val, options) {
      var opt = options || {}, enc = opt.encode || encode;
      if (typeof enc != "function")
        throw new TypeError("option encode is invalid");
      if (!fieldContentRegExp.test(name))
        throw new TypeError("argument name is invalid");
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value))
        throw new TypeError("argument val is invalid");
      var str = name + "=" + value;
      if (opt.maxAge != null) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge))
          throw new TypeError("option maxAge is invalid");
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain))
          throw new TypeError("option domain is invalid");
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path))
          throw new TypeError("option path is invalid");
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString != "function")
          throw new TypeError("option expires is invalid");
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly && (str += "; HttpOnly"), opt.secure && (str += "; Secure"), opt.sameSite) {
        var sameSite = typeof opt.sameSite == "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case !0:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch {
        return str;
      }
    }
  }
});

// node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: !0,
      map: !1,
      silent: !1
    };
    function isNonEmptyString(str) {
      return typeof str == "string" && !!str.trim();
    }
    function parseString2(setCookieValue, options) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString), nameValuePairStr = parts.shift(), parsed = parseNameValuePair(nameValuePairStr), name = parsed.name, value = parsed.value;
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      try {
        value = options.decodeValues ? decodeURIComponent(value) : value;
      } catch (e5) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e5
        );
      }
      var cookie = {
        name,
        value
      };
      return parts.forEach(function(part) {
        var sides = part.split("="), key = sides.shift().trimLeft().toLowerCase(), value2 = sides.join("=");
        key === "expires" ? cookie.expires = new Date(value2) : key === "max-age" ? cookie.maxAge = parseInt(value2, 10) : key === "secure" ? cookie.secure = !0 : key === "httponly" ? cookie.httpOnly = !0 : key === "samesite" ? cookie.sameSite = value2 : cookie[key] = value2;
      }), cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "", value = "", nameValueArr = nameValuePairStr.split("=");
      return nameValueArr.length > 1 ? (name = nameValueArr.shift(), value = nameValueArr.join("=")) : value = nameValuePairStr, { name, value };
    }
    function parse3(input, options) {
      if (options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, !input)
        return options.map ? {} : [];
      if (input.headers && input.headers["set-cookie"])
        input = input.headers["set-cookie"];
      else if (input.headers) {
        var sch = input.headers[Object.keys(input.headers).find(function(key) {
          return key.toLowerCase() === "set-cookie";
        })];
        !sch && input.headers.cookie && !options.silent && console.warn(
          "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
        ), input = sch;
      }
      if (Array.isArray(input) || (input = [input]), options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, options.map) {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString2(str, options);
          return cookies2[cookie.name] = cookie, cookies2;
        }, cookies);
      } else
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString2(str, options);
        });
    }
    function splitCookiesString2(cookiesString) {
      if (Array.isArray(cookiesString))
        return cookiesString;
      if (typeof cookiesString != "string")
        return [];
      var cookiesStrings = [], pos = 0, start, ch, lastComma, nextStart, cookiesSeparatorFound;
      function skipWhitespace() {
        for (; pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos)); )
          pos += 1;
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        return ch = cookiesString.charAt(pos), ch !== "=" && ch !== ";" && ch !== ",";
      }
      for (; pos < cookiesString.length; ) {
        for (start = pos, cookiesSeparatorFound = !1; skipWhitespace(); )
          if (ch = cookiesString.charAt(pos), ch === ",") {
            for (lastComma = pos, pos += 1, skipWhitespace(), nextStart = pos; pos < cookiesString.length && notSpecialChar(); )
              pos += 1;
            pos < cookiesString.length && cookiesString.charAt(pos) === "=" ? (cookiesSeparatorFound = !0, pos = nextStart, cookiesStrings.push(cookiesString.substring(start, lastComma)), start = pos) : pos = lastComma + 1;
          } else
            pos += 1;
        (!cookiesSeparatorFound || pos >= cookiesString.length) && cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
      }
      return cookiesStrings;
    }
    module.exports = parse3;
    module.exports.parse = parse3;
    module.exports.parseString = parseString2;
    module.exports.splitCookiesString = splitCookiesString2;
  }
});

// node_modules/@shopify/hydrogen/dist/production/chunk-JXANKGQN.js
function g2({ headTags: e5 }) {
  return h(e5), null;
}
function h(e5) {
  let o8 = "text-transform: uppercase;", n4 = "text-transform: uppercase; font-weight: bold; text-transform: uppercase;font-weight: bold";
  console.log(" "), console.log("%cSEO Meta Tags", `${n4}`), console.log(" "), e5.forEach((c9) => {
    if (c9.tag === "script") {
      if (console.log("%c\u2022 JSON LD ", o8), c9.children)
        try {
          console.table(JSON.parse(c9.children), ["name", "content"]);
        } catch {
          console.log(c9.children);
        }
    } else {
      if (console.log(`%c\u2022 ${c9.tag} `, o8), c9.children)
        if (typeof c9.children == "string")
          console.log(`\u21B3 ${c9.children}`);
        else
          try {
            Object.entries(JSON.parse(c9.children)).map(([l12, s14]) => console.log(`\u21B3 ${s14}`));
          } catch {
            console.log(c9.children);
          }
      Object.entries(c9.props).map(([l12, s14]) => console.log(`\u21B3 ${l12} \u2192 ${s14}`));
    }
    console.log(" ");
  });
}
var r, t, i2, a, p2, d2, m, f2, u2, init_chunk_JXANKGQN = __esm({
  "node_modules/@shopify/hydrogen/dist/production/chunk-JXANKGQN.js"() {
    r = Object.create, t = Object.defineProperty, i2 = Object.getOwnPropertyDescriptor, a = Object.getOwnPropertyNames, p2 = Object.getPrototypeOf, d2 = Object.prototype.hasOwnProperty, m = (e5, o8) => () => (o8 || e5((o8 = { exports: {} }).exports, o8), o8.exports), f2 = (e5, o8, n4, c9) => {
      if (o8 && typeof o8 == "object" || typeof o8 == "function")
        for (let l12 of a(o8))
          !d2.call(e5, l12) && l12 !== n4 && t(e5, l12, { get: () => o8[l12], enumerable: !(c9 = i2(o8, l12)) || c9.enumerable });
      return e5;
    }, u2 = (e5, o8, n4) => (n4 = e5 != null ? r(p2(e5)) : {}, f2(o8 || !e5 || !e5.__esModule ? t(n4, "default", { value: e5, enumerable: !0 }) : n4, e5));
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React33 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React33.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x5) {
              var match2 = x5.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s14 = sampleLines.length - 1, c9 = controlLines.length - 1; s14 >= 1 && c9 >= 0 && sampleLines[s14] !== controlLines[c9]; )
              c9--;
            for (; s14 >= 1 && c9 >= 0; s14--, c9--)
              if (sampleLines[s14] !== controlLines[c9]) {
                if (s14 !== 1 || c9 !== 1)
                  do
                    if (s14--, c9--, c9 < 0 || sampleLines[s14] !== controlLines[c9]) {
                      var _frame = `
` + sampleLines[s14].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s14 >= 1 && c9 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component4) {
        var prototype = Component4.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config2) {
        if (hasOwnProperty.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        if (hasOwnProperty.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        if (typeof config2.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV75(type, config2, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config2) && (checkKeyStringCoercion(config2.key), key = "" + config2.key), hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2, self2));
          for (propName in config2)
            hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function isValidElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i9 = 0; i9 < node.length; i9++) {
              var child = node[i9];
              isValidElement2(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement2(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement2(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i9 = 0; i9 < keys.length; i9++) {
            var key = keys[i9];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV75(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i9 = 0; i9 < children.length; i9++)
                    validateChildKeys(children[i9], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, !0);
      }
      function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, !1);
      }
      var jsx5 = jsxWithValidationDynamic, jsxs2 = jsxWithValidationStatic;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsx = jsx5, exports.jsxs = jsxs2;
    })();
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_runtime_development();
  }
});

// node_modules/@shopify/hydrogen/dist/production/log-seo-tags-GYSQ3BE2.js
var log_seo_tags_GYSQ3BE2_exports = {};
__export(log_seo_tags_GYSQ3BE2_exports, {
  default: () => g2,
  logSeoTags: () => h
});
var init_log_seo_tags_GYSQ3BE2 = __esm({
  "node_modules/@shopify/hydrogen/dist/production/log-seo-tags-GYSQ3BE2.js"() {
    init_chunk_JXANKGQN();
  }
});

// node_modules/textr/index.js
var require_textr = __commonJS({
  "node_modules/textr/index.js"(exports, module) {
    "use strict";
    module.exports = function(defaults2) {
      var mws = [];
      defaults2 = defaults2 || {};
      function api() {
        return exec.apply(null, arguments);
      }
      return api.exec = exec, api.use = use, api.mws = mws, api;
      function exec(text2, options) {
        options = clone(defaults2, options);
        for (var l12 = mws.length, i9 = 0; i9 < l12; i9++)
          text2 = mws[i9].apply(text2, [text2, options]) || text2;
        return text2;
      }
      function use() {
        return [].push.apply(mws, arguments), api;
      }
    };
    function clone() {
      for (var res = {}, length2 = arguments.length, i9 = 0; i9 < length2; i9++) {
        var obj = arguments[i9];
        for (var k2 in obj)
          res[k2] = obj[k2];
      }
      return res;
    }
  }
});

// node_modules/typographic-apostrophes/index.es5.js
var require_index_es5 = __commonJS({
  "node_modules/typographic-apostrophes/index.es5.js"(exports, module) {
    "use strict";
    module.exports = function(input) {
      return input.replace(/ 'n' /gim, " \u2019n\u2019 ").replace(/'n'/gim, "\u2019n\u2019").replace(/(\S)'(\S)/gim, "$1\u2019$2").replace(/'(\d0s)/gim, "\u2019$1");
    };
  }
});

// node_modules/typographic-quotes-l10n-db/index.js
var require_typographic_quotes_l10n_db = __commonJS({
  "node_modules/typographic-quotes-l10n-db/index.js"(exports, module) {
    module.exports = {
      af: "\u201C\u201D\u2018\u2019",
      sq: "\u201E\u201C\u2018\u2019",
      az: "\xAB\xBB\u2039\u203A",
      eu: "\xAB\xBB\u2039\u203A",
      be: "\xAB\xBB\u201C\u201D",
      bg: "\u201E\u201C\u2019\u2019",
      ca: "\xAB\xBB\u201C\u201D",
      "zh-Hans": "\u201C\u201D\u2018\u2019",
      hr: "\u201E\u201D\u2018\u2019",
      cs: "\u201E\u201C\u201A\u2018",
      da: "\xBB\xAB\u203A\u2039",
      nl: "\u2018\u2019\u201C\u201D",
      "en-uk": "\u2018\u2019\u201C\u201D",
      "en-us": "\u201C\u201D\u2018\u2019",
      eo: "\u201C\u201D\u2018\u2019",
      et: "\u201E\u201C\xAB\xBB",
      fil: "\u201C\u201D\u2018\u2019",
      fi: "\u201D\u201D\u2019\u2019",
      fr: "\xAB\xBB\u201C\u201D",
      "fr-sw": "\xAB\xBB\u2039\u203A",
      ka: "\u201E\u201C\u201C\u201D",
      de: "\u201E\u201C\u201A\u2018",
      "de-sw": "\xAB\xBB\u2039\u203A",
      el: "\xAB\xBB\u201C\u201D",
      he: `""''`,
      hu: "\u201E\u201D\xBB\xAB",
      is: "\u201E\u201C\u201A\u2018",
      id: "\u201C\u201D\u2018\u2019",
      ga: "\u201C\u201D\u2018\u2019",
      it: "\xAB\xBB\u201C\u201D",
      "it-sw": "\xAB\xBB\u2039\u203A",
      ko: "\u201C\u201D\u2018\u2019",
      lv: "\xAB\xBB\u201E\u201C",
      mk: "\u201E\u201C\u2019\u2018",
      no: "\xAB\xBB\u2019\u2019",
      pl: "\u201E\u201D\xAB\xBB",
      "pt-br": "\u201C\u201D\u2018\u2019",
      "pt-pl": "\xAB\xBB\u201C\u201D",
      ro: "\u201E\u201D\xAB\xBB",
      ru: "\xAB\xBB\u201E\u201C",
      sr: "\u201E\u201D\u2019\u2019",
      sk: "\u201E\u201C\u201A\u2018",
      sl: "\u201E\u201C\u201A\u2018",
      es: "\xAB\xBB\u201C\u201D",
      sv: "\u201D\u201D\u2019\u2019",
      th: "\u201C\u201D\u2018\u2019",
      tr: "\u201C\u201D\u2018\u2019",
      uk: "\xAB\xBB\u201E\u201C",
      cy: "\u2018\u2019\u201C\u201D"
    };
  }
});

// node_modules/typographic-quotes/index.es5.js
var require_index_es52 = __commonJS({
  "node_modules/typographic-quotes/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = typographicQuotes;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typographicQuotesL10nDb = require_typographic_quotes_l10n_db(), _typographicQuotesL10nDb2 = _interopRequireDefault(_typographicQuotesL10nDb);
    function typographicQuotes() {
      var input = arguments.length <= 0 || arguments[0] === void 0 ? "" : arguments[0], _ref = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1], _ref$locale = _ref.locale, locale = _ref$locale === void 0 ? "en-us" : _ref$locale, separator = "", localeQuotes = _typographicQuotesL10nDb2.default[locale], pattern = /(^|\s)(?:"(.*?)"|'(.*?)')(\s|$|\.|,|\?|!)/gim, handleQuotes = function(quotes, cb) {
        return function(match2) {
          var before = arguments.length <= 1 || arguments[1] === void 0 ? "" : arguments[1], part1 = arguments.length <= 2 || arguments[2] === void 0 ? "" : arguments[2], part2 = arguments.length <= 3 || arguments[3] === void 0 ? "" : arguments[3], after = arguments.length <= 4 || arguments[4] === void 0 ? "" : arguments[4], text2 = part1 + part2;
          return cb && (text2 = text2.replace(pattern, cb)), locale === "fr" && (separator = "\xA0"), "" + before + quotes[0] + separator + text2 + separator + quotes[1] + after;
        };
      };
      return input.replace(pattern, handleQuotes(localeQuotes.slice(0, 2), handleQuotes(localeQuotes.slice(2, 4))));
    }
    module.exports = exports.default;
  }
});

// node_modules/typographic-apostrophes-for-possessive-plurals/index.es5.js
var require_index_es53 = __commonJS({
  "node_modules/typographic-apostrophes-for-possessive-plurals/index.es5.js"(exports, module) {
    "use strict";
    module.exports = function(input) {
      return input.replace(/s'(\s|$)/gim, "s\u2019$1");
    };
  }
});

// node_modules/typographic-arrows/index.es5.js
var require_index_es54 = __commonJS({
  "node_modules/typographic-arrows/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = typographicArrows;
    function typographicArrows(input) {
      return input.replace(/<->/gim, "\u2194").replace(/<=>/gim, "\u21D4").replace(/<-/gim, "\u2190").replace(/->/gim, "\u2192").replace(/<=/gim, "\u21D0").replace(/=>/gim, "\u21D2");
    }
    module.exports = exports.default;
  }
});

// node_modules/typographic-copyright/index.es5.js
var require_index_es55 = __commonJS({
  "node_modules/typographic-copyright/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = function(input) {
      return input.replace(/\(c\)/gim, "\xA9").replace(/© *(\d)/gim, "\xA9\xA0$1");
    };
    module.exports = exports.default;
  }
});

// node_modules/typographic-currency-db/index.es5.js
var require_index_es56 = __commonJS({
  "node_modules/typographic-currency-db/index.es5.js"(exports, module) {
    "use strict";
    module.exports = {
      AFN: "\u060B",
      AMD: "\u058F",
      ANG: "\u0192",
      AWG: "\u0192",
      AZN: "\u20BC",
      BDT: "\u09F3",
      BTC: "\u0243",
      CNY: "\xA5",
      CRC: "\u20A1",
      EUR: "\u20AC",
      FKP: "\xA3",
      GBP: "\xA3",
      GHS: "\u20B5",
      GIP: "\xA3",
      ILS: "\u20AA",
      INR: "\u20B9",
      IRR: "\uFDFC",
      JPY: "\xA5",
      KHR: "\u17DB",
      KPW: "\u20A9",
      KRW: "\u20A9",
      KZT: "\u20B8",
      LAK: "\u20AD",
      LKR: "\u20A8",
      MNT: "\u20AE",
      MTL: "\u20A4",
      MUR: "\u20A8",
      NGN: "\u20A6",
      NPR: "\u20A8",
      OMR: "\uFDFC",
      PHP: "\u20B1",
      PKR: "\u20A8",
      PYG: "\u20B2",
      QAR: "\uFDFC",
      RUB: "\u20BD",
      SAR: "\uFDFC",
      SCR: "\u20A8",
      SDG: "\xA3",
      SHP: "\xA3",
      SVC: "\u20A1",
      SYP: "\xA3",
      THB: "\u0E3F",
      UAH: "\u20B4",
      USD: "$",
      VND: "\u20AB",
      YER: "\uFDFC"
    };
  }
});

// node_modules/typographic-currency/index.es5.js
var require_index_es57 = __commonJS({
  "node_modules/typographic-currency/index.es5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = typographicCurrency;
    var _typographicCurrencyDb = require_index_es56(), _typographicCurrencyDb2 = _interopRequireDefault(_typographicCurrencyDb);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var pattern = function(key) {
      return new RegExp("([^a-z]|\\b)(" + key + ")\\b", "gi");
    };
    function typographicCurrency(input) {
      if (!!input)
        return Object.keys(_typographicCurrencyDb2.default).reduce(function(state, key) {
          return state.replace(pattern(key), "$1" + _typographicCurrencyDb2.default[key]);
        }, input);
    }
  }
});

// node_modules/typographic-ellipses/index.es5.js
var require_index_es58 = __commonJS({
  "node_modules/typographic-ellipses/index.es5.js"(exports, module) {
    "use strict";
    module.exports = function(input) {
      return input.replace(/\.{3}/gim, "\u2026");
    };
  }
});

// node_modules/typographic-em-dashes/index.es5.js
var require_index_es59 = __commonJS({
  "node_modules/typographic-em-dashes/index.es5.js"(exports, module) {
    "use strict";
    module.exports = function(input) {
      return input.replace(/--/gim, "\u2014").replace(/ — /gim, "\u200A\u2014\u200A");
    };
  }
});

// node_modules/typographic-en-dashes/index.es5.js
var require_index_es510 = __commonJS({
  "node_modules/typographic-en-dashes/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = function(input) {
      return input.replace(/(\d)-(\d)/gim, "$1\u2013$2");
    };
    module.exports = exports.default;
  }
});

// node_modules/typographic-math-symbols/index.es5.js
var require_index_es511 = __commonJS({
  "node_modules/typographic-math-symbols/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = function(input) {
      return input.replace(/(\d) x (\d)/gim, "$1 \xD7 $2").replace(/(\d) - (\d)/gim, "$1 \u2212 $2").replace(/(\w) >> (\w)/gim, "$1 \u226B $2").replace(/(\w) << (\w)/gim, "$1 \u226A $2").replace(/(\w) >= (\w)/gim, "$1 \u2265 $2").replace(/(\w) <= (\w)/gim, "$1 \u2264 $2").replace(/\+-/gim, "\xB1").replace(/-\+/gim, "\u2213");
    };
    module.exports = exports.default;
  }
});

// node_modules/typographic-registered-trademark/index.es5.js
var require_index_es512 = __commonJS({
  "node_modules/typographic-registered-trademark/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = function(input) {
      return input.replace(/\(r\)/gim, "\xAE");
    };
    module.exports = exports.default;
  }
});

// node_modules/typographic-single-spaces/index.es5.js
var require_index_es513 = __commonJS({
  "node_modules/typographic-single-spaces/index.es5.js"(exports, module) {
    "use strict";
    module.exports = function(input) {
      return input.replace(/ +/gim, " ");
    };
  }
});

// node_modules/typographic-trademark/index.es5.js
var require_index_es514 = __commonJS({
  "node_modules/typographic-trademark/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.default = function(input) {
      return input.replace(/ *\(tm\)/gim, "\u2122");
    };
    module.exports = exports.default;
  }
});

// node_modules/typographic-base/index.es5.js
var require_index_es515 = __commonJS({
  "node_modules/typographic-base/index.es5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    var _textr = require_textr(), _textr2 = _interopRequireDefault(_textr), _typographicApostrophes = require_index_es5(), _typographicApostrophes2 = _interopRequireDefault(_typographicApostrophes), _typographicQuotes = require_index_es52(), _typographicQuotes2 = _interopRequireDefault(_typographicQuotes), _typographicApostrophesForPossessivePlurals = require_index_es53(), _typographicApostrophesForPossessivePlurals2 = _interopRequireDefault(_typographicApostrophesForPossessivePlurals), _typographicArrows = require_index_es54(), _typographicArrows2 = _interopRequireDefault(_typographicArrows), _typographicCopyright = require_index_es55(), _typographicCopyright2 = _interopRequireDefault(_typographicCopyright), _typographicCurrency = require_index_es57(), _typographicCurrency2 = _interopRequireDefault(_typographicCurrency), _typographicEllipses = require_index_es58(), _typographicEllipses2 = _interopRequireDefault(_typographicEllipses), _typographicEmDashes = require_index_es59(), _typographicEmDashes2 = _interopRequireDefault(_typographicEmDashes), _typographicEnDashes = require_index_es510(), _typographicEnDashes2 = _interopRequireDefault(_typographicEnDashes), _typographicMathSymbols = require_index_es511(), _typographicMathSymbols2 = _interopRequireDefault(_typographicMathSymbols), _typographicRegisteredTrademark = require_index_es512(), _typographicRegisteredTrademark2 = _interopRequireDefault(_typographicRegisteredTrademark), _typographicSingleSpaces = require_index_es513(), _typographicSingleSpaces2 = _interopRequireDefault(_typographicSingleSpaces), _typographicTrademark = require_index_es514(), _typographicTrademark2 = _interopRequireDefault(_typographicTrademark);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var base = (0, _textr2.default)().use(_typographicApostrophes2.default, _typographicQuotes2.default, _typographicApostrophesForPossessivePlurals2.default, _typographicArrows2.default, _typographicCopyright2.default, _typographicCurrency2.default, _typographicEllipses2.default, _typographicEmDashes2.default, _typographicEnDashes2.default, _typographicMathSymbols2.default, _typographicRegisteredTrademark2.default, _typographicSingleSpaces2.default, _typographicTrademark2.default);
    exports.default = base;
    module.exports = exports.default;
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends2, __assign2, __rest2, __decorate2, __param2, __esDecorate2, __runInitializers2, __propKey2, __setFunctionName2, __metadata2, __awaiter2, __generator2, __exportStar2, __values2, __read2, __spread2, __spreadArrays2, __spreadArray2, __await2, __asyncGenerator2, __asyncDelegator2, __asyncValues2, __makeTemplateObject2, __importStar2, __importDefault2, __classPrivateFieldGet2, __classPrivateFieldSet2, __classPrivateFieldIn2, __createBinding2;
    (function(factory) {
      var root = typeof globalThis == "object" ? globalThis : typeof self == "object" ? self : typeof this == "object" ? this : {};
      typeof define == "function" && define.amd ? define("tslib", ["exports"], function(exports2) {
        factory(createExporter(root, createExporter(exports2)));
      }) : typeof module == "object" && typeof module.exports == "object" ? factory(createExporter(root, createExporter(module.exports))) : factory(createExporter(root));
      function createExporter(exports2, previous) {
        return exports2 !== root && (typeof Object.create == "function" ? Object.defineProperty(exports2, "__esModule", { value: !0 }) : exports2.__esModule = !0), function(id, v5) {
          return exports2[id] = previous ? previous(id, v5) : v5;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d15, b5) {
        d15.__proto__ = b5;
      } || function(d15, b5) {
        for (var p8 in b5)
          Object.prototype.hasOwnProperty.call(b5, p8) && (d15[p8] = b5[p8]);
      };
      __extends2 = function(d15, b5) {
        if (typeof b5 != "function" && b5 !== null)
          throw new TypeError("Class extends value " + String(b5) + " is not a constructor or null");
        extendStatics(d15, b5);
        function __() {
          this.constructor = d15;
        }
        d15.prototype = b5 === null ? Object.create(b5) : (__.prototype = b5.prototype, new __());
      }, __assign2 = Object.assign || function(t13) {
        for (var s14, i9 = 1, n4 = arguments.length; i9 < n4; i9++) {
          s14 = arguments[i9];
          for (var p8 in s14)
            Object.prototype.hasOwnProperty.call(s14, p8) && (t13[p8] = s14[p8]);
        }
        return t13;
      }, __rest2 = function(s14, e5) {
        var t13 = {};
        for (var p8 in s14)
          Object.prototype.hasOwnProperty.call(s14, p8) && e5.indexOf(p8) < 0 && (t13[p8] = s14[p8]);
        if (s14 != null && typeof Object.getOwnPropertySymbols == "function")
          for (var i9 = 0, p8 = Object.getOwnPropertySymbols(s14); i9 < p8.length; i9++)
            e5.indexOf(p8[i9]) < 0 && Object.prototype.propertyIsEnumerable.call(s14, p8[i9]) && (t13[p8[i9]] = s14[p8[i9]]);
        return t13;
      }, __decorate2 = function(decorators, target, key, desc) {
        var c9 = arguments.length, r12 = c9 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d15;
        if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
          r12 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i9 = decorators.length - 1; i9 >= 0; i9--)
            (d15 = decorators[i9]) && (r12 = (c9 < 3 ? d15(r12) : c9 > 3 ? d15(target, key, r12) : d15(target, key)) || r12);
        return c9 > 3 && r12 && Object.defineProperty(target, key, r12), r12;
      }, __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      }, __esDecorate2 = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f9) {
          if (f9 !== void 0 && typeof f9 != "function")
            throw new TypeError("Function expected");
          return f9;
        }
        for (var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value", target = !descriptorIn && ctor ? contextIn.static ? ctor : ctor.prototype : null, descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {}), _3, done = !1, i9 = decorators.length - 1; i9 >= 0; i9--) {
          var context2 = {};
          for (var p8 in contextIn)
            context2[p8] = p8 === "access" ? {} : contextIn[p8];
          for (var p8 in contextIn.access)
            context2.access[p8] = contextIn.access[p8];
          context2.addInitializer = function(f9) {
            if (done)
              throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f9 || null));
          };
          var result = (0, decorators[i9])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context2);
          if (kind === "accessor") {
            if (result === void 0)
              continue;
            if (result === null || typeof result != "object")
              throw new TypeError("Object expected");
            (_3 = accept(result.get)) && (descriptor.get = _3), (_3 = accept(result.set)) && (descriptor.set = _3), (_3 = accept(result.init)) && initializers.push(_3);
          } else
            (_3 = accept(result)) && (kind === "field" ? initializers.push(_3) : descriptor[key] = _3);
        }
        target && Object.defineProperty(target, contextIn.name, descriptor), done = !0;
      }, __runInitializers2 = function(thisArg, initializers, value) {
        for (var useValue = arguments.length > 2, i9 = 0; i9 < initializers.length; i9++)
          value = useValue ? initializers[i9].call(thisArg, value) : initializers[i9].call(thisArg);
        return useValue ? value : void 0;
      }, __propKey2 = function(x5) {
        return typeof x5 == "symbol" ? x5 : "".concat(x5);
      }, __setFunctionName2 = function(f9, name, prefix2) {
        return typeof name == "symbol" && (name = name.description ? "[".concat(name.description, "]") : ""), Object.defineProperty(f9, "name", { configurable: !0, value: prefix2 ? "".concat(prefix2, " ", name) : name });
      }, __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
          return Reflect.metadata(metadataKey, metadataValue);
      }, __awaiter2 = function(thisArg, _arguments, P5, generator) {
        function adopt(value) {
          return value instanceof P5 ? value : new P5(function(resolve) {
            resolve(value);
          });
        }
        return new (P5 || (P5 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e5) {
              reject(e5);
            }
          }
          function rejected(value) {
            try {
              step(generator.throw(value));
            } catch (e5) {
              reject(e5);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }, __generator2 = function(thisArg, body) {
        var _3 = { label: 0, sent: function() {
          if (t13[0] & 1)
            throw t13[1];
          return t13[1];
        }, trys: [], ops: [] }, f9, y4, t13, g7;
        return g7 = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol == "function" && (g7[Symbol.iterator] = function() {
          return this;
        }), g7;
        function verb(n4) {
          return function(v5) {
            return step([n4, v5]);
          };
        }
        function step(op) {
          if (f9)
            throw new TypeError("Generator is already executing.");
          for (; g7 && (g7 = 0, op[0] && (_3 = 0)), _3; )
            try {
              if (f9 = 1, y4 && (t13 = op[0] & 2 ? y4.return : op[0] ? y4.throw || ((t13 = y4.return) && t13.call(y4), 0) : y4.next) && !(t13 = t13.call(y4, op[1])).done)
                return t13;
              switch (y4 = 0, t13 && (op = [op[0] & 2, t13.value]), op[0]) {
                case 0:
                case 1:
                  t13 = op;
                  break;
                case 4:
                  return _3.label++, { value: op[1], done: !1 };
                case 5:
                  _3.label++, y4 = op[1], op = [0];
                  continue;
                case 7:
                  op = _3.ops.pop(), _3.trys.pop();
                  continue;
                default:
                  if (t13 = _3.trys, !(t13 = t13.length > 0 && t13[t13.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _3 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t13 || op[1] > t13[0] && op[1] < t13[3])) {
                    _3.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _3.label < t13[1]) {
                    _3.label = t13[1], t13 = op;
                    break;
                  }
                  if (t13 && _3.label < t13[2]) {
                    _3.label = t13[2], _3.ops.push(op);
                    break;
                  }
                  t13[2] && _3.ops.pop(), _3.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _3);
            } catch (e5) {
              op = [6, e5], y4 = 0;
            } finally {
              f9 = t13 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: !0 };
        }
      }, __exportStar2 = function(m11, o8) {
        for (var p8 in m11)
          p8 !== "default" && !Object.prototype.hasOwnProperty.call(o8, p8) && __createBinding2(o8, m11, p8);
      }, __createBinding2 = Object.create ? function(o8, m11, k2, k22) {
        k22 === void 0 && (k22 = k2);
        var desc = Object.getOwnPropertyDescriptor(m11, k2);
        (!desc || ("get" in desc ? !m11.__esModule : desc.writable || desc.configurable)) && (desc = { enumerable: !0, get: function() {
          return m11[k2];
        } }), Object.defineProperty(o8, k22, desc);
      } : function(o8, m11, k2, k22) {
        k22 === void 0 && (k22 = k2), o8[k22] = m11[k2];
      }, __values2 = function(o8) {
        var s14 = typeof Symbol == "function" && Symbol.iterator, m11 = s14 && o8[s14], i9 = 0;
        if (m11)
          return m11.call(o8);
        if (o8 && typeof o8.length == "number")
          return {
            next: function() {
              return o8 && i9 >= o8.length && (o8 = void 0), { value: o8 && o8[i9++], done: !o8 };
            }
          };
        throw new TypeError(s14 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }, __read2 = function(o8, n4) {
        var m11 = typeof Symbol == "function" && o8[Symbol.iterator];
        if (!m11)
          return o8;
        var i9 = m11.call(o8), r12, ar = [], e5;
        try {
          for (; (n4 === void 0 || n4-- > 0) && !(r12 = i9.next()).done; )
            ar.push(r12.value);
        } catch (error) {
          e5 = { error };
        } finally {
          try {
            r12 && !r12.done && (m11 = i9.return) && m11.call(i9);
          } finally {
            if (e5)
              throw e5.error;
          }
        }
        return ar;
      }, __spread2 = function() {
        for (var ar = [], i9 = 0; i9 < arguments.length; i9++)
          ar = ar.concat(__read2(arguments[i9]));
        return ar;
      }, __spreadArrays2 = function() {
        for (var s14 = 0, i9 = 0, il = arguments.length; i9 < il; i9++)
          s14 += arguments[i9].length;
        for (var r12 = Array(s14), k2 = 0, i9 = 0; i9 < il; i9++)
          for (var a9 = arguments[i9], j5 = 0, jl = a9.length; j5 < jl; j5++, k2++)
            r12[k2] = a9[j5];
        return r12;
      }, __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i9 = 0, l12 = from.length, ar; i9 < l12; i9++)
            (ar || !(i9 in from)) && (ar || (ar = Array.prototype.slice.call(from, 0, i9)), ar[i9] = from[i9]);
        return to.concat(ar || Array.prototype.slice.call(from));
      }, __await2 = function(v5) {
        return this instanceof __await2 ? (this.v = v5, this) : new __await2(v5);
      }, __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g7 = generator.apply(thisArg, _arguments || []), i9, q3 = [];
        return i9 = {}, verb("next"), verb("throw"), verb("return"), i9[Symbol.asyncIterator] = function() {
          return this;
        }, i9;
        function verb(n4) {
          g7[n4] && (i9[n4] = function(v5) {
            return new Promise(function(a9, b5) {
              q3.push([n4, v5, a9, b5]) > 1 || resume(n4, v5);
            });
          });
        }
        function resume(n4, v5) {
          try {
            step(g7[n4](v5));
          } catch (e5) {
            settle(q3[0][3], e5);
          }
        }
        function step(r12) {
          r12.value instanceof __await2 ? Promise.resolve(r12.value.v).then(fulfill, reject) : settle(q3[0][2], r12);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f9, v5) {
          f9(v5), q3.shift(), q3.length && resume(q3[0][0], q3[0][1]);
        }
      }, __asyncDelegator2 = function(o8) {
        var i9, p8;
        return i9 = {}, verb("next"), verb("throw", function(e5) {
          throw e5;
        }), verb("return"), i9[Symbol.iterator] = function() {
          return this;
        }, i9;
        function verb(n4, f9) {
          i9[n4] = o8[n4] ? function(v5) {
            return (p8 = !p8) ? { value: __await2(o8[n4](v5)), done: !1 } : f9 ? f9(v5) : v5;
          } : f9;
        }
      }, __asyncValues2 = function(o8) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m11 = o8[Symbol.asyncIterator], i9;
        return m11 ? m11.call(o8) : (o8 = typeof __values2 == "function" ? __values2(o8) : o8[Symbol.iterator](), i9 = {}, verb("next"), verb("throw"), verb("return"), i9[Symbol.asyncIterator] = function() {
          return this;
        }, i9);
        function verb(n4) {
          i9[n4] = o8[n4] && function(v5) {
            return new Promise(function(resolve, reject) {
              v5 = o8[n4](v5), settle(resolve, reject, v5.done, v5.value);
            });
          };
        }
        function settle(resolve, reject, d15, v5) {
          Promise.resolve(v5).then(function(v6) {
            resolve({ value: v6, done: d15 });
          }, reject);
        }
      }, __makeTemplateObject2 = function(cooked, raw) {
        return Object.defineProperty ? Object.defineProperty(cooked, "raw", { value: raw }) : cooked.raw = raw, cooked;
      };
      var __setModuleDefault = Object.create ? function(o8, v5) {
        Object.defineProperty(o8, "default", { enumerable: !0, value: v5 });
      } : function(o8, v5) {
        o8.default = v5;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null)
          for (var k2 in mod)
            k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2) && __createBinding2(result, mod, k2);
        return __setModuleDefault(result, mod), result;
      }, __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      }, __classPrivateFieldGet2 = function(receiver, state, kind, f9) {
        if (kind === "a" && !f9)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state == "function" ? receiver !== state || !f9 : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f9 : kind === "a" ? f9.call(receiver) : f9 ? f9.value : state.get(receiver);
      }, __classPrivateFieldSet2 = function(receiver, state, value, kind, f9) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f9)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state == "function" ? receiver !== state || !f9 : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f9.call(receiver, value) : f9 ? f9.value = value : state.set(receiver, value), value;
      }, __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver != "object" && typeof receiver != "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state == "function" ? receiver === state : state.has(receiver);
      }, exporter("__extends", __extends2), exporter("__assign", __assign2), exporter("__rest", __rest2), exporter("__decorate", __decorate2), exporter("__param", __param2), exporter("__esDecorate", __esDecorate2), exporter("__runInitializers", __runInitializers2), exporter("__propKey", __propKey2), exporter("__setFunctionName", __setFunctionName2), exporter("__metadata", __metadata2), exporter("__awaiter", __awaiter2), exporter("__generator", __generator2), exporter("__exportStar", __exportStar2), exporter("__createBinding", __createBinding2), exporter("__values", __values2), exporter("__read", __read2), exporter("__spread", __spread2), exporter("__spreadArrays", __spreadArrays2), exporter("__spreadArray", __spreadArray2), exporter("__await", __await2), exporter("__asyncGenerator", __asyncGenerator2), exporter("__asyncDelegator", __asyncDelegator2), exporter("__asyncValues", __asyncValues2), exporter("__makeTemplateObject", __makeTemplateObject2), exporter("__importStar", __importStar2), exporter("__importDefault", __importDefault2), exporter("__classPrivateFieldGet", __classPrivateFieldGet2), exporter("__classPrivateFieldSet", __classPrivateFieldSet2), exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var enableSchedulerDebugging = !1, enableProfiling = !1, frameYieldMs = 5;
      function push(heap, node) {
        var index = heap.length;
        heap.push(node), siftUp(heap, node, index);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0)
          return null;
        var first = heap[0], last = heap.pop();
        return last !== first && (heap[0] = last, siftDown(heap, last, 0)), first;
      }
      function siftUp(heap, node, i9) {
        for (var index = i9; index > 0; ) {
          var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
          if (compare(parent, node) > 0)
            heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
          else
            return;
        }
      }
      function siftDown(heap, node, i9) {
        for (var index = i9, length2 = heap.length, halfLength = length2 >>> 1; index < halfLength; ) {
          var leftIndex = (index + 1) * 2 - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
          if (compare(left, node) < 0)
            rightIndex < length2 && compare(right, left) < 0 ? (heap[index] = right, heap[rightIndex] = node, index = rightIndex) : (heap[index] = left, heap[leftIndex] = node, index = leftIndex);
          else if (rightIndex < length2 && compare(right, node) < 0)
            heap[index] = right, heap[rightIndex] = node, index = rightIndex;
          else
            return;
        }
      }
      function compare(a9, b5) {
        var diff2 = a9.sortIndex - b5.sortIndex;
        return diff2 !== 0 ? diff2 : a9.id - b5.id;
      }
      var ImmediatePriority = 1, UserBlockingPriority = 2, NormalPriority = 3, LowPriority = 4, IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance == "object" && typeof performance.now == "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date, initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823, IMMEDIATE_PRIORITY_TIMEOUT = -1, USER_BLOCKING_PRIORITY_TIMEOUT = 250, NORMAL_PRIORITY_TIMEOUT = 5e3, LOW_PRIORITY_TIMEOUT = 1e4, IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt, taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = NormalPriority, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = typeof setTimeout == "function" ? setTimeout : null, localClearTimeout = typeof clearTimeout == "function" ? clearTimeout : null, localSetImmediate = typeof setImmediate < "u" ? setImmediate : null, isInputPending = typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        for (var timer = peek(timerQueue); timer !== null; ) {
          if (timer.callback === null)
            pop(timerQueue);
          else if (timer.startTime <= currentTime)
            pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
          else
            return;
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        if (isHostTimeoutScheduled = !1, advanceTimers(currentTime), !isHostCallbackScheduled)
          if (peek(taskQueue) !== null)
            isHostCallbackScheduled = !0, requestHostCallback(flushWork);
          else {
            var firstTimer = peek(timerQueue);
            firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = !1, isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, cancelHostTimeout()), isPerformingWork = !0;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling)
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                currentTask.isQueued = !1;
              }
              throw error;
            }
          else
            return workLoop(hasTimeRemaining, initialTime2);
        } finally {
          currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        for (advanceTimers(currentTime), currentTask = peek(taskQueue); currentTask !== null && !enableSchedulerDebugging && !(currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())); ) {
          var callback = currentTask.callback;
          if (typeof callback == "function") {
            currentTask.callback = null, currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime, continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now(), typeof continuationCallback == "function" ? currentTask.callback = continuationCallback : currentTask === peek(taskQueue) && pop(taskQueue), advanceTimers(currentTime);
          } else
            pop(taskQueue);
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null)
          return !0;
        var firstTimer = peek(timerQueue);
        return firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime), !1;
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now(), startTime2;
        if (typeof options == "object" && options !== null) {
          var delay = options.delay;
          typeof delay == "number" && delay > 0 ? startTime2 = currentTime + delay : startTime2 = currentTime;
        } else
          startTime2 = currentTime;
        var timeout2;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout2 = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout2 = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout2 = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout2, newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        return startTime2 > currentTime ? (newTask.sortIndex = startTime2, push(timerQueue, newTask), peek(taskQueue) === null && newTask === peek(timerQueue) && (isHostTimeoutScheduled ? cancelHostTimeout() : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, startTime2 - currentTime))) : (newTask.sortIndex = expirationTime, push(taskQueue, newTask), !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork))), newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork));
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = !1, scheduledHostCallback = null, taskTimeoutID = -1, frameInterval = frameYieldMs, startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        return !(timeElapsed < frameInterval);
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        fps > 0 ? frameInterval = Math.floor(1e3 / fps) : frameInterval = frameYieldMs;
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = !0, hasMoreWork = !0;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            hasMoreWork ? schedulePerformWorkUntilDeadline() : (isMessageLoopRunning = !1, scheduledHostCallback = null);
          }
        } else
          isMessageLoopRunning = !1;
      }, schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate == "function")
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      else if (typeof MessageChannel < "u") {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline, schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      function requestHostCallback(callback) {
        scheduledHostCallback = callback, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID), taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint, unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority, exports.unstable_ImmediatePriority = ImmediatePriority, exports.unstable_LowPriority = LowPriority, exports.unstable_NormalPriority = NormalPriority, exports.unstable_Profiling = unstable_Profiling, exports.unstable_UserBlockingPriority = UserBlockingPriority, exports.unstable_cancelCallback = unstable_cancelCallback, exports.unstable_continueExecution = unstable_continueExecution, exports.unstable_forceFrameRate = forceFrameRate, exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel, exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode, exports.unstable_next = unstable_next, exports.unstable_pauseExecution = unstable_pauseExecution, exports.unstable_requestPaint = unstable_requestPaint, exports.unstable_runWithPriority = unstable_runWithPriority, exports.unstable_scheduleCallback = unstable_scheduleCallback, exports.unstable_shouldYield = shouldYieldToHost, exports.unstable_wrapCallback = unstable_wrapCallback, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// node_modules/react-dom/node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/react-dom/node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    module.exports = require_scheduler_development();
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var React33 = require_react(), Scheduler = require_scheduler(), ReactSharedInternals = React33.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, suppressWarning = !1;
      function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
      }
      function warn(format) {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning2("warn", format, args);
        }
      }
      function error(format) {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0, ClassComponent = 1, IndeterminateComponent = 2, HostRoot = 3, HostPortal = 4, HostComponent = 5, HostText = 6, Fragment22 = 7, Mode = 8, ContextConsumer = 9, ContextProvider = 10, ForwardRef = 11, Profiler = 12, SuspenseComponent = 13, MemoComponent = 14, SimpleMemoComponent = 15, LazyComponent = 16, IncompleteClassComponent = 17, DehydratedFragment = 18, SuspenseListComponent = 19, ScopeComponent = 21, OffscreenComponent = 22, LegacyHiddenComponent = 23, CacheComponent = 24, TracingMarkerComponent = 25, enableClientRenderFallbackOnTextMismatch = !0, enableNewReconciler = !1, enableLazyContextPropagation = !1, enableLegacyHidden = !1, enableSuspenseAvoidThisFallback = !1, disableCommentsAsDOMContainers = !0, enableCustomElementPropertySupport = !1, warnAboutStringRefs = !1, enableSchedulingProfiler = !0, enableProfilerTimer = !0, enableProfilerCommitHooks = !0, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies), registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] && error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName), registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName, registrationName === "onDoubleClick" && (possibleRegistrationNames.ondblclick = registrationName);
        }
        for (var i9 = 0; i9 < dependencies.length; i9++)
          allNativeEvents.add(dependencies[i9]);
      }
      var canUseDOM2 = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        return propertyInfo !== null ? propertyInfo.type === RESERVED : isCustomComponentTag ? !1 : name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N");
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value > "u" || shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag))
          return !0;
        if (isCustomComponentTag)
          return !1;
        if (propertyInfo !== null)
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === !1;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        return !1;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      }), [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          name,
          null,
          !1,
          !1
        );
      }), [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          name,
          null,
          !1,
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          name.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          null,
          !1,
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !1,
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          attributeName.toLowerCase(),
          null,
          !0,
          !0
        );
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          checkAttributeStringCoercion(expected, name), propertyInfo.sanitizeURL && sanitizeURL("" + expected);
          var attributeName = propertyInfo.attributeName, stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              return value === "" ? !0 : shouldRemoveAttribute(name, expected, propertyInfo, !1) ? value : value === "" + expected ? expected : value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, !1))
              return node.getAttribute(attributeName);
            if (propertyInfo.type === BOOLEAN)
              return expected;
            stringValue = node.getAttribute(attributeName);
          }
          return shouldRemoveAttribute(name, expected, propertyInfo, !1) ? stringValue === null ? expected : stringValue : stringValue === "" + expected ? expected : stringValue;
        }
      }
      function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name))
            return;
          if (!node.hasAttribute(name))
            return expected === void 0 ? void 0 : null;
          var value = node.getAttribute(name);
          return checkAttributeStringCoercion(expected, name), value === "" + expected ? expected : value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (!shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) && (value = null), isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              value === null ? node.removeAttribute(_attributeName) : (checkAttributeStringCoercion(value, name), node.setAttribute(_attributeName, "" + value));
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? !1 : "";
            } else
              node[propertyName] = value;
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null)
            node.removeAttribute(attributeName);
          else {
            var _type = propertyInfo.type, attributeValue;
            _type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === !0 ? attributeValue = "" : (checkAttributeStringCoercion(value, attributeName), attributeValue = "" + value, propertyInfo.sanitizeURL && sanitizeURL(attributeValue.toString())), attributeNamespace ? node.setAttributeNS(attributeNamespace, attributeName, attributeValue) : node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_CACHE_TYPE = Symbol.for("react.cache"), REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x5) {
              var match2 = x5.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x5) {
                control = x5;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x5) {
                control = x5;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x5) {
              control = x5;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s14 = sampleLines.length - 1, c9 = controlLines.length - 1; s14 >= 1 && c9 >= 0 && sampleLines[s14] !== controlLines[c9]; )
              c9--;
            for (; s14 >= 1 && c9 >= 0; s14--, c9--)
              if (sampleLines[s14] !== controlLines[c9]) {
                if (s14 !== 1 || c9 !== 1)
                  do
                    if (s14--, c9--, c9 < 0 || sampleLines[s14] !== controlLines[c9]) {
                      var _frame = `
` + sampleLines[s14].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s14 >= 1 && c9 >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component4) {
        var prototype = Component4.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null, source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "", node = workInProgress2;
          do
            info += describeFiber(node), node = node.return;
          while (node);
          return info;
        } catch (x5) {
          return `
Error generating stack: ` + x5.message + `
` + x5.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context2 = type;
            return getContextName$1(context2) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment22:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type == "function")
              return type.displayName || type.name || null;
            if (typeof type == "string")
              return type;
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame, current = null, isRendering = !1;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null)
            return null;
          var owner = current._debugOwner;
          if (owner !== null && typeof owner < "u")
            return getComponentNameFromFiber(owner);
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        return current === null ? "" : getStackByFiberInDevAndProd(current);
      }
      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null, current = null, isRendering = !1;
      }
      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev, current = fiber, isRendering = !1;
      }
      function getCurrentFiber() {
        return current;
      }
      function setIsRendering(rendering) {
        isRendering = rendering;
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return checkFormFieldValueStringCoercion(value), value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCheckable(elem) {
        var type = elem.type, nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        return node && (isCheckable(node) ? value = node.checked ? "true" : "false" : value = node.value), value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField];
        if (!(node.hasOwnProperty(valueField) || typeof descriptor > "u" || typeof descriptor.get != "function" || typeof descriptor.set != "function")) {
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: !0,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value, set2.call(this, value);
            }
          }), Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node), delete node[valueField];
            }
          };
          return tracker;
        }
      }
      function track(node) {
        getTracker(node) || (node._valueTracker = trackValueOnNode(node));
      }
      function updateValueIfChanged(node) {
        if (!node)
          return !1;
        var tracker = getTracker(node);
        if (!tracker)
          return !0;
        var lastValue = tracker.getValue(), nextValue = getValueFromNode(node);
        return nextValue !== lastValue ? (tracker.setValue(nextValue), !0) : !1;
      }
      function getActiveElement(doc) {
        if (doc = doc || (typeof document < "u" ? document : void 0), typeof doc > "u")
          return null;
        try {
          return doc.activeElement || doc.body;
        } catch {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = !1, didWarnCheckedDefaultChecked = !1, didWarnControlledToUncontrolled = !1, didWarnUncontrolledToControlled = !1;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element, checked = props.checked, hostProps = assign({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked ?? node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue = !0);
        var node = element, defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element, checked = props.checked;
        checked != null && setValueForProperty(node, "checked", checked, !1);
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          !node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled && (error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnUncontrolledToControlled = !0), node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled && (error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnControlledToUncontrolled = !0);
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value), type = props.type;
        if (value != null)
          type === "number" ? (value === 0 && node.value === "" || node.value != value) && (node.value = toString(value)) : node.value !== toString(value) && (node.value = toString(value));
        else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        props.hasOwnProperty("value") ? setDefaultValue(node, props.type, value) : props.hasOwnProperty("defaultValue") && setDefaultValue(node, props.type, getToStringValue(props.defaultValue)), props.checked == null && props.defaultChecked != null && (node.defaultChecked = !!props.defaultChecked);
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type, isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null))
            return;
          var initialValue = toString(node._wrapperState.initialValue);
          isHydrating2 || initialValue !== node.value && (node.value = initialValue), node.defaultValue = initialValue;
        }
        var name = node.name;
        name !== "" && (node.name = ""), node.defaultChecked = !node.defaultChecked, node.defaultChecked = !!node._wrapperState.initialChecked, name !== "" && (node.name = name);
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props), updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          for (var queryRoot = rootNode; queryRoot.parentNode; )
            queryRoot = queryRoot.parentNode;
          checkAttributeStringCoercion(name, "name");
          for (var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]'), i9 = 0; i9 < group.length; i9++) {
            var otherNode = group[i9];
            if (!(otherNode === rootNode || otherNode.form !== rootNode.form)) {
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps)
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              updateValueIfChanged(otherNode), updateWrapper(otherNode, otherProps);
            }
          }
        }
      }
      function setDefaultValue(node, type, value) {
        (type !== "number" || getActiveElement(node.ownerDocument) !== node) && (value == null ? node.defaultValue = toString(node._wrapperState.initialValue) : node.defaultValue !== toString(value) && (node.defaultValue = toString(value)));
      }
      var didWarnSelectedSetOnOption = !1, didWarnInvalidChild = !1, didWarnInvalidInnerHTML = !1;
      function validateProps(element, props) {
        props.value == null && (typeof props.children == "object" && props.children !== null ? React33.Children.forEach(props.children, function(child) {
          child != null && (typeof child == "string" || typeof child == "number" || didWarnInvalidChild || (didWarnInvalidChild = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }) : props.dangerouslySetInnerHTML != null && (didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))), props.selected != null && !didWarnSelectedSetOnOption && (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
      }
      function postMountWrapper$1(element, props) {
        props.value != null && element.setAttribute("value", toString(getToStringValue(props.value)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      var didWarnValueDefaultValue$1;
      didWarnValueDefaultValue$1 = !1;
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        return ownerName ? `

Check the render method of \`` + ownerName + "`." : "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i9 = 0; i9 < valuePropNames.length; i9++) {
            var propName = valuePropNames[i9];
            if (props[propName] != null) {
              var propNameIsArray = isArray(props[propName]);
              props.multiple && !propNameIsArray ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && propNameIsArray && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          for (var selectedValues = propValue, selectedValue = {}, i9 = 0; i9 < selectedValues.length; i9++)
            selectedValue["$" + selectedValues[i9]] = !0;
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            options2[_i].selected !== selected && (options2[_i].selected = selected), selected && setDefaultSelected && (options2[_i].defaultSelected = !0);
          }
        } else {
          for (var _selectedValue = toString(getToStringValue(propValue)), defaultSelected = null, _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = !0, setDefaultSelected && (options2[_i2].defaultSelected = !0);
              return;
            }
            defaultSelected === null && !options2[_i2].disabled && (defaultSelected = options2[_i2]);
          }
          defaultSelected !== null && (defaultSelected.selected = !0);
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props), node._wrapperState = {
          wasMultiple: !!props.multiple
        }, props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1 && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnValueDefaultValue$1 = !0);
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, !1) : props.defaultValue != null && updateOptions(node, !!props.multiple, props.defaultValue, !0);
      }
      function postUpdateWrapper(element, props) {
        var node = element, wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, !1) : wasMultiple !== !!props.multiple && (props.defaultValue != null ? updateOptions(node, !!props.multiple, props.defaultValue, !0) : updateOptions(node, !!props.multiple, props.multiple ? [] : "", !1));
      }
      function restoreControlledState$1(element, props) {
        var node = element, value = props.value;
        value != null && updateOptions(node, !!props.multiple, value, !1);
      }
      var didWarnValDefaultVal = !1;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null)
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        var hostProps = assign({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal && (error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0);
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            {
              if (defaultValue != null)
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              if (isArray(children)) {
                if (children.length > 1)
                  throw new Error("<textarea> can only have at most one child.");
                children = children[0];
              }
              defaultValue = children;
            }
          }
          defaultValue == null && (defaultValue = ""), initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element, value = getToStringValue(props.value), defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          newValue !== node.value && (node.value = newValue), props.defaultValue == null && node.defaultValue !== newValue && (node.defaultValue = newValue);
        }
        defaultValue != null && (node.defaultValue = toString(defaultValue));
      }
      function postMountWrapper$3(element, props) {
        var node = element, textContent = node.textContent;
        textContent === node._wrapperState.initialValue && textContent !== "" && textContent !== null && (node.value = textContent);
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml", MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        return parentNamespace == null || parentNamespace === HTML_NAMESPACE ? getIntrinsicNamespace(type) : parentNamespace === SVG_NAMESPACE && type === "foreignObject" ? HTML_NAMESPACE : parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        } : func;
      }, reusableSVGContainer, setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE && !("innerHTML" in node)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div"), reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          for (var svgNode = reusableSVGContainer.firstChild; node.firstChild; )
            node.removeChild(node.firstChild);
          for (; svgNode.firstChild; )
            node.appendChild(svgNode.firstChild);
          return;
        }
        node.innerHTML = html;
      }), ELEMENT_NODE = 1, TEXT_NODE = 3, COMMENT_NODE = 8, DOCUMENT_NODE = 9, DOCUMENT_FRAGMENT_NODE = 11, setTextContent = function(node, text2) {
        if (text2) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text2;
            return;
          }
        }
        node.textContent = text2;
      }, shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      }, isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value == "boolean" || value === "";
        return isEmpty ? "" : !isCustomProperty && typeof value == "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) ? value + "px" : (checkCSSPropertyStringCoercion(value, name), ("" + value).trim());
      }
      var uppercasePattern = /([A-Z])/g, msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern$1 = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string3) {
          return string3.replace(hyphenPattern, function(_3, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            camelize(name.replace(msPattern$1, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "", delimiter = "";
          for (var styleName in styles)
            if (!!styles.hasOwnProperty(styleName)) {
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":", serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty), delimiter = ";";
              }
            }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style2 = node.style;
        for (var styleName in styles)
          if (!!styles.hasOwnProperty(styleName)) {
            var isCustomProperty = styleName.indexOf("--") === 0;
            isCustomProperty || warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            styleName === "float" && (styleName = "cssFloat"), isCustomProperty ? style2.setProperty(styleName, styleValue) : style2[styleName] = styleValue;
          }
      }
      function isValueEmpty(value) {
        return value == null || typeof value == "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles)
          for (var longhands = shorthandToLonghand[key] || [key], i9 = 0; i9 < longhands.length; i9++)
            expanded[longhands[i9]] = key;
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles)
            return;
          var expandedUpdates = expandShorthandMap(styleUpdates), expandedStyles = expandShorthandMap(nextStyles), warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key], correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey])
                continue;
              warnedAbout[warningKey] = !0, error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: !0,
        base: !0,
        br: !0,
        col: !0,
        embed: !0,
        hr: !0,
        img: !0,
        input: !0,
        keygen: !0,
        link: !0,
        meta: !0,
        param: !0,
        source: !0,
        track: !0,
        wbr: !0
      }, voidElementTags = assign({
        menuitem: !0
      }, omittedCloseTags), HTML = "__html";
      function assertValidProps(tag, props) {
        if (!!props) {
          if (voidElementTags[tag] && (props.children != null || props.dangerouslySetInnerHTML != null))
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null)
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof props.dangerouslySetInnerHTML != "object" || !(HTML in props.dangerouslySetInnerHTML))
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), props.style != null && typeof props.style != "object")
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1, IS_NON_DELEGATED = 1 << 1, IS_CAPTURE_PHASE = 1 << 2, SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE, currentReplayingEvent = null;
      function setReplayingEvent(event2) {
        currentReplayingEvent !== null && error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = event2;
      }
      function resetReplayingEvent() {
        currentReplayingEvent === null && error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = null;
      }
      function isReplayingEvent(event2) {
        return event2 === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        return target.correspondingUseElement && (target = target.correspondingUseElement), target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null, restoreTarget = null, restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!!internalInstance) {
          if (typeof restoreImpl != "function")
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!!restoreTarget) {
          var target = restoreTarget, queuedTargets = restoreQueue;
          if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets)
            for (var i9 = 0; i9 < queuedTargets.length; i9++)
              restoreStateOfTarget(queuedTargets[i9]);
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      }, flushSyncImpl = function() {
      }, isInsideEventHandler = !1;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        controlledComponentsHavePendingUpdates && (flushSyncImpl(), restoreStateIfNeeded());
      }
      function batchedUpdates(fn, a9, b5) {
        if (isInsideEventHandler)
          return fn(a9, b5);
        isInsideEventHandler = !0;
        try {
          return batchedUpdatesImpl(fn, a9, b5);
        } finally {
          isInsideEventHandler = !1, finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl, flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return !1;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null)
          return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null)
          return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props))
          return null;
        if (listener && typeof listener != "function")
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
      }
      var passiveBrowserEventsSupported = !1;
      if (canUseDOM2)
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = !0;
            }
          }), window.addEventListener("test", options, options), window.removeEventListener("test", options, options);
        } catch {
          passiveBrowserEventsSupported = !1;
        }
      function invokeGuardedCallbackProd(name, func, context2, a9, b5, c9, d15, e5, f9) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context2, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function(name, func, context2, a9, b5, c9, d15, e5, f9) {
          if (typeof document > "u" || document === null)
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          var evt = document.createEvent("Event"), didCall = !1, didError = !0, windowEvent = window.event, windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, !1), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = windowEvent);
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = !0, restoreAfterDispatch(), func.apply(context2, funcArgs), didError = !1;
          }
          var error2, didSetError = !1, isCrossOriginError = !1;
          function handleWindowError(event2) {
            if (error2 = event2.error, didSetError = !0, error2 === null && event2.colno === 0 && event2.lineno === 0 && (isCrossOriginError = !0), event2.defaultPrevented && error2 != null && typeof error2 == "object")
              try {
                error2._suppressLogging = !0;
              } catch {
              }
          }
          var evtType = "react-" + (name || "invokeguardedcallback");
          if (window.addEventListener("error", handleWindowError), fakeNode.addEventListener(evtType, callCallback2, !1), evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), windowEventDescriptor && Object.defineProperty(window, "event", windowEventDescriptor), didCall && didError && (didSetError ? isCrossOriginError && (error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(error2)), window.removeEventListener("error", handleWindowError), !didCall)
            return restoreAfterDispatch(), invokeGuardedCallbackProd.apply(this, arguments);
        };
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl, hasError = !1, caughtError = null, hasRethrowError = !1, rethrowError = null, reporter = {
        onError: function(error2) {
          hasError = !0, caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context2, a9, b5, c9, d15, e5, f9) {
        hasError = !1, caughtError = null, invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a9, b5, c9, d15, e5, f9) {
        if (invokeGuardedCallback.apply(this, arguments), hasError) {
          var error2 = clearCaughtError();
          hasRethrowError || (hasRethrowError = !0, rethrowError = error2);
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          throw hasRethrowError = !1, rethrowError = null, error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          return hasError = !1, caughtError = null, error2;
        } else
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
      function get(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== void 0;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = 0, PerformedWork = 1, Placement = 2, Update = 4, ChildDeletion = 16, ContentReset = 32, Callback = 64, DidCapture = 128, ForceClientRender = 256, Ref = 512, Snapshot = 1024, Passive = 2048, Hydrating = 4096, Visibility = 8192, StoreConsistency = 16384, LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency, HostEffectMask = 32767, Incomplete = 32768, ShouldCapture = 65536, ForceUpdateForLegacySuspense = 131072, Forked = 1048576, RefStatic = 2097152, LayoutStatic = 4194304, PassiveStatic = 8388608, MountLayoutDev = 16777216, MountPassiveDev = 33554432, BeforeMutationMask = Update | Snapshot | 0, MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility, LayoutMask = Update | Callback | Ref | Visibility, PassiveMask = Passive | ChildDeletion, StaticMask = LayoutStatic | PassiveStatic | RefStatic, ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate)
          for (; node.return; )
            node = node.return;
        else {
          var nextNode = node;
          do
            node = nextNode, (node.flags & (Placement | Hydrating)) !== NoFlags && (nearestMounted = node.return), nextNode = node.return;
          while (nextNode);
        }
        return node.tag === HostRoot ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            current2 !== null && (suspenseState = current2.memoizedState);
          }
          if (suspenseState !== null)
            return suspenseState.dehydrated;
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner, instance = ownerFiber.stateNode;
            instance._warnedAboutRefsInRender || error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component"), instance._warnedAboutRefsInRender = !0;
          }
        }
        var fiber = get(component);
        return fiber ? getNearestMountedFiber(fiber) === fiber : !1;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw new Error("Unable to find node on an unmounted component.");
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null)
            throw new Error("Unable to find node on an unmounted component.");
          return nearestMounted !== fiber ? null : fiber;
        }
        for (var a9 = fiber, b5 = alternate; ; ) {
          var parentA = a9.return;
          if (parentA === null)
            break;
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a9 = b5 = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (var child = parentA.child; child; ) {
              if (child === a9)
                return assertIsMounted(parentA), fiber;
              if (child === b5)
                return assertIsMounted(parentA), alternate;
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a9.return !== b5.return)
            a9 = parentA, b5 = parentB;
          else {
            for (var didFindChild = !1, _child = parentA.child; _child; ) {
              if (_child === a9) {
                didFindChild = !0, a9 = parentA, b5 = parentB;
                break;
              }
              if (_child === b5) {
                didFindChild = !0, b5 = parentA, a9 = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              for (_child = parentB.child; _child; ) {
                if (_child === a9) {
                  didFindChild = !0, a9 = parentB, b5 = parentA;
                  break;
                }
                if (_child === b5) {
                  didFindChild = !0, b5 = parentB, a9 = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild)
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
          if (a9.alternate !== b5)
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (a9.tag !== HostRoot)
          throw new Error("Unable to find node on an unmounted component.");
        return a9.stateNode.current === a9 ? fiber : alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          var match2 = findCurrentHostFiberImpl(child);
          if (match2 !== null)
            return match2;
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          if (child.tag !== HostPortal) {
            var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match2 !== null)
              return match2;
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback, cancelCallback = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now3 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, unstable_yieldValue = Scheduler.unstable_yieldValue, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = !1, isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
          return !1;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled)
          return !0;
        if (!hook.supportsFiber)
          return error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
        try {
          enableSchedulingProfiler && (internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          })), rendererID = hook.inject(internals), injectedHook = hook;
        } catch (err) {
          error("React instrumentation encountered an error: %s.", err);
        }
        return !!hook.checkDCE;
      }
      function onScheduleRoot(root2, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot == "function")
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root2, children);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot == "function")
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else
              injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot == "function")
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount == "function")
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue == "function" && (unstable_setDisableYieldValue(newIsStrictMode), setSuppressWarning(newIsStrictMode)), injectedHook && typeof injectedHook.setStrictMode == "function")
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          for (var map3 = /* @__PURE__ */ new Map(), lane = 1, index2 = 0; index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map3.set(lane, label), lane *= 2;
          }
          return map3;
        }
      }
      function markCommitStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted == "function" && injectedProfilingHooks.markCommitStarted(lanes);
      }
      function markCommitStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped == "function" && injectedProfilingHooks.markCommitStopped();
      }
      function markComponentRenderStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted == "function" && injectedProfilingHooks.markComponentRenderStarted(fiber);
      }
      function markComponentRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped == "function" && injectedProfilingHooks.markComponentRenderStopped();
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
      }
      function markComponentPassiveEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStopped();
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
      }
      function markComponentPassiveEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
      }
      function markComponentLayoutEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStopped();
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
      }
      function markComponentLayoutEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored == "function" && injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended == "function" && injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
      }
      function markLayoutEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted == "function" && injectedProfilingHooks.markLayoutEffectsStarted(lanes);
      }
      function markLayoutEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped == "function" && injectedProfilingHooks.markLayoutEffectsStopped();
      }
      function markPassiveEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted == "function" && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
      }
      function markPassiveEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped == "function" && injectedProfilingHooks.markPassiveEffectsStopped();
      }
      function markRenderStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted == "function" && injectedProfilingHooks.markRenderStarted(lanes);
      }
      function markRenderYielded() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded == "function" && injectedProfilingHooks.markRenderYielded();
      }
      function markRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped == "function" && injectedProfilingHooks.markRenderStopped();
      }
      function markRenderScheduled(lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled == "function" && injectedProfilingHooks.markRenderScheduled(lane);
      }
      function markForceUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled == "function" && injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
      }
      function markStateUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled == "function" && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
      }
      var NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x5) {
        var asUint = x5 >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31, NoLanes = 0, NoLane = 0, SyncLane = 1, InputContinuousHydrationLane = 2, InputContinuousLane = 4, DefaultHydrationLane = 8, DefaultLane = 16, TransitionHydrationLane = 32, TransitionLanes = 4194240, TransitionLane1 = 64, TransitionLane2 = 128, TransitionLane3 = 256, TransitionLane4 = 512, TransitionLane5 = 1024, TransitionLane6 = 2048, TransitionLane7 = 4096, TransitionLane8 = 8192, TransitionLane9 = 16384, TransitionLane10 = 32768, TransitionLane11 = 65536, TransitionLane12 = 131072, TransitionLane13 = 262144, TransitionLane14 = 524288, TransitionLane15 = 1048576, TransitionLane16 = 2097152, RetryLanes = 130023424, RetryLane1 = 4194304, RetryLane2 = 8388608, RetryLane3 = 16777216, RetryLane4 = 33554432, RetryLane5 = 67108864, SomeRetryLane = RetryLane1, SelectiveHydrationLane = 134217728, NonIdleLanes = 268435455, IdleHydrationLane = 268435456, IdleLane = 536870912, OffscreenLane = 1073741824;
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane)
            return "Sync";
          if (lane & InputContinuousHydrationLane)
            return "InputContinuousHydration";
          if (lane & InputContinuousLane)
            return "InputContinuous";
          if (lane & DefaultHydrationLane)
            return "DefaultHydration";
          if (lane & DefaultLane)
            return "Default";
          if (lane & TransitionHydrationLane)
            return "TransitionHydration";
          if (lane & TransitionLanes)
            return "Transition";
          if (lane & RetryLanes)
            return "Retry";
          if (lane & SelectiveHydrationLane)
            return "SelectiveHydration";
          if (lane & IdleHydrationLane)
            return "IdleHydration";
          if (lane & IdleLane)
            return "Idle";
          if (lane & OffscreenLane)
            return "Offscreen";
        }
      }
      var NoTimestamp = -1, nextTransitionLane = TransitionLane1, nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            return error("Should have found matching lanes. This is a bug in React."), lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes)
          return NoLanes;
        var nextLanes = NoLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes)
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            nonIdlePingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(nonIdlePingedLanes));
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          unblockedLanes !== NoLanes ? nextLanes = getHighestPriorityLanes(unblockedLanes) : pingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
        }
        if (nextLanes === NoLanes)
          return NoLanes;
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes), wipLane = getHighestPriorityLane(wipLanes);
          if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)
            return wipLanes;
        }
        (nextLanes & InputContinuousLane) !== NoLanes && (nextLanes |= pendingLanes & DefaultLane);
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes)
          for (var entanglements = root2.entanglements, lanes = nextLanes & entangledLanes; lanes > 0; ) {
            var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
            nextLanes |= entanglements[index2], lanes &= ~lane;
          }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        for (var eventTimes = root2.eventTimes, mostRecentEventTime = NoTimestamp; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, eventTime = eventTimes[index2];
          eventTime > mostRecentEventTime && (mostRecentEventTime = eventTime), lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5e3;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            return error("Should have found matching lanes. This is a bug in React."), NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        for (var pendingLanes = root2.pendingLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = pendingLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, expirationTime = expirationTimes[index2];
          expirationTime === NoTimestamp ? ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) && (expirationTimes[index2] = computeExpirationTime(lane, currentTime)) : expirationTime <= currentTime && (root2.expiredLanes |= lane), lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        return everythingButOffscreen !== NoLanes ? everythingButOffscreen : everythingButOffscreen & OffscreenLane ? OffscreenLane : NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        return nextTransitionLane <<= 1, (nextTransitionLane & TransitionLanes) === NoLanes && (nextTransitionLane = TransitionLane1), lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        return nextRetryLane <<= 1, (nextRetryLane & RetryLanes) === NoLanes && (nextRetryLane = RetryLane1), lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a9, b5) {
        return (a9 & b5) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a9, b5) {
        return a9 | b5;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a9, b5) {
        return a9 & b5;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a9, b5) {
        return a9 !== NoLane && a9 < b5 ? a9 : b5;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i9 = 0; i9 < TotalLanes; i9++)
          laneMap.push(initial);
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane, updateLane !== IdleLane && (root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes);
        var eventTimes = root2.eventTimes, index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes, root2.pingedLanes &= ~suspendedLanes;
        for (var expirationTimes = root2.expirationTimes, lanes = suspendedLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes, root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes, root2.expiredLanes &= remainingLanes, root2.mutableReadLanes &= remainingLanes, root2.entangledLanes &= remainingLanes;
        for (var entanglements = root2.entanglements, eventTimes = root2.eventTimes, expirationTimes = root2.expirationTimes, lanes = noLongerPendingLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          entanglements[index2] = NoLanes, eventTimes[index2] = NoTimestamp, expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        for (var rootEntangledLanes = root2.entangledLanes |= entangledLanes, entanglements = root2.entanglements, lanes = rootEntangledLanes; lanes; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          lane & entangledLanes | entanglements[index2] & entangledLanes && (entanglements[index2] |= entangledLanes), lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2), lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        return (lane & (root2.suspendedLanes | renderLanes2)) !== NoLane ? NoLane : lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!!isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap; lanes > 0; ) {
            var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber), lanes &= ~lane;
          }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!!isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap, memoizedUpdaters = root2.memoizedUpdaters; lanes > 0; ) {
            var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
            updaters.size > 0 && (updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              (alternate === null || !memoizedUpdaters.has(alternate)) && memoizedUpdaters.add(fiber);
            }), updaters.clear()), lanes &= ~lane;
          }
      }
      function getTransitionsForLanes(root2, lanes) {
        return null;
      }
      var DiscreteEventPriority = SyncLane, ContinuousEventPriority = InputContinuousLane, DefaultEventPriority = DefaultLane, IdleEventPriority = IdleLane, currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          return currentUpdatePriority = priority, fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a9, b5) {
        return a9 !== 0 && a9 < b5 ? a9 : b5;
      }
      function lowerEventPriority(a9, b5) {
        return a9 === 0 || a9 > b5 ? a9 : b5;
      }
      function isHigherEventPriority(a9, b5) {
        return a9 !== 0 && a9 < b5;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        return isHigherEventPriority(DiscreteEventPriority, lane) ? isHigherEventPriority(ContinuousEventPriority, lane) ? includesNonIdleWork(lane) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = !1, queuedDiscreteEvents = [], queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            _fiber2 !== null && attemptContinuousHydration(_fiber2);
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        return targetContainer !== null && targetContainers.indexOf(targetContainer) === -1 && targetContainers.push(targetContainer), existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent), !0;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent), !0;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent), !0;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent, pointerId = pointerEvent.pointerId;
            return queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent)), !0;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent, _pointerId2 = _pointerEvent.pointerId;
            return queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent)), !0;
          }
        }
        return !1;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance, attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        for (var updatePriority = getCurrentUpdatePriority$1(), queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        }, i9 = 0; i9 < queuedExplicitHydrationTargets.length && isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i9].priority); i9++)
          ;
        queuedExplicitHydrationTargets.splice(i9, 0, queuedTarget), i9 === 0 && attemptExplicitHydrationTarget(queuedTarget);
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null)
          return !1;
        for (var targetContainers = queuedEvent.targetContainers; targetContainers.length > 0; ) {
          var targetContainer = targetContainers[0], nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            var nativeEvent = queuedEvent.nativeEvent, nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone), nativeEvent.target.dispatchEvent(nativeEventClone), resetReplayingEvent();
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            return _fiber3 !== null && attemptContinuousHydration(_fiber3), queuedEvent.blockedOn = nextBlockedOn, !1;
          }
          targetContainers.shift();
        }
        return !0;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map3) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map3.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = !1, queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null), queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null), queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null), queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap), queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = !0, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i9 = 1; i9 < queuedDiscreteEvents.length; i9++) {
            var queuedEvent = queuedDiscreteEvents[i9];
            queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null);
          }
        }
        queuedFocus !== null && scheduleCallbackIfUnblocked(queuedFocus, unblocked), queuedDrag !== null && scheduleCallbackIfUnblocked(queuedDrag, unblocked), queuedMouse !== null && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock), queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; queuedExplicitHydrationTargets.length > 0; ) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null)
            break;
          attemptExplicitHydrationTarget(nextExplicitTarget), nextExplicitTarget.blockedOn === null && queuedExplicitHydrationTargets.shift();
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig, _enabled = !0;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName), listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        !_enabled || dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          for (; blockedOn !== null; ) {
            var fiber = getInstanceFromNode(blockedOn);
            fiber !== null && attemptSynchronousHydration(fiber);
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), nextBlockedOn === blockedOn)
              break;
            blockedOn = nextBlockedOn;
          }
          blockedOn !== null && nativeEvent.stopPropagation();
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent), targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null)
            targetInst = null;
          else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null)
                return instance;
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2))
                return getContainerFromFiber(nearestMounted);
              targetInst = null;
            } else
              nearestMounted !== targetInst && (targetInst = null);
          }
        }
        return return_targetInst = targetInst, null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, !1), listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, !0), listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          capture: !0,
          passive
        }), listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          passive
        }), listener;
      }
      var root = null, startText = null, fallbackText = null;
      function initialize(nativeEventTarget) {
        return root = nativeEventTarget, startText = getText(), !0;
      }
      function reset() {
        root = null, startText = null, fallbackText = null;
      }
      function getData() {
        if (fallbackText)
          return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = getText(), endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++)
          ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
          ;
        var sliceTail = end > 1 ? 1 - end : void 0;
        return fallbackText = endValue.slice(start, sliceTail), fallbackText;
      }
      function getText() {
        return "value" in root ? root.value : root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode, keyCode = nativeEvent.keyCode;
        return "charCode" in nativeEvent ? (charCode = nativeEvent.charCode, charCode === 0 && keyCode === 13 && (charCode = 13)) : charCode = keyCode, charCode === 10 && (charCode = 13), charCode >= 32 || charCode === 13 ? charCode : 0;
      }
      function functionThatReturnsTrue() {
        return !0;
      }
      function functionThatReturnsFalse() {
        return !1;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName, this._targetInst = targetInst, this.type = reactEventType, this.nativeEvent = nativeEvent, this.target = nativeEventTarget, this.currentTarget = null;
          for (var _propName in Interface)
            if (!!Interface.hasOwnProperty(_propName)) {
              var normalize = Interface[_propName];
              normalize ? this[_propName] = normalize(nativeEvent) : this[_propName] = nativeEvent[_propName];
            }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === !1;
          return defaultPrevented ? this.isDefaultPrevented = functionThatReturnsTrue : this.isDefaultPrevented = functionThatReturnsFalse, this.isPropagationStopped = functionThatReturnsFalse, this;
        }
        return assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = !0;
            var event2 = this.nativeEvent;
            !event2 || (event2.preventDefault ? event2.preventDefault() : typeof event2.returnValue != "unknown" && (event2.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event2 = this.nativeEvent;
            !event2 || (event2.stopPropagation ? event2.stopPropagation() : typeof event2.cancelBubble != "unknown" && (event2.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        }), SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event2) {
          return event2.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      }, SyntheticEvent2 = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent;
      function updateMouseMovementPolyfillState(event2) {
        event2 !== lastMouseEvent && (lastMouseEvent && event2.type === "mousemove" ? (lastMovementX = event2.screenX - lastMouseEvent.screenX, lastMovementY = event2.screenY - lastMouseEvent.screenY) : (lastMovementX = 0, lastMovementY = 0), lastMouseEvent = event2);
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event2) {
          return event2.relatedTarget === void 0 ? event2.fromElement === event2.srcElement ? event2.toElement : event2.fromElement : event2.relatedTarget;
        },
        movementX: function(event2) {
          return "movementX" in event2 ? event2.movementX : (updateMouseMovementPolyfillState(event2), lastMovementX);
        },
        movementY: function(event2) {
          return "movementY" in event2 ? event2.movementY : lastMovementY;
        }
      }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event2) {
          return "clipboardData" in event2 ? event2.clipboardData : window.clipboardData;
        }
      }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified")
            return key;
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        return nativeEvent.type === "keydown" || nativeEvent.type === "keyup" ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this, nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState)
          return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : !1;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event2) {
          return event2.type === "keypress" ? getEventCharCode(event2) : 0;
        },
        keyCode: function(event2) {
          return event2.type === "keydown" || event2.type === "keyup" ? event2.keyCode : 0;
        },
        which: function(event2) {
          return event2.type === "keypress" ? getEventCharCode(event2) : event2.type === "keydown" || event2.type === "keyup" ? event2.keyCode : 0;
        }
      }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event2) {
          return "deltaX" in event2 ? event2.deltaX : "wheelDeltaX" in event2 ? -event2.wheelDeltaX : 0;
        },
        deltaY: function(event2) {
          return "deltaY" in event2 ? event2.deltaY : "wheelDeltaY" in event2 ? -event2.wheelDeltaY : "wheelDelta" in event2 ? -event2.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window, documentMode = null;
      canUseDOM2 && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = !1;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return !0;
          default:
            return !1;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        return typeof detail == "object" && "data" in detail ? detail.data : null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = !1;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType, fallbackData;
        if (canUseCompositionEvent ? eventType = getCompositionEventType(domEventName) : isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : isFallbackCompositionStart(domEventName, nativeEvent) && (eventType = "onCompositionStart"), !eventType)
          return null;
        useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) && (!isComposing && eventType === "onCompositionStart" ? isComposing = initialize(nativeEventTarget) : eventType === "onCompositionEnd" && isComposing && (fallbackData = getData()));
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event2 = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          if (dispatchQueue.push({
            event: event2,
            listeners
          }), fallbackData)
            event2.data = fallbackData;
          else {
            var customData = getDataFromCustomEvent(nativeEvent);
            customData !== null && (event2.data = customData);
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            return which !== SPACEBAR_CODE ? null : (hasSpaceKeypress = !0, SPACEBAR_CHAR);
          case "textInput":
            var chars = nativeEvent.data;
            return chars === SPACEBAR_CHAR && hasSpaceKeypress ? null : chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            return reset(), isComposing = !1, chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1)
                return nativeEvent.char;
              if (nativeEvent.which)
                return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent ? chars = getNativeBeforeInputChars(domEventName, nativeEvent) : chars = getFallbackBeforeInputChars(domEventName, nativeEvent), !chars)
          return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event2 = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: event2,
            listeners
          }), event2.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "input" ? !!supportedInputTypes[elem.type] : nodeName === "textarea";
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM2)
          return !1;
        var eventName = "on" + eventNameSuffix, isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;"), isSupported = typeof element[eventName] == "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event2 = new SyntheticEvent2("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event: event2,
            listeners
          });
        }
      }
      var activeElement = null, activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)), batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode))
          return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change")
          return targetInst;
      }
      var isInputEventSupported = !1;
      canUseDOM2 && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9));
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target, activeElementInst = targetInst, activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        !activeElement || (activeElement.detachEvent("onpropertychange", handlePropertyChange), activeElement = null, activeElementInst = null);
      }
      function handlePropertyChange(nativeEvent) {
        nativeEvent.propertyName === "value" && getInstIfValueChanged(activeElementInst) && manualDispatchChangeEvent(nativeEvent);
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        domEventName === "focusin" ? (stopWatchingForValueChange(), startWatchingForValueChange(target, targetInst)) : domEventName === "focusout" && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
          return getInstIfValueChanged(activeElementInst);
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click")
          return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change")
          return getInstIfValueChanged(targetInst);
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        !state || !state.controlled || node.type !== "number" || setDefaultValue(node, "number", node.value);
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window, getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode) ? getTargetInstFunc = getTargetInstForChangeEvent : isTextInputElement(targetNode) ? isInputEventSupported ? getTargetInstFunc = getTargetInstForInputOrChangeEvent : (getTargetInstFunc = getTargetInstForInputEventPolyfill, handleEventFunc = handleEventsForInputEventPolyfill) : shouldUseClickEvent(targetNode) && (getTargetInstFunc = getTargetInstForClickEvent), getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        handleEventFunc && handleEventFunc(domEventName, targetNode, targetInst), domEventName === "focusout" && handleControlledInputBlur(targetNode);
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]), registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]), registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]), registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover", isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related && (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)))
            return;
        }
        if (!(!isOutEvent && !isOverEvent)) {
          var win;
          if (nativeEventTarget.window === nativeEventTarget)
            win = nativeEventTarget;
          else {
            var doc = nativeEventTarget.ownerDocument;
            doc ? win = doc.defaultView || doc.parentWindow : win = window;
          }
          var from, to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            if (from = targetInst, to = _related ? getClosestInstanceFromNode(_related) : null, to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) && (to = null);
            }
          } else
            from = null, to = targetInst;
          if (from !== to) {
            var SyntheticEventCtor = SyntheticMouseEvent, leaveEventType = "onMouseLeave", enterEventType = "onMouseEnter", eventTypePrefix = "mouse";
            (domEventName === "pointerout" || domEventName === "pointerover") && (SyntheticEventCtor = SyntheticPointerEvent, leaveEventType = "onPointerLeave", enterEventType = "onPointerEnter", eventTypePrefix = "pointer");
            var fromNode = from == null ? win : getNodeFromInstance(from), toNode = to == null ? win : getNodeFromInstance(to), leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode, leave.relatedTarget = toNode;
            var enter = null, nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode, enterEvent.relatedTarget = fromNode, enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
        }
      }
      function is2(x5, y4) {
        return x5 === y4 && (x5 !== 0 || 1 / x5 === 1 / y4) || x5 !== x5 && y4 !== y4;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is2;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB))
          return !0;
        if (typeof objA != "object" || objA === null || typeof objB != "object" || objB === null)
          return !1;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length)
          return !1;
        for (var i9 = 0; i9 < keysA.length; i9++) {
          var currentKey = keysA[i9];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return !1;
        }
        return !0;
      }
      function getLeafNode(node) {
        for (; node && node.firstChild; )
          node = node.firstChild;
        return node;
      }
      function getSiblingNode(node) {
        for (; node; ) {
          if (node.nextSibling)
            return node.nextSibling;
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        for (var node = getLeafNode(root2), nodeStart = 0, nodeEnd = 0; node; ) {
          if (node.nodeType === TEXT_NODE) {
            if (nodeEnd = nodeStart + node.textContent.length, nodeStart <= offset && nodeEnd >= offset)
              return {
                node,
                offset: offset - nodeStart
              };
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument, win = ownerDocument && ownerDocument.defaultView || window, selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0)
          return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType, focusNode.nodeType;
        } catch {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length2 = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = outerNode, parentNode = null;
        outer:
          for (; ; ) {
            for (var next = null; node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE) && (start = length2 + anchorOffset), node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE) && (end = length2 + focusOffset), node.nodeType === TEXT_NODE && (length2 += node.nodeValue.length), (next = node.firstChild) !== null; )
              parentNode = node, node = next;
            for (; ; ) {
              if (node === outerNode)
                break outer;
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset && (start = length2), parentNode === focusNode && ++indexWithinFocus === focusOffset && (end = length2), (next = node.nextSibling) !== null)
                break;
              node = parentNode, parentNode = node.parentNode;
            }
            node = next;
          }
        return start === -1 || end === -1 ? null : {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document, win = doc && doc.defaultView || window;
        if (!!win.getSelection) {
          var selection = win.getSelection(), length2 = node.textContent.length, start = Math.min(offsets.start, length2), end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start, start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start), endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset)
              return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset), selection.removeAllRanges(), start > end ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        return !outerNode || !innerNode ? !1 : outerNode === innerNode ? !0 : isTextNode(outerNode) ? !1 : isTextNode(innerNode) ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : !1;
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href == "string";
        } catch {
          return !1;
        }
      }
      function getActiveElementDeep() {
        for (var win = window, element = getActiveElement(); element instanceof win.HTMLIFrameElement; ) {
          if (isSameOriginFrame(element))
            win = element.contentWindow;
          else
            return element;
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem) && setSelection(priorFocusedElem, priorSelectionRange);
          for (var ancestors = [], ancestor = priorFocusedElem; ancestor = ancestor.parentNode; )
            ancestor.nodeType === ELEMENT_NODE && ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          typeof priorFocusedElem.focus == "function" && priorFocusedElem.focus();
          for (var i9 = 0; i9 < ancestors.length; i9++) {
            var info = ancestors[i9];
            info.element.scrollLeft = info.left, info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection2(input) {
        var selection;
        return "selectionStart" in input ? selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        } : selection = getOffsets(input), selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start, end = offsets.end;
        end === void 0 && (end = start), "selectionStart" in input ? (input.selectionStart = start, input.selectionEnd = Math.min(end, input.value.length)) : setOffsets(input, offsets);
      }
      var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null, activeElementInst$1 = null, lastSelection = null, mouseDown = !1;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node))
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        var win = node.ownerDocument && node.ownerDocument.defaultView || window, selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (!(mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc))) {
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event2 = new SyntheticEvent2("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: event2,
                listeners
              }), event2.target = activeElement$1;
            }
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            (isTextInputElement(targetNode) || targetNode.contentEditable === "true") && (activeElement$1 = targetNode, activeElementInst$1 = targetInst, lastSelection = null);
            break;
          case "focusout":
            activeElement$1 = null, activeElementInst$1 = null, lastSelection = null;
            break;
          case "mousedown":
            mouseDown = !0;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = !1, constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent)
              break;
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        return prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase(), prefixes2["Webkit" + styleProp] = "webkit" + eventName, prefixes2["Moz" + styleProp] = "moz" + eventName, prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      }, prefixedEventNames = {}, style = {};
      canUseDOM2 && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName])
          return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName])
          return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName), registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i9 = 0; i9 < simpleEventPluginEvents.length; i9++) {
          var eventName = simpleEventPluginEvents[i9], domEventName = eventName.toLowerCase(), capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd"), registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration"), registerSimpleEvent(ANIMATION_START, "onAnimationStart"), registerSimpleEvent("dblclick", "onDoubleClick"), registerSimpleEvent("focusin", "onFocus"), registerSimpleEvent("focusout", "onBlur"), registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName !== void 0) {
          var SyntheticEventCtor = SyntheticEvent2, reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0)
                return;
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2)
                return;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll", _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
      }
      registerSimpleEvents(), registerEvents$2(), registerEvents$1(), registerEvents$3(), registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        shouldProcessPolyfillPlugins && (extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget));
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event2, listener, currentTarget) {
        var type = event2.type || "unknown-event";
        event2.currentTarget = currentTarget, invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event2), event2.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event2, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase)
          for (var i9 = dispatchListeners.length - 1; i9 >= 0; i9--) {
            var _dispatchListeners$i = dispatchListeners[i9], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event2.isPropagationStopped())
              return;
            executeDispatch(event2, listener, currentTarget), previousInstance = instance;
          }
        else
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event2.isPropagationStopped())
              return;
            executeDispatch(event2, _listener, _currentTarget), previousInstance = _instance;
          }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        for (var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0, i9 = 0; i9 < dispatchQueue.length; i9++) {
          var _dispatchQueue$i = dispatchQueue[i9], event2 = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event2, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags), processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        nonDelegatedEvents.has(domEventName) || error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = !1, listenerSet = getEventListenerSet(targetElement), listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener), listenerSet.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= IS_CAPTURE_PHASE), addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = !0, allNativeEvents.forEach(function(domEventName) {
            domEventName !== "selectionchange" && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, !1, rootContainerElement), listenToNativeEvent(domEventName, !0, rootContainerElement));
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          ownerDocument !== null && (ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = !0, listenToNativeEvent("selectionchange", !1, ownerDocument)));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags), isPassiveListener = void 0;
        passiveBrowserEventsSupported && (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") && (isPassiveListener = !0), targetContainer = targetContainer;
        var unsubscribeListener;
        isCapturePhaseListener ? isPassiveListener !== void 0 ? unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener) : isPassiveListener !== void 0 ? unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              for (; ; ) {
                if (node === null)
                  return;
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode))
                    break;
                  if (nodeTag === HostPortal)
                    for (var grandNode = node.return; grandNode !== null; ) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode))
                          return;
                      }
                      grandNode = grandNode.return;
                    }
                  for (; container !== null; ) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null)
                      return;
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        for (var captureName = reactName !== null ? reactName + "Capture" : null, reactEventName = inCapturePhase ? captureName : reactName, listeners = [], instance = targetFiber, lastHostComponent = null; instance !== null; ) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null && (lastHostComponent = stateNode, reactEventName !== null)) {
            var listener = getListener(instance, reactEventName);
            listener != null && listeners.push(createDispatchListener(instance, listener, lastHostComponent));
          }
          if (accumulateTargetOnly)
            break;
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = [], instance = targetFiber; instance !== null; ) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode, captureListener = getListener(instance, captureName);
            captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            var bubbleListener = getListener(instance, reactName);
            bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null)
          return null;
        do
          inst = inst.return;
        while (inst && inst.tag !== HostComponent);
        return inst || null;
      }
      function getLowestCommonAncestor(instA, instB) {
        for (var nodeA = instA, nodeB = instB, depthA = 0, tempA = nodeA; tempA; tempA = getParent(tempA))
          depthA++;
        for (var depthB = 0, tempB = nodeB; tempB; tempB = getParent(tempB))
          depthB++;
        for (; depthA - depthB > 0; )
          nodeA = getParent(nodeA), depthA--;
        for (; depthB - depthA > 0; )
          nodeB = getParent(nodeB), depthB--;
        for (var depth = depthA; depth--; ) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate)
            return nodeA;
          nodeA = getParent(nodeA), nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event2, target, common, inCapturePhase) {
        for (var registrationName = event2._reactName, listeners = [], instance = target; instance !== null && instance !== common; ) {
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common)
            break;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        listeners.length !== 0 && dispatchQueue.push({
          event: event2,
          listeners
        });
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        from !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, !1), to !== null && enterEvent !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, !0);
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = !1, DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML", SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", AUTOFOCUS = "autoFocus", CHILDREN = "children", STYLE = "style", HTML$1 = "__html", warnedUnknownTags, validatePropertiesInDevelopment, warnForPropDifference, warnForExtraAttributes, warnForInvalidEventListener, canDiffStyleForHydrationWarning, normalizeHTML;
      warnedUnknownTags = {
        dialog: !0,
        webview: !0
      }, validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      }, canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode, warnForPropDifference = function(propName, serverValue, clientValue) {
        if (!didWarnInvalidHydration) {
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          normalizedServerValue !== normalizedClientValue && (didWarnInvalidHydration = !0, error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue)));
        }
      }, warnForExtraAttributes = function(attributeNames) {
        if (!didWarnInvalidHydration) {
          didWarnInvalidHydration = !0;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          }), error("Extra attributes from the server: %s", names);
        }
      }, warnForInvalidEventListener = function(registrationName, listener) {
        listener === !1 ? error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
      }, normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        return testElement.innerHTML = html, testElement.innerHTML;
      };
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup == "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText), normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText !== normalizedClientText && (shouldWarnDev && (didWarnInvalidHydration || (didWarnInvalidHydration = !0, error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText))), isConcurrentMode && enableClientRenderFallbackOnTextMismatch))
          throw new Error("Text content does not match server-rendered HTML.");
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop4() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop4;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps)
          if (!!nextProps.hasOwnProperty(propKey)) {
            var nextProp = nextProps[propKey];
            if (propKey === STYLE)
              nextProp && Object.freeze(nextProp), setValueForStyles(domElement, nextProp);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              nextHtml != null && setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN)
              if (typeof nextProp == "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                canSetTextContent && setTextContent(domElement, nextProp);
              } else
                typeof nextProp == "number" && setTextContent(domElement, "" + nextProp);
            else
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)) : nextProp != null && setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag));
          }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i9 = 0; i9 < updatePayload.length; i9 += 2) {
          var propKey = updatePayload[i9], propValue = updatePayload[i9 + 1];
          propKey === STYLE ? setValueForStyles(domElement, propValue) : propKey === DANGEROUSLY_SET_INNER_HTML ? setInnerHTML(domElement, propValue) : propKey === CHILDREN ? setTextContent(domElement, propValue) : setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
      function createElement9(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag, ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement), domElement, namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE && (namespaceURI = getIntrinsicNamespace(type)), namespaceURI === HTML_NAMESPACE) {
          if (isCustomComponentTag = isCustomComponent(type, props), !isCustomComponentTag && type !== type.toLowerCase() && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is == "string")
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          else if (domElement = ownerDocument.createElement(type), type === "select") {
            var node = domElement;
            props.multiple ? node.multiple = !0 : props.size && (node.size = props.size);
          }
        } else
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        return namespaceURI === HTML_NAMESPACE && !isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type) && (warnedUnknownTags[type] = !0, error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type)), domElement;
      }
      function createTextNode(text2, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text2);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement), props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i9 = 0; i9 < mediaEventTypes.length; i9++)
              listenToNonDelegatedEvent(mediaEventTypes[i9], domElement);
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement), props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement), props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps), props = getHostProps(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps), props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), props = getHostProps$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), props = getHostProps$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        switch (assertValidProps(tag, props), setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, !1);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            typeof props.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null, lastProps, nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps), nextProps = getHostProps(domElement, nextRawProps), updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps), nextProps = getHostProps$1(domElement, nextRawProps), updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps), nextProps = getHostProps$2(domElement, nextRawProps), updatePayload = [];
            break;
          default:
            lastProps = lastRawProps, nextProps = nextRawProps, typeof lastProps.onClick != "function" && typeof nextProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey, styleName, styleUpdates = null;
        for (propKey in lastProps)
          if (!(nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null))
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle)
                lastStyle.hasOwnProperty(styleName) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
            } else
              propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? updatePayload || (updatePayload = []) : (updatePayload = updatePayload || []).push(propKey, null));
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey], lastProp = lastProps != null ? lastProps[propKey] : void 0;
          if (!(!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null))
            if (propKey === STYLE)
              if (nextProp && Object.freeze(nextProp), lastProp) {
                for (styleName in lastProp)
                  lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName)) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
                for (styleName in nextProp)
                  nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName] && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = nextProp[styleName]);
              } else
                styleUpdates || (updatePayload || (updatePayload = []), updatePayload.push(propKey, styleUpdates)), styleUpdates = nextProp;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0, lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              nextHtml != null && lastHtml !== nextHtml && (updatePayload = updatePayload || []).push(propKey, nextHtml);
            } else
              propKey === CHILDREN ? (typeof nextProp == "string" || typeof nextProp == "number") && (updatePayload = updatePayload || []).push(propKey, "" + nextProp) : propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || (registrationNameDependencies.hasOwnProperty(propKey) ? (nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)), !updatePayload && lastProp !== nextProp && (updatePayload = [])) : (updatePayload = updatePayload || []).push(propKey, nextProp));
        }
        return styleUpdates && (validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]), (updatePayload = updatePayload || []).push(STYLE, styleUpdates)), updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null && updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps), isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        switch (updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag), tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          return possibleStandardNames.hasOwnProperty(lowerCasedName) && possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag, extraAttributeNames;
        switch (isCustomComponentTag = isCustomComponent(tag, rawProps), validatePropertiesInDevelopment(tag, rawProps), tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i9 = 0; i9 < mediaEventTypes.length; i9++)
              listenToNonDelegatedEvent(mediaEventTypes[i9], domElement);
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = /* @__PURE__ */ new Set();
          for (var attributes = domElement.attributes, _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps)
          if (!!rawProps.hasOwnProperty(propKey)) {
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN)
              typeof nextProp == "string" ? domElement.textContent !== nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, nextProp]) : typeof nextProp == "number" && domElement.textContent !== "" + nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, "" + nextProp]);
            else if (registrationNameDependencies.hasOwnProperty(propKey))
              nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement));
            else if (shouldWarnDev && !0 && typeof isCustomComponentTag == "boolean") {
              var serverValue = void 0, propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0) {
                if (!(propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")) {
                  if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML, nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                    if (nextHtml != null) {
                      var expectedHTML = normalizeHTML(domElement, nextHtml);
                      expectedHTML !== serverHTML && warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  } else if (propKey === STYLE) {
                    if (extraAttributeNames.delete(propKey), canDiffStyleForHydrationWarning) {
                      var expectedStyle = createDangerousStringForStyles(nextProp);
                      serverValue = domElement.getAttribute("style"), expectedStyle !== serverValue && warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  } else if (isCustomComponentTag && !enableCustomElementPropertySupport)
                    extraAttributeNames.delete(propKey.toLowerCase()), serverValue = getValueForAttribute(domElement, propKey, nextProp), nextProp !== serverValue && warnForPropDifference(propKey, serverValue, nextProp);
                  else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = !1;
                    if (propertyInfo !== null)
                      extraAttributeNames.delete(propertyInfo.attributeName), serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    else {
                      var ownNamespace = parentNamespace;
                      if (ownNamespace === HTML_NAMESPACE && (ownNamespace = getIntrinsicNamespace(tag)), ownNamespace === HTML_NAMESPACE)
                        extraAttributeNames.delete(propKey.toLowerCase());
                      else {
                        var standardName = getPossibleStandardName(propKey);
                        standardName !== null && standardName !== propKey && (isMismatchDueToBadCasing = !0, extraAttributeNames.delete(standardName)), extraAttributeNames.delete(propKey);
                      }
                      serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    !dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing && warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
          }
        switch (shouldWarnDev && extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && warnForExtraAttributes(extraAttributeNames), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, !0);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            typeof rawProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text2, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text2;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text2) {
        {
          if (text2 === "" || didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text2, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      }, updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ], buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo), info = {
            tag
          };
          return inScopeTags.indexOf(tag) !== -1 && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null), buttonScopeTags.indexOf(tag) !== -1 && (ancestorInfo.pTagInButtonScope = null), specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p" && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null), ancestorInfo.current = info, tag === "form" && (ancestorInfo.formTag = info), tag === "a" && (ancestorInfo.aTagInScope = info), tag === "button" && (ancestorInfo.buttonTagInScope = info), tag === "nobr" && (ancestorInfo.nobrTagInScope = info), tag === "p" && (ancestorInfo.pTagInButtonScope = info), tag === "li" && (ancestorInfo.listItemTagAutoclosing = info), (tag === "dd" || tag === "dt") && (ancestorInfo.dlItemTagAutoclosing = info), ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return !0;
        }, findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }, didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current, parentTag = parentInfo && parentInfo.tag;
          childText != null && (childTag != null && error("validateDOMNesting: when childText is passed, childTag should be null"), childTag = "#text");
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo, invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo), invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!!invalidParentOrAncestor) {
            var ancestorTag = invalidParentOrAncestor.tag, warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (!didWarn$1[warnKey]) {
              didWarn$1[warnKey] = !0;
              var tagDisplayName = childTag, whitespaceInfo = "";
              if (childTag === "#text" ? /\S/.test(childText) ? tagDisplayName = "Text nodes" : (tagDisplayName = "Whitespace text nodes", whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : tagDisplayName = "<" + childTag + ">", invalidParent) {
                var info = "";
                ancestorTag === "table" && childTag === "tr" && (info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", STYLE$1 = "style", eventsEnabled = null, selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type, namespace, nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance, ownNamespace = container.namespaceURI || null;
            type = container.tagName, namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase(), ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext, namespace = getChildNamespace(parentHostContextDev.namespace, type), ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled(), selectionInformation = getSelectionInformation();
        var activeInstance = null;
        return setEnabled(!1), activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation), setEnabled(eventsEnabled), eventsEnabled = null, selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          if (validateDOMNesting(type, null, hostContextDev.ancestorInfo), typeof props.children == "string" || typeof props.children == "number") {
            var string3 = "" + props.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string3, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement9(type, props, rootContainerInstance, parentNamespace);
        return precacheFiberNode(internalInstanceHandle, domElement), updateFiberProps(domElement, props), domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        switch (setInitialProperties(domElement, type, props, rootContainerInstance), type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return !0;
          default:
            return !1;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children != typeof oldProps.children && (typeof newProps.children == "string" || typeof newProps.children == "number")) {
            var string3 = "" + newProps.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string3, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children == "string" || typeof props.children == "number" || typeof props.dangerouslySetInnerHTML == "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text2, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text2, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text2, rootContainerInstance);
        return precacheFiberNode(internalInstanceHandle, textNode), textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        return currentEvent === void 0 ? DefaultEventPriority : getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout == "function" ? setTimeout : void 0, cancelTimeout = typeof clearTimeout == "function" ? clearTimeout : void 0, noTimeout = -1, localPromise = typeof Promise == "function" ? Promise : void 0, scheduleMicrotask = typeof queueMicrotask == "function" ? queueMicrotask : typeof localPromise < "u" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            newProps.autoFocus && domElement.focus();
            return;
          case "img": {
            newProps.src && (domElement.src = newProps.src);
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps), updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        container.nodeType === COMMENT_NODE ? (parentNode = container.parentNode, parentNode.insertBefore(child, container)) : (parentNode = container, parentNode.appendChild(child));
        var reactRootContainer = container._reactRootContainer;
        reactRootContainer == null && parentNode.onclick === null && trapClickOnNonInteractiveElement(parentNode);
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        container.nodeType === COMMENT_NODE ? container.parentNode.insertBefore(child, beforeChild) : container.insertBefore(child, beforeChild);
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        container.nodeType === COMMENT_NODE ? container.parentNode.removeChild(child) : container.removeChild(child);
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, depth = 0;
        do {
          var nextNode = node.nextSibling;
          if (parentInstance.removeChild(node), nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA)
              if (depth === 0) {
                parentInstance.removeChild(nextNode), retryIfBlockedOn(suspenseInstance);
                return;
              } else
                depth--;
            else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) && depth++;
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        container.nodeType === COMMENT_NODE ? clearSuspenseBoundary(container.parentNode, suspenseInstance) : container.nodeType === ELEMENT_NODE && clearSuspenseBoundary(container, suspenseInstance), retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        typeof style2.setProperty == "function" ? style2.setProperty("display", "none", "important") : style2.display = "none";
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1], display = styleProp != null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text2) {
        textInstance.nodeValue = text2;
      }
      function clearContainer(container) {
        container.nodeType === ELEMENT_NODE ? container.textContent = "" : container.nodeType === DOCUMENT_NODE && container.documentElement && container.removeChild(container.documentElement);
      }
      function canHydrateInstance(instance, type, props) {
        return instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase() ? null : instance;
      }
      function canHydrateTextInstance(instance, text2) {
        return text2 === "" || instance.nodeType !== TEXT_NODE ? null : instance;
      }
      function canHydrateSuspenseInstance(instance) {
        return instance.nodeType !== COMMENT_NODE ? null : instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset2 = instance.nextSibling && instance.nextSibling.dataset, digest, message, stack;
        return dataset2 && (digest = dataset2.dgst, message = dataset2.msg, stack = dataset2.stck), {
          message,
          digest,
          stack
        };
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE)
            break;
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA)
              break;
            if (nodeData === SUSPENSE_END_DATA)
              return null;
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance), updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text2, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text2);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        for (var node = suspenseInstance.nextSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0)
                return getNextHydratableSibling(node);
              depth--;
            } else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) && depth++;
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        for (var node = targetInstance.previousSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0)
                return node;
              depth--;
            } else
              data === SUSPENSE_END_DATA && depth++;
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text2, isConcurrentMode) {
        var shouldWarnDev = !0;
        checkForUnmatchedText(textInstance.nodeValue, text2, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text2, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) {
          var shouldWarnDev = !0;
          checkForUnmatchedText(textInstance.nodeValue, text2, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentContainer, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentContainer, instance);
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentNode, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentNode, instance));
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentInstance, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentInstance, instance));
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text2) {
        warnForInsertedHydratedText(parentContainer, text2);
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text2) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedText(parentNode, text2);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && warnForInsertedHydratedElement(parentInstance, type);
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text2, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && warnForInsertedHydratedText(parentInstance, text2);
      }
      function errorHydratingContainer(parentContainer) {
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey], delete node[internalPropsKey], delete node[internalEventHandlersKey], delete node[internalEventHandlerListenersKey], delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst)
          return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey], targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null)
              for (var suspenseInstance = getParentSuspenseInstance(targetNode); suspenseInstance !== null; ) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst)
                  return targetSuspenseInst;
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            return targetInst;
          }
          targetNode = parentNode, parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        return inst && (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) ? inst : null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText)
          return inst.stateNode;
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        return elementListenerSet === void 0 && (elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set()), elementListenerSet;
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location2, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var valueStack = [], fiberStack;
      fiberStack = [];
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          error("Unexpected pop.");
          return;
        }
        fiber !== fiberStack[index] && error("Unexpected Fiber popped."), cursor.current = valueStack[index], valueStack[index] = null, fiberStack[index] = null, index--;
      }
      function push(cursor, value, fiber) {
        index++, valueStack[index] = cursor.current, fiberStack[index] = fiber, cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      var contextStackCursor = createCursor(emptyContextObject), didPerformWorkStackCursor = createCursor(!1), previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component4, didPushOwnContextIfProvider) {
        return didPushOwnContextIfProvider && isContextProvider(Component4) ? previousContext : contextStackCursor.current;
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type, contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext)
            return instance.__reactInternalMemoizedMaskedChildContext;
          var context2 = {};
          for (var key in contextTypes)
            context2[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context2, "context", name);
          }
          return instance && cacheContext(workInProgress2, unmaskedContext, context2), context2;
        }
      }
      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes != null;
        }
      }
      function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function pushTopLevelContextObject(fiber, context2, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject)
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          push(contextStackCursor, context2, fiber), push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode, childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode, memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress2), push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2), !0;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance)
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress2), pop(contextStackCursor, workInProgress2), push(contextStackCursor, mergedContext, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else
            pop(didPerformWorkStackCursor, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent)
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component4 = node.type;
                if (isContextProvider(Component4))
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0, ConcurrentRoot = 1, syncQueue = null, includesLegacySyncCallbacks = !1, isFlushingSyncQueue = !1;
      function scheduleSyncCallback(callback) {
        syncQueue === null ? syncQueue = [callback] : syncQueue.push(callback);
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = !0, scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        includesLegacySyncCallbacks && flushSyncCallbacks();
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = !0;
          var i9 = 0, previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = !0, queue = syncQueue;
            for (setCurrentUpdatePriority(DiscreteEventPriority); i9 < queue.length; i9++) {
              var callback = queue[i9];
              do
                callback = callback(isSync);
              while (callback !== null);
            }
            syncQueue = null, includesLegacySyncCallbacks = !1;
          } catch (error2) {
            throw syncQueue !== null && (syncQueue = syncQueue.slice(i9 + 1)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority), isFlushingSyncQueue = !1;
          }
        }
        return null;
      }
      var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        return warnIfNotHydrating(), (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        return warnIfNotHydrating(), treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow, idWithLeadingBit = treeContextId, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating(), forkStack[forkStackIndex++] = treeForkCount, forkStack[forkStackIndex++] = treeForkProvider, treeForkProvider = workInProgress2, treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId, baseOverflow = treeContextOverflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index2 + 1, length2 = getBitLength(totalChildren) + baseLength;
        if (length2 > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id, treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          treeContextId = 1 << length2 | _id, treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1, slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks), pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      function getSuspendedTreeContext() {
        return warnIfNotHydrating(), treeContextProvider !== null ? {
          id: treeContextId,
          overflow: treeContextOverflow
        } : null;
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = suspendedContext.id, treeContextOverflow = suspendedContext.overflow, treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        getIsHydrating() || error("Expected to be hydrating. This is a bug in React. Please file an issue.");
      }
      var hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1, hydrationErrors = null;
      function warnIfHydrating() {
        isHydrating && error("We should not be hydrating here. This is a bug in React. Please file a bug.");
      }
      function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = !0;
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, !0;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        return nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, treeContext !== null && restoreSuspendedTreeContext(fiber, treeContext), !0;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance,
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            suspenseState.dehydrated !== null && didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
            break;
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV)
            return;
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type, props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text2 = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text2);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type, _props = fiber.pendingProps, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _type,
                    _props,
                    isConcurrentMode
                  );
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps, _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _text,
                    _isConcurrentMode
                  );
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState, _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type, _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement, warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type, props = fiber.pendingProps, instance = canHydrateInstance(nextInstance, type);
            return instance !== null ? (fiber.stateNode = instance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(instance), !0) : !1;
          }
          case HostText: {
            var text2 = fiber.pendingProps, textInstance = canHydrateTextInstance(nextInstance, text2);
            return textInstance !== null ? (fiber.stateNode = textInstance, hydrationParentFiber = fiber, nextHydratableInstance = null, !0) : !1;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              return dehydratedFragment.return = fiber, fiber.child = dehydratedFragment, hydrationParentFiber = fiber, nextHydratableInstance = null, !0;
            }
            return !1;
          }
          default:
            return !1;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!!isHydrating) {
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode, shouldWarnIfMismatchDev = !didSuspendOrErrorDEV, updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        return fiber.updateQueue = updatePayload, updatePayload !== null;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode, textContent = fiber.memoizedProps, shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null)
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(
                  parentContainer,
                  textInstance,
                  textContent,
                  isConcurrentMode
                );
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode, _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  textInstance,
                  textContent,
                  _isConcurrentMode2
                );
                break;
              }
            }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        for (var parent = fiber.return; parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent; )
          parent = parent.return;
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber)
          return !1;
        if (!isHydrating)
          return popToNextHostParent(fiber), isHydrating = !0, !1;
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance)
            if (shouldClientRenderOnMismatch(fiber))
              warnIfUnhydratedTailNodes(fiber), throwOnHydrationMismatch();
            else
              for (; nextInstance; )
                deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }
        return popToNextHostParent(fiber), fiber.tag === SuspenseComponent ? nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber) : nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        for (var nextInstance = nextHydratableInstance; nextInstance; )
          warnUnhydratedInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
      }
      function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1;
      }
      function upgradeHydrationErrorsToRecoverable() {
        hydrationErrors !== null && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null);
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        hydrationErrors === null ? hydrationErrors = [error2] : hydrationErrors.push(error2);
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          for (var maybeStrictRoot = null, node = fiber; node !== null; )
            node.mode & StrictLegacyMode && (maybeStrictRoot = node), node = node.return;
          return maybeStrictRoot;
        }, setToSortedString = function(set2) {
          var array2 = [];
          return set2.forEach(function(value) {
            array2.push(value);
          }), array2.sort().join(", ");
        }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          didWarnAboutUnsafeLifecycles.has(fiber.type) || (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount == "function" && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps == "function" && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate == "function" && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
        }, ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillMountWarnings.length > 0 && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = []);
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillMountWarnings.length > 0 && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = []);
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillReceivePropsWarnings.length > 0 && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = []);
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0 && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillUpdateWarnings.length > 0 && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = []);
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0 && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = []), UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (!didWarnAboutLegacyContext.has(fiber.type)) {
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext == "function") && (warningsForRoot === void 0 && (warningsForRoot = [], pendingLegacyContextWarning.set(strictRoot, warningsForRoot)), warningsForRoot.push(fiber));
          }
        }, ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length !== 0) {
              var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber), error(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
              } finally {
                resetCurrentFiber();
              }
            }
          });
        }, ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
      }
      function resolveDefaultProps(Component4, baseProps) {
        if (Component4 && Component4.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component4.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null), rendererSigil;
      rendererSigil = {};
      var currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
      function resetContextDependencies() {
        currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
      }
      function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = !0;
      }
      function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = !1;
      }
      function pushProvider(providerFiber, context2, nextValue) {
        push(valueCursor, context2._currentValue, providerFiber), context2._currentValue = nextValue, context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context2._currentRenderer = rendererSigil;
      }
      function popProvider(context2, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber), context2._currentValue = currentValue;
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (var node = parent; node !== null; ) {
          var alternate = node.alternate;
          if (isSubsetOfLanes(node.childLanes, renderLanes2) ? alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2) && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2)) : (node.childLanes = mergeLanes(node.childLanes, renderLanes2), alternate !== null && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2))), node === propagationRoot)
            break;
          node = node.return;
        }
        node !== propagationRoot && error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
      }
      function propagateContextChange(workInProgress2, context2, renderLanes2) {
        propagateContextChange_eager(workInProgress2, context2, renderLanes2);
      }
      function propagateContextChange_eager(workInProgress2, context2, renderLanes2) {
        var fiber = workInProgress2.child;
        for (fiber !== null && (fiber.return = workInProgress2); fiber !== null; ) {
          var nextFiber = void 0, list2 = fiber.dependencies;
          if (list2 !== null) {
            nextFiber = fiber.child;
            for (var dependency = list2.firstContext; dependency !== null; ) {
              if (dependency.context === context2) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2), update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue !== null) {
                    var sharedQueue = updateQueue.shared, pending = sharedQueue.pending;
                    pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2), list2.lanes = mergeLanes(list2.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider)
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null)
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            _alternate !== null && (_alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2), nextFiber = fiber.sibling;
          } else
            nextFiber = fiber.child;
          if (nextFiber !== null)
            nextFiber.return = fiber;
          else
            for (nextFiber = fiber; nextFiber !== null; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return, nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2, lastContextDependency = null, lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          firstContext !== null && (includesSomeLane(dependencies.lanes, renderLanes2) && markWorkInProgressReceivedUpdate(), dependencies.firstContext = null);
        }
      }
      function readContext(context2) {
        isDisallowedContextReadInDEV && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context2._currentValue;
        if (lastFullyObservedContext !== context2) {
          var contextItem = {
            context: context2,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null)
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            lastContextDependency = contextItem, currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        concurrentQueues === null ? concurrentQueues = [queue] : concurrentQueues.push(queue);
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i9 = 0; i9 < concurrentQueues.length; i9++) {
            var queue = concurrentQueues[i9], lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next, lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate, lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, lane)), alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        for (var node = sourceFiber, parent = sourceFiber.return; parent !== null; )
          parent.childLanes = mergeLanes(parent.childLanes, lane), alternate = parent.alternate, alternate !== null ? alternate.childLanes = mergeLanes(alternate.childLanes, lane) : (parent.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = parent.return;
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else
          return null;
      }
      var UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = !1, didWarnUpdateInsideUpdate, currentlyProcessingQueue;
      didWarnUpdateInsideUpdate = !1, currentlyProcessingQueue = null;
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue, currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null)
          return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate && (error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), didWarnUpdateInsideUpdate = !0), isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          return pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update, unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue !== null) {
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null, newLast = null, firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLast === null ? newFirst = newLast = clone : (newLast.next = clone, newLast = clone), update = update.next;
              } while (update !== null);
              newLast === null ? newFirst = newLast = capturedUpdate : (newLast.next = capturedUpdate, newLast = capturedUpdate);
            } else
              newFirst = newLast = capturedUpdate;
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            }, workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        lastBaseUpdate === null ? queue.firstBaseUpdate = capturedUpdate : lastBaseUpdate.next = capturedUpdate, queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload == "function") {
              enterDisallowedContextReadInDEV();
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(!0);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(!1);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate:
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          case UpdateState: {
            var _payload = update.payload, partialState;
            if (typeof _payload == "function") {
              enterDisallowedContextReadInDEV(), partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(!0);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(!1);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else
              partialState = _payload;
            return partialState == null ? prevState : assign({}, prevState, partialState);
          }
          case ForceUpdate:
            return hasForceUpdate = !0, prevState;
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = !1, currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null, lastBaseUpdate === null ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate, lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue, currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            currentLastBaseUpdate !== lastBaseUpdate && (currentLastBaseUpdate === null ? currentQueue.firstBaseUpdate = firstPendingUpdate : currentLastBaseUpdate.next = firstPendingUpdate, currentQueue.lastBaseUpdate = lastPendingUpdate);
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState, newLanes = NoLanes, newBaseState = null, newFirstBaseUpdate = null, newLastBaseUpdate = null, update = firstBaseUpdate;
          do {
            var updateLane = update.lane, updateEventTime = update.eventTime;
            if (isSubsetOfLanes(renderLanes2, updateLane)) {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                effects === null ? queue.effects = [update] : effects.push(update);
              }
            } else {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate === null ? (newFirstBaseUpdate = newLastBaseUpdate = clone, newBaseState = newState) : newLastBaseUpdate = newLastBaseUpdate.next = clone, newLanes = mergeLanes(newLanes, updateLane);
            }
            if (update = update.next, update === null) {
              if (pendingQueue = queue.shared.pending, pendingQueue === null)
                break;
              var _lastPendingUpdate = pendingQueue, _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null, update = _firstPendingUpdate, queue.lastBaseUpdate = _lastPendingUpdate, queue.shared.pending = null;
            }
          } while (!0);
          newLastBaseUpdate === null && (newBaseState = newState), queue.baseState = newBaseState, queue.firstBaseUpdate = newFirstBaseUpdate, queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do
              newLanes = mergeLanes(newLanes, interleaved.lane), interleaved = interleaved.next;
            while (interleaved !== lastInterleaved);
          } else
            firstBaseUpdate === null && (queue.shared.lanes = NoLanes);
          markSkippedUpdateLanes(newLanes), workInProgress2.lanes = newLanes, workInProgress2.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
      }
      function callCallback(callback, context2) {
        if (typeof callback != "function")
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        callback.call(context2);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = !1;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        if (finishedQueue.effects = null, effects !== null)
          for (var i9 = 0; i9 < effects.length; i9++) {
            var effect = effects[i9], callback = effect.callback;
            callback !== null && (effect.callback = null, callCallback(callback, instance));
          }
      }
      var fakeInternalInstance = {}, emptyRefsObject = new React33.Component().refs, didWarnAboutStateAssignmentForComponent, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set(), didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        }, Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: !1,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        }), Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState == null ? prevState : assign({}, prevState, partialState);
        if (workInProgress2.memoizedState = memoizedState, workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "setState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ReplaceState, update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "replaceState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate, callback != null && (warnOnInvalidCallback(callback, "forceUpdate"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markForceUpdateScheduled(fiber, lane);
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate == "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(!0);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(!1);
              }
            }
            shouldUpdate === void 0 && error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
          return shouldUpdate;
        }
        return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater, workInProgress2.stateNode = instance, set(instance, workInProgress2), instance._reactInternalInstance = fakeInternalInstance;
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = !1, unmaskedContext = emptyContextObject, context2 = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        if (typeof contextType == "object" && contextType !== null)
          context2 = readContext(contextType);
        else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes != null, context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context2);
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            instance = new ctor(props, context2);
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return isLegacyContextConsumer && cacheContext(workInProgress2, unmaskedContext, context2), instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps(newProps, nextContext), typeof instance.UNSAFE_componentWillReceiveProps == "function" && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext), instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            didWarnAboutStateAssignmentForComponent.has(componentName) || (didWarnAboutStateAssignmentForComponent.add(componentName), error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName));
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        checkClassInstance(workInProgress2, ctor, newProps);
        var instance = workInProgress2.stateNode;
        instance.props = newProps, instance.state = workInProgress2.memoizedState, instance.refs = emptyRefsObject, initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null)
          instance.context = readContext(contextType);
        else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance), ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), instance.state = workInProgress2.memoizedState), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(workInProgress2, instance), processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), instance.state = workInProgress2.memoizedState), typeof instance.componentDidMount == "function") {
          var fiberFlags = Update;
          fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode, oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (oldProps !== newProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount == "function") {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
          }
          return !1;
        }
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount()), typeof instance.componentDidMount == "function") {
            var _fiberFlags = Update;
            _fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags |= MountLayoutDev), workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount == "function") {
            var _fiberFlags2 = Update;
            _fiberFlags2 |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags2 |= MountLayoutDev), workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState;
        }
        return instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps, oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation)
          return typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), !1;
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        return shouldUpdate ? (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate == "function" || typeof instance.componentWillUpdate == "function") && (typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate(newProps, newState, nextContext), typeof instance.UNSAFE_componentWillUpdate == "function" && instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext)), typeof instance.componentDidUpdate == "function" && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (workInProgress2.flags |= Snapshot)) : (typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState), instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      var didWarnAboutMaps, didWarnAboutGenerators, didWarnAboutStringRefs, ownerHasKeyUseWarning, ownerHasFunctionTypeWarning, warnForMissingKey = function(child, returnFiber) {
      };
      didWarnAboutMaps = !1, didWarnAboutGenerators = !1, didWarnAboutStringRefs = {}, ownerHasKeyUseWarning = {}, ownerHasFunctionTypeWarning = {}, warnForMissingKey = function(child, returnFiber) {
        if (!(child === null || typeof child != "object") && !(!child._store || child._store.validated || child.key != null)) {
          if (typeof child._store != "object")
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = !0;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasKeyUseWarning[componentName] || (ownerHasKeyUseWarning[componentName] = !0, error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
        }
      };
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef != "function" && typeof mixedRef != "object") {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            didWarnAboutStringRefs[componentName] || (error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef), didWarnAboutStringRefs[componentName] = !0);
          }
          if (element._owner) {
            var owner = element._owner, inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent)
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              inst = ownerFiber.stateNode;
            }
            if (!inst)
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            var resolvedInst = inst;
            checkPropStringCoercion(mixedRef, "ref");
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref == "function" && current2.ref._stringRef === stringRef)
              return current2.ref;
            var ref = function(value) {
              var refs = resolvedInst.refs;
              refs === emptyRefsObject && (refs = resolvedInst.refs = {}), value === null ? delete refs[stringRef] : refs[stringRef] = value;
            };
            return ref._stringRef = stringRef, ref;
          } else {
            if (typeof mixedRef != "string")
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            if (!element._owner)
              throw new Error("Element ref was specified as a string (" + mixedRef + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName])
            return;
          ownerHasFunctionTypeWarning[componentName] = !0, error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload, init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!!shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects)
            return null;
          for (var childToDelete = currentFirstChild; childToDelete !== null; )
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(), existingChild = currentFirstChild; existingChild !== null; )
            existingChild.key !== null ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          return clone.index = 0, clone.sibling = null, clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          if (newFiber.index = newIndex, !shouldTrackSideEffects)
            return newFiber.flags |= Forked, lastPlacedIndex;
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            return oldIndex < lastPlacedIndex ? (newFiber.flags |= Placement, lastPlacedIndex) : oldIndex;
          } else
            return newFiber.flags |= Placement, lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          return shouldTrackSideEffects && newFiber.alternate === null && (newFiber.flags |= Placement), newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, textContent);
            return existing.return = returnFiber, existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          if (current2 !== null && (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type)) {
            var existing = useFiber(current2, element.props);
            return existing.ref = coerceRef(returnFiber, current2, element), existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          return created.ref = coerceRef(returnFiber, current2, element), created.return = returnFiber, created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            return existing.return = returnFiber, existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment22) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, fragment);
            return existing.return = returnFiber, existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                return _created.ref = coerceRef(returnFiber, null, newChild), _created.return = returnFiber, _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                return _created2.return = returnFiber, _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              return _created3.return = returnFiber, _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number")
            return key !== null ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild))
              return key !== null ? null : updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child != "object" || child === null)
              return knownKeys;
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key != "string")
                  break;
                if (knownKeys === null) {
                  knownKeys = /* @__PURE__ */ new Set(), knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload, init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var knownKeys = null, i9 = 0; i9 < newChildren.length; i9++) {
            var child = newChildren[i9];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              _newFiber !== null && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            _newFiber2 !== null && (shouldTrackSideEffects && _newFiber2.alternate !== null && existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn != "function")
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          {
            typeof Symbol == "function" && newChildrenIterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), newChildrenIterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren)
              for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null)
            throw new Error("An iterable object provided no iterator.");
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (step.done) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              _newFiber3 !== null && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            _newFiber4 !== null && (shouldTrackSideEffects && _newFiber4.alternate !== null && existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            return existing.return = returnFiber, existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          for (var key = element.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment22) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  return existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
                }
              } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                return _existing.ref = coerceRef(returnFiber, child, element), _existing.return = returnFiber, _existing._debugSource = element._source, _existing._debugOwner = element._owner, _existing;
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            return created.return = returnFiber, created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            return _created4.ref = coerceRef(returnFiber, currentFirstChild, element), _created4.return = returnFiber, _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          for (var key = portal.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key)
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                return existing.return = returnFiber, existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild == "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment && (newChild = newChild.props.children), typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild))
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild))
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "string" && newChild !== "" || typeof newChild == "number" ? placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes)) : (typeof newChild == "function" && warnOnFunctionType(returnFiber), deleteRemainingChildren(returnFiber, currentFirstChild));
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(!0), mountChildFibers = ChildReconciler(!1);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child)
          throw new Error("Resuming work not yet implemented.");
        if (workInProgress2.child !== null) {
          var currentChild = workInProgress2.child, newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          for (workInProgress2.child = newChild, newChild.return = workInProgress2; currentChild.sibling !== null; )
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps), newChild.return = workInProgress2;
          newChild.sibling = null;
        }
      }
      function resetChildFibers(workInProgress2, lanes) {
        for (var child = workInProgress2.child; child !== null; )
          resetWorkInProgress(child, lanes), child = child.sibling;
      }
      var NO_CONTEXT = {}, contextStackCursor$1 = createCursor(NO_CONTEXT), contextFiberStackCursor = createCursor(NO_CONTEXT), rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c9) {
        if (c9 === NO_CONTEXT)
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c9;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber), push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber), push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber), pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context2 = requiredContext(contextStackCursor$1.current);
        return context2;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current), context2 = requiredContext(contextStackCursor$1.current), nextContext = getChildHostContext(context2, fiber.type);
        context2 !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
      }
      var DefaultSuspenseContext = 0, SubtreeSuspenseContextMask = 1, InvisibleParentSuspenseContext = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null)
          return nextState.dehydrated !== null;
        var props = workInProgress2.memoizedProps;
        return !0;
      }
      function findFirstSuspended(row) {
        for (var node = row; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated))
                return node;
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend)
              return node;
          } else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === row)
            return null;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === row)
              return null;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0, HasEffect = 1, Insertion = 2, Layout4 = 4, Passive$1 = 8, workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i9 = 0; i9 < workInProgressSources.length; i9++) {
          var mutableSource = workInProgressSources[i9];
          mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion, version = getVersion(mutableSource._source);
        root2.mutableSourceEagerHydrationData == null ? root2.mutableSourceEagerHydrationData = [mutableSource, version] : root2.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig, didWarnAboutMismatchedHooksForComponent, didWarnUncachedGetSnapshot2;
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      var renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = !1;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev === null ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev !== null && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName && warnOnHookMismatchInDev(hookName));
        }
      }
      function checkDepsAreArrayDev(deps) {
        deps != null && !isArray(deps) && error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName) && (didWarnAboutMismatchedHooksForComponent.add(componentName), hookTypesDev !== null)) {
            for (var table = "", secondColumnStart = 30, i9 = 0; i9 <= hookTypesUpdateIndexDev; i9++) {
              for (var oldHookName = hookTypesDev[i9], newHookName = i9 === hookTypesUpdateIndexDev ? currentHookName : oldHookName, row = i9 + 1 + ". " + oldHookName; row.length < secondColumnStart; )
                row += " ";
              row += newHookName + `
`, table += row;
            }
            error(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies)
          return !1;
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for (var i9 = 0; i9 < prevDeps.length && i9 < nextDeps.length; i9++)
          if (!objectIs(nextDeps[i9], prevDeps[i9]))
            return !1;
        return !0;
      }
      function renderWithHooks(current2, workInProgress2, Component4, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes, currentlyRenderingFiber$1 = workInProgress2, hookTypesDev = current2 !== null ? current2._debugHookTypes : null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.lanes = NoLanes, current2 !== null && current2.memoizedState !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV : hookTypesDev !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV : ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component4(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            if (didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, numberOfReRenders >= RE_RENDER_LIMIT)
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            numberOfReRenders += 1, ignorePreviousDependencies = !1, currentHook = null, workInProgressHook = null, workInProgress2.updateQueue = null, hookTypesUpdateIndexDev = -1, ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV, children = Component4(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, workInProgress2._debugHookTypes = hookTypesDev;
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        if (renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode && error("Internal React error: Expected static flag was missing. Please notify the React team."), didScheduleRenderPhaseUpdate = !1, didRenderTooFewHooks)
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return localIdCounter = 0, didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue, (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update) : workInProgress2.flags &= ~(Passive | Update), current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        if (ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; hook !== null; ) {
            var queue = hook.queue;
            queue !== null && (queue.pending = null), hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = !1;
        }
        renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, currentHookNameInDev = null, isUpdatingOpaqueValueInRenderPhase = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook, workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          current2 !== null ? nextCurrentHook = current2.memoizedState : nextCurrentHook = null;
        } else
          nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null ? nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState : nextWorkInProgressHook = workInProgressHook.next, nextWorkInProgressHook !== null)
          workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook;
        else {
          if (nextCurrentHook === null)
            throw new Error("Rendered more hooks than during the previous render.");
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook : workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook(), initialState;
        init !== void 0 ? initialState = init(initialArg) : initialState = initialArg, hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook, baseQueue = current2.baseQueue, pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next, pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst, pendingQueue.next = baseFirst;
          }
          current2.baseQueue !== baseQueue && error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), current2.baseQueue = baseQueue = pendingQueue, queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next, newState = current2.baseState, newBaseState = null, newBaseQueueFirst = null, newBaseQueueLast = null, update = first;
          do {
            var updateLane = update.lane;
            if (isSubsetOfLanes(renderLanes, updateLane)) {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState)
                newState = update.eagerState;
              else {
                var action4 = update.action;
                newState = reducer(newState, action4);
              }
            } else {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = clone, newBaseState = newState) : newBaseQueueLast = newBaseQueueLast.next = clone, currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane), markSkippedUpdateLanes(updateLane);
            }
            update = update.next;
          } while (update !== null && update !== first);
          newBaseQueueLast === null ? newBaseState = newState : newBaseQueueLast.next = newBaseQueueFirst, objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseState = newBaseState, hook.baseQueue = newBaseQueueLast, queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane), markSkippedUpdateLanes(interleavedLane), interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else
          baseQueue === null && (queue.lanes = NoLanes);
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next, update = firstRenderPhaseUpdate;
          do {
            var action4 = update.action;
            newState = reducer(newState, action4), update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseQueue === null && (hook.baseState = newState), queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook(), nextSnapshot, isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === void 0)
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          nextSnapshot = getServerSnapshot(), didWarnUncachedGetSnapshot2 || nextSnapshot !== getServerSnapshot() && (error("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot2 = !0);
        } else {
          if (nextSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot2) {
            var cachedSnapshot = getSnapshot();
            objectIs(nextSnapshot, cachedSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot2 = !0);
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        return hook.queue = inst, mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null), nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook(), nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot2) {
          var cachedSnapshot = getSnapshot();
          objectIs(nextSnapshot, cachedSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot2 = !0);
        }
        var prevSnapshot = hook.memoizedState, snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        snapshotChanged && (hook.memoizedState = nextSnapshot, markWorkInProgressReceivedUpdate());
        var inst = hook.queue;
        if (updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.stores = [check];
        else {
          var stores = componentUpdateQueue.stores;
          stores === null ? componentUpdateQueue.stores = [check] : stores.push(check);
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot, inst.getSnapshot = getSnapshot, checkIfSnapshotChanged2(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          checkIfSnapshotChanged2(inst) && forceStoreRerender(fiber);
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged2(inst) {
        var latestGetSnapshot = inst.getSnapshot, prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch {
          return !0;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        typeof initialState == "function" && (initialState = initialState()), hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          next: null
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.lastEffect = effect.next = effect;
        else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null)
            componentUpdateQueue.lastEffect = effect.next = effect;
          else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect, effect.next = firstEffect, componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          return hook.memoizedState = _ref2, _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          if (destroy = prevEffect.destroy, nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        return (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode ? mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps) : mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout4, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout4, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref == "function") {
          var refCallback = ref, _inst = create();
          return refCallback(_inst), function() {
            refCallback(null);
          };
        } else if (ref != null) {
          var refObject = ref;
          refObject.hasOwnProperty("current") || error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          var _inst2 = create();
          return refObject.current = _inst2, function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        typeof create != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null, fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout4, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        typeof create != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout4, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        var nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        return hook.memoizedState = value, value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook(), resolvedCurrentHook = currentHook, prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null)
          return hook.memoizedState = value, value;
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane), markSkippedUpdateLanes(deferredLane), hook.baseState = !0;
          }
          return prevValue;
        } else
          return hook.baseState && (hook.baseState = !1, markWorkInProgressReceivedUpdate()), hook.memoizedState = value, value;
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority)), setPending(!0);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          setPending(!1), callback();
        } finally {
          if (setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$2.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(!1), isPending = _mountState[0], setPending = _mountState[1], start = startTransition.bind(null, setPending), hook = mountWorkInProgressHook();
        return hook.memoizedState = start, [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = !1;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
      }
      function mountId() {
        var hook = mountWorkInProgressHook(), root2 = getWorkInProgressRoot(), identifierPrefix = root2.identifierPrefix, id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          localId > 0 && (id += "H" + localId.toString(32)), id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        return hook.memoizedState = id, id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook(), id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue, action4) {
        typeof arguments[3] == "function" && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action: action4,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action4) {
        typeof arguments[3] == "function" && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action: action4,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              prevDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                var currentState = queue.lastRenderedState, eagerState = lastRenderedReducer(currentState, action4);
                if (update.hasEagerState = !0, update.eagerState = eagerState, objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch {
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
        var pending = queue.pending;
        pending === null ? update.next = update : (update.next = pending.next, pending.next = update), queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action4) {
        markStateUpdateScheduled(fiber, lane);
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }, warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context2) {
            return readContext(context2);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountCallback(callback, deps);
          },
          useContext: function(context2) {
            return currentHookNameInDev = "useContext", mountHookTypesDev(), readContext(context2);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", mountHookTypesDev(), checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context2) {
            return readContext(context2);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context2) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context2);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnUpdateInDEV = {
          readContext: function(context2) {
            return readContext(context2);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context2) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context2);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnRerenderInDEV = {
          readContext: function(context2) {
            return readContext(context2);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context2) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context2);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context2) {
            return warnInvalidContextAccess(), readContext(context2);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), mountHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context2) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), mountHookTypesDev(), readContext(context2);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), mountHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context2) {
            return warnInvalidContextAccess(), readContext(context2);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context2) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context2);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context2) {
            return warnInvalidContextAccess(), readContext(context2);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context2) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context2);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now, commitTime = 0, layoutEffectStartTime = -1, profilerStartTime = -1, passiveEffectStartTime = -1, currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        nestedUpdateScheduled = !0;
      }
      function resetNestedUpdateFlag() {
        currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
      }
      function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled, nestedUpdateScheduled = !1;
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1(), fiber.actualStartTime < 0 && (fiber.actualStartTime = now$1());
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime, overrideBaseTime && (fiber.selfBaseDuration = elapsedTime), profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2 !== null && (root2.passiveEffectDuration += elapsedTime);
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode !== null && (parentStateNode.passiveEffectDuration += elapsedTime);
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        for (var child = fiber.child; child; )
          fiber.actualDuration += child.actualDuration, child = child.sibling;
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack ?? null,
          digest: digest ?? null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return !0;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === !1)
            return;
          var error2 = errorInfo.value, source = errorInfo.source, stack = errorInfo.stack, componentStack = stack !== null ? stack : "";
          if (error2 != null && error2._suppressLogging) {
            if (boundary.tag === ClassComponent)
              return;
            console.error(error2);
          }
          var componentName = source ? getComponentNameFromFiber(source) : null, componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:", errorBoundaryMessage;
          if (boundary.tag === HostRoot)
            errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
          else {
            var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        } catch (e5) {
          setTimeout(function() {
            throw e5;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap == "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate, update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        return update.callback = function() {
          onUncaughtError(error2), logCapturedError(fiber, errorInfo);
        }, update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError == "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          }, update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        return inst !== null && typeof inst.componentDidCatch == "function" && (update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo), typeof getDerivedStateFromError != "function" && markLegacyErrorBoundaryAsFailed(this);
          var error$12 = errorInfo.value, stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          }), typeof getDerivedStateFromError != "function" && (includesSomeLane(fiber.lanes, SyncLane) || error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown"));
        }), update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache, threadIDs;
        if (pingCache === null ? (pingCache = root2.pingCache = new PossiblyWeakMap$1(), threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs)) : (threadIDs = pingCache.get(wakeable), threadIDs === void 0 && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs))), !threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = /* @__PURE__ */ new Set();
          updateQueue.add(wakeable), suspenseBoundary.updateQueue = updateQueue;
        } else
          wakeables.add(wakeable);
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          currentSource ? (sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.lanes = currentSource.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null);
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node))
            return node;
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber)
            suspenseBoundary.flags |= ShouldCapture;
          else {
            if (suspenseBoundary.flags |= DidCapture, sourceFiber.flags |= ForceUpdateForLegacySuspense, sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete), sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null)
                sourceFiber.tag = IncompleteClassComponent;
              else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate, enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        return suspenseBoundary.flags |= ShouldCapture, suspenseBoundary.lanes = rootRenderLanes, suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        if (sourceFiber.flags |= Incomplete, isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes), value !== null && typeof value == "object" && typeof value.then == "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber), getIsHydrating() && sourceFiber.mode & ConcurrentMode && markDidThrowWhileHydratingDEV();
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender, markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), suspenseBoundary.mode & ConcurrentMode && attachPingListener(root2, wakeable, rootRenderLanes), attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes), renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            (_suspenseBoundary.flags & ShouldCapture) === NoFlags && (_suspenseBoundary.flags |= ForceClientRender), markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
            return;
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber), renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value, ctor = workInProgress2.type, instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError == "function" || instance !== null && typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update3 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update3);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        return null;
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, didReceiveUpdate = !1, didWarnAboutBadClass, didWarnAboutModulePatternComponent, didWarnAboutContextTypeOnFunctionComponent, didWarnAboutGetDerivedStateOnFunctionComponent, didWarnAboutFunctionRefs, didWarnAboutReassigningProps, didWarnAboutRevealOrder, didWarnAboutTailOptions;
      didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutFunctionRefs = {}, didWarnAboutReassigningProps = !1, didWarnAboutRevealOrder = {}, didWarnAboutTailOptions = {};
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        current2 === null ? workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component4, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component4.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            "prop",
            getComponentNameFromType(Component4)
          );
        }
        var render2 = Component4.render, ref = workInProgress2.ref, nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          setIsRendering(!1);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component4.type;
          if (isSimpleFunctionComponent(type) && Component4.compare === null && Component4.defaultProps === void 0) {
            var resolvedType = type;
            return resolvedType = resolveFunctionForHotReloading(type), workInProgress2.tag = SimpleMemoComponent, workInProgress2.type = resolvedType, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              "prop",
              getComponentNameFromType(type)
            );
          }
          var child = createFiberFromTypeAndProps(Component4.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          return child.ref = workInProgress2.ref, child.return = workInProgress2, workInProgress2.child = child, child;
        }
        {
          var _type = Component4.type, _innerPropTypes = _type.propTypes;
          _innerPropTypes && checkPropTypes(
            _innerPropTypes,
            nextProps,
            "prop",
            getComponentNameFromType(_type)
          );
        }
        var currentChild = current2.child, hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps, compare = Component4.compare;
          if (compare = compare !== null ? compare : shallowEqual, compare(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        return newChild.ref = workInProgress2.ref, newChild.return = workInProgress2, workInProgress2.child = newChild, newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            outerPropTypes && checkPropTypes(
              outerPropTypes,
              nextProps,
              "prop",
              getComponentNameFromType(outerMemoType)
            );
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type)
            if (didReceiveUpdate = !1, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
              (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags && (didReceiveUpdate = !0);
            else
              return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden)
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState, pushRenderLanes(workInProgress2, renderLanes2);
          } else if (includesSomeLane(renderLanes2, OffscreenLane)) {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          } else {
            var spawnedCachePool = null, nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else
              nextBaseLanes = renderLanes2;
            workInProgress2.lanes = workInProgress2.childLanes = OffscreenLane;
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            return workInProgress2.memoizedState = _nextState, workInProgress2.updateQueue = null, pushRenderLanes(workInProgress2, nextBaseLanes), null;
          }
        else {
          var _subtreeRenderLanes;
          prevState !== null ? (_subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2), workInProgress2.memoizedState = null) : _subtreeRenderLanes = renderLanes2, pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) && (workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic);
      }
      function updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component4.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            "prop",
            getComponentNameFromType(Component4)
          );
        }
        var context2;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, !0);
          context2 = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context2, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context2, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          setIsRendering(!1);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateClassComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case !1: {
              var _instance = workInProgress2.stateNode, ctor = workInProgress2.type, tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context), state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case !0: {
              workInProgress2.flags |= DidCapture, workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools"), lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component4.propTypes;
            innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              "prop",
              getComponentNameFromType(Component4)
            );
          }
        }
        var hasContext;
        isContextProvider(Component4) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode, shouldUpdate;
        instance === null ? (resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2), constructClassInstance(workInProgress2, Component4, nextProps), mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2), shouldUpdate = !0) : current2 === null ? shouldUpdate = resumeMountClassInstance(workInProgress2, Component4, nextProps, renderLanes2) : shouldUpdate = updateClassInstance(current2, workInProgress2, Component4, nextProps, renderLanes2);
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          shouldUpdate && inst.props !== nextProps && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component"), didWarnAboutReassigningProps = !0);
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError)
          return hasContext && invalidateContextProvider(workInProgress2, Component4, !1), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component4.getDerivedStateFromError != "function")
          nextChildren = null, stopProfilerTimerIfRunning();
        else {
          markComponentRenderStarted(workInProgress2);
          {
            if (setIsRendering(!0), nextChildren = instance.render(), workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(!0);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(!1);
              }
            }
            setIsRendering(!1);
          }
          markComponentRenderStopped();
        }
        return workInProgress2.flags |= PerformedWork, current2 !== null && didCaptureError ? forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.memoizedState = instance.state, hasContext && invalidateContextProvider(workInProgress2, Component4, !0), workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        root2.pendingContext ? pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context) : root2.context && pushTopLevelContextObject(workInProgress2, root2.context, !1), pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        if (pushHostRootContext(workInProgress2), current2 === null)
          throw new Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress2.pendingProps, prevState = workInProgress2.memoizedState, prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState, root2 = workInProgress2.stateNode, nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: !1,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          }, updateQueue = workInProgress2.updateQueue;
          if (updateQueue.baseState = overrideState, workInProgress2.memoizedState = overrideState, workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            for (var node = child; node; )
              node.flags = node.flags & ~Placement | Hydrating, node = node.sibling;
          }
        } else {
          if (resetHydrationState(), nextChildren === prevChildren)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        return resetHydrationState(), queueHydrationError(recoverableError), workInProgress2.flags |= ForceClientRender, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2), current2 === null && tryToClaimNextHydratableInstance(workInProgress2);
        var type = workInProgress2.type, nextProps = workInProgress2.pendingProps, prevProps = current2 !== null ? current2.memoizedProps : null, nextChildren = nextProps.children, isDirectTextChild = shouldSetTextContent(type, nextProps);
        return isDirectTextChild ? nextChildren = null : prevProps !== null && shouldSetTextContent(type, prevProps) && (workInProgress2.flags |= ContentReset), markRef(current2, workInProgress2), reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        return current2 === null && tryToClaimNextHydratableInstance(workInProgress2), null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, lazyComponent = elementType, payload = lazyComponent._payload, init = lazyComponent._init, Component4 = init(payload);
        workInProgress2.type = Component4;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component4), resolvedProps = resolveDefaultProps(Component4, props), child;
        switch (resolvedTag) {
          case FunctionComponent:
            return validateFunctionComponentInDev(workInProgress2, Component4), workInProgress2.type = Component4 = resolveFunctionForHotReloading(Component4), child = updateFunctionComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2), child;
          case ClassComponent:
            return workInProgress2.type = Component4 = resolveClassForHotReloading(Component4), child = updateClassComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2), child;
          case ForwardRef:
            return workInProgress2.type = Component4 = resolveForwardRefForHotReloading(Component4), child = updateForwardRef(null, workInProgress2, Component4, resolvedProps, renderLanes2), child;
          case MemoComponent: {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component4.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                resolvedProps,
                "prop",
                getComponentNameFromType(Component4)
              );
            }
            return child = updateMemoComponent(
              null,
              workInProgress2,
              Component4,
              resolveDefaultProps(Component4.type, resolvedProps),
              renderLanes2
            ), child;
          }
        }
        var hint = "";
        throw Component4 !== null && typeof Component4 == "object" && Component4.$$typeof === REACT_LAZY_TYPE && (hint = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + Component4 + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component4, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2), workInProgress2.tag = ClassComponent;
        var hasContext;
        return isContextProvider(Component4) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2), constructClassInstance(workInProgress2, Component4, nextProps), mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2), finishClassComponent(null, workInProgress2, Component4, !0, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component4, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, context2;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, !1);
          context2 = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value, hasId;
        markComponentRenderStarted(workInProgress2);
        {
          if (Component4.prototype && typeof Component4.prototype.render == "function") {
            var componentName = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null), setIsRendering(!0), ReactCurrentOwner$1.current = workInProgress2, value = renderWithHooks(null, workInProgress2, Component4, props, context2, renderLanes2), hasId = checkDidRenderIdHook(), setIsRendering(!1);
        }
        if (markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component4) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          workInProgress2.tag = ClassComponent, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null;
          var hasContext = !1;
          return isContextProvider(Component4) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null, initializeUpdateQueue(workInProgress2), adoptClassInstance(workInProgress2, value), mountClassInstance(workInProgress2, Component4, props, renderLanes2), finishClassComponent(null, workInProgress2, Component4, !0, hasContext, renderLanes2);
        } else {
          if (workInProgress2.tag = FunctionComponent, workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              value = renderWithHooks(null, workInProgress2, Component4, props, context2, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          return getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), reconcileChildren(null, workInProgress2, value, renderLanes2), validateFunctionComponentInDev(workInProgress2, Component4), workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component4) {
        {
          if (Component4 && Component4.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component4.displayName || Component4.name || "Component"), workInProgress2.ref !== null) {
            var info = "", ownerName = getCurrentFiberOwnerNameInDevOrNull();
            ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
            var warningKey = ownerName || "", debugSource = workInProgress2._debugSource;
            debugSource && (warningKey = debugSource.fileName + ":" + debugSource.lineNumber), didWarnAboutFunctionRefs[warningKey] || (didWarnAboutFunctionRefs[warningKey] = !0, error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info));
          }
          if (typeof Component4.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component4.contextType == "object" && Component4.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component4) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null)
            return !1;
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        shouldSuspend(workInProgress2) && (workInProgress2.flags |= DidCapture);
        var suspenseContext = suspenseStackCursor.current, showFallback = !1, didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2) ? (showFallback = !0, workInProgress2.flags &= ~DidCapture) : (current2 === null || current2.memoizedState !== null) && (suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext)), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null)
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
          var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), primaryChildFragment = workInProgress2.child;
            return primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackFragment;
          } else
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null)
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback, _nextPrimaryChildren = nextProps.children, fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2), _primaryChildFragment2 = workInProgress2.child, prevOffscreenState = current2.child.memoizedState;
            return _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2), _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children, _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            return workInProgress2.memoizedState = null, _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        return primaryChildFragment.return = workInProgress2, workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode, progressedPrimaryFragment = workInProgress2.child, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment, fallbackChildFragment;
        return (mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null ? (primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = 0, primaryChildFragment.treeBaseDuration = 0), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)) : (primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)), primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode && (primaryChildFragment.lanes = renderLanes2), primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = null, currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          deletions === null ? (workInProgress2.deletions = [currentFallbackChildFragment], workInProgress2.flags |= ChildDeletion) : deletions.push(currentFallbackChildFragment);
        }
        return workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode, currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration, primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration), workInProgress2.deletions = null;
        } else
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps), primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        var fallbackChildFragment;
        return currentFallbackChildFragment !== null ? fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren) : (fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null), fallbackChildFragment.flags |= Placement), fallbackChildFragment.return = workInProgress2, primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        recoverableError !== null && queueHydrationError(recoverableError), reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps, primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        return primaryChildFragment.flags |= Placement, workInProgress2.memoizedState = null, primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        return fallbackChildFragment.flags |= Placement, primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, (workInProgress2.mode & ConcurrentMode) !== NoMode && reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        return (workInProgress2.mode & ConcurrentMode) === NoMode ? (error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), workInProgress2.lanes = SyncLane) : isSuspenseInstanceFallback(suspenseInstance) ? workInProgress2.lanes = DefaultHydrationLane : workInProgress2.lanes = OffscreenLane, null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (didSuspend)
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else {
            if (workInProgress2.memoizedState !== null)
              return workInProgress2.child = current2.child, workInProgress2.flags |= DidCapture, null;
            var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback, fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), _primaryChildFragment4 = workInProgress2.child;
            return _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          }
        else {
          if (warnIfHydrating(), (workInProgress2.mode & ConcurrentMode) === NoMode)
            return retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2,
              null
            );
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest, message = _getSuspenseInstanceF.message, stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            message ? error2 = new Error(message) : error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane), scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture, workInProgress2.child = current2.child;
            var retry2 = retryDehydratedSuspenseBoundary.bind(null, current2);
            return registerSuspenseInstanceRetry(suspenseInstance, retry2), null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            return primaryChildFragment.flags |= Hydrating, primaryChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        for (var node = firstChild; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            state !== null && scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.tag === SuspenseListComponent)
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        for (var row = firstChild, lastContentRow = null; row !== null; ) {
          var currentRow = row.alternate;
          currentRow !== null && findFirstSuspended(currentRow) === null && (lastContentRow = row), row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder])
          if (didWarnAboutRevealOrder[revealOrder] = !0, typeof revealOrder == "string")
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          else
            error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
      function validateTailOptions(tailMode, revealOrder) {
        tailMode !== void 0 && !didWarnAboutTailOptions[tailMode] && (tailMode !== "collapsed" && tailMode !== "hidden" ? (didWarnAboutTailOptions[tailMode] = !0, error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode)) : revealOrder !== "forwards" && revealOrder !== "backwards" && (didWarnAboutTailOptions[tailMode] = !0, error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode)));
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot), isIterable = !isAnArray && typeof getIteratorFn(childSlot) == "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            return error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type), !1;
          }
        }
        return !0;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== !1)
          if (isArray(children)) {
            for (var i9 = 0; i9 < children.length; i9++)
              if (!validateSuspenseListNestedChild(children[i9], i9))
                return;
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn == "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator)
                for (var step = childrenIterator.next(), _i = 0; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i))
                    return;
                  _i++;
                }
            } else
              error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
          }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        renderState === null ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children;
        validateRevealOrder(revealOrder), validateTailOptions(tailMode, revealOrder), validateSuspenseListChildren(newChildren, revealOrder), reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current, shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback)
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback), workInProgress2.flags |= DidCapture;
        else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          didSuspendBefore && propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        if (pushSuspenseContext(workInProgress2, suspenseContext), (workInProgress2.mode & ConcurrentMode) === NoMode)
          workInProgress2.memoizedState = null;
        else
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child), tail;
              lastContentRow === null ? (tail = workInProgress2.child, workInProgress2.child = null) : (tail = lastContentRow.sibling, lastContentRow.sibling = null), initSuspenseListRenderState(
                workInProgress2,
                !1,
                tail,
                lastContentRow,
                tailMode
              );
              break;
            }
            case "backwards": {
              var _tail = null, row = workInProgress2.child;
              for (workInProgress2.child = null; row !== null; ) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail, _tail = row, row = nextRow;
              }
              initSuspenseListRenderState(
                workInProgress2,
                !0,
                _tail,
                null,
                tailMode
              );
              break;
            }
            case "together": {
              initSuspenseListRenderState(
                workInProgress2,
                !1,
                null,
                null,
                void 0
              );
              break;
            }
            default:
              workInProgress2.memoizedState = null;
          }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        return current2 === null ? workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = !1;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type, context2 = providerType._context, newProps = workInProgress2.pendingProps, oldProps = workInProgress2.memoizedProps, newValue = newProps.value;
        {
          "value" in newProps || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = !0, error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
          var providerPropTypes = workInProgress2.type.propTypes;
          providerPropTypes && checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
        if (pushProvider(workInProgress2, context2, newValue), oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged())
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else
            propagateContextChange(workInProgress2, context2, renderLanes2);
        }
        var newChildren = newProps.children;
        return reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = !1;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context2 = workInProgress2.type;
        context2._context === void 0 ? context2 !== context2.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context2 = context2._context;
        var newProps = workInProgress2.pendingProps, render2 = newProps.children;
        typeof render2 != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context2);
        markComponentRenderStarted(workInProgress2);
        var newChildren;
        return ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), newChildren = render2(newValue), setIsRendering(!1), markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = !0;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        (workInProgress2.mode & ConcurrentMode) === NoMode && current2 !== null && (current2.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement);
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        return current2 !== null && (workInProgress2.dependencies = current2.dependencies), stopProfilerTimerIfRunning(), markSkippedUpdateLanes(workInProgress2.lanes), includesSomeLane(renderLanes2, workInProgress2.childLanes) ? (cloneChildFibers(current2, workInProgress2), workInProgress2.child) : null;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null)
            throw new Error("Cannot swap the root fiber.");
          if (current2.alternate = null, oldWorkInProgress.alternate = null, newWorkInProgress.index = oldWorkInProgress.index, newWorkInProgress.sibling = oldWorkInProgress.sibling, newWorkInProgress.return = oldWorkInProgress.return, newWorkInProgress.ref = oldWorkInProgress.ref, oldWorkInProgress === returnFiber.child)
            returnFiber.child = newWorkInProgress;
          else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null)
              throw new Error("Expected parent to have a child.");
            for (; prevSibling.sibling !== oldWorkInProgress; )
              if (prevSibling = prevSibling.sibling, prevSibling === null)
                throw new Error("Expected to find the previous sibling.");
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          return deletions === null ? (returnFiber.deletions = [current2], returnFiber.flags |= ChildDeletion) : deletions.push(current2), newWorkInProgress.flags |= Placement, newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        return !!includesSomeLane(updateLanes, renderLanes2);
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component4 = workInProgress2.type;
            isContextProvider(Component4) && pushContextProvider(workInProgress2);
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value, context2 = workInProgress2.type._context;
            pushProvider(workInProgress2, context2, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              hasChildWork && (workInProgress2.flags |= Update);
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null)
                return pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current)), workInProgress2.flags |= DidCapture, null;
              var primaryChildFragment = workInProgress2.child, primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes))
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              return child !== null ? child.sibling : null;
            } else
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags, _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork)
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null && (renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null), pushSuspenseContext(workInProgress2, suspenseStackCursor.current), _hasChildWork)
              break;
            return null;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return workInProgress2.lanes = NoLanes, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        if (workInProgress2._debugNeedsRemount && current2 !== null)
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        if (current2 !== null) {
          var oldProps = current2.memoizedProps, newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type)
            didReceiveUpdate = !0;
          else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags)
              return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags ? didReceiveUpdate = !0 : didReceiveUpdate = !1;
          }
        } else if (didReceiveUpdate = !1, getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index, numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
        switch (workInProgress2.lanes = NoLanes, workInProgress2.tag) {
          case IndeterminateComponent:
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component4 = workInProgress2.type, unresolvedProps = workInProgress2.pendingProps, resolvedProps = workInProgress2.elementType === Component4 ? unresolvedProps : resolveDefaultProps(Component4, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component4, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type, _unresolvedProps = workInProgress2.pendingProps, _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type, _unresolvedProps2 = workInProgress2.pendingProps, _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment22:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type, _unresolvedProps3 = workInProgress2.pendingProps, _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                _resolvedProps3,
                "prop",
                getComponentNameFromType(_type2)
              );
            }
            return _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3), updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent:
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type, _unresolvedProps4 = workInProgress2.pendingProps, _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent:
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          case ScopeComponent:
            break;
          case OffscreenComponent:
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic;
      }
      var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        for (var node = workInProgress2.child; node !== null; ) {
          if (node.tag === HostComponent || node.tag === HostText)
            appendInitialChild(parent, node.stateNode);
          else if (node.tag !== HostPortal) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }, updateHostContainer = function(current2, workInProgress2) {
      }, updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps !== newProps) {
          var instance = workInProgress2.stateNode, currentHostContext = getHostContext(), updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress2);
        }
      }, updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        oldText !== newText && markUpdate(workInProgress2);
      };
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!getIsHydrating())
          switch (renderState.tailMode) {
            case "hidden": {
              for (var tailNode = renderState.tail, lastTailNode = null; tailNode !== null; )
                tailNode.alternate !== null && (lastTailNode = tailNode), tailNode = tailNode.sibling;
              lastTailNode === null ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            }
            case "collapsed": {
              for (var _tailNode = renderState.tail, _lastTailNode = null; _tailNode !== null; )
                _tailNode.alternate !== null && (_lastTailNode = _tailNode), _tailNode = _tailNode.sibling;
              _lastTailNode === null ? !hasRenderedATailFallback && renderState.tail !== null ? renderState.tail.sibling = null : renderState.tail = null : _lastTailNode.sibling = null;
              break;
            }
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child, newChildLanes = NoLanes, subtreeFlags = NoFlags;
        if (didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; _child2 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)), subtreeFlags |= _child2.subtreeFlags & StaticMask, subtreeFlags |= _child2.flags & StaticMask, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else
            for (var _child3 = completedWork.child; _child3 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)), subtreeFlags |= _child3.subtreeFlags & StaticMask, subtreeFlags |= _child3.flags & StaticMask, _child3.return = completedWork, _child3 = _child3.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var actualDuration = completedWork.actualDuration, treeBaseDuration = completedWork.selfBaseDuration, child = completedWork.child; child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes)), subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, actualDuration += child.actualDuration, treeBaseDuration += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = actualDuration, completedWork.treeBaseDuration = treeBaseDuration;
          } else
            for (var _child = completedWork.child; _child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes)), subtreeFlags |= _child.subtreeFlags, subtreeFlags |= _child.flags, _child.return = completedWork, _child = _child.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        }
        return completedWork.childLanes = newChildLanes, didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags)
          return warnIfUnhydratedTailNodes(workInProgress2), resetHydrationState(), workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture, !1;
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null)
          if (current2 === null) {
            if (!wasHydrated)
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            if (prepareToHydrateHostSuspenseInstance(workInProgress2), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
              }
            }
            return !1;
          } else {
            if (resetHydrationState(), (workInProgress2.flags & DidCapture) === NoFlags && (workInProgress2.memoizedState = null), workInProgress2.flags |= Update, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration);
              }
            }
            return !1;
          }
        else
          return upgradeHydrationErrorsToRecoverable(), !0;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment22:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return bubbleProperties(workInProgress2), null;
          case ClassComponent: {
            var Component4 = workInProgress2.type;
            return isContextProvider(Component4) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            if (popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions(), fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated)
                markUpdate(workInProgress2);
              else if (current2 !== null) {
                var prevState = current2.memoizedState;
                (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) && (workInProgress2.flags |= Snapshot, upgradeHydrationErrorsToRecoverable());
              }
            }
            return updateHostContainer(current2, workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer(), type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null)
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance), current2.ref !== workInProgress2.ref && markRef$1(workInProgress2);
            else {
              if (!newProps) {
                if (workInProgress2.stateNode === null)
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                return bubbleProperties(workInProgress2), null;
              }
              var currentHostContext = getHostContext(), _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated)
                prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext) && markUpdate(workInProgress2);
              else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, !1, !1), workInProgress2.stateNode = instance, finalizeInitialChildren(instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress2);
              }
              workInProgress2.ref !== null && markRef$1(workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText != "string" && workInProgress2.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              var _rootContainerInstance = getRootHostContainer(), _currentHostContext = getHostContext(), _wasHydrated2 = popHydrationState(workInProgress2);
              _wasHydrated2 ? prepareToHydrateHostTextInstance(workInProgress2) && markUpdate(workInProgress2) : workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath)
                return workInProgress2.flags & ShouldCapture ? workInProgress2 : null;
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags)
              return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
            var nextDidTimeout = nextState !== null, prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout && nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              if (_offscreenFiber2.flags |= Visibility, (workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== !0 || !enableSuspenseAvoidThisFallback);
                hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext) ? renderDidSuspend() : renderDidSuspendDelayIfPossible();
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null && (workInProgress2.flags |= Update), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && nextDidTimeout) {
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
            }
            return null;
          }
          case HostPortal:
            return popHostContainer(workInProgress2), updateHostContainer(current2, workInProgress2), current2 === null && preparePortalMount(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
          case ContextProvider:
            var context2 = workInProgress2.type._context;
            return popProvider(context2, workInProgress2), bubbleProperties(workInProgress2), null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            return isContextProvider(_Component) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null)
              return bubbleProperties(workInProgress2), null;
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags, renderedTail = renderState.rendering;
            if (renderedTail === null)
              if (didSuspendAlready)
                cutOffTailIfNeeded(renderState, !1);
              else {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended)
                  for (var row = workInProgress2.child; row !== null; ) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = !0, workInProgress2.flags |= DidCapture, cutOffTailIfNeeded(renderState, !1);
                      var newThenables = suspended.updateQueue;
                      return newThenables !== null && (workInProgress2.updateQueue = newThenables, workInProgress2.flags |= Update), workInProgress2.subtreeFlags = NoFlags, resetChildFibers(workInProgress2, renderLanes2), pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)), workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                renderState.tail !== null && now3() > getRenderTargetTime() && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane);
              }
            else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture, didSuspendAlready = !0;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null && (workInProgress2.updateQueue = _newThenables, workInProgress2.flags |= Update), cutOffTailIfNeeded(renderState, !0), renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating())
                    return bubbleProperties(workInProgress2), null;
                } else
                  now3() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane);
              }
              if (renderState.isBackwards)
                renderedTail.sibling = workInProgress2.child, workInProgress2.child = renderedTail;
              else {
                var previousSibling = renderState.last;
                previousSibling !== null ? previousSibling.sibling = renderedTail : workInProgress2.child = renderedTail, renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next, renderState.tail = next.sibling, renderState.renderingStartTime = now3(), next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              return didSuspendAlready ? suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback) : suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), next;
            }
            return bubbleProperties(workInProgress2), null;
          }
          case ScopeComponent:
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState, nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState, prevIsHidden = _prevState !== null;
              prevIsHidden !== nextIsHidden && !enableLegacyHidden && (workInProgress2.flags |= Visibility);
            }
            return !nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode ? bubbleProperties(workInProgress2) : includesSomeLane(subtreeRenderLanes, OffscreenLane) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & (Placement | Update) && (workInProgress2.flags |= Visibility)), null;
          }
          case CacheComponent:
            return null;
          case TracingMarkerComponent:
            return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case ClassComponent: {
            var Component4 = workInProgress2.type;
            isContextProvider(Component4) && popContext(workInProgress2);
            var flags2 = workInProgress2.flags;
            return flags2 & ShouldCapture ? (workInProgress2.flags = flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            return (_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags ? (workInProgress2.flags = _flags & ~ShouldCapture | DidCapture, workInProgress2) : null;
          }
          case HostComponent:
            return popHostContext(workInProgress2), null;
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null)
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            return _flags2 & ShouldCapture ? (workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case SuspenseListComponent:
            return popSuspenseContext(workInProgress2), null;
          case HostPortal:
            return popHostContainer(workInProgress2), null;
          case ContextProvider:
            var context2 = workInProgress2.type._context;
            return popProvider(context2, workInProgress2), null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return popRenderLanes(workInProgress2), null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        switch (popTreeContext(interruptedWork), interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            childContextTypes != null && popContext(interruptedWork);
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork), popTopLevelContextObject(interruptedWork), resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context2 = interruptedWork.type._context;
            popProvider(context2, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = typeof WeakSet == "function" ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        invokeGuardedCallback(null, function() {
          throw error2;
        }), clearCaughtError();
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        if (instance.props = current2.memoizedProps, instance.state = current2.memoizedState, current2.mode & ProfileMode)
          try {
            startLayoutEffectTimer(), instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        else
          instance.componentWillUnmount();
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout4, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null)
          if (typeof ref == "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              else
                retVal = ref(null);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            typeof retVal == "function" && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
          } else
            ref.current = null;
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null, shouldFireAfterActiveInstanceBlur = !1;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo), nextEffect = firstChild, commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        return shouldFireAfterActiveInstanceBlur = !1, focusedInstanceHandle = null, shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitBeforeMutationEffects_complete();
        }
      }
      function commitBeforeMutationEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate, flags2 = finishedWork.flags;
        if ((flags2 & Snapshot) !== NoFlags) {
          switch (setCurrentFiber(finishedWork), finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              break;
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps, prevState = current2.memoizedState, instance = finishedWork.stateNode;
                finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  snapshot === void 0 && !didWarnSet.has(finishedWork.type) && (didWarnSet.add(finishedWork.type), error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork)));
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags2, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags2) === flags2) {
              var destroy = effect.destroy;
              effect.destroy = void 0, destroy !== void 0 && ((flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStarted(finishedWork) : (flags2 & Layout4) !== NoFlags$1 && markComponentLayoutEffectUnmountStarted(finishedWork), (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!0), safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy), (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!1), (flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStopped() : (flags2 & Layout4) !== NoFlags$1 && markComponentLayoutEffectUnmountStopped());
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags2, finishedWork) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags2) === flags2) {
              (flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStarted(finishedWork) : (flags2 & Layout4) !== NoFlags$1 && markComponentLayoutEffectMountStarted(finishedWork);
              var create = effect.create;
              (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!0), effect.destroy = create(), (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!1), (flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStopped() : (flags2 & Layout4) !== NoFlags$1 && markComponentLayoutEffectMountStopped();
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy != "function") {
                  var hookName = void 0;
                  (effect.tag & Layout4) !== NoFlags ? hookName = "useLayoutEffect" : (effect.tag & Insertion) !== NoFlags ? hookName = "useInsertionEffect" : hookName = "useEffect";
                  var addendum = void 0;
                  destroy === null ? addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof destroy.then == "function" ? addendum = `

It looks like you wrote ` + hookName + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + hookName + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : addendum = " You returned: " + destroy, error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        if ((finishedWork.flags & Update) !== NoFlags)
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration, _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit, commitTime2 = getCommitTime(), phase = finishedWork.alternate === null ? "mount" : "update";
              isCurrentUpdateNested() && (phase = "nested-update"), typeof onPostCommit == "function" && onPostCommit(id, phase, passiveEffectDuration, commitTime2);
              var parentFiber = finishedWork.return;
              outer:
                for (; parentFiber !== null; ) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root2 = parentFiber.stateNode;
                      root2.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags)
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden)
                if (finishedWork.mode & ProfileMode)
                  try {
                    startLayoutEffectTimer(), commitHookEffectListMount(Layout4 | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                else
                  commitHookEffectListMount(Layout4 | HasEffect, finishedWork);
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update && !offscreenSubtreeWasHidden)
                if (current2 === null)
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidMount();
                else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps), prevState = current2.memoizedState;
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              var updateQueue = finishedWork.updateQueue;
              updateQueue !== null && (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), commitUpdateQueue(finishedWork, updateQueue, instance));
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null)
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type, props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText:
              break;
            case HostPortal:
              break;
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = finishedWork.stateNode.effectDuration, commitTime2 = getCommitTime(), phase = current2 === null ? "mount" : "update";
                isCurrentUpdateNested() && (phase = "nested-update"), typeof onRender == "function" && onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                {
                  typeof onCommit == "function" && onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2), enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    for (; parentFiber !== null; ) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        offscreenSubtreeWasHidden || finishedWork.flags & Ref && commitAttachRef(finishedWork);
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            else
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            typeof instance.componentDidMount == "function" && safelyCallComponentDidMount(node, node.return, instance), safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        for (var hostSubtreeRoot = null, node = finishedWork; ; ) {
          if (node.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node;
              try {
                var instance = node.stateNode;
                isHidden ? hideInstance(instance) : unhideInstance(node.stateNode, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if (node.tag === HostText) {
            if (hostSubtreeRoot === null)
              try {
                var _instance3 = node.stateNode;
                isHidden ? hideTextInstance(_instance3) : unhideTextInstance(_instance3, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
          } else if (!((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === finishedWork)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return;
            hostSubtreeRoot === node && (hostSubtreeRoot = null), node = node.return;
          }
          hostSubtreeRoot === node && (hostSubtreeRoot = null), node.sibling.return = node.return, node = node.sibling;
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode, instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = instance;
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref == "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            else
              retVal = ref(instanceToUse);
            typeof retVal == "function" && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
          } else
            ref.hasOwnProperty("current") || error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork)), ref.current = instanceToUse;
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (alternate.return = null), fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        {
          if (fiber.child = null, fiber.deletions = null, fiber.sibling = null, fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            hostInstance !== null && detachDeletedInstance(hostInstance);
          }
          fiber.stateNode = null, fiber._debugOwner = null, fiber.return = null, fiber.dependencies = null, fiber.memoizedProps = null, fiber.memoizedState = null, fiber.pendingProps = null, fiber.stateNode = null, fiber.updateQueue = null;
        }
      }
      function getHostParentFiber(fiber) {
        for (var parent = fiber.return; parent !== null; ) {
          if (isHostParent(parent))
            return parent;
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          for (; ; ) {
            for (; node.sibling === null; ) {
              if (node.return === null || isHostParent(node.return))
                return null;
              node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment; ) {
              if (node.flags & Placement || node.child === null || node.tag === HostPortal)
                continue siblings;
              node.child.return = node, node = node.child;
            }
            if (!(node.flags & Placement))
              return node.stateNode;
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            parentFiber.flags & ContentReset && (resetTextContent(parent), parentFiber.flags &= ~ContentReset);
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo, _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertInContainerBefore(parent, stateNode, before) : appendChildToContainer(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertBefore(parent, stateNode, before) : appendChild(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNode(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      var hostParent = null, hostParentIsContainer = !1;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            for (; parent !== null; ) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode, hostParentIsContainer = !1;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null)
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber), hostParent = null, hostParentIsContainer = !1;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (var child = parent.child; child !== null; )
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child), child = child.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        switch (onCommitUnmount(deletedFiber), deletedFiber.tag) {
          case HostComponent:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case HostText: {
            {
              var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = prevHostParent, hostParentIsContainer = prevHostParentIsContainer, hostParent !== null && (hostParentIsContainer ? removeChildFromContainer(hostParent, deletedFiber.stateNode) : removeChild(hostParent, deletedFiber.stateNode));
            }
            return;
          }
          case DehydratedFragment: {
            hostParent !== null && (hostParentIsContainer ? clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent, _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo, hostParentIsContainer = !0, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = _prevHostParent, hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next, effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    destroy !== void 0 && ((tag & Insertion) !== NoFlags$1 ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : (tag & Layout4) !== NoFlags$1 && (markComponentLayoutEffectUnmountStarted(deletedFiber), deletedFiber.mode & ProfileMode ? (startLayoutEffectTimer(), safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), recordLayoutEffectDuration(deletedFiber)) : safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), markComponentLayoutEffectUnmountStopped())), effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (deletedFiber.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              suspenseInstance !== null && commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          retryCache === null && (retryCache = finishedWork.stateNode = new PossiblyWeakSet()), wakeables.forEach(function(wakeable) {
            var retry2 = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              if (retryCache.add(wakeable), isDevToolsPresent)
                if (inProgressLanes !== null && inProgressRoot !== null)
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                else
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
              wakeable.then(retry2, retry2);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, setCurrentFiber(finishedWork), commitMutationEffectsOnFiber(finishedWork, root2), setCurrentFiber(finishedWork), inProgressLanes = null, inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null)
          for (var i9 = 0; i9 < deletions.length; i9++) {
            var childToDelete = deletions[i9];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask)
          for (var child = parentFiber.child; child !== null; )
            setCurrentFiber(child), commitMutationEffectsOnFiber(child, root2), child = child.sibling;
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate, flags2 = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout4 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else
                try {
                  commitHookEffectListUnmount(Layout4 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags2 & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps, oldProps = current2 !== null ? current2.memoizedProps : newProps, type = finishedWork.type, updatePayload = finishedWork.updateQueue;
                  if (finishedWork.updateQueue = null, updatePayload !== null)
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                }
              }
            }
            return;
          }
          case HostText: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update) {
              if (finishedWork.stateNode === null)
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              var textInstance = finishedWork.stateNode, newText = finishedWork.memoizedProps, oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
            return;
          }
          case HostRoot: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update && current2 !== null) {
              var prevRootState = current2.memoizedState;
              if (prevRootState.isDehydrated)
                try {
                  commitHydratedContainer(root2.containerInfo);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode, newState = offscreenFiber.memoizedState, isHidden = newState !== null;
              if (offscreenInstance.isHidden = isHidden, isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                wasHidden || markCommitTimeOfFallback();
              }
            }
            if (flags2 & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (finishedWork.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden, recursivelyTraverseMutationEffects(root2, finishedWork), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseMutationEffects(root2, finishedWork);
            if (commitReconciliationEffects(finishedWork), flags2 & Visibility) {
              var _offscreenInstance = finishedWork.stateNode, _newState = finishedWork.memoizedState, _isHidden = _newState !== null, offscreenBoundary = finishedWork;
              if (_offscreenInstance.isHidden = _isHidden, _isHidden && !_wasHidden && (offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                nextEffect = offscreenBoundary;
                for (var offscreenChild = offscreenBoundary.child; offscreenChild !== null; )
                  nextEffect = offscreenChild, disappearLayoutEffects_begin(offscreenChild), offscreenChild = offscreenChild.sibling;
              }
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update && attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case ScopeComponent:
            return;
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags2 = finishedWork.flags;
        if (flags2 & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        flags2 & Hydrating && (finishedWork.flags &= ~Hydrating);
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, nextEffect = finishedWork, commitLayoutEffects_begin(finishedWork, root2, committedLanes), inProgressLanes = null, inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        for (var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null, newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate, wasHidden = current2 !== null && current2.memoizedState !== null, newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden, offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden && (nextEffect = fiber, reappearLayoutEffects_begin(fiber));
              for (var child = firstChild; child !== null; )
                nextEffect = child, commitLayoutEffects_begin(
                  child,
                  root2,
                  committedLanes
                ), child = child.sibling;
              nextEffect = fiber, offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden, commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          (fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout4, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              else
                commitHookEffectListUnmount(Layout4, fiber, fiber.return);
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : disappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : reappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          if (resetCurrentFiber(), fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork, commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild, commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i9 = 0; i9 < deletions.length; i9++) {
                var fiberToDelete = deletions[i9];
                nextEffect = fiberToDelete, commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null, detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffects_complete();
        }
      }
      function commitPassiveUnmountEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          (fiber.flags & Passive) !== NoFlags && (setCurrentFiber(fiber), commitPassiveUnmountOnFiber(fiber), resetCurrentFiber());
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            finishedWork.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return), recordPassiveEffectDuration(finishedWork)) : commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber), commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor), resetCurrentFiber();
          var child = fiber.child;
          child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, sibling = fiber.sibling, returnFiber = fiber.return;
          if (detachFiberAfterEffects(fiber), fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
          if (sibling !== null) {
            sibling.return = returnFiber, nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            current2.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor), recordPassiveEffectDuration(current2)) : commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout4 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout4 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            break;
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
        }
      }
      var COMPONENT_TYPE = 0, HAS_PSEUDO_CLASS_TYPE = 1, ROLE_TYPE = 2, TEST_NAME_TYPE = 3, TEXT_TYPE = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component"), HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class"), ROLE_TYPE = symbolFor("selector.role"), TEST_NAME_TYPE = symbolFor("selector.test_id"), TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0, jestIsDefined = typeof jest < "u";
          return jestIsDefined && isReactActEnvironmentGlobal !== !1;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0;
          return !isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null && error("The current testing environment is not configured to support act(...)"), isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil, ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue, NoContext = 0, BatchedContext = 1, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes, subtreeRenderLanes = NoLanes, subtreeRenderLanesCursor = createCursor(NoLanes), workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootIncludedLanes = NoLanes, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 500, workInProgressRootRenderTargetTime = 1 / 0, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now3() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = !1, firstUncaughtError = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, pendingPassiveProfilerEffects = [], pendingPassiveTransitions = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, isRunningInsertionEffect = !1;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext ? now3() : (currentEventTime !== NoTimestamp || (currentEventTime = now3()), currentEventTime);
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode)
          return SyncLane;
        if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes)
          return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber);
          }
          return currentEventTransitionLane === NoLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane)
          return updateLane;
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        return (mode & ConcurrentMode) === NoMode ? SyncLane : claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates(), isRunningInsertionEffect && error("useInsertionEffect must not schedule updates."), isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0), markRootUpdated(root2, lane, eventTime), (executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot ? warnAboutRenderPhaseUpdatesInDEV(fiber) : (isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane)), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended$1(root2, workInProgressRootRenderLanes)), ensureRootIsScheduled(root2, eventTime), lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode()));
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane, markRootUpdated(root2, lane, eventTime), ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (executionContext & RenderContext) !== NoContext;
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          existingCallbackNode !== null && cancelCallback$1(existingCallbackNode), root2.callbackNode = null, root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes), existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          existingCallbackNode == null && existingCallbackPriority !== SyncLane && error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        existingCallbackNode != null && cancelCallback$1(existingCallbackNode);
        var newCallbackNode;
        if (newCallbackPriority === SyncLane)
          root2.tag === LegacyRoot ? (ReactCurrentActQueue$1.isBatchingLegacy !== null && (ReactCurrentActQueue$1.didScheduleLegacyUpdate = !0), scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2))) : scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2)), ReactCurrentActQueue$1.current !== null ? ReactCurrentActQueue$1.current.push(flushSyncCallbacks) : scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
          }), newCallbackNode = null;
        else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority, root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        if (resetNestedUpdateFlag(), currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var originalCallbackNode = root2.callbackNode, didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects && root2.callbackNode !== originalCallbackNode)
          return null;
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes)
          return null;
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout, exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now3()), fatalError;
          }
          if (exitStatus === RootDidNotComplete)
            markRootSuspended$1(root2, lanes);
          else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes), finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              if (exitStatus = renderRootSync(root2, lanes), exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                _errorRetryLanes !== NoLanes && (lanes = _errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes));
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now3()), _fatalError;
              }
            }
            root2.finishedWork = finishedWork, root2.finishedLanes = lanes, finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        return ensureRootIsScheduled(root2, now3()), root2.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root2) : null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender, errorHydratingContainer(root2.containerInfo);
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt, errorsFromSecondAttempt !== null && queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored:
            throw new Error("Root did not complete. This is a bug in React.");
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            if (markRootSuspended$1(root2, lanes), includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now3();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes)
                  break;
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            if (markRootSuspended$1(root2, lanes), includesOnlyTransitions(lanes))
              break;
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes), eventTimeMs = mostRecentEventTime, timeElapsedMs = now3() - eventTimeMs, _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default:
            throw new Error("Unknown root exit status.");
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node = finishedWork; ; ) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null)
                for (var i9 = 0; i9 < checks.length; i9++) {
                  var check = checks[i9], getSnapshot = check.getSnapshot, renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue))
                      return !1;
                  } catch {
                    return !1;
                  }
                }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node, node = child;
            continue;
          }
          if (node === finishedWork)
            return !0;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return !0;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return !0;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes), suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes), markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        if (syncNestedUpdateFlag(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane))
          return ensureRootIsScheduled(root2, now3()), null;
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now3()), fatalError;
        }
        if (exitStatus === RootDidNotComplete)
          throw new Error("Root did not complete. This is a bug in React.");
        var finishedWork = root2.current.alternate;
        return root2.finishedWork = finishedWork, root2.finishedLanes = lanes, commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions), ensureRootIsScheduled(root2, now3()), null;
      }
      function flushRoot(root2, lanes) {
        lanes !== NoLanes && (markRootEntangled(root2, mergeLanes(lanes, SyncLane)), ensureRootIsScheduled(root2, now3()), (executionContext & (RenderContext | CommitContext)) === NoContext && (resetRenderTimer(), flushSyncCallbacks()));
      }
      function batchedUpdates$1(fn, a9) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a9);
        } finally {
          executionContext = prevExecutionContext, executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode());
        }
      }
      function discreteUpdates(fn, a9, b5, c9, d15) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn(a9, b5, c9, d15);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext === NoContext && resetRenderTimer();
        }
      }
      function flushSync(fn) {
        rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext && flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn ? fn() : void 0;
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext = prevExecutionContext, (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber), subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes), workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current, pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null, root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle)), workInProgress !== null)
          for (var interruptedWork = workInProgress.return; interruptedWork !== null; ) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork), interruptedWork = interruptedWork.return;
          }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        return workInProgress = rootWorkInProgress, workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes, workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, finishQueueingConcurrentUpdates(), ReactStrictModeWarnings.discardPendingWarnings(), rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            if (resetContextDependencies(), resetHooksAfterThrow(), resetCurrentFiber(), ReactCurrentOwner$2.current = null, erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDelta(erroredWork, !0), enableSchedulingProfiler)
              if (markComponentRenderStopped(), thrownValue !== null && typeof thrownValue == "object" && typeof thrownValue.then == "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes), completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue, workInProgress === erroredWork && erroredWork !== null ? (erroredWork = erroredWork.return, workInProgress = erroredWork) : erroredWork = workInProgress;
            continue;
          }
          return;
        } while (!0);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        return ReactCurrentDispatcher$2.current = ContextOnlyDispatcher, prevDispatcher === null ? ContextOnlyDispatcher : prevDispatcher;
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now3();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended);
      }
      function renderDidSuspendDelayIfPossible() {
        (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) && (workInProgressRootExitStatus = RootSuspendedWithDelay), workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
      function renderDidError(error2) {
        workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored), workInProgressRootConcurrentErrors === null ? workInProgressRootConcurrentErrors = [error2] : workInProgressRootConcurrentErrors.push(error2);
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (!0);
        if (resetContextDependencies(), executionContext = prevExecutionContext, popDispatcher(prevDispatcher), workInProgress !== null)
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        return markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus;
      }
      function workLoopSync() {
        for (; workInProgress !== null; )
          performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), resetRenderTimer(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (!0);
        return resetContextDependencies(), popDispatcher(prevDispatcher), executionContext = prevExecutionContext, workInProgress !== null ? (markRenderYielded(), RootInProgress) : (markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus);
      }
      function workLoopConcurrent() {
        for (; workInProgress !== null && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, !0)) : next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), resetCurrentFiber(), unitOfWork.memoizedProps = unitOfWork.pendingProps, next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next, ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate, returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode ? next = completeWork(current2, completedWork, subtreeRenderLanes) : (startProfilerTimer(completedWork), next = completeWork(current2, completedWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1)), resetCurrentFiber(), next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask, workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1);
              for (var actualDuration = completedWork.actualDuration, child = completedWork.child; child !== null; )
                actualDuration += child.actualDuration, child = child.sibling;
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null)
              returnFiber.flags |= Incomplete, returnFiber.subtreeFlags = NoFlags, returnFiber.deletions = null;
            else {
              workInProgressRootExitStatus = RootDidNotComplete, workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber, workInProgress = completedWork;
        } while (completedWork !== null);
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition, setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do
          flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        if (flushRenderPhaseStrictModeWarningsInDEV(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var finishedWork = root2.finishedWork, lanes = root2.finishedLanes;
        if (markCommitStarted(lanes), finishedWork === null)
          return markCommitStopped(), null;
        if (lanes === NoLanes && error("root.finishedLanes should not be empty during a commit. This is a bug in React."), root2.finishedWork = null, root2.finishedLanes = NoLanes, finishedWork === root2.current)
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        root2.callbackNode = null, root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes), root2 === workInProgressRoot && (workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes), ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) && (rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveTransitions = transitions, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        })));
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags, rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext, ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          recordCommitTime(), commitMutationEffects(root2, finishedWork, lanes), resetAfterCommit(root2.containerInfo), root2.current = finishedWork, markLayoutEffectsStarted(lanes), commitLayoutEffects(finishedWork, root2, lanes), markLayoutEffectsStopped(), requestPaint(), executionContext = prevExecutionContext, setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
        } else
          root2.current = finishedWork, recordCommitTime();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root2, pendingPassiveEffectsLanes = lanes) : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null), remainingLanes = root2.pendingLanes, remainingLanes === NoLanes && (legacyErrorBoundariesThatAlreadyFailed = null), rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root2.current, !1), onCommitRoot(finishedWork.stateNode, renderPriorityLevel), isDevToolsPresent && root2.memoizedUpdaters.clear(), onCommitRoot$1(), ensureRootIsScheduled(root2, now3()), recoverableErrors !== null)
          for (var onRecoverableError = root2.onRecoverableError, i9 = 0; i9 < recoverableErrors.length; i9++) {
            var recoverableError = recoverableErrors[i9], componentStack = recoverableError.stack, digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        if (hasUncaughtError) {
          hasUncaughtError = !1;
          var error$1 = firstUncaughtError;
          throw firstUncaughtError = null, error$1;
        }
        return includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot && flushPassiveEffects(), remainingLanes = root2.pendingLanes, includesSomeLane(remainingLanes, SyncLane) ? (markNestedUpdateScheduled(), root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2)) : nestedUpdateCount = 0, flushSyncCallbacks(), markCommitStopped(), null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = lowerEventPriority(DefaultEventPriority, renderPriority), prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
          try {
            return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(priority), flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return !1;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber), rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        }));
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null)
          return !1;
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
        if (rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = !0, didScheduleUpdateDuringPassiveEffects = !1, markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext, commitPassiveUnmountEffects(root2.current), commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i9 = 0; i9 < profilerEffects.length; i9++) {
            var _fiber = profilerEffects[i9];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        markPassiveEffectsStopped(), commitDoubleInvokeEffectsInDEV(root2.current, !0), executionContext = prevExecutionContext, flushSyncCallbacks(), didScheduleUpdateDuringPassiveEffects ? root2 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root2) : nestedPassiveUpdateCount = 0, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
        }
        return !0;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        legacyErrorBoundariesThatAlreadyFailed === null ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
      function prepareToThrowUncaughtError(error2) {
        hasUncaughtError || (hasUncaughtError = !0, firstUncaughtError = error2);
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber), update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane), root2 = enqueueUpdate(rootFiber, update, SyncLane), eventTime = requestEventTime();
        root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        if (reportUncaughtErrorInDEV(error$1), setIsRunningInsertionEffect(!1), sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        for (fiber = nearestMountedAncestor; fiber !== null; ) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type, instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError == "function" || typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber), update = createClassErrorUpdate(fiber, errorInfo, SyncLane), root2 = enqueueUpdate(fiber, update, SyncLane), eventTime = requestEventTime();
              root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
              return;
            }
          }
          fiber = fiber.return;
        }
        error(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, error$1);
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        pingCache !== null && pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes), warnIfSuspenseResolutionNotWrappedWithActDEV(root2), workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes) && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now3() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root2, NoLanes) : workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes)), ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        retryLane === NoLane && (retryLane = requestRetryLane(boundaryFiber));
        var eventTime = requestEventTime(), root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        root2 !== null && (markRootUpdated(root2, retryLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = NoLane;
        suspenseState !== null && (retryLane = suspenseState.retryLane), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane, retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            suspenseState !== null && (retryLane = suspenseState.retryLane);
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        retryCache !== null && retryCache.delete(wakeable), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
          throw nestedUpdateCount = 0, rootWithNestedUpdates = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning(), ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        setCurrentFiber(fiber), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV), resetCurrentFiber();
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        for (var current2 = firstChild, subtreeRoot = null; current2 !== null; ) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags ? current2 = current2.child : ((current2.flags & fiberFlags) !== NoFlags && invokeEffectFn(current2), current2.sibling !== null ? current2 = current2.sibling : current2 = subtreeRoot = current2.return);
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext || !(fiber.mode & ConcurrentMode))
            return;
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent)
            return;
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName))
              return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else
            didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
          var previousFiber = current;
          try {
            setCurrentFiber(fiber), error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError == "object" && typeof originalError.then == "function")
              throw originalError;
            if (resetContextDependencies(), resetHooksAfterThrow(), unwindInterruptedWork(current2, unitOfWork), assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy), unitOfWork.mode & ProfileMode && startProfilerTimer(unitOfWork), invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes), hasCaughtError()) {
              var replayError = clearCaughtError();
              typeof replayError == "object" && replayError !== null && replayError._suppressLogging && typeof originalError == "object" && originalError !== null && !originalError._suppressLogging && (originalError._suppressLogging = !0);
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = !1, didWarnAboutUpdateInRenderForAnotherComponent;
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV())
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown", dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              didWarnAboutUpdateInRender || (error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = !0);
              break;
            }
          }
      }
      function restorePendingUpdaters(root2, lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root2, schedulingFiber, lanes);
          });
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          return actQueue !== null ? (actQueue.push(callback), fakeActCallbackNode) : scheduleCallback(priorityLevel, callback);
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode !== fakeActCallbackNode)
          return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment())
              return;
          } else if (!isLegacyActEnvironment() || executionContext !== NoContext || fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent)
            return;
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber), error(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, getComponentNameFromFiber(fiber));
            } finally {
              previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null && error(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
      }
      function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
      }
      var resolveFamily = null, failedBoundaries = null, setRefreshHandler = function(handler) {
        resolveFamily = handler;
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null)
            return type;
          var family = resolveFamily(type);
          return family === void 0 ? type : family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null)
            return type;
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type != null && typeof type.render == "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                return type.displayName !== void 0 && (syntheticType.displayName = type.displayName), syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null)
            return !1;
          var prevType = fiber.elementType, nextType = element.type, needsCompareFamilies = !1, $$typeofNextType = typeof nextType == "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              typeof nextType == "function" && (needsCompareFamilies = !0);
              break;
            }
            case FunctionComponent: {
              (typeof nextType == "function" || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            case ForwardRef: {
              ($$typeofNextType === REACT_FORWARD_REF_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              ($$typeofNextType === REACT_MEMO_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            default:
              return !1;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType))
              return !0;
          }
          return !1;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null || typeof WeakSet != "function")
            return;
          failedBoundaries === null && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null)
            return;
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects(), flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      }, scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject)
            return;
          flushPassiveEffects(), flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null)
            throw new Error("Expected resolveFamily to be set during hot reload.");
          var needsRender = !1, needsRemount = !1;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            family !== void 0 && (staleFamilies.has(family) ? needsRemount = !0 : updatedFamilies.has(family) && (tag === ClassComponent ? needsRemount = !0 : needsRender = !0));
          }
          if (failedBoundaries !== null && (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) && (needsRemount = !0), needsRemount && (fiber._debugNeedsRemount = !0), needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            _root !== null && scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
          child !== null && !needsRemount && scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies), sibling !== null && scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = /* @__PURE__ */ new Set(), types = new Set(families.map(function(family) {
            return family.current;
          }));
          return findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances), hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = !1;
          candidateType !== null && types.has(candidateType) && (didMatch = !0), didMatch ? findHostInstancesForFiberShallowly(fiber, hostInstances) : child !== null && findHostInstancesForMatchingFibersRecursively(child, types, hostInstances), sibling !== null && findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances)
            return;
          for (var node = fiber; ; ) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null)
              throw new Error("Expected to reach root first.");
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        for (var node = fiber, foundHostInstances = !1; ; ) {
          if (node.tag === HostComponent)
            foundHostInstances = !0, hostInstances.add(node.stateNode);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === fiber)
            return foundHostInstances;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === fiber)
              return foundHostInstances;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return !1;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = !1;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
        } catch {
          hasBadMapPolyfill = !0;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag, this.key = key, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = pendingProps, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = mode, this.flags = NoFlags, this.subtreeFlags = NoFlags, this.deletions = null, this.lanes = NoLanes, this.childLanes = NoLanes, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !hasBadMapPolyfill && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component4) {
        var prototype = Component4.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type == "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component4) {
        if (typeof Component4 == "function")
          return shouldConstruct$1(Component4) ? ClassComponent : FunctionComponent;
        if (Component4 != null) {
          var $$typeof = Component4.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE)
            return ForwardRef;
          if ($$typeof === REACT_MEMO_TYPE)
            return MemoComponent;
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        workInProgress2 === null ? (workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugSource = current2._debugSource, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = NoFlags, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.actualDuration = 0, workInProgress2.actualStartTime = -1), workInProgress2.flags = current2.flags & StaticMask, workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        switch (workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        }, workInProgress2.sibling = current2.sibling, workInProgress2.index = current2.index, workInProgress2.ref = current2.ref, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration, workInProgress2._debugNeedsRemount = current2._debugNeedsRemount, workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null)
          workInProgress2.childLanes = NoLanes, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = NoFlags, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0;
        else {
          workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        return tag === ConcurrentRoot ? (mode = ConcurrentMode, isStrictMode === !0 && (mode |= StrictLegacyMode, mode |= StrictEffectsMode)) : mode = NoMode, isDevToolsPresent && (mode |= ProfileMode), createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent, resolvedType = type;
        if (typeof type == "function")
          shouldConstruct$1(type) ? (fiberTag = ClassComponent, resolvedType = resolveClassForHotReloading(resolvedType)) : resolvedType = resolveFunctionForHotReloading(resolvedType);
        else if (typeof type == "string")
          fiberTag = HostComponent;
        else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode, mode |= StrictLegacyMode, (mode & ConcurrentMode) !== NoMode && (mode |= StrictEffectsMode);
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type == "object" && type !== null)
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef, resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent, resolvedType = null;
                      break getTag;
                  }
                var info = "";
                {
                  (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        return fiber.elementType = type, fiber.type = resolvedType, fiber.lanes = lanes, fiber._debugOwner = owner, fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type, key = element.key, pendingProps = element.props, fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        return fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment22, elements, key, mode);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        typeof pendingProps.id != "string" && error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        return fiber.elementType = REACT_PROFILER_TYPE, fiber.lanes = lanes, fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        }, fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        return fiber.elementType = REACT_SUSPENSE_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        return fiber.elementType = REACT_SUSPENSE_LIST_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE, fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: !1
        };
        return fiber.stateNode = primaryChildInstance, fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        return fiber.elementType = "DELETED", fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        return fiber.stateNode = dehydratedNode, fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [], fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        return fiber.lanes = lanes, fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        }, fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        return target === null && (target = createFiber(IndeterminateComponent, null, null, NoMode)), target.tag = source.tag, target.key = source.key, target.elementType = source.elementType, target.type = source.type, target.stateNode = source.stateNode, target.return = source.return, target.child = source.child, target.sibling = source.sibling, target.index = source.index, target.ref = source.ref, target.pendingProps = source.pendingProps, target.memoizedProps = source.memoizedProps, target.updateQueue = source.updateQueue, target.memoizedState = source.memoizedState, target.dependencies = source.dependencies, target.mode = source.mode, target.flags = source.flags, target.subtreeFlags = source.subtreeFlags, target.deletions = source.deletions, target.lanes = source.lanes, target.childLanes = source.childLanes, target.alternate = source.alternate, target.actualDuration = source.actualDuration, target.actualStartTime = source.actualStartTime, target.selfBaseDuration = source.selfBaseDuration, target.treeBaseDuration = source.treeBaseDuration, target._debugSource = source._debugSource, target._debugOwner = source._debugOwner, target._debugNeedsRemount = source._debugNeedsRemount, target._debugHookTypes = source._debugHookTypes, target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag, this.containerInfo = containerInfo, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = noTimeout, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = NoLane, this.eventTimes = createLaneMap(NoLanes), this.expirationTimes = createLaneMap(NoTimestamp), this.pendingLanes = NoLanes, this.suspendedLanes = NoLanes, this.pingedLanes = NoLanes, this.expiredLanes = NoLanes, this.mutableReadLanes = NoLanes, this.finishedLanes = NoLanes, this.entangledLanes = NoLanes, this.entanglements = createLaneMap(NoLanes), this.identifierPrefix = identifierPrefix, this.onRecoverableError = onRecoverableError, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
        {
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          for (var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [], _i = 0; _i < TotalLanes; _i++)
            pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError), uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber, uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        return initializeUpdateQueue(uninitializedFiber), root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        return checkKeyStringCoercion(key), {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates, didWarnAboutFindNodeInStrictMode;
      didWarnAboutNestedUpdates = !1, didWarnAboutFindNodeInStrictMode = {};
      function getContextForSubtree(parentComponent) {
        if (!parentComponent)
          return emptyContextObject;
        var fiber = get(parentComponent), parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component4 = fiber.type;
          if (isContextProvider(Component4))
            return processChildContext(fiber, Component4, parentContext);
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === void 0) {
            if (typeof component.render == "function")
              throw new Error("Unable to find node on an unmounted component.");
            var keys = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null)
            return null;
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = !0;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber), fiber.mode & StrictLegacyMode ? error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName) : error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              } finally {
                previousFiber ? setCurrentFiber(previousFiber) : resetCurrentFiber();
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = !1, initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = !0, root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current, eventTime = requestEventTime(), lane = requestUpdateLane(current2), update = createUpdate(eventTime, lane);
        return update.callback = callback ?? null, enqueueUpdate(current2, update, lane), scheduleInitialHydrationOnRoot(root2, lane, eventTime), root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current, eventTime = requestEventTime(), lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context2 = getContextForSubtree(parentComponent);
        container.context === null ? container.context = context2 : container.pendingContext = context2, isRendering && current !== null && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = !0, error(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, getComponentNameFromFiber(current) || "Unknown"));
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        }, callback = callback === void 0 ? null : callback, callback !== null && (typeof callback != "function" && error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), update.callback = callback);
        var root2 = enqueueUpdate(current$1, update, lane);
        return root2 !== null && (scheduleUpdateOnFiber(root2, current$1, lane, eventTime), entangleTransitions(root2, current$1, lane)), lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child)
          return null;
        switch (containerFiber.child.tag) {
          case HostComponent:
            return containerFiber.child.stateNode;
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        suspenseState !== null && suspenseState.dehydrated !== null && (suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane));
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        alternate && markRetryLaneImpl(alternate, retryLane);
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = SelectiveHydrationLane, root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = requestUpdateLane(fiber), root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return !1;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path2, index2) {
          var key = path2[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return index2 + 1 === path2.length ? (isArray(updated) ? updated.splice(key, 1) : delete updated[key], updated) : (updated[key] = copyWithDeleteImpl(obj[key], path2, index2 + 1), updated);
        }, copyWithDelete = function(obj, path2) {
          return copyWithDeleteImpl(obj, path2, 0);
        }, copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey], isArray(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey];
          } else
            updated[oldKey] = copyWithRenameImpl(
              obj[oldKey],
              oldPath,
              newPath,
              index2 + 1
            );
          return updated;
        }, copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else
            for (var i9 = 0; i9 < newPath.length - 1; i9++)
              if (oldPath[i9] !== newPath[i9]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        }, copyWithSetImpl = function(obj, path2, index2, value) {
          if (index2 >= path2.length)
            return value;
          var key = path2[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return updated[key] = copyWithSetImpl(obj[key], path2, index2 + 1, value), updated;
        }, copyWithSet = function(obj, path2, value) {
          return copyWithSetImpl(obj, path2, 0, value);
        }, findHook = function(fiber, id) {
          for (var currentHook2 = fiber.memoizedState; currentHook2 !== null && id > 0; )
            currentHook2 = currentHook2.next, id--;
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path2, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path2, value);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateDeletePath = function(fiber, id, path2) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path2);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideProps = function(fiber, path2, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsDeletePath = function(fiber, path2) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        }, setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance, ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError == "function" ? reportError : function(error2) {
        console.error(error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null)
          throw new Error("Cannot update an unmounted root.");
        {
          typeof arguments[1] == "function" ? error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : isValidContainer(arguments[1]) ? error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof arguments[1] < "u" && error("You passed a second argument to root.render(...) but it only accepts one argument.");
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
          }
        }
        updateContainer(children, root2, null, null);
      }, ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        typeof arguments[0] == "function" && error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          isAlreadyRendering() && error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), flushSync(function() {
            updateContainer(null, root2, null, null);
          }), unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container))
          throw new Error("createRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        options2 != null && (options2.hydrate ? warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof options2 == "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE && error(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), options2.unstable_strictMode === !0 && (isStrictMode = !0), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError), options2.transitionCallbacks !== void 0 && (transitionCallbacks = options2.transitionCallbacks));
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        return listenToAllSupportedEvents(rootContainerElement), new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        target && queueExplicitHydrationTarget(target);
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container))
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container), initialChildren === void 0 && error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        var hydrationCallbacks = options2 ?? null, mutableSources = options2 != null && options2.hydratedSources || null, isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError;
        options2 != null && (options2.unstable_strictMode === !0 && (isStrictMode = !0), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError));
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        if (markContainerAsRoot(root2.current, container), listenToAllSupportedEvents(container), mutableSources)
          for (var i9 = 0; i9 < mutableSources.length; i9++) {
            var mutableSource = mutableSources[i9];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."), isContainerMarkedAsRoot(container) && (container._reactRootContainer ? error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner, topLevelUpdateWarnings;
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer, rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        hasNonRootReactChild && !isRootRenderedBySomeReact && error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
      };
      function getReactRootElementInContainer(container) {
        return container ? container.nodeType === DOCUMENT_NODE ? container.documentElement : container.firstChild : null;
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(
            initialChildren,
            callback,
            container,
            LegacyRoot,
            null,
            !1,
            !1,
            "",
            noopOnRecoverableError
          );
          container._reactRootContainer = root2, markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(rootContainerElement), flushSync(), root2;
        } else {
          for (var rootSibling; rootSibling = container.lastChild; )
            container.removeChild(rootSibling);
          if (typeof callback == "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(
            container,
            LegacyRoot,
            null,
            !1,
            !1,
            "",
            noopOnRecoverableError
          );
          container._reactRootContainer = _root, markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(_rootContainerElement), flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          }), _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        callback !== null && typeof callback != "function" && error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container), warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        var maybeRoot = container._reactRootContainer, root2;
        if (!maybeRoot)
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
          if (root2 = maybeRoot, typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            warnedAboutRefsInRender || error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component"), owner.stateNode._warnedAboutRefsInRender = !0;
          }
        }
        return componentOrElement == null ? null : componentOrElement.nodeType === ELEMENT_NODE ? componentOrElement : findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
      function hydrate(element, container, callback) {
        if (error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, !0, callback);
      }
      function render(element, container, callback) {
        if (error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, !1, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(containerNode))
          throw new Error("Target container is not a DOM element.");
        if (parentComponent == null || !has(parentComponent))
          throw new Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, !1, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container))
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container), renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            renderedByDifferentReact && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
          return flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, !1, function() {
              container._reactRootContainer = null, unmarkContainerAsRoot(container);
            });
          }), !0;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)), isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            hasNonRootReactChild && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
          return !1;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1), setAttemptContinuousHydration(attemptContinuousHydration$1), setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1), setGetCurrentUpdatePriority(getCurrentUpdatePriority), setAttemptHydrationAtPriority(runWithPriority), (typeof Map != "function" || Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), setRestoreImplementation(restoreControlledState$3), setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container))
          throw new Error("Target container is not a DOM element.");
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: !1,
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        return Internals.usingClientEntryPoint || error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        return Internals.usingClientEntryPoint || error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        return isAlreadyRendering() && error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      if (!foundDevTools && canUseDOM2 && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
        var protocol = window.location.protocol;
        /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals, exports.createPortal = createPortal$1, exports.createRoot = createRoot$1, exports.findDOMNode = findDOMNode, exports.flushSync = flushSync$1, exports.hydrate = hydrate, exports.hydrateRoot = hydrateRoot$1, exports.render = render, exports.unmountComponentAtNode = unmountComponentAtNode, exports.unstable_batchedUpdates = batchedUpdates$1, exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    module.exports = require_react_dom_development();
  }
});

// node_modules/groq/lib/groq.esm.js
function groq(strings) {
  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
    keys[_key - 1] = arguments[_key];
  let lastIndex = strings.length - 1;
  return strings.slice(0, lastIndex).reduce((acc, str, i9) => acc + str + keys[i9], "") + strings[lastIndex];
}
var init_groq_esm = __esm({
  "node_modules/groq/lib/groq.esm.js"() {
  }
});

// node_modules/@sanity/image-url/lib/browser/image-url.umd.js
var require_image_url_umd = __commonJS({
  "node_modules/@sanity/image-url/lib/browser/image-url.umd.js"(exports, module) {
    (function(global2, factory) {
      typeof exports == "object" && typeof module < "u" ? module.exports = factory() : typeof define == "function" && define.amd ? define(factory) : (global2 = global2 || self, global2.SanityImageUrlBuilder = factory());
    })(exports, function() {
      function _extends7() {
        return _extends7 = Object.assign || function(target) {
          for (var i9 = 1; i9 < arguments.length; i9++) {
            var source = arguments[i9];
            for (var key in source)
              Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
          }
          return target;
        }, _extends7.apply(this, arguments);
      }
      function _unsupportedIterableToArray2(o8, minLen) {
        if (!!o8) {
          if (typeof o8 == "string")
            return _arrayLikeToArray2(o8, minLen);
          var n4 = Object.prototype.toString.call(o8).slice(8, -1);
          if (n4 === "Object" && o8.constructor && (n4 = o8.constructor.name), n4 === "Map" || n4 === "Set")
            return Array.from(o8);
          if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
            return _arrayLikeToArray2(o8, minLen);
        }
      }
      function _arrayLikeToArray2(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i9 = 0, arr2 = new Array(len); i9 < len; i9++)
          arr2[i9] = arr[i9];
        return arr2;
      }
      function _createForOfIteratorHelperLoose(o8, allowArrayLike) {
        var it2 = typeof Symbol < "u" && o8[Symbol.iterator] || o8["@@iterator"];
        if (it2)
          return (it2 = it2.call(o8)).next.bind(it2);
        if (Array.isArray(o8) || (it2 = _unsupportedIterableToArray2(o8)) || allowArrayLike && o8 && typeof o8.length == "number") {
          it2 && (o8 = it2);
          var i9 = 0;
          return function() {
            return i9 >= o8.length ? {
              done: !0
            } : {
              done: !1,
              value: o8[i9++]
            };
          };
        }
        throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      var example = "image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg";
      function parseAssetId(ref) {
        var _ref$split = ref.split("-"), id = _ref$split[1], dimensionString = _ref$split[2], format = _ref$split[3];
        if (!id || !dimensionString || !format)
          throw new Error("Malformed asset _ref '" + ref + `'. Expected an id like "` + example + '".');
        var _dimensionString$spli = dimensionString.split("x"), imgWidthStr = _dimensionString$spli[0], imgHeightStr = _dimensionString$spli[1], width = +imgWidthStr, height = +imgHeightStr, isValidAssetId = isFinite(width) && isFinite(height);
        if (!isValidAssetId)
          throw new Error("Malformed asset _ref '" + ref + `'. Expected an id like "` + example + '".');
        return {
          id,
          width,
          height,
          format
        };
      }
      var isRef = function(src) {
        var source = src;
        return source ? typeof source._ref == "string" : !1;
      }, isAsset = function(src) {
        var source = src;
        return source ? typeof source._id == "string" : !1;
      }, isAssetStub = function(src) {
        var source = src;
        return source && source.asset ? typeof source.asset.url == "string" : !1;
      };
      function parseSource(source) {
        if (!source)
          return null;
        var image;
        if (typeof source == "string" && isUrl(source))
          image = {
            asset: {
              _ref: urlToId(source)
            }
          };
        else if (typeof source == "string")
          image = {
            asset: {
              _ref: source
            }
          };
        else if (isRef(source))
          image = {
            asset: source
          };
        else if (isAsset(source))
          image = {
            asset: {
              _ref: source._id || ""
            }
          };
        else if (isAssetStub(source))
          image = {
            asset: {
              _ref: urlToId(source.asset.url)
            }
          };
        else if (typeof source.asset == "object")
          image = _extends7({}, source);
        else
          return null;
        var img = source;
        return img.crop && (image.crop = img.crop), img.hotspot && (image.hotspot = img.hotspot), applyDefaults(image);
      }
      function isUrl(url) {
        return /^https?:\/\//.test("" + url);
      }
      function urlToId(url) {
        var parts = url.split("/").slice(-1);
        return ("image-" + parts[0]).replace(/\.([a-z]+)$/, "-$1");
      }
      function applyDefaults(image) {
        if (image.crop && image.hotspot)
          return image;
        var result = _extends7({}, image);
        return result.crop || (result.crop = {
          left: 0,
          top: 0,
          bottom: 0,
          right: 0
        }), result.hotspot || (result.hotspot = {
          x: 0.5,
          y: 0.5,
          height: 1,
          width: 1
        }), result;
      }
      var SPEC_NAME_TO_URL_NAME_MAPPINGS = [["width", "w"], ["height", "h"], ["format", "fm"], ["download", "dl"], ["blur", "blur"], ["sharpen", "sharp"], ["invert", "invert"], ["orientation", "or"], ["minHeight", "min-h"], ["maxHeight", "max-h"], ["minWidth", "min-w"], ["maxWidth", "max-w"], ["quality", "q"], ["fit", "fit"], ["crop", "crop"], ["saturation", "sat"], ["auto", "auto"], ["dpr", "dpr"], ["pad", "pad"]];
      function urlForImage(options) {
        var spec = _extends7({}, options || {}), source = spec.source;
        delete spec.source;
        var image = parseSource(source);
        if (!image)
          throw new Error("Unable to resolve image URL from source (" + JSON.stringify(source) + ")");
        var id = image.asset._ref || image.asset._id || "", asset = parseAssetId(id), cropLeft = Math.round(image.crop.left * asset.width), cropTop = Math.round(image.crop.top * asset.height), crop = {
          left: cropLeft,
          top: cropTop,
          width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),
          height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)
        }, hotSpotVerticalRadius = image.hotspot.height * asset.height / 2, hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2, hotSpotCenterX = image.hotspot.x * asset.width, hotSpotCenterY = image.hotspot.y * asset.height, hotspot = {
          left: hotSpotCenterX - hotSpotHorizontalRadius,
          top: hotSpotCenterY - hotSpotVerticalRadius,
          right: hotSpotCenterX + hotSpotHorizontalRadius,
          bottom: hotSpotCenterY + hotSpotVerticalRadius
        };
        return spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop || (spec = _extends7({}, spec, fit({
          crop,
          hotspot
        }, spec))), specToImageUrl(_extends7({}, spec, {
          asset
        }));
      }
      function specToImageUrl(spec) {
        var cdnUrl2 = (spec.baseUrl || "https://cdn.sanity.io").replace(/\/+$/, ""), filename = spec.asset.id + "-" + spec.asset.width + "x" + spec.asset.height + "." + spec.asset.format, baseUrl = cdnUrl2 + "/images/" + spec.projectId + "/" + spec.dataset + "/" + filename, params = [];
        if (spec.rect) {
          var _spec$rect = spec.rect, left = _spec$rect.left, top = _spec$rect.top, width = _spec$rect.width, height = _spec$rect.height, isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;
          isEffectiveCrop && params.push("rect=" + left + "," + top + "," + width + "," + height);
        }
        spec.bg && params.push("bg=" + spec.bg), spec.focalPoint && (params.push("fp-x=" + spec.focalPoint.x), params.push("fp-y=" + spec.focalPoint.y));
        var flip = [spec.flipHorizontal && "h", spec.flipVertical && "v"].filter(Boolean).join("");
        return flip && params.push("flip=" + flip), SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function(mapping) {
          var specName = mapping[0], param = mapping[1];
          typeof spec[specName] < "u" ? params.push(param + "=" + encodeURIComponent(spec[specName])) : typeof spec[param] < "u" && params.push(param + "=" + encodeURIComponent(spec[param]));
        }), params.length === 0 ? baseUrl : baseUrl + "?" + params.join("&");
      }
      function fit(source, spec) {
        var cropRect, imgWidth = spec.width, imgHeight = spec.height;
        if (!(imgWidth && imgHeight))
          return {
            width: imgWidth,
            height: imgHeight,
            rect: source.crop
          };
        var crop = source.crop, hotspot = source.hotspot, desiredAspectRatio = imgWidth / imgHeight, cropAspectRatio = crop.width / crop.height;
        if (cropAspectRatio > desiredAspectRatio) {
          var height = Math.round(crop.height), width = Math.round(height * desiredAspectRatio), top = Math.max(0, Math.round(crop.top)), hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left), left = Math.max(0, Math.round(hotspotXCenter - width / 2));
          left < crop.left ? left = crop.left : left + width > crop.left + crop.width && (left = crop.left + crop.width - width), cropRect = {
            left,
            top,
            width,
            height
          };
        } else {
          var _width = crop.width, _height = Math.round(_width / desiredAspectRatio), _left = Math.max(0, Math.round(crop.left)), hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top), _top = Math.max(0, Math.round(hotspotYCenter - _height / 2));
          _top < crop.top ? _top = crop.top : _top + _height > crop.top + crop.height && (_top = crop.top + crop.height - _height), cropRect = {
            left: _left,
            top: _top,
            width: _width,
            height: _height
          };
        }
        return {
          width: imgWidth,
          height: imgHeight,
          rect: cropRect
        };
      }
      var validFits = ["clip", "crop", "fill", "fillmax", "max", "scale", "min"], validCrops = ["top", "bottom", "left", "right", "center", "focalpoint", "entropy"], validAutoModes = ["format"];
      function isSanityModernClientLike(client) {
        return client && "config" in client ? typeof client.config == "function" : !1;
      }
      function isSanityClientLike(client) {
        return client && "clientConfig" in client ? typeof client.clientConfig == "object" : !1;
      }
      function rewriteSpecName(key) {
        for (var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS, _iterator = _createForOfIteratorHelperLoose(specs), _step; !(_step = _iterator()).done; ) {
          var entry2 = _step.value, specName = entry2[0], param = entry2[1];
          if (key === specName || key === param)
            return specName;
        }
        return key;
      }
      function urlBuilder2(options) {
        if (isSanityModernClientLike(options)) {
          var _options$config = options.config(), apiUrl = _options$config.apiHost, projectId2 = _options$config.projectId, dataset2 = _options$config.dataset, apiHost = apiUrl || "https://api.sanity.io";
          return new ImageUrlBuilder(null, {
            baseUrl: apiHost.replace(/^https:\/\/api\./, "https://cdn."),
            projectId: projectId2,
            dataset: dataset2
          });
        }
        var client = options;
        if (isSanityClientLike(client)) {
          var _client$clientConfig = client.clientConfig, _apiUrl = _client$clientConfig.apiHost, _projectId = _client$clientConfig.projectId, _dataset = _client$clientConfig.dataset, _apiHost = _apiUrl || "https://api.sanity.io";
          return new ImageUrlBuilder(null, {
            baseUrl: _apiHost.replace(/^https:\/\/api\./, "https://cdn."),
            projectId: _projectId,
            dataset: _dataset
          });
        }
        return new ImageUrlBuilder(null, options);
      }
      var ImageUrlBuilder = /* @__PURE__ */ function() {
        function ImageUrlBuilder2(parent, options) {
          this.options = void 0, this.options = parent ? _extends7({}, parent.options || {}, options || {}) : _extends7({}, options || {});
        }
        var _proto = ImageUrlBuilder2.prototype;
        return _proto.withOptions = function(options) {
          var baseUrl = options.baseUrl || this.options.baseUrl, newOptions = {
            baseUrl
          };
          for (var key in options)
            if (options.hasOwnProperty(key)) {
              var specKey = rewriteSpecName(key);
              newOptions[specKey] = options[key];
            }
          return new ImageUrlBuilder2(this, _extends7({
            baseUrl
          }, newOptions));
        }, _proto.image = function(source) {
          return this.withOptions({
            source
          });
        }, _proto.dataset = function(_dataset2) {
          return this.withOptions({
            dataset: _dataset2
          });
        }, _proto.projectId = function(_projectId2) {
          return this.withOptions({
            projectId: _projectId2
          });
        }, _proto.bg = function(_bg) {
          return this.withOptions({
            bg: _bg
          });
        }, _proto.dpr = function(_dpr) {
          return this.withOptions(_dpr && _dpr !== 1 ? {
            dpr: _dpr
          } : {});
        }, _proto.width = function(_width) {
          return this.withOptions({
            width: _width
          });
        }, _proto.height = function(_height) {
          return this.withOptions({
            height: _height
          });
        }, _proto.focalPoint = function(x5, y4) {
          return this.withOptions({
            focalPoint: {
              x: x5,
              y: y4
            }
          });
        }, _proto.maxWidth = function(_maxWidth) {
          return this.withOptions({
            maxWidth: _maxWidth
          });
        }, _proto.minWidth = function(_minWidth) {
          return this.withOptions({
            minWidth: _minWidth
          });
        }, _proto.maxHeight = function(_maxHeight) {
          return this.withOptions({
            maxHeight: _maxHeight
          });
        }, _proto.minHeight = function(_minHeight) {
          return this.withOptions({
            minHeight: _minHeight
          });
        }, _proto.size = function(width, height) {
          return this.withOptions({
            width,
            height
          });
        }, _proto.blur = function(_blur) {
          return this.withOptions({
            blur: _blur
          });
        }, _proto.sharpen = function(_sharpen) {
          return this.withOptions({
            sharpen: _sharpen
          });
        }, _proto.rect = function(left, top, width, height) {
          return this.withOptions({
            rect: {
              left,
              top,
              width,
              height
            }
          });
        }, _proto.format = function(_format) {
          return this.withOptions({
            format: _format
          });
        }, _proto.invert = function(_invert) {
          return this.withOptions({
            invert: _invert
          });
        }, _proto.orientation = function(_orientation) {
          return this.withOptions({
            orientation: _orientation
          });
        }, _proto.quality = function(_quality) {
          return this.withOptions({
            quality: _quality
          });
        }, _proto.forceDownload = function(download) {
          return this.withOptions({
            download
          });
        }, _proto.flipHorizontal = function() {
          return this.withOptions({
            flipHorizontal: !0
          });
        }, _proto.flipVertical = function() {
          return this.withOptions({
            flipVertical: !0
          });
        }, _proto.ignoreImageParams = function() {
          return this.withOptions({
            ignoreImageParams: !0
          });
        }, _proto.fit = function(value) {
          if (validFits.indexOf(value) === -1)
            throw new Error('Invalid fit mode "' + value + '"');
          return this.withOptions({
            fit: value
          });
        }, _proto.crop = function(value) {
          if (validCrops.indexOf(value) === -1)
            throw new Error('Invalid crop mode "' + value + '"');
          return this.withOptions({
            crop: value
          });
        }, _proto.saturation = function(_saturation) {
          return this.withOptions({
            saturation: _saturation
          });
        }, _proto.auto = function(value) {
          if (validAutoModes.indexOf(value) === -1)
            throw new Error('Invalid auto mode "' + value + '"');
          return this.withOptions({
            auto: value
          });
        }, _proto.pad = function(_pad) {
          return this.withOptions({
            pad: _pad
          });
        }, _proto.url = function() {
          return urlForImage(this.options);
        }, _proto.toString = function() {
          return this.url();
        }, ImageUrlBuilder2;
      }();
      return urlBuilder2;
    });
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a9, b5) {
      if (a9 === b5)
        return !0;
      if (a9 && b5 && typeof a9 == "object" && typeof b5 == "object") {
        if (a9.constructor !== b5.constructor)
          return !1;
        var length2, i9, keys;
        if (Array.isArray(a9)) {
          if (length2 = a9.length, length2 != b5.length)
            return !1;
          for (i9 = length2; i9-- !== 0; )
            if (!equal(a9[i9], b5[i9]))
              return !1;
          return !0;
        }
        if (a9.constructor === RegExp)
          return a9.source === b5.source && a9.flags === b5.flags;
        if (a9.valueOf !== Object.prototype.valueOf)
          return a9.valueOf() === b5.valueOf();
        if (a9.toString !== Object.prototype.toString)
          return a9.toString() === b5.toString();
        if (keys = Object.keys(a9), length2 = keys.length, length2 !== Object.keys(b5).length)
          return !1;
        for (i9 = length2; i9-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b5, keys[i9]))
            return !1;
        for (i9 = length2; i9-- !== 0; ) {
          var key = keys[i9];
          if (!equal(a9[key], b5[key]))
            return !1;
        }
        return !0;
      }
      return a9 !== a9 && b5 !== b5;
    };
  }
});

// node_modules/@sanity/groq-store/node_modules/throttle-debounce/esm/index.js
function throttle(delay, callback, options) {
  var _ref = options || {}, _ref$noTrailing = _ref.noTrailing, noTrailing = _ref$noTrailing === void 0 ? !1 : _ref$noTrailing, _ref$noLeading = _ref.noLeading, noLeading = _ref$noLeading === void 0 ? !1 : _ref$noLeading, _ref$debounceMode = _ref.debounceMode, debounceMode = _ref$debounceMode === void 0 ? void 0 : _ref$debounceMode, timeoutID, cancelled = !1, lastExec = 0;
  function clearExistingTimeout() {
    timeoutID && clearTimeout(timeoutID);
  }
  function cancel(options2) {
    var _ref2 = options2 || {}, _ref2$upcomingOnly = _ref2.upcomingOnly, upcomingOnly = _ref2$upcomingOnly === void 0 ? !1 : _ref2$upcomingOnly;
    clearExistingTimeout(), cancelled = !upcomingOnly;
  }
  function wrapper() {
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++)
      arguments_[_key] = arguments[_key];
    var self2 = this, elapsed = Date.now() - lastExec;
    if (cancelled)
      return;
    function exec() {
      lastExec = Date.now(), callback.apply(self2, arguments_);
    }
    function clear() {
      timeoutID = void 0;
    }
    !noLeading && debounceMode && !timeoutID && exec(), clearExistingTimeout(), debounceMode === void 0 && elapsed > delay ? noLeading ? (lastExec = Date.now(), noTrailing || (timeoutID = setTimeout(debounceMode ? clear : exec, delay))) : exec() : noTrailing !== !0 && (timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay));
  }
  return wrapper.cancel = cancel, wrapper;
}
var init_esm = __esm({
  "node_modules/@sanity/groq-store/node_modules/throttle-debounce/esm/index.js"() {
  }
});

// node_modules/groq-js/dist/1.mjs
function escapeRegExp(string3) {
  return string3.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function pathRegExp(pattern) {
  let re4 = [];
  for (let part of pattern.split("."))
    part === "*" ? re4.push("[^.]+") : part === "**" ? re4.push(".*") : re4.push(escapeRegExp(part));
  return new RegExp("^".concat(re4.join("."), "$"));
}
function parseRFC3339(str) {
  return RFC3339_REGEX.test(str) ? new Date(str) : null;
}
function formatRFC3339(d15) {
  let year = addLeadingZero(d15.getUTCFullYear(), 4), month = addLeadingZero(d15.getUTCMonth() + 1, 2), day = addLeadingZero(d15.getUTCDate(), 2), hour = addLeadingZero(d15.getUTCHours(), 2), minute = addLeadingZero(d15.getUTCMinutes(), 2), second = addLeadingZero(d15.getUTCSeconds(), 2), fractionalSecond = "", millis = d15.getMilliseconds();
  return millis != 0 && (fractionalSecond = ".".concat(addLeadingZero(millis, 3))), "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":").concat(minute, ":").concat(second).concat(fractionalSecond, "Z");
}
function addLeadingZero(num, targetLength) {
  let str = num.toString();
  for (; str.length < targetLength; )
    str = "0".concat(str);
  return str;
}
function fromNumber(num) {
  return Number.isFinite(num) ? new StaticValue(num, "number") : NULL_VALUE;
}
function fromString(str) {
  return new StaticValue(str, "string");
}
function fromDateTime(dt) {
  return new StaticValue(dt, "datetime");
}
function fromPath(path2) {
  return new StaticValue(path2, "path");
}
function isIterator(obj) {
  return obj && typeof obj.next == "function";
}
function fromJS(val) {
  return isIterator(val) ? new StreamValue(async function* () {
    for await (let value of val)
      yield fromJS(value);
  }) : val == null ? NULL_VALUE : new StaticValue(val, getType(val));
}
function getType(data) {
  return data === null || typeof data > "u" ? "null" : Array.isArray(data) ? "array" : data instanceof Path ? "path" : data instanceof DateTime ? "datetime" : typeof data;
}
function isEqual(a9, b5) {
  return a9.type === "string" && b5.type === "string" || a9.type === "boolean" && b5.type === "boolean" || a9.type === "null" && b5.type === "null" || a9.type === "number" && b5.type === "number" ? a9.data === b5.data : a9.type === "datetime" && b5.type === "datetime" ? a9.data.equals(b5.data) : !1;
}
function matchText(tokens, patterns) {
  return tokens.length === 0 || patterns.length === 0 ? !1 : patterns.every((pattern) => pattern(tokens));
}
function matchTokenize(text2) {
  return text2.replace(EDGE_CHARS, "").match(CHARS) || [];
}
function matchAnalyzePattern(text2) {
  return matchPatternRegex(text2).map((re4) => (tokens) => tokens.some((token) => re4.test(token)));
}
function matchPatternRegex(text2) {
  return (text2.replace(EDGE_CHARS, "").match(CHARS_WITH_WILDCARD) || []).map((term) => new RegExp("^".concat(term.slice(0, MAX_TERM_LENGTH).replace(/\*/g, ".*"), "$"), "i"));
}
async function gatherText(value, cb) {
  if (value.type === "string")
    return cb(value.data), !0;
  if (value.isArray()) {
    let success = !0;
    for await (let part of value)
      part.type === "string" ? cb(part.data) : success = !1;
    return success;
  }
  return !1;
}
function partialCompare(a9, b5) {
  let aType = getType(a9), bType = getType(b5);
  if (aType !== bType)
    return null;
  switch (aType) {
    case "number":
    case "boolean":
      return a9 - b5;
    case "string":
      return a9 < b5 ? -1 : a9 > b5 ? 1 : 0;
    case "datetime":
      return a9.compareTo(b5);
    default:
      return null;
  }
}
function totalCompare(a9, b5) {
  let aType = getType(a9), bType = getType(b5), aTypeOrder = TYPE_ORDER[aType] || 100, bTypeOrder = TYPE_ORDER[bType] || 100;
  if (aTypeOrder !== bTypeOrder)
    return aTypeOrder - bTypeOrder;
  let result = partialCompare(a9, b5);
  return result === null && (result = 0), result;
}
function numericOperator(impl) {
  return function(left, right) {
    if (left.type === "number" && right.type === "number") {
      let result = impl(left.data, right.data);
      return fromNumber(result);
    }
    return NULL_VALUE;
  };
}
function evaluate(node, scope) {
  let execute = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : evaluate, func = EXECUTORS[node.type];
  return func(node, scope, execute);
}
function promiselessApply(value, cb) {
  return "then" in value ? value.then(cb) : cb(value);
}
function evaluateQuery(tree) {
  let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, root = fromJS(options.root), dataset2 = fromJS(options.dataset), params = {
    ...options.params
  }, scope = new Scope(params, dataset2, root, {
    timestamp: options.timestamp || /* @__PURE__ */ new Date(),
    identity: options.identity === void 0 ? "me" : options.identity,
    sanity: options.sanity,
    after: options.after ? fromJS(options.after) : null,
    before: options.before ? fromJS(options.before) : null
  }, null);
  return evaluate(tree, scope);
}
function canConstantEvaluate(node) {
  switch (node.type) {
    case "Group":
    case "Value":
    case "Parameter":
      return !0;
    case "Pos":
    case "Neg":
      return canConstantEvaluate(node.base);
    case "OpCall":
      switch (node.op) {
        case "+":
        case "-":
        case "*":
        case "/":
        case "%":
        case "**":
          return canConstantEvaluate(node.left) && canConstantEvaluate(node.right);
        default:
          return !1;
      }
    default:
      return !1;
  }
}
function tryConstantEvaluate(node) {
  return canConstantEvaluate(node) ? constantEvaluate(node) : null;
}
function constantEvaluate(node) {
  let value = evaluate(node, DUMMY_SCOPE, constantEvaluate);
  if ("then" in value)
    throw new Error("BUG: constant evaluate should never return a promise");
  return value;
}
async function portableTextContent(value) {
  if (value.type === "object")
    return blockText(value.data);
  if (value.isArray()) {
    let texts = await arrayText(value);
    if (texts.length > 0)
      return texts.join(`

`);
  }
  return null;
}
async function arrayText(value) {
  let result = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  for await (let block of value)
    if (block.type === "object") {
      let text2 = blockText(block.data);
      text2 !== null && result.push(text2);
    } else
      block.isArray() && await arrayText(block, result);
  return result;
}
function blockText(obj) {
  if (typeof obj._type != "string")
    return null;
  let children = obj.children;
  if (!Array.isArray(children))
    return null;
  let result = "";
  for (let child of children)
    child && typeof child == "object" && typeof child._type == "string" && child._type === "span" && typeof child.text == "string" && (result += child.text);
  return result;
}
async function evaluateScore(node, scope, execute) {
  if (node.type === "OpCall" && node.op === "match")
    return evaluateMatchScore(node.left, node.right, scope, execute);
  if (node.type === "FuncCall" && node.name === "boost") {
    let innerScore = await evaluateScore(node.args[0], scope, execute), boost2 = await execute(node.args[1], scope);
    return boost2.type === "number" && innerScore > 0 ? innerScore + boost2.data : 0;
  }
  switch (node.type) {
    case "Or": {
      let leftScore = await evaluateScore(node.left, scope, execute), rightScore = await evaluateScore(node.right, scope, execute);
      return leftScore + rightScore;
    }
    case "And": {
      let leftScore = await evaluateScore(node.left, scope, execute), rightScore = await evaluateScore(node.right, scope, execute);
      return leftScore === 0 || rightScore === 0 ? 0 : leftScore + rightScore;
    }
    default: {
      let res = await execute(node, scope);
      return res.type === "boolean" && res.data === !0 ? 1 : 0;
    }
  }
}
async function evaluateMatchScore(left, right, scope, execute) {
  let text2 = await execute(left, scope), pattern = await execute(right, scope), tokens = [], terms = [];
  if (await gatherText(text2, (part) => {
    tokens = tokens.concat(matchTokenize(part));
  }), !await gatherText(pattern, (part) => {
    terms = terms.concat(matchPatternRegex(part));
  }) || tokens.length === 0 || terms.length === 0)
    return 0;
  let score2 = 0;
  for (let re4 of terms) {
    let freq = tokens.reduce((c9, token) => c9 + (re4.test(token) ? 1 : 0), 0);
    score2 += freq * (BM25k + 1) / (freq + BM25k);
  }
  return score2;
}
function hasReference(value, pathSet) {
  switch (getType(value)) {
    case "array":
      for (let v5 of value)
        if (hasReference(v5, pathSet))
          return !0;
      break;
    case "object":
      if (value._ref)
        return pathSet.has(value._ref);
      for (let v5 of Object.values(value))
        if (hasReference(v5, pathSet))
          return !0;
      break;
  }
  return !1;
}
function countUTF8(str) {
  let count2 = 0;
  for (let i9 = 0; i9 < str.length; i9++) {
    let code = str.charCodeAt(i9);
    code >= 55296 && code <= 56319 || count2++;
  }
  return count2;
}
function parse$1(str) {
  let pos = 0;
  pos = skipWS(str, pos);
  let result = parseExpr(str, pos, 0);
  return result.type === "error" ? result : (pos = skipWS(str, result.position), pos !== str.length ? (result.failPosition && (pos = result.failPosition - 1), {
    type: "error",
    position: pos
  }) : (delete result.position, delete result.failPosition, result));
}
function parseExpr(str, pos, level) {
  let startPos = pos, token = str[pos], marks;
  switch (token) {
    case "+": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_POS);
      if (rhs.type === "error")
        return rhs;
      marks = [{
        name: "pos",
        position: startPos
      }].concat(rhs.marks), pos = rhs.position;
      break;
    }
    case "-": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NEG);
      if (rhs.type === "error")
        return rhs;
      marks = [{
        name: "neg",
        position: startPos
      }].concat(rhs.marks), pos = rhs.position;
      break;
    }
    case "(": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), 0);
      if (rhs.type === "error")
        return rhs;
      switch (pos = skipWS(str, rhs.position), str[pos]) {
        case ",": {
          for (marks = [{
            name: "tuple",
            position: startPos
          }].concat(rhs.marks), pos = skipWS(str, pos + 1); ; ) {
            if (rhs = parseExpr(str, pos, 0), rhs.type === "error")
              return rhs;
            if (pos = skipWS(str, rhs.position), str[pos] !== ",")
              break;
            pos = skipWS(str, pos + 1);
          }
          if (str[pos] !== ")")
            return {
              type: "error",
              position: pos
            };
          pos++, marks.push({
            name: "tuple_end",
            position: pos
          });
          break;
        }
        case ")": {
          pos++, marks = [{
            name: "group",
            position: startPos
          }].concat(rhs.marks);
          break;
        }
        default:
          return {
            type: "error",
            position: pos
          };
      }
      break;
    }
    case "!": {
      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NOT);
      if (rhs.type === "error")
        return rhs;
      marks = [{
        name: "not",
        position: startPos
      }].concat(rhs.marks), pos = rhs.position;
      break;
    }
    case "{": {
      let result = parseObject(str, pos);
      if (result.type === "error")
        return result;
      marks = result.marks, pos = result.position;
      break;
    }
    case "[":
      if (marks = [{
        name: "array",
        position: pos
      }], pos = skipWS(str, pos + 1), str[pos] !== "]")
        for (; ; ) {
          str.slice(pos, pos + 3) === "..." && (marks.push({
            name: "array_splat",
            position: pos
          }), pos = skipWS(str, pos + 3));
          let res = parseExpr(str, pos, 0);
          if (res.type === "error")
            return res;
          if (marks = marks.concat(res.marks), pos = res.position, pos = skipWS(str, pos), str[pos] !== "," || (pos = skipWS(str, pos + 1), str[pos] === "]"))
            break;
        }
      if (str[pos] === "]")
        pos++, marks.push({
          name: "array_end",
          position: pos
        });
      else
        return {
          type: "error",
          position: pos
        };
      break;
    case "'":
    case '"': {
      let result = parseString(str, pos);
      if (result.type === "error")
        return result;
      marks = result.marks, pos = result.position;
      break;
    }
    case "^": {
      for (pos++, marks = []; str[pos] === "." && str[pos + 1] === "^"; )
        marks.push({
          name: "dblparent",
          position: startPos
        }), pos += 2;
      marks.push({
        name: "parent",
        position: startPos
      });
      break;
    }
    case "@":
      marks = [{
        name: "this",
        position: startPos
      }], pos++;
      break;
    case "*":
      marks = [{
        name: "everything",
        position: startPos
      }], pos++;
      break;
    case "$": {
      let identLen = parseRegex(str, pos + 1, IDENT);
      identLen && (pos += 1 + identLen, marks = [{
        name: "param",
        position: startPos
      }, {
        name: "ident",
        position: startPos + 1
      }, {
        name: "ident_end",
        position: pos
      }]);
      break;
    }
    default: {
      let numLen = parseRegex(str, pos, NUM);
      if (numLen) {
        pos += numLen;
        let name = "integer";
        if (str[pos] === ".") {
          let fracLen = parseRegex(str, pos + 1, NUM);
          fracLen && (name = "float", pos += 1 + fracLen);
        }
        if (str[pos] === "e" || str[pos] === "E") {
          name = "sci", pos++, (str[pos] === "+" || str[pos] === "-") && pos++;
          let expLen = parseRegex(str, pos, NUM);
          if (!expLen)
            return {
              type: "error",
              position: pos
            };
          pos += expLen;
        }
        marks = [{
          name,
          position: startPos
        }, {
          name: name + "_end",
          position: pos
        }];
        break;
      }
      let identLen = parseRegex(str, pos, IDENT);
      if (identLen) {
        switch (pos += identLen, str[pos]) {
          case ":":
          case "(": {
            let result = parseFuncCall(str, startPos, pos);
            if (result.type === "error")
              return result;
            marks = result.marks, pos = result.position;
            break;
          }
          default:
            marks = [{
              name: "this_attr",
              position: startPos
            }, {
              name: "ident",
              position: startPos
            }, {
              name: "ident_end",
              position: pos
            }];
        }
        break;
      }
    }
  }
  if (!marks)
    return {
      type: "error",
      position: pos
    };
  let lhsLevel = 12, trav;
  loop:
    for (; ; ) {
      let innerPos = skipWS(str, pos);
      if (innerPos === str.length) {
        pos = innerPos;
        break;
      }
      if (trav = parseTraversal(str, innerPos), trav.type === "success") {
        for (marks.unshift({
          name: "traverse",
          position: startPos
        }); trav.type === "success"; )
          marks = marks.concat(trav.marks), pos = trav.position, trav = parseTraversal(str, skipWS(str, pos));
        marks.push({
          name: "traversal_end",
          position: pos
        });
        continue;
      }
      switch (str[innerPos]) {
        case "=": {
          switch (str[innerPos + 1]) {
            case ">": {
              if (level > PREC_PAIR || lhsLevel <= PREC_PAIR)
                break loop;
              let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_PAIR);
              if (rhs.type === "error")
                return rhs;
              marks = marks.concat(rhs.marks), marks.unshift({
                name: "pair",
                position: startPos
              }), pos = rhs.position, lhsLevel = PREC_PAIR;
              break;
            }
            case "=": {
              if (level > PREC_COMP || lhsLevel <= PREC_COMP)
                break loop;
              let rhs = parseExpr(str, skipWS(str, innerPos + 2), 5);
              if (rhs.type === "error")
                return rhs;
              marks.unshift({
                name: "comp",
                position: startPos
              }), marks.push({
                name: "op",
                position: innerPos
              }, {
                name: "op_end",
                position: innerPos + 2
              }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = PREC_COMP;
              break;
            }
            default:
              break loop;
          }
          break;
        }
        case "+": {
          if (level > PREC_ADD || lhsLevel < PREC_ADD)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_ADD + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "add",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_ADD;
          break;
        }
        case "-": {
          if (level > PREC_SUB || lhsLevel < PREC_SUB)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_SUB + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "sub",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_SUB;
          break;
        }
        case "*": {
          if (str[innerPos + 1] === "*") {
            if (level > PREC_POW || lhsLevel <= PREC_POW)
              break loop;
            let rhs2 = parseExpr(str, skipWS(str, innerPos + 2), PREC_POW);
            if (rhs2.type === "error")
              return rhs2;
            marks = marks.concat(rhs2.marks), marks.unshift({
              name: "pow",
              position: startPos
            }), pos = rhs2.position, lhsLevel = PREC_POW;
            break;
          }
          if (level > PREC_MUL || lhsLevel < PREC_MUL)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MUL + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "mul",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_MUL;
          break;
        }
        case "/": {
          if (level > PREC_DIV || lhsLevel < PREC_DIV)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_DIV + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "div",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_DIV;
          break;
        }
        case "%": {
          if (level > PREC_MOD || lhsLevel < PREC_MOD)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MOD + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "mod",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_MOD;
          break;
        }
        case "<":
        case ">": {
          if (level > PREC_COMP || lhsLevel <= PREC_COMP)
            break loop;
          let nextPos = innerPos + 1;
          str[nextPos] === "=" && nextPos++;
          let rhs = parseExpr(str, skipWS(str, nextPos), PREC_COMP + 1);
          if (rhs.type === "error")
            return rhs;
          marks.unshift({
            name: "comp",
            position: startPos
          }), marks.push({
            name: "op",
            position: innerPos
          }, {
            name: "op_end",
            position: nextPos
          }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = PREC_COMP;
          break;
        }
        case "|": {
          if (str[innerPos + 1] === "|") {
            if (level > PREC_OR || lhsLevel < PREC_OR)
              break loop;
            let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_OR + 1);
            if (rhs.type === "error")
              return rhs;
            marks = marks.concat(rhs.marks), marks.unshift({
              name: "or",
              position: startPos
            }), pos = rhs.position, lhsLevel = PREC_OR;
          } else {
            if (level > 11 || lhsLevel < 11)
              break loop;
            let identPos = skipWS(str, innerPos + 1), identLen = parseRegex(str, identPos, IDENT);
            if (!identLen)
              return {
                type: "error",
                position: identPos
              };
            if (pos = identPos + identLen, str[pos] === "(" || str[pos] === ":") {
              let result = parseFuncCall(str, identPos, pos);
              if (result.type === "error")
                return result;
              marks = marks.concat(result.marks), marks.unshift({
                name: "pipecall",
                position: startPos
              }), pos = result.position, lhsLevel = 11;
            }
          }
          break;
        }
        case "&": {
          if (str[innerPos + 1] != "&" || level > PREC_AND || lhsLevel < PREC_AND)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_AND + 1);
          if (rhs.type === "error")
            return rhs;
          marks = marks.concat(rhs.marks), marks.unshift({
            name: "and",
            position: startPos
          }), pos = rhs.position, lhsLevel = PREC_AND;
          break;
        }
        case "!": {
          if (str[innerPos + 1] !== "=" || level > PREC_COMP || lhsLevel < PREC_COMP)
            break loop;
          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1);
          if (rhs.type === "error")
            return rhs;
          marks.unshift({
            name: "comp",
            position: startPos
          }), marks.push({
            name: "op",
            position: innerPos
          }, {
            name: "op_end",
            position: innerPos + 2
          }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = PREC_COMP;
          break;
        }
        case "d": {
          if (str.slice(innerPos, innerPos + 4) !== "desc" || level > PREC_ORDER || lhsLevel < PREC_ORDER)
            break loop;
          marks.unshift({
            name: "desc",
            position: startPos
          }), pos = innerPos + 4, lhsLevel = PREC_ORDER;
          break;
        }
        case "a": {
          if (str.slice(innerPos, innerPos + 3) !== "asc" || level > PREC_ORDER || lhsLevel < PREC_ORDER)
            break loop;
          marks.unshift({
            name: "asc",
            position: startPos
          }), pos = innerPos + 3, lhsLevel = PREC_ORDER;
          break;
        }
        default:
          switch (parseRegexStr(str, innerPos, IDENT)) {
            case "in": {
              if (level > PREC_COMP || lhsLevel <= PREC_COMP)
                break loop;
              pos = skipWS(str, innerPos + 2);
              let isGroup = !1;
              str[pos] === "(" && (isGroup = !0, pos = skipWS(str, pos + 1));
              let rangePos = pos, result = parseExpr(str, pos, PREC_COMP + 1);
              if (result.type === "error")
                return result;
              if (pos = skipWS(str, result.position), str[pos] === "." && str[pos + 1] === ".") {
                let type = "inc_range";
                str[pos + 2] === "." ? (type = "exc_range", pos = skipWS(str, pos + 3)) : pos = skipWS(str, pos + 2);
                let rhs = parseExpr(str, pos, PREC_COMP + 1);
                if (rhs.type === "error")
                  return rhs;
                marks.unshift({
                  name: "in_range",
                  position: startPos
                }), marks = marks.concat({
                  name: type,
                  position: rangePos
                }, result.marks, rhs.marks), pos = rhs.position;
              } else
                marks.unshift({
                  name: "comp",
                  position: startPos
                }), marks.push({
                  name: "op",
                  position: innerPos
                }, {
                  name: "op_end",
                  position: innerPos + 2
                }), marks = marks.concat(result.marks);
              if (isGroup) {
                if (pos = skipWS(str, pos), str[pos] !== ")")
                  return {
                    type: "error",
                    position: pos
                  };
                pos++;
              }
              lhsLevel = PREC_COMP;
              break;
            }
            case "match": {
              if (level > PREC_COMP || lhsLevel <= PREC_COMP)
                break loop;
              let rhs = parseExpr(str, skipWS(str, innerPos + 5), PREC_COMP + 1);
              if (rhs.type === "error")
                return rhs;
              marks.unshift({
                name: "comp",
                position: startPos
              }), marks.push({
                name: "op",
                position: innerPos
              }, {
                name: "op_end",
                position: innerPos + 5
              }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = 4;
              break;
            }
            default:
              break loop;
          }
      }
    }
  let failPosition = (trav == null ? void 0 : trav.type) === "error" && trav.position;
  return {
    type: "success",
    marks,
    position: pos,
    failPosition
  };
}
function parseTraversal(str, pos) {
  let startPos = pos;
  switch (str[pos]) {
    case ".": {
      pos = skipWS(str, pos + 1);
      let identStart = pos, identLen2 = parseRegex(str, pos, IDENT);
      return identLen2 ? (pos += identLen2, {
        type: "success",
        marks: [{
          name: "attr_access",
          position: startPos
        }, {
          name: "ident",
          position: identStart
        }, {
          name: "ident_end",
          position: pos
        }],
        position: pos
      }) : {
        type: "error",
        position: pos
      };
    }
    case "-":
      if (str[pos + 1] !== ">")
        return {
          type: "error",
          position: pos
        };
      let marks = [{
        name: "deref",
        position: startPos
      }];
      pos += 2;
      let identPos = skipWS(str, pos), identLen = parseRegex(str, identPos, IDENT);
      return identLen && (pos = identPos + identLen, marks.push({
        name: "deref_attr",
        position: identPos
      }, {
        name: "ident",
        position: identPos
      }, {
        name: "ident_end",
        position: pos
      })), {
        type: "success",
        marks,
        position: pos
      };
    case "[": {
      if (pos = skipWS(str, pos + 1), str[pos] === "]")
        return {
          type: "success",
          marks: [{
            name: "array_postfix",
            position: startPos
          }],
          position: pos + 1
        };
      let rangePos = pos, result = parseExpr(str, pos, 0);
      if (result.type === "error")
        return result;
      if (pos = skipWS(str, result.position), str[pos] === "." && str[pos + 1] === ".") {
        let type = "inc_range";
        str[pos + 2] === "." ? (type = "exc_range", pos += 3) : pos += 2, pos = skipWS(str, pos);
        let rhs = parseExpr(str, pos, 0);
        return rhs.type === "error" ? rhs : (pos = skipWS(str, rhs.position), str[pos] !== "]" ? {
          type: "error",
          position: pos
        } : {
          type: "success",
          marks: [{
            name: "slice",
            position: startPos
          }, {
            name: type,
            position: rangePos
          }].concat(result.marks, rhs.marks),
          position: pos + 1
        });
      }
      return str[pos] !== "]" ? {
        type: "error",
        position: pos
      } : {
        type: "success",
        marks: [{
          name: "square_bracket",
          position: startPos
        }].concat(result.marks),
        position: pos + 1
      };
    }
    case "|": {
      if (pos = skipWS(str, pos + 1), str[pos] === "{") {
        let result = parseObject(str, pos);
        return result.type === "error" || result.marks.unshift({
          name: "projection",
          position: startPos
        }), result;
      }
      break;
    }
    case "{": {
      let result = parseObject(str, pos);
      return result.type === "error" || result.marks.unshift({
        name: "projection",
        position: startPos
      }), result;
    }
  }
  return {
    type: "error",
    position: pos
  };
}
function parseFuncCall(str, startPos, pos) {
  let marks = [];
  if (marks.push({
    name: "func_call",
    position: startPos
  }), str[pos] === ":" && str[pos + 1] === ":") {
    marks.push({
      name: "namespace",
      position: startPos
    }), marks.push({
      name: "ident",
      position: startPos
    }, {
      name: "ident_end",
      position: pos
    }), pos = skipWS(str, pos + 2);
    let nameLen = parseRegex(str, pos, IDENT);
    if (!nameLen)
      return {
        type: "error",
        position: pos
      };
    if (marks.push({
      name: "ident",
      position: pos
    }, {
      name: "ident_end",
      position: pos + nameLen
    }), pos = skipWS(str, pos + nameLen), str[pos] !== "(")
      return {
        type: "error",
        position: pos
      };
    pos++, pos = skipWS(str, pos);
  } else
    marks.push({
      name: "ident",
      position: startPos
    }, {
      name: "ident_end",
      position: pos
    }), pos = skipWS(str, pos + 1);
  let lastPos = pos;
  if (str[pos] !== ")")
    for (; ; ) {
      let result = parseExpr(str, pos, 0);
      if (result.type === "error")
        return result;
      if (marks = marks.concat(result.marks), lastPos = result.position, pos = skipWS(str, result.position), str[pos] !== "," || (pos = skipWS(str, pos + 1), str[pos] === ")"))
        break;
    }
  return str[pos] !== ")" ? {
    type: "error",
    position: pos
  } : (marks.push({
    name: "func_args_end",
    position: lastPos
  }), {
    type: "success",
    marks,
    position: pos + 1
  });
}
function parseObject(str, pos) {
  let marks = [{
    name: "object",
    position: pos
  }];
  for (pos = skipWS(str, pos + 1); str[pos] !== "}"; ) {
    let pairPos = pos;
    if (str.slice(pos, pos + 3) === "...")
      if (pos = skipWS(str, pos + 3), str[pos] !== "}" && str[pos] !== ",") {
        let expr = parseExpr(str, pos, 0);
        if (expr.type === "error")
          return expr;
        marks.push({
          name: "object_splat",
          position: pairPos
        }), marks = marks.concat(expr.marks), pos = expr.position;
      } else
        marks.push({
          name: "object_splat_this",
          position: pairPos
        });
    else {
      let expr = parseExpr(str, pos, 0);
      if (expr.type === "error")
        return expr;
      let nextPos = skipWS(str, expr.position);
      if (expr.marks[0].name === "str" && str[nextPos] === ":") {
        let value = parseExpr(str, skipWS(str, nextPos + 1), 0);
        if (value.type === "error")
          return value;
        marks.push({
          name: "object_pair",
          position: pairPos
        }), marks = marks.concat(expr.marks, value.marks), pos = value.position;
      } else
        marks = marks.concat({
          name: "object_expr",
          position: pos
        }, expr.marks), pos = expr.position;
    }
    if (pos = skipWS(str, pos), str[pos] !== ",")
      break;
    pos = skipWS(str, pos + 1);
  }
  return str[pos] !== "}" ? {
    type: "error",
    position: pos
  } : (pos++, marks.push({
    name: "object_end",
    position: pos
  }), {
    type: "success",
    marks,
    position: pos
  });
}
function parseString(str, pos) {
  let token = str[pos];
  pos = pos + 1;
  let marks = [{
    name: "str",
    position: pos
  }];
  str:
    for (; ; pos++) {
      if (pos > str.length)
        return {
          type: "error",
          position: pos
        };
      switch (str[pos]) {
        case token: {
          marks.push({
            name: "str_end",
            position: pos
          }), pos++;
          break str;
        }
        case "\\":
          marks.push({
            name: "str_pause",
            position: pos
          }), str[pos + 1] === "u" ? str[pos + 2] === "{" ? (marks.push({
            name: "unicode_hex",
            position: pos + 3
          }), pos = str.indexOf("}", pos + 3), marks.push({
            name: "unicode_hex_end",
            position: pos
          })) : (marks.push({
            name: "unicode_hex",
            position: pos + 2
          }), marks.push({
            name: "unicode_hex_end",
            position: pos + 6
          }), pos += 5) : (marks.push({
            name: "single_escape",
            position: pos + 1
          }), pos += 1), marks.push({
            name: "str_start",
            position: pos + 1
          });
      }
    }
  return {
    type: "success",
    marks,
    position: pos
  };
}
function skipWS(str, pos) {
  return pos + parseRegex(str, pos, WS);
}
function parseRegex(str, pos, re4) {
  let m11 = re4.exec(str.slice(pos));
  return m11 ? m11[0].length : 0;
}
function parseRegexStr(str, pos, re4) {
  let m11 = re4.exec(str.slice(pos));
  return m11 ? m11[0] : null;
}
function join(a9, b5) {
  return (base) => b5(a9(base));
}
function map(inner) {
  return (base) => ({
    type: "Map",
    base,
    expr: inner({
      type: "This"
    })
  });
}
function flatMap(inner) {
  return (base) => ({
    type: "FlatMap",
    base,
    expr: inner({
      type: "This"
    })
  });
}
function traverseArray(build, right) {
  if (!right)
    return {
      type: "a-a",
      build
    };
  switch (right.type) {
    case "a-a":
      return {
        type: "a-a",
        build: join(build, right.build)
      };
    case "a-b":
      return {
        type: "a-b",
        build: join(build, right.build)
      };
    case "b-b":
      return {
        type: "a-a",
        build: join(build, map(right.build))
      };
    case "b-a":
      return {
        type: "a-a",
        build: join(build, flatMap(right.build))
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function traversePlain(mapper, right) {
  if (!right)
    return {
      type: "b-b",
      build: mapper
    };
  switch (right.type) {
    case "a-a":
    case "b-a":
      return {
        type: "b-a",
        build: join(mapper, right.build)
      };
    case "a-b":
    case "b-b":
      return {
        type: "b-b",
        build: join(mapper, right.build)
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function traverseElement(mapper, right) {
  if (!right)
    return {
      type: "a-b",
      build: mapper
    };
  switch (right.type) {
    case "a-a":
    case "b-a":
      return {
        type: "a-a",
        build: join(mapper, right.build)
      };
    case "a-b":
    case "b-b":
      return {
        type: "a-b",
        build: join(mapper, right.build)
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function traverseProjection(mapper, right) {
  if (!right)
    return {
      type: "b-b",
      build: mapper
    };
  switch (right.type) {
    case "a-a":
      return {
        type: "a-a",
        build: join(map(mapper), right.build)
      };
    case "a-b":
      return {
        type: "a-b",
        build: join(map(mapper), right.build)
      };
    case "b-a":
      return {
        type: "b-a",
        build: join(mapper, right.build)
      };
    case "b-b":
      return {
        type: "b-b",
        build: join(mapper, right.build)
      };
    default:
      throw new Error("unknown type: ".concat(right.type));
  }
}
function expandHex(str) {
  let charCode = parseInt(str, 16);
  return String.fromCharCode(charCode);
}
function extractPropertyKey(node) {
  if (node.type === "AccessAttribute" && !node.base)
    return node.name;
  if (node.type === "Deref" || node.type === "Map" || node.type === "Projection" || node.type === "Slice" || node.type === "Filter" || node.type === "AccessElement" || node.type === "ArrayCoerce")
    return extractPropertyKey(node.base);
  throw new GroqQueryError("Cannot determine property key for type: ".concat(node.type));
}
function validateArity(name, arity, count2) {
  if (typeof arity == "number") {
    if (count2 !== arity)
      throw new GroqQueryError("Incorrect number of arguments to function ".concat(name, "(). Expected ").concat(arity, ", got ").concat(count2, "."));
  } else if (arity && !arity(count2))
    throw new GroqQueryError("Incorrect number of arguments to function ".concat(name, "()."));
}
function argumentShouldBeSelector(namespace, functionName, argCount) {
  let functionsRequiringSelectors = ["changedAny", "changedOnly"];
  return namespace == "diff" && argCount == 2 && functionsRequiringSelectors.includes(functionName);
}
function parse2(input) {
  let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, result = parse$1(input);
  if (result.type === "error")
    throw new GroqSyntaxError(result.position);
  return new MarkProcessor(input, result.marks, options).process(EXPR_BUILDER);
}
var Path, StreamValue, RFC3339_REGEX, StaticValue, NULL_VALUE, TRUE_VALUE, FALSE_VALUE, DateTime, CHARS, CHARS_WITH_WILDCARD, EDGE_CHARS, MAX_TERM_LENGTH, TYPE_ORDER, operators, Scope, EXECUTORS, DUMMY_SCOPE, BM25k, _global, string2, array, pt, sanity, pipeFunctions, delta, diff, math, namespaces, MarkProcessor, WS, NUM, IDENT, PREC_PAIR, PREC_OR, PREC_AND, PREC_COMP, PREC_ORDER, PREC_ADD, PREC_SUB, PREC_MUL, PREC_DIV, PREC_MOD, PREC_POW, PREC_POS, PREC_NOT, PREC_NEG, ESCAPE_SEQUENCE, GroqQueryError, EXPR_BUILDER, OBJECT_BUILDER, TRAVERSE_BUILDER, SELECTOR_BUILDER, GroqSyntaxError, init__ = __esm({
  "node_modules/groq-js/dist/1.mjs"() {
    Path = class {
      constructor(pattern) {
        this.pattern = pattern, this.patternRe = pathRegExp(pattern);
      }
      matches(str) {
        return this.patternRe.test(str);
      }
      toJSON() {
        return this.pattern;
      }
    }, StreamValue = class {
      constructor(generator) {
        this.type = "stream", this.generator = generator, this.ticker = null, this.isDone = !1, this.data = [];
      }
      isArray() {
        return !0;
      }
      async get() {
        let result = [];
        for await (let value of this)
          result.push(await value.get());
        return result;
      }
      async *[Symbol.asyncIterator]() {
        let i9 = 0;
        for (; ; ) {
          for (; i9 < this.data.length; i9++)
            yield this.data[i9];
          if (this.isDone)
            return;
          await this._nextTick();
        }
      }
      _nextTick() {
        if (this.ticker)
          return this.ticker;
        let currentResolver, setupTicker = () => {
          this.ticker = new Promise((resolve) => {
            currentResolver = resolve;
          });
        }, tick = () => {
          currentResolver(), setupTicker();
        }, fetch2 = async () => {
          for await (let value of this.generator())
            this.data.push(value), tick();
          this.isDone = !0, tick();
        };
        return setupTicker(), fetch2(), this.ticker;
      }
    }, RFC3339_REGEX = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|([-+]\d{2}:\d{2}))$/;
    StaticValue = class {
      constructor(data, type) {
        this.data = data, this.type = type;
      }
      isArray() {
        return this.type === "array";
      }
      async get() {
        return this.data;
      }
      [Symbol.asyncIterator]() {
        if (Array.isArray(this.data))
          return function* (data) {
            for (let element of data)
              yield fromJS(element);
          }(this.data);
        throw new Error("Cannot iterate over: ".concat(this.type));
      }
    }, NULL_VALUE = new StaticValue(null, "null"), TRUE_VALUE = new StaticValue(!0, "boolean"), FALSE_VALUE = new StaticValue(!1, "boolean"), DateTime = class {
      constructor(date) {
        this.date = date;
      }
      static parseToValue(str) {
        let date = parseRFC3339(str);
        return date ? new StaticValue(new DateTime(date), "datetime") : NULL_VALUE;
      }
      equals(other) {
        return this.date.getTime() == other.date.getTime();
      }
      add(secs) {
        let copy = new Date(this.date.getTime());
        return copy.setTime(copy.getTime() + secs * 1e3), new DateTime(copy);
      }
      difference(other) {
        return (this.date.getTime() - other.date.getTime()) / 1e3;
      }
      compareTo(other) {
        return this.date.getTime() - other.date.getTime();
      }
      toString() {
        return formatRFC3339(this.date);
      }
      toJSON() {
        return this.toString();
      }
    };
    CHARS = /([^!@#$%^&*(),\\/?";:{}|[\]+<>\s-])+/g, CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\/?";:{}|[\]+<>\s-])+/g, EDGE_CHARS = /(\b\.+|\.+\b)/g, MAX_TERM_LENGTH = 1024;
    TYPE_ORDER = {
      datetime: 1,
      number: 2,
      string: 3,
      boolean: 4
    };
    operators = {
      "==": function(left, right) {
        return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;
      },
      "!=": function(left, right) {
        return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;
      },
      ">": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result > 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      ">=": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result >= 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      "<": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result < 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      "<=": function(left, right) {
        if (left.type === "stream" || right.type === "stream")
          return NULL_VALUE;
        let result = partialCompare(left.data, right.data);
        return result === null ? NULL_VALUE : result <= 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      in: async function(left, right) {
        if (right.type === "path")
          return left.type !== "string" ? NULL_VALUE : right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE;
        if (right.isArray()) {
          for await (let b5 of right)
            if (isEqual(left, b5))
              return TRUE_VALUE;
          return FALSE_VALUE;
        }
        return NULL_VALUE;
      },
      match: async function(left, right) {
        let tokens = [], patterns = [];
        return await gatherText(left, (part) => {
          tokens = tokens.concat(matchTokenize(part));
        }), await gatherText(right, (part) => {
          patterns = patterns.concat(matchAnalyzePattern(part));
        }) && matchText(tokens, patterns) ? TRUE_VALUE : FALSE_VALUE;
      },
      "+": function(left, right) {
        return left.type === "datetime" && right.type === "number" ? fromDateTime(left.data.add(right.data)) : left.type === "number" && right.type === "number" ? fromNumber(left.data + right.data) : left.type === "string" && right.type === "string" ? fromString(left.data + right.data) : left.type === "object" && right.type === "object" ? fromJS({
          ...left.data,
          ...right.data
        }) : left.type === "array" && right.type === "array" ? fromJS(left.data.concat(right.data)) : left.isArray() && right.isArray() ? new StreamValue(async function* () {
          for await (let val of left)
            yield val;
          for await (let val of right)
            yield val;
        }) : NULL_VALUE;
      },
      "-": function(left, right) {
        return left.type === "datetime" && right.type === "number" ? fromDateTime(left.data.add(-right.data)) : left.type === "datetime" && right.type === "datetime" ? fromNumber(left.data.difference(right.data)) : left.type === "number" && right.type === "number" ? fromNumber(left.data - right.data) : NULL_VALUE;
      },
      "*": numericOperator((a9, b5) => a9 * b5),
      "/": numericOperator((a9, b5) => a9 / b5),
      "%": numericOperator((a9, b5) => a9 % b5),
      "**": numericOperator((a9, b5) => Math.pow(a9, b5))
    };
    Scope = class {
      constructor(params, source, value, context2, parent) {
        this.isHidden = !1, this.params = params, this.source = source, this.value = value, this.context = context2, this.parent = parent;
      }
      createNested(value) {
        return this.isHidden ? new Scope(this.params, this.source, value, this.context, this.parent) : new Scope(this.params, this.source, value, this.context, this);
      }
      createHidden(value) {
        let result = this.createNested(value);
        return result.isHidden = !0, result;
      }
    };
    EXECUTORS = {
      This(_3, scope) {
        return scope.value;
      },
      Selector() {
        throw new Error("Selectors can not be evaluated");
      },
      Everything(_3, scope) {
        return scope.source;
      },
      Parameter(_ref, scope) {
        let {
          name
        } = _ref;
        return fromJS(scope.params[name]);
      },
      Context(_ref2, scope) {
        let {
          key
        } = _ref2;
        if (key === "before" || key === "after")
          return scope.context[key] || NULL_VALUE;
        throw new Error("unknown context key: ".concat(key));
      },
      Parent(_ref3, scope) {
        let {
          n: n4
        } = _ref3, current = scope;
        for (let i9 = 0; i9 < n4; i9++) {
          if (!current.parent)
            return NULL_VALUE;
          current = current.parent;
        }
        return current.value;
      },
      OpCall(_ref4, scope, execute) {
        let {
          op,
          left,
          right
        } = _ref4, func = operators[op];
        if (!func)
          throw new Error("Unknown operator: ".concat(op));
        let leftValue = execute(left, scope), rightValue = execute(right, scope);
        return "then" in leftValue || "then" in rightValue ? (async () => func(await leftValue, await rightValue))() : func(leftValue, rightValue);
      },
      async Select(_ref5, scope, execute) {
        let {
          alternatives,
          fallback
        } = _ref5;
        for (let alt of alternatives) {
          let altCond = await execute(alt.condition, scope);
          if (altCond.type === "boolean" && altCond.data === !0)
            return execute(alt.value, scope);
        }
        return fallback ? execute(fallback, scope) : NULL_VALUE;
      },
      async InRange(_ref6, scope, execute) {
        let {
          base,
          left,
          right,
          isInclusive
        } = _ref6, value = await execute(base, scope), leftValue = await execute(left, scope), rightValue = await execute(right, scope), leftCmp = partialCompare(await value.get(), await leftValue.get());
        if (leftCmp === null)
          return NULL_VALUE;
        let rightCmp = partialCompare(await value.get(), await rightValue.get());
        return rightCmp === null ? NULL_VALUE : isInclusive ? leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE : leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE;
      },
      async Filter(_ref7, scope, execute) {
        let {
          base,
          expr
        } = _ref7, baseValue = await execute(base, scope);
        return baseValue.isArray() ? new StreamValue(async function* () {
          for await (let elem of baseValue) {
            let newScope = scope.createNested(elem), exprValue = await execute(expr, newScope);
            exprValue.type === "boolean" && exprValue.data === !0 && (yield elem);
          }
        }) : NULL_VALUE;
      },
      async Projection(_ref8, scope, execute) {
        let {
          base,
          expr
        } = _ref8, baseValue = await execute(base, scope);
        if (baseValue.type !== "object")
          return NULL_VALUE;
        let newScope = scope.createNested(baseValue);
        return execute(expr, newScope);
      },
      FuncCall(_ref9, scope, execute) {
        let {
          func,
          args
        } = _ref9;
        return func(args, scope, execute);
      },
      async PipeFuncCall(_ref10, scope, execute) {
        let {
          func,
          base,
          args
        } = _ref10, baseValue = await execute(base, scope);
        return func(baseValue, args, scope, execute);
      },
      async AccessAttribute(_ref11, scope, execute) {
        let {
          base,
          name
        } = _ref11, value = scope.value;
        return base && (value = await execute(base, scope)), value.type === "object" && value.data.hasOwnProperty(name) ? fromJS(value.data[name]) : NULL_VALUE;
      },
      async AccessElement(_ref12, scope, execute) {
        let {
          base,
          index
        } = _ref12, baseValue = await execute(base, scope);
        if (!baseValue.isArray())
          return NULL_VALUE;
        let data = await baseValue.get(), finalIndex = index < 0 ? index + data.length : index;
        return fromJS(data[finalIndex]);
      },
      async Slice(_ref13, scope, execute) {
        let {
          base,
          left,
          right,
          isInclusive
        } = _ref13, baseValue = await execute(base, scope);
        if (!baseValue.isArray())
          return NULL_VALUE;
        let array2 = await baseValue.get(), leftIdx = left, rightIdx = right;
        return leftIdx < 0 && (leftIdx = array2.length + leftIdx), rightIdx < 0 && (rightIdx = array2.length + rightIdx), isInclusive && rightIdx++, leftIdx < 0 && (leftIdx = 0), rightIdx < 0 && (rightIdx = 0), fromJS(array2.slice(leftIdx, rightIdx));
      },
      async Deref(_ref14, scope, execute) {
        let {
          base
        } = _ref14, value = await execute(base, scope);
        if (!scope.source.isArray() || value.type !== "object")
          return NULL_VALUE;
        let id = value.data._ref;
        if (typeof id != "string")
          return NULL_VALUE;
        for await (let doc of scope.source)
          if (doc.type === "object" && id === doc.data._id)
            return doc;
        return NULL_VALUE;
      },
      Value(_ref15) {
        let {
          value
        } = _ref15;
        return fromJS(value);
      },
      Group(_ref16, scope, execute) {
        let {
          base
        } = _ref16;
        return execute(base, scope);
      },
      async Object(_ref17, scope, execute) {
        let {
          attributes
        } = _ref17, result = {};
        for (let attr of attributes) {
          let attrType = attr.type;
          switch (attr.type) {
            case "ObjectAttributeValue": {
              let value = await execute(attr.value, scope);
              result[attr.name] = await value.get();
              break;
            }
            case "ObjectConditionalSplat": {
              let cond = await execute(attr.condition, scope);
              if (cond.type !== "boolean" || cond.data === !1)
                continue;
              let value = await execute(attr.value, scope);
              value.type === "object" && Object.assign(result, value.data);
              break;
            }
            case "ObjectSplat": {
              let value = await execute(attr.value, scope);
              value.type === "object" && Object.assign(result, value.data);
              break;
            }
            default:
              throw new Error("Unknown node type: ".concat(attrType));
          }
        }
        return fromJS(result);
      },
      Array(_ref18, scope, execute) {
        let {
          elements
        } = _ref18;
        return new StreamValue(async function* () {
          for (let element of elements) {
            let value = await execute(element.value, scope);
            if (element.isSplat) {
              if (value.isArray())
                for await (let v5 of value)
                  yield v5;
            } else
              yield value;
          }
        });
      },
      Tuple() {
        throw new Error("tuples can not be evaluated");
      },
      async Or(_ref19, scope, execute) {
        let {
          left,
          right
        } = _ref19, leftValue = await execute(left, scope), rightValue = await execute(right, scope);
        return leftValue.type === "boolean" && leftValue.data === !0 || rightValue.type === "boolean" && rightValue.data === !0 ? TRUE_VALUE : leftValue.type !== "boolean" || rightValue.type !== "boolean" ? NULL_VALUE : FALSE_VALUE;
      },
      async And(_ref20, scope, execute) {
        let {
          left,
          right
        } = _ref20, leftValue = await execute(left, scope), rightValue = await execute(right, scope);
        return leftValue.type === "boolean" && leftValue.data === !1 || rightValue.type === "boolean" && rightValue.data === !1 ? FALSE_VALUE : leftValue.type !== "boolean" || rightValue.type !== "boolean" ? NULL_VALUE : TRUE_VALUE;
      },
      async Not(_ref21, scope, execute) {
        let {
          base
        } = _ref21, value = await execute(base, scope);
        return value.type !== "boolean" ? NULL_VALUE : value.data ? FALSE_VALUE : TRUE_VALUE;
      },
      Neg(_ref22, scope, execute) {
        let {
          base
        } = _ref22;
        return promiselessApply(execute(base, scope), (value) => value.type !== "number" ? NULL_VALUE : fromNumber(-value.data));
      },
      Pos(_ref23, scope, execute) {
        let {
          base
        } = _ref23;
        return promiselessApply(execute(base, scope), (value) => value.type !== "number" ? NULL_VALUE : fromNumber(value.data));
      },
      Asc() {
        return NULL_VALUE;
      },
      Desc() {
        return NULL_VALUE;
      },
      async ArrayCoerce(_ref24, scope, execute) {
        let {
          base
        } = _ref24, value = await execute(base, scope);
        return value.isArray() ? value : NULL_VALUE;
      },
      async Map(_ref25, scope, execute) {
        let {
          base,
          expr
        } = _ref25, value = await execute(base, scope);
        return value.isArray() ? new StreamValue(async function* () {
          for await (let elem of value) {
            let newScope = scope.createHidden(elem);
            yield await execute(expr, newScope);
          }
        }) : NULL_VALUE;
      },
      async FlatMap(_ref26, scope, execute) {
        let {
          base,
          expr
        } = _ref26, value = await execute(base, scope);
        return value.isArray() ? new StreamValue(async function* () {
          for await (let elem of value) {
            let newScope = scope.createHidden(elem), innerValue = await execute(expr, newScope);
            if (innerValue.isArray())
              for await (let inner of innerValue)
                yield inner;
            else
              yield innerValue;
          }
        }) : NULL_VALUE;
      }
    };
    DUMMY_SCOPE = new Scope({}, NULL_VALUE, NULL_VALUE, {
      timestamp: /* @__PURE__ */ new Date(0),
      identity: "me",
      before: null,
      after: null
    }, null);
    BM25k = 1.2;
    _global = {};
    _global.anywhere = async function() {
      throw new Error("not implemented");
    };
    _global.anywhere.arity = 1;
    _global.coalesce = async function(args, scope, execute) {
      for (let arg of args) {
        let value = await execute(arg, scope);
        if (value.type !== "null")
          return value;
      }
      return NULL_VALUE;
    };
    _global.count = async function(args, scope, execute) {
      let inner = await execute(args[0], scope);
      if (!inner.isArray())
        return NULL_VALUE;
      let num = 0;
      for await (let _3 of inner)
        num++;
      return fromNumber(num);
    };
    _global.count.arity = 1;
    _global.dateTime = async function(args, scope, execute) {
      let val = await execute(args[0], scope);
      return val.type === "datetime" ? val : val.type !== "string" ? NULL_VALUE : DateTime.parseToValue(val.data);
    };
    _global.dateTime.arity = 1;
    _global.defined = async function(args, scope, execute) {
      return (await execute(args[0], scope)).type === "null" ? FALSE_VALUE : TRUE_VALUE;
    };
    _global.defined.arity = 1;
    _global.identity = async function(args, scope) {
      return fromString(scope.context.identity);
    };
    _global.identity.arity = 0;
    _global.length = async function(args, scope, execute) {
      let inner = await execute(args[0], scope);
      if (inner.type === "string")
        return fromNumber(countUTF8(inner.data));
      if (inner.isArray()) {
        let num = 0;
        for await (let _3 of inner)
          num++;
        return fromNumber(num);
      }
      return NULL_VALUE;
    };
    _global.length.arity = 1;
    _global.path = async function(args, scope, execute) {
      let inner = await execute(args[0], scope);
      return inner.type !== "string" ? NULL_VALUE : fromPath(new Path(inner.data));
    };
    _global.path.arity = 1;
    _global.string = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      switch (value.type) {
        case "number":
        case "string":
        case "boolean":
        case "datetime":
          return fromString("".concat(value.data));
        default:
          return NULL_VALUE;
      }
    };
    _global.string.arity = 1;
    _global.references = async function(args, scope, execute) {
      let pathSet = /* @__PURE__ */ new Set();
      for (let arg of args) {
        let path2 = await execute(arg, scope);
        if (path2.type === "string")
          pathSet.add(path2.data);
        else if (path2.isArray())
          for await (let elem of path2)
            elem.type === "string" && pathSet.add(elem.data);
      }
      if (pathSet.size === 0)
        return FALSE_VALUE;
      let scopeValue = await scope.value.get();
      return hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE;
    };
    _global.references.arity = (c9) => c9 >= 1;
    _global.round = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      if (value.type !== "number")
        return NULL_VALUE;
      let num = value.data, prec = 0;
      if (args.length === 2) {
        let precValue = await execute(args[1], scope);
        if (precValue.type !== "number" || precValue.data < 0 || !Number.isInteger(precValue.data))
          return NULL_VALUE;
        prec = precValue.data;
      }
      return prec === 0 ? num < 0 ? fromNumber(-Math.round(-num)) : fromNumber(Math.round(num)) : fromNumber(Number(num.toFixed(prec)));
    };
    _global.round.arity = (count2) => count2 >= 1 && count2 <= 2;
    _global.now = async function(args, scope) {
      return fromString(scope.context.timestamp.toISOString());
    };
    _global.now.arity = 0;
    _global.boost = async function() {
      throw new Error("unexpected boost call");
    };
    _global.boost.arity = 2;
    string2 = {};
    string2.lower = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      return value.type !== "string" ? NULL_VALUE : fromString(value.data.toLowerCase());
    };
    string2.lower.arity = 1;
    string2.upper = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      return value.type !== "string" ? NULL_VALUE : fromString(value.data.toUpperCase());
    };
    string2.upper.arity = 1;
    string2.split = async function(args, scope, execute) {
      let str = await execute(args[0], scope);
      if (str.type !== "string")
        return NULL_VALUE;
      let sep = await execute(args[1], scope);
      return sep.type !== "string" ? NULL_VALUE : str.data.length === 0 ? fromJS([]) : sep.data.length === 0 ? fromJS(Array.from(str.data)) : fromJS(str.data.split(sep.data));
    };
    string2.split.arity = 2;
    _global.lower = string2.lower;
    _global.upper = string2.upper;
    string2.startsWith = async function(args, scope, execute) {
      let str = await execute(args[0], scope);
      if (str.type !== "string")
        return NULL_VALUE;
      let prefix2 = await execute(args[1], scope);
      return prefix2.type !== "string" ? NULL_VALUE : str.data.startsWith(prefix2.data) ? TRUE_VALUE : FALSE_VALUE;
    };
    string2.startsWith.arity = 2;
    array = {};
    array.join = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let sep = await execute(args[1], scope);
      if (sep.type !== "string")
        return NULL_VALUE;
      let buf = "", needSep = !1;
      for await (let elem of arr) {
        switch (needSep && (buf += sep.data), elem.type) {
          case "number":
          case "string":
          case "boolean":
          case "datetime":
            buf += "".concat(elem.data);
            break;
          default:
            return NULL_VALUE;
        }
        needSep = !0;
      }
      return fromJS(buf);
    };
    array.join.arity = 2;
    array.compact = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      return arr.isArray() ? new StreamValue(async function* () {
        for await (let elem of arr)
          elem.type !== "null" && (yield elem);
      }) : NULL_VALUE;
    };
    array.compact.arity = 1;
    array.unique = async function(args, scope, execute) {
      let value = await execute(args[0], scope);
      return value.isArray() ? new StreamValue(async function* () {
        let added = /* @__PURE__ */ new Set();
        for await (let iter of value)
          switch (iter.type) {
            case "number":
            case "string":
            case "boolean":
            case "datetime":
              added.has(iter.data) || (added.add(iter.data), yield iter);
              break;
            default:
              yield iter;
          }
      }) : NULL_VALUE;
    };
    array.unique.arity = 1;
    pt = {};
    pt.text = async function(args, scope, execute) {
      let value = await execute(args[0], scope), text2 = await portableTextContent(value);
      return text2 === null ? NULL_VALUE : fromString(text2);
    };
    pt.text.arity = 1;
    sanity = {};
    sanity.projectId = async function(args, scope) {
      return scope.context.sanity ? fromString(scope.context.sanity.projectId) : NULL_VALUE;
    };
    sanity.dataset = async function(args, scope) {
      return scope.context.sanity ? fromString(scope.context.sanity.dataset) : NULL_VALUE;
    };
    pipeFunctions = {};
    pipeFunctions.order = async function(base, args, scope, execute) {
      if (await !0, !base.isArray())
        return NULL_VALUE;
      let mappers = [], directions = [], n4 = 0;
      for (let mapper of args) {
        let direction = "asc";
        mapper.type === "Desc" ? (direction = "desc", mapper = mapper.base) : mapper.type === "Asc" && (mapper = mapper.base), mappers.push(mapper), directions.push(direction), n4++;
      }
      let aux = [], idx = 0;
      for await (let value of base) {
        let newScope = scope.createNested(value), tuple = [await value.get(), idx];
        for (let i9 = 0; i9 < n4; i9++) {
          let result = await execute(mappers[i9], newScope);
          tuple.push(await result.get());
        }
        aux.push(tuple), idx++;
      }
      return aux.sort((aTuple, bTuple) => {
        for (let i9 = 0; i9 < n4; i9++) {
          let c9 = totalCompare(aTuple[i9 + 2], bTuple[i9 + 2]);
          if (directions[i9] === "desc" && (c9 = -c9), c9 !== 0)
            return c9;
        }
        return aTuple[1] - bTuple[1];
      }), fromJS(aux.map((v5) => v5[0]));
    };
    pipeFunctions.order.arity = (count2) => count2 >= 1;
    pipeFunctions.score = async function(base, args, scope, execute) {
      if (!base.isArray())
        return NULL_VALUE;
      let unknown = [], scored = [];
      for await (let value of base) {
        if (value.type !== "object") {
          unknown.push(await value.get());
          continue;
        }
        let newScope = scope.createNested(value), valueScore = typeof value.data._score == "number" ? value.data._score : 0;
        for (let arg of args)
          valueScore += await evaluateScore(arg, newScope, execute);
        let newObject = Object.assign({}, value.data, {
          _score: valueScore
        });
        scored.push(newObject);
      }
      return scored.sort((a9, b5) => b5._score - a9._score), fromJS(scored);
    };
    pipeFunctions.score.arity = (count2) => count2 >= 1;
    delta = {};
    delta.operation = async function(args, scope) {
      let hasBefore = scope.context.before !== null, hasAfter = scope.context.after !== null;
      return hasBefore && hasAfter ? fromString("update") : hasAfter ? fromString("create") : hasBefore ? fromString("delete") : NULL_VALUE;
    };
    delta.changedAny = () => {
      throw new Error("not implemented");
    };
    delta.changedAny.arity = 1;
    delta.changedAny.mode = "delta";
    delta.changedOnly = () => {
      throw new Error("not implemented");
    };
    delta.changedOnly.arity = 1;
    delta.changedOnly.mode = "delta";
    diff = {};
    diff.changedAny = () => {
      throw new Error("not implemented");
    };
    diff.changedAny.arity = 3;
    diff.changedOnly = () => {
      throw new Error("not implemented");
    };
    diff.changedOnly.arity = 3;
    math = {};
    math.min = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          (n4 === void 0 || elem.data < n4) && (n4 = elem.data);
        }
      return fromJS(n4);
    };
    math.min.arity = 1;
    math.max = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          (n4 === void 0 || elem.data > n4) && (n4 = elem.data);
        }
      return fromJS(n4);
    };
    math.max.arity = 1;
    math.sum = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4 = 0;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          n4 += elem.data;
        }
      return fromJS(n4);
    };
    math.sum.arity = 1;
    math.avg = async function(args, scope, execute) {
      let arr = await execute(args[0], scope);
      if (!arr.isArray())
        return NULL_VALUE;
      let n4 = 0, c9 = 0;
      for await (let elem of arr)
        if (elem.type !== "null") {
          if (elem.type !== "number")
            return NULL_VALUE;
          n4 += elem.data, c9++;
        }
      return c9 === 0 ? NULL_VALUE : fromJS(n4 / c9);
    };
    math.avg.arity = 1;
    namespaces = {
      global: _global,
      string: string2,
      array,
      pt,
      delta,
      diff,
      sanity,
      math
    }, MarkProcessor = class {
      constructor(string3, marks, parseOptions) {
        this.allowBoost = !1, this.string = string3, this.marks = marks, this.index = 0, this.parseOptions = parseOptions;
      }
      hasMark() {
        let pos = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        return this.index + pos < this.marks.length;
      }
      getMark() {
        let pos = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        return this.marks[this.index + pos];
      }
      shift() {
        this.index += 1;
      }
      process(visitor) {
        let mark = this.marks[this.index];
        this.shift();
        let func = visitor[mark.name];
        if (!func)
          throw new Error("Unknown handler: ".concat(mark.name));
        return func.call(visitor, this, mark);
      }
      processString() {
        return this.shift(), this.processStringEnd();
      }
      processStringEnd() {
        let prev = this.marks[this.index - 1], curr = this.marks[this.index];
        return this.shift(), this.string.slice(prev.position, curr.position);
      }
      slice(len) {
        let pos = this.marks[this.index].position;
        return this.string.slice(pos, pos + len);
      }
    }, WS = /^([\t\n\v\f\r \u0085\u00A0]|(\/\/[^\n]*\n))+/, NUM = /^\d+/, IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/, PREC_PAIR = 1, PREC_OR = 2, PREC_AND = 3, PREC_COMP = 4, PREC_ORDER = 4, PREC_ADD = 6, PREC_SUB = 6, PREC_MUL = 7, PREC_DIV = 7, PREC_MOD = 7, PREC_POW = 8, PREC_POS = 10, PREC_NOT = 10, PREC_NEG = 8;
    ESCAPE_SEQUENCE = {
      "'": "'",
      '"': '"',
      "\\": "\\",
      "/": "/",
      b: "\b",
      f: "\f",
      n: `
`,
      r: "\r",
      t: "	"
    };
    GroqQueryError = class extends Error {
      constructor() {
        super(...arguments), this.name = "GroqQueryError";
      }
    }, EXPR_BUILDER = {
      group(p8) {
        return {
          type: "Group",
          base: p8.process(EXPR_BUILDER)
        };
      },
      everything() {
        return {
          type: "Everything"
        };
      },
      this() {
        return {
          type: "This"
        };
      },
      parent() {
        return {
          type: "Parent",
          n: 1
        };
      },
      dblparent(p8) {
        return {
          type: "Parent",
          n: p8.process(EXPR_BUILDER).n + 1
        };
      },
      traverse(p8) {
        let base = p8.process(EXPR_BUILDER), traversalList = [];
        for (; p8.getMark().name !== "traversal_end"; )
          traversalList.push(p8.process(TRAVERSE_BUILDER));
        p8.shift();
        let traversal = null;
        for (let i9 = traversalList.length - 1; i9 >= 0; i9--)
          traversal = traversalList[i9](traversal);
        if ((base.type === "Everything" || base.type === "Array" || base.type === "PipeFuncCall") && (traversal = traverseArray((val) => val, traversal)), traversal === null)
          throw new Error("BUG: unexpected empty traversal");
        return traversal.build(base);
      },
      this_attr(p8) {
        let name = p8.processString();
        return name === "null" ? {
          type: "Value",
          value: null
        } : name === "true" ? {
          type: "Value",
          value: !0
        } : name === "false" ? {
          type: "Value",
          value: !1
        } : {
          type: "AccessAttribute",
          name
        };
      },
      neg(p8) {
        return {
          type: "Neg",
          base: p8.process(EXPR_BUILDER)
        };
      },
      pos(p8) {
        return {
          type: "Pos",
          base: p8.process(EXPR_BUILDER)
        };
      },
      add(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "+",
          left,
          right
        };
      },
      sub(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "-",
          left,
          right
        };
      },
      mul(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "*",
          left,
          right
        };
      },
      div(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "/",
          left,
          right
        };
      },
      mod(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "%",
          left,
          right
        };
      },
      pow(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op: "**",
          left,
          right
        };
      },
      comp(p8) {
        let left = p8.process(EXPR_BUILDER), op = p8.processString(), right = p8.process(EXPR_BUILDER);
        return {
          type: "OpCall",
          op,
          left,
          right
        };
      },
      in_range(p8) {
        let base = p8.process(EXPR_BUILDER), isInclusive = p8.getMark().name === "inc_range";
        p8.shift();
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "InRange",
          base,
          left,
          right,
          isInclusive
        };
      },
      str(p8) {
        let value = "";
        loop:
          for (; p8.hasMark(); ) {
            let mark = p8.getMark();
            switch (mark.name) {
              case "str_end":
                value += p8.processStringEnd();
                break loop;
              case "str_pause":
                value += p8.processStringEnd();
                break;
              case "str_start":
                p8.shift();
                break;
              case "single_escape": {
                let char = p8.slice(1);
                p8.shift(), value += ESCAPE_SEQUENCE[char];
                break;
              }
              case "unicode_hex":
                p8.shift(), value += expandHex(p8.processStringEnd());
                break;
              default:
                throw new Error("unexpected mark: ".concat(mark.name));
            }
          }
        return {
          type: "Value",
          value
        };
      },
      integer(p8) {
        let strValue = p8.processStringEnd();
        return {
          type: "Value",
          value: Number(strValue)
        };
      },
      float(p8) {
        let strValue = p8.processStringEnd();
        return {
          type: "Value",
          value: Number(strValue)
        };
      },
      sci(p8) {
        let strValue = p8.processStringEnd();
        return {
          type: "Value",
          value: Number(strValue)
        };
      },
      object(p8) {
        let attributes = [];
        for (; p8.getMark().name !== "object_end"; )
          attributes.push(p8.process(OBJECT_BUILDER));
        return p8.shift(), {
          type: "Object",
          attributes
        };
      },
      array(p8) {
        let elements = [];
        for (; p8.getMark().name !== "array_end"; ) {
          let isSplat2 = !1;
          p8.getMark().name === "array_splat" && (isSplat2 = !0, p8.shift());
          let value = p8.process(EXPR_BUILDER);
          elements.push({
            type: "ArrayElement",
            value,
            isSplat: isSplat2
          });
        }
        return p8.shift(), {
          type: "Array",
          elements
        };
      },
      tuple(p8) {
        let members = [];
        for (; p8.getMark().name !== "tuple_end"; )
          members.push(p8.process(EXPR_BUILDER));
        return p8.shift(), {
          type: "Tuple",
          members
        };
      },
      func_call(p8) {
        let namespace = "global";
        p8.getMark().name === "namespace" && (p8.shift(), namespace = p8.processString());
        let name = p8.processString();
        if (namespace === "global" && name === "select") {
          let result = {
            type: "Select",
            alternatives: []
          };
          for (; p8.getMark().name !== "func_args_end"; )
            if (p8.getMark().name === "pair") {
              if (result.fallback)
                throw new GroqQueryError("unexpected argument to select()");
              p8.shift();
              let condition = p8.process(EXPR_BUILDER), value = p8.process(EXPR_BUILDER);
              result.alternatives.push({
                type: "SelectAlternative",
                condition,
                value
              });
            } else {
              if (result.fallback)
                throw new GroqQueryError("unexpected argument to select()");
              let value = p8.process(EXPR_BUILDER);
              result.fallback = value;
            }
          return p8.shift(), result;
        }
        let args = [];
        for (; p8.getMark().name !== "func_args_end"; )
          argumentShouldBeSelector(namespace, name, args.length) ? (p8.process(SELECTOR_BUILDER), args.push({
            type: "Selector"
          })) : args.push(p8.process(EXPR_BUILDER));
        if (p8.shift(), namespace === "global" && (name === "before" || name === "after") && p8.parseOptions.mode === "delta")
          return {
            type: "Context",
            key: name
          };
        if (namespace === "global" && name === "boost" && !p8.allowBoost)
          throw new GroqQueryError("unexpected boost");
        let funcs = namespaces[namespace];
        if (!funcs)
          throw new GroqQueryError("Undefined namespace: ".concat(namespace));
        let func = funcs[name];
        if (!func)
          throw new GroqQueryError("Undefined function: ".concat(name));
        if (func.arity !== void 0 && validateArity(name, func.arity, args.length), func.mode !== void 0 && func.mode !== p8.parseOptions.mode)
          throw new GroqQueryError("Undefined function: ".concat(name));
        return {
          type: "FuncCall",
          func,
          name,
          args
        };
      },
      pipecall(p8) {
        let base = p8.process(EXPR_BUILDER);
        p8.shift();
        let namespace = "global";
        if (p8.getMark().name === "namespace" && (p8.shift(), namespace = p8.processString()), namespace !== "global")
          throw new GroqQueryError("Undefined namespace: ".concat(namespace));
        let name = p8.processString(), args = [], oldAllowBoost = p8.allowBoost;
        for (name === "score" && (p8.allowBoost = !0); ; ) {
          let markName = p8.getMark().name;
          if (markName === "func_args_end")
            break;
          if (name === "order") {
            if (markName === "asc") {
              p8.shift(), args.push({
                type: "Asc",
                base: p8.process(EXPR_BUILDER)
              });
              continue;
            } else if (markName === "desc") {
              p8.shift(), args.push({
                type: "Desc",
                base: p8.process(EXPR_BUILDER)
              });
              continue;
            }
          }
          args.push(p8.process(EXPR_BUILDER));
        }
        p8.shift(), p8.allowBoost = oldAllowBoost;
        let func = pipeFunctions[name];
        if (!func)
          throw new GroqQueryError("Undefined pipe function: ".concat(name));
        return func.arity && validateArity(name, func.arity, args.length), {
          type: "PipeFuncCall",
          func,
          base,
          name,
          args
        };
      },
      pair(p8) {
        throw new GroqQueryError("unexpected =>");
      },
      and(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "And",
          left,
          right
        };
      },
      or(p8) {
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER);
        return {
          type: "Or",
          left,
          right
        };
      },
      not(p8) {
        return {
          type: "Not",
          base: p8.process(EXPR_BUILDER)
        };
      },
      asc(p8) {
        throw new GroqQueryError("unexpected asc");
      },
      desc(p8) {
        throw new GroqQueryError("unexpected desc");
      },
      param(p8) {
        let name = p8.processString();
        return p8.parseOptions.params && p8.parseOptions.params.hasOwnProperty(name) ? {
          type: "Value",
          value: p8.parseOptions.params[name]
        } : {
          type: "Parameter",
          name
        };
      }
    }, OBJECT_BUILDER = {
      object_expr(p8) {
        if (p8.getMark().name === "pair") {
          p8.shift();
          let condition = p8.process(EXPR_BUILDER), value2 = p8.process(EXPR_BUILDER);
          return {
            type: "ObjectConditionalSplat",
            condition,
            value: value2
          };
        }
        let value = p8.process(EXPR_BUILDER);
        return {
          type: "ObjectAttributeValue",
          name: extractPropertyKey(value),
          value
        };
      },
      object_pair(p8) {
        let name = p8.process(EXPR_BUILDER);
        if (name.type !== "Value")
          throw new Error("name must be string");
        let value = p8.process(EXPR_BUILDER);
        return {
          type: "ObjectAttributeValue",
          name: name.value,
          value
        };
      },
      object_splat(p8) {
        return {
          type: "ObjectSplat",
          value: p8.process(EXPR_BUILDER)
        };
      },
      object_splat_this() {
        return {
          type: "ObjectSplat",
          value: {
            type: "This"
          }
        };
      }
    }, TRAVERSE_BUILDER = {
      square_bracket(p8) {
        let expr = p8.process(EXPR_BUILDER), value = tryConstantEvaluate(expr);
        return value && value.type === "number" ? (right) => traverseElement((base) => ({
          type: "AccessElement",
          base,
          index: value.data
        }), right) : value && value.type === "string" ? (right) => traversePlain((base) => ({
          type: "AccessAttribute",
          base,
          name: value.data
        }), right) : (right) => traverseArray((base) => ({
          type: "Filter",
          base,
          expr
        }), right);
      },
      slice(p8) {
        let isInclusive = p8.getMark().name === "inc_range";
        p8.shift();
        let left = p8.process(EXPR_BUILDER), right = p8.process(EXPR_BUILDER), leftValue = tryConstantEvaluate(left), rightValue = tryConstantEvaluate(right);
        if (!leftValue || !rightValue || leftValue.type !== "number" || rightValue.type !== "number")
          throw new GroqQueryError("slicing must use constant numbers");
        return (rhs) => traverseArray((base) => ({
          type: "Slice",
          base,
          left: leftValue.data,
          right: rightValue.data,
          isInclusive
        }), rhs);
      },
      projection(p8) {
        let obj = p8.process(EXPR_BUILDER);
        return (right) => traverseProjection((base) => ({
          type: "Projection",
          base,
          expr: obj
        }), right);
      },
      attr_access(p8) {
        let name = p8.processString();
        return (right) => traversePlain((base) => ({
          type: "AccessAttribute",
          base,
          name
        }), right);
      },
      deref(p8) {
        let attr = null;
        p8.getMark().name === "deref_attr" && (p8.shift(), attr = p8.processString());
        let wrap = (base) => attr ? {
          type: "AccessAttribute",
          base,
          name: attr
        } : base;
        return (right) => traversePlain((base) => wrap({
          type: "Deref",
          base
        }), right);
      },
      array_postfix(p8) {
        return (right) => traverseArray((base) => ({
          type: "ArrayCoerce",
          base
        }), right);
      }
    }, SELECTOR_BUILDER = {
      group(p8) {
        return p8.process(SELECTOR_BUILDER), null;
      },
      everything() {
        throw new Error("Invalid selector syntax");
      },
      this() {
        throw new Error("Invalid selector syntax");
      },
      parent() {
        throw new Error("Invalid selector syntax");
      },
      dblparent(p8) {
        throw new Error("Invalid selector syntax");
      },
      traverse(p8) {
        for (p8.process(SELECTOR_BUILDER); p8.getMark().name !== "traversal_end"; )
          p8.process(TRAVERSE_BUILDER);
        return p8.shift(), null;
      },
      this_attr(p8) {
        return p8.processString(), null;
      },
      neg(p8) {
        throw new Error("Invalid selector syntax");
      },
      pos(p8) {
        throw new Error("Invalid selector syntax");
      },
      add(p8) {
        throw new Error("Invalid selector syntax");
      },
      sub(p8) {
        throw new Error("Invalid selector syntax");
      },
      mul(p8) {
        throw new Error("Invalid selector syntax");
      },
      div(p8) {
        throw new Error("Invalid selector syntax");
      },
      mod(p8) {
        throw new Error("Invalid selector syntax");
      },
      pow(p8) {
        throw new Error("Invalid selector syntax");
      },
      comp(p8) {
        throw new Error("Invalid selector syntax");
      },
      in_range(p8) {
        throw new Error("Invalid selector syntax");
      },
      str(p8) {
        throw new Error("Invalid selector syntax");
      },
      integer(p8) {
        throw new Error("Invalid selector syntax");
      },
      float(p8) {
        throw new Error("Invalid selector syntax");
      },
      sci(p8) {
        throw new Error("Invalid selector syntax");
      },
      object(p8) {
        throw new Error("Invalid selector syntax");
      },
      array(p8) {
        throw new Error("Invalid selector syntax");
      },
      tuple(p8) {
        throw new Error("Invalid selector syntax");
      },
      func_call(p8, mark) {
        let func = EXPR_BUILDER.func_call(p8, mark);
        if (func.name === "anywhere" && func.args.length === 1)
          return null;
        throw new Error("Invalid selector syntax");
      },
      pipecall(p8) {
        throw new Error("Invalid selector syntax");
      },
      pair(p8) {
        throw new Error("Invalid selector syntax");
      },
      and(p8) {
        throw new Error("Invalid selector syntax");
      },
      or(p8) {
        throw new Error("Invalid selector syntax");
      },
      not(p8) {
        throw new Error("Invalid selector syntax");
      },
      asc(p8) {
        throw new Error("Invalid selector syntax");
      },
      desc(p8) {
        throw new Error("Invalid selector syntax");
      },
      param(p8) {
        throw new Error("Invalid selector syntax");
      }
    };
    GroqSyntaxError = class extends Error {
      constructor(position) {
        super("Syntax error in GROQ query at position ".concat(position)), this.name = "GroqSyntaxError", this.position = position;
      }
    };
  }
});

// node_modules/groq-js/dist/index.mjs
var init_dist3 = __esm({
  "node_modules/groq-js/dist/index.mjs"() {
    init__();
  }
});

// node_modules/mendoza/lib/esm/internal-patcher.js
var OPS, Patcher, init_internal_patcher = __esm({
  "node_modules/mendoza/lib/esm/internal-patcher.js"() {
    OPS = [
      "Value",
      "Copy",
      "Blank",
      "ReturnIntoArray",
      "ReturnIntoObject",
      "ReturnIntoObjectSameKey",
      "PushField",
      "PushElement",
      "PushParent",
      "Pop",
      "PushFieldCopy",
      "PushFieldBlank",
      "PushElementCopy",
      "PushElementBlank",
      "ReturnIntoObjectPop",
      "ReturnIntoObjectSameKeyPop",
      "ReturnIntoArrayPop",
      "ObjectSetFieldValue",
      "ObjectCopyField",
      "ObjectDeleteField",
      "ArrayAppendValue",
      "ArrayAppendSlice",
      "StringAppendString",
      "StringAppendSlice"
    ], Patcher = function() {
      function Patcher2(model, root, patch) {
        this.i = 0, this.inputStack = [], this.outputStack = [], this.model = model, this.root = root, this.patch = patch;
      }
      return Patcher2.prototype.read = function() {
        return this.patch[this.i++];
      }, Patcher2.prototype.process = function() {
        for (this.inputStack.push({ value: this.root }), this.outputStack.push({ value: this.root }); this.i < this.patch.length; ) {
          var opcode = this.read(), op = OPS[opcode];
          if (!op)
            throw new Error("Unknown opcode: " + opcode);
          var processor = "process" + op;
          this[processor].apply(this);
        }
        var entry2 = this.outputStack.pop();
        return this.finalizeOutput(entry2);
      }, Patcher2.prototype.inputEntry = function() {
        return this.inputStack[this.inputStack.length - 1];
      }, Patcher2.prototype.inputKey = function(entry2, idx) {
        return entry2.keys || (entry2.keys = this.model.objectGetKeys(entry2.value).sort()), entry2.keys[idx];
      }, Patcher2.prototype.outputEntry = function() {
        return this.outputStack[this.outputStack.length - 1];
      }, Patcher2.prototype.outputArray = function() {
        var entry2 = this.outputEntry();
        return entry2.writeValue || (entry2.writeValue = this.model.copyArray(entry2.value)), entry2.writeValue;
      }, Patcher2.prototype.outputObject = function() {
        var entry2 = this.outputEntry();
        return entry2.writeValue || (entry2.writeValue = this.model.copyObject(entry2.value)), entry2.writeValue;
      }, Patcher2.prototype.outputString = function() {
        var entry2 = this.outputEntry();
        return entry2.writeValue || (entry2.writeValue = this.model.copyString(entry2.value)), entry2.writeValue;
      }, Patcher2.prototype.finalizeOutput = function(entry2) {
        return entry2.writeValue ? this.model.finalize(entry2.writeValue) : entry2.value;
      }, Patcher2.prototype.processValue = function() {
        var value = this.model.wrap(this.read());
        this.outputStack.push({ value });
      }, Patcher2.prototype.processCopy = function() {
        var input = this.inputEntry();
        this.outputStack.push({ value: input.value });
      }, Patcher2.prototype.processBlank = function() {
        this.outputStack.push({ value: null });
      }, Patcher2.prototype.processReturnIntoArray = function() {
        var entry2 = this.outputStack.pop(), result = this.finalizeOutput(entry2), arr = this.outputArray();
        this.model.arrayAppendValue(arr, result);
      }, Patcher2.prototype.processReturnIntoObject = function() {
        var key = this.read(), entry2 = this.outputStack.pop(), result = this.finalizeOutput(entry2);
        result = this.model.markChanged(result);
        var obj = this.outputObject();
        this.model.objectSetField(obj, key, result);
      }, Patcher2.prototype.processReturnIntoObjectSameKey = function() {
        var input = this.inputEntry(), entry2 = this.outputStack.pop(), result = this.finalizeOutput(entry2), obj = this.outputObject();
        this.model.objectSetField(obj, input.key, result);
      }, Patcher2.prototype.processPushField = function() {
        var idx = this.read(), entry2 = this.inputEntry(), key = this.inputKey(entry2, idx), value = this.model.objectGetField(entry2.value, key);
        this.inputStack.push({ value, key });
      }, Patcher2.prototype.processPushElement = function() {
        var idx = this.read(), entry2 = this.inputEntry(), value = this.model.arrayGetElement(entry2.value, idx);
        this.inputStack.push({ value });
      }, Patcher2.prototype.processPop = function() {
        this.inputStack.pop();
      }, Patcher2.prototype.processPushFieldCopy = function() {
        this.processPushField(), this.processCopy();
      }, Patcher2.prototype.processPushFieldBlank = function() {
        this.processPushField(), this.processBlank();
      }, Patcher2.prototype.processPushElementCopy = function() {
        this.processPushElement(), this.processCopy();
      }, Patcher2.prototype.processPushElementBlank = function() {
        this.processPushElement(), this.processBlank();
      }, Patcher2.prototype.processReturnIntoObjectPop = function() {
        this.processReturnIntoObject(), this.processPop();
      }, Patcher2.prototype.processReturnIntoObjectSameKeyPop = function() {
        this.processReturnIntoObjectSameKey(), this.processPop();
      }, Patcher2.prototype.processReturnIntoArrayPop = function() {
        this.processReturnIntoArray(), this.processPop();
      }, Patcher2.prototype.processObjectSetFieldValue = function() {
        this.processValue(), this.processReturnIntoObject();
      }, Patcher2.prototype.processObjectCopyField = function() {
        this.processPushField(), this.processCopy(), this.processReturnIntoObjectSameKey(), this.processPop();
      }, Patcher2.prototype.processObjectDeleteField = function() {
        var idx = this.read(), entry2 = this.inputEntry(), key = this.inputKey(entry2, idx), obj = this.outputObject();
        this.model.objectDeleteField(obj, key);
      }, Patcher2.prototype.processArrayAppendValue = function() {
        var value = this.model.wrap(this.read()), arr = this.outputArray();
        this.model.arrayAppendValue(arr, value);
      }, Patcher2.prototype.processArrayAppendSlice = function() {
        var left = this.read(), right = this.read(), str = this.outputArray(), val = this.inputEntry().value;
        this.model.arrayAppendSlice(str, val, left, right);
      }, Patcher2.prototype.processStringAppendString = function() {
        var value = this.model.wrap(this.read()), str = this.outputString();
        this.model.stringAppendValue(str, value);
      }, Patcher2.prototype.processStringAppendSlice = function() {
        var left = this.read(), right = this.read(), str = this.outputString(), val = this.inputEntry().value;
        this.model.stringAppendSlice(str, val, left, right);
      }, Patcher2;
    }();
  }
});

// node_modules/mendoza/lib/esm/utf8.js
function utf8charSize(code) {
  return code >> 16 ? 4 : code >> 11 ? 3 : code >> 7 ? 2 : 1;
}
function utf8resolveIndex(str, idx, start) {
  start === void 0 && (start = 0);
  var byteCount = start, ucsIdx = 0;
  for (ucsIdx = start; byteCount < idx; ucsIdx++) {
    var code = str.codePointAt(ucsIdx), size = utf8charSize(code);
    size === 4 && ucsIdx++, byteCount += size;
  }
  return ucsIdx;
}
var init_utf8 = __esm({
  "node_modules/mendoza/lib/esm/utf8.js"() {
  }
});

// node_modules/mendoza/lib/esm/simple-patcher.js
function applyPatch(left, patch) {
  var root = left, patcher = new Patcher(Model, root, patch);
  return patcher.process();
}
var Model, init_simple_patcher = __esm({
  "node_modules/mendoza/lib/esm/simple-patcher.js"() {
    init_internal_patcher();
    init_utf8();
    Model = {
      wrap: function(data) {
        return data;
      },
      finalize: function(b5) {
        return Array.isArray(b5) ? b5 : b5.data;
      },
      markChanged: function(value) {
        return value;
      },
      objectGetKeys: function(value) {
        return Object.keys(value);
      },
      objectGetField: function(value, key) {
        return value[key];
      },
      arrayGetElement: function(value, idx) {
        return value[idx];
      },
      copyObject: function(value) {
        var res = {
          type: "object",
          data: {}
        };
        if (value !== null)
          for (var _i = 0, _a2 = Object.entries(value); _i < _a2.length; _i++) {
            var _b = _a2[_i], key = _b[0], val = _b[1];
            res.data[key] = val;
          }
        return res;
      },
      copyArray: function(value) {
        return value === null ? [] : value.slice();
      },
      copyString: function(value) {
        return {
          type: "string",
          data: value === null ? "" : value
        };
      },
      objectSetField: function(target, key, value) {
        target.data[key] = value;
      },
      objectDeleteField: function(target, key) {
        delete target.data[key];
      },
      arrayAppendValue: function(target, value) {
        target.push(value);
      },
      arrayAppendSlice: function(target, source, left, right) {
        target.push.apply(target, source.slice(left, right));
      },
      stringAppendSlice: function(target, source, left, right) {
        var sourceString = source, leftPos = utf8resolveIndex(sourceString, left), rightPos = utf8resolveIndex(sourceString, right, leftPos);
        target.data += sourceString.slice(leftPos, rightPos);
      },
      stringAppendValue: function(target, value) {
        target.data += value;
      }
    };
  }
});

// node_modules/mendoza/lib/esm/index.js
var init_esm2 = __esm({
  "node_modules/mendoza/lib/esm/index.js"() {
    init_simple_patcher();
  }
});

// node_modules/@sanity/groq-store/dist/index.browser.mjs
var index_browser_exports = {};
__export(index_browser_exports, {
  groq: () => groq,
  groqStore: () => groqStore
});
function _taggedTemplateLiteral(strings, raw) {
  return raw || (raw = strings.slice(0)), Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function listen(EventSourceImpl, config2, handlers) {
  let {
    projectId: projectId2,
    dataset: dataset2,
    token
  } = config2, headers = token ? {
    Authorization: "Bearer ".concat(token)
  } : void 0, url = "https://".concat(projectId2, ".api.sanity.io/v1/data/listen/").concat(dataset2, "?query=*&effectFormat=mendoza"), es = new EventSourceImpl(url, {
    withCredentials: !0,
    headers
  });
  return addEventSourceListener(es, "welcome", handlers.open), addEventSourceListener(es, "mutation", getMutationParser(handlers.next)), addEventSourceListener(es, "channelError", (msg) => {
    es.close();
    let data;
    try {
      data = JSON.parse(msg.data);
    } catch {
      handlers.error(new Error("Unknown error parsing listener message"));
      return;
    }
    handlers.error(new Error(data.message || data.error || "Listener returned HTTP ".concat(data.statusCode)));
  }), addEventSourceListener(es, "error", (err) => {
    let origin = typeof window < "u" && window.location.origin, hintSuffix = origin ? ", and that the CORS-origin (".concat(origin, ") is allowed") : "", errorMessage = isErrorLike(err) ? " (".concat(err.message, ")") : "";
    handlers.error(new Error("Error establishing listener - check that the project ID and dataset are correct".concat(hintSuffix).concat(errorMessage)));
  }), {
    unsubscribe: () => Promise.resolve(es.close())
  };
}
function getMutationParser(cb) {
  return (msg) => {
    let data;
    try {
      data = JSON.parse(msg.data);
    } catch {
      return;
    }
    cb(data);
  };
}
function isErrorLike(err) {
  return typeof err == "object" && err !== null && "message" in err;
}
function isDraft(doc) {
  return doc._id.startsWith("drafts.");
}
function getPublishedId(document2) {
  return isDraft(document2) ? document2._id.slice(7) : document2._id;
}
function applyPatchWithoutRev(doc, patch) {
  let patchDoc = {
    ...doc
  };
  return delete patchDoc._rev, applyPatch(patchDoc, patch);
}
function noop2() {
  return Promise.resolve();
}
function getSyncingDataset(config2, onNotifyUpdate, _ref) {
  let {
    getDocuments: getDocuments3,
    EventSource: EventSource2
  } = _ref, {
    projectId: projectId2,
    dataset: dataset2,
    listen: useListener,
    overlayDrafts,
    documentLimit,
    token,
    includeTypes
  } = config2;
  if (!useListener) {
    let loaded2 = getDocuments3({
      projectId: projectId2,
      dataset: dataset2,
      documentLimit,
      token,
      includeTypes
    }).then(onUpdate).then(noop2);
    return {
      unsubscribe: noop2,
      loaded: loaded2
    };
  }
  let indexedDocuments = /* @__PURE__ */ new Map(), documents, buffer = [], onDoneLoading, onLoadError, loaded = new Promise((resolve, reject) => {
    onDoneLoading = resolve, onLoadError = reject;
  }), stagedDocs, previousTrx, flushTimeout;
  return {
    unsubscribe: listen(EventSource2, config2, {
      next: onMutationReceived,
      open: onOpen,
      error: (error) => onLoadError(error)
    }).unsubscribe,
    loaded
  };
  async function onOpen() {
    let initial = await getDocuments3({
      projectId: projectId2,
      dataset: dataset2,
      documentLimit,
      token,
      includeTypes
    });
    documents = applyBufferedMutations(initial, buffer), documents.forEach((doc) => indexedDocuments.set(doc._id, doc)), onUpdate(documents), onDoneLoading();
  }
  function onMutationReceived(msg) {
    documents ? (applyMutation(msg), scheduleUpdate(documents, msg)) : buffer.push(msg);
  }
  function scheduleUpdate(docs, msg) {
    clearTimeout(flushTimeout), previousTrx !== msg.transactionId && stagedDocs ? (onUpdate(stagedDocs), previousTrx = void 0) : (previousTrx = msg.transactionId, stagedDocs = docs.slice()), flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice());
  }
  function onUpdate(docs) {
    stagedDocs = void 0, flushTimeout = void 0, previousTrx = void 0, onNotifyUpdate(overlayDrafts ? overlay(docs) : docs);
  }
  function applyMutation(msg) {
    if (!msg.effects || msg.documentId.startsWith("_."))
      return;
    let document2 = indexedDocuments.get(msg.documentId) || null;
    replaceDocument(msg.documentId, applyPatchWithoutRev(document2, msg.effects.apply));
  }
  function replaceDocument(id, document2) {
    let current = indexedDocuments.get(id), docs = documents || [], position = current ? docs.indexOf(current) : -1;
    position === -1 && document2 ? (docs.push(document2), indexedDocuments.set(id, document2)) : document2 ? (docs.splice(position, 1, document2), indexedDocuments.set(id, document2)) : (docs.splice(position, 1), indexedDocuments.delete(id));
  }
}
function applyBufferedMutations(documents, mutations) {
  let groups = /* @__PURE__ */ new Map();
  return mutations.forEach((mutation) => {
    let group = groups.get(mutation.documentId) || [];
    group.push(mutation), groups.set(mutation.documentId, group);
  }), groups.forEach((group, id) => {
    let document2 = documents.find((doc) => doc._id === id);
    if (!document2) {
      console.warn("Received mutation for missing document %s", id);
      return;
    }
    let hasFoundRevision = !1, current = document2;
    group.forEach((mutation) => {
      hasFoundRevision = hasFoundRevision || mutation.previousRev === document2._rev, !!hasFoundRevision && mutation.effects && (current = applyPatchWithoutRev(current, mutation.effects.apply));
    }), documents.splice(documents.indexOf(document2), 1, current);
  }), documents;
}
function overlay(documents) {
  let overlayed = /* @__PURE__ */ new Map();
  return documents.forEach((doc) => {
    let existing = overlayed.get(getPublishedId(doc));
    doc._id.startsWith("drafts.") ? overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc)) : existing || overlayed.set(doc._id, doc);
  }), Array.from(overlayed.values());
}
function pretendThatItsPublished(doc) {
  return {
    ...doc,
    _id: getPublishedId(doc)
  };
}
function groqStore$1(config2, envImplementations) {
  let documents = [], executeThrottled = throttle(config2.subscriptionThrottleMs || 50, executeAllSubscriptions), activeSubscriptions = [], dataset2;
  async function loadDataset() {
    dataset2 || (dataset2 = getSyncingDataset(config2, (docs) => {
      documents = docs, executeThrottled();
    }, envImplementations)), await dataset2.loaded;
  }
  async function query2(groqQuery, params) {
    await loadDataset();
    let tree = parse2(groqQuery, {
      params
    });
    return (await evaluateQuery(tree, {
      dataset: documents,
      params
    })).get();
  }
  async function getDocument2(documentId) {
    return await loadDataset(), query2(groq(_templateObject || (_templateObject = _taggedTemplateLiteral(["*[_id == $id][0]"]))), {
      id: documentId
    });
  }
  async function getDocuments3(documentIds) {
    await loadDataset();
    let subQueries = documentIds.map((id) => '*[_id == "'.concat(id, '"][0]')).join(`,
`);
    return query2("[".concat(subQueries, "]"));
  }
  function subscribe(groqQuery, params, callback) {
    if (!config2.listen)
      throw new Error("Cannot use `subscribe()` without `listen: true`");
    let subscription = {
      query: groqQuery,
      params,
      callback
    };
    activeSubscriptions.push(subscription);
    let unsubscribed = !1, unsubscribe = () => (unsubscribed || (unsubscribed = !0, activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)), Promise.resolve());
    return executeQuerySubscription(subscription), {
      unsubscribe
    };
  }
  function executeQuerySubscription(subscription) {
    return query2(subscription.query, subscription.params).then((res) => {
      "previousResult" in subscription && (0, import_fast_deep_equal.default)(subscription.previousResult, res) || (subscription.previousResult = res, subscription.callback(void 0, res));
    }).catch((err) => {
      subscription.callback(err);
    });
  }
  function executeAllSubscriptions() {
    activeSubscriptions.forEach(executeQuerySubscription);
  }
  function close() {
    return executeThrottled.cancel(), dataset2 ? dataset2.unsubscribe() : Promise.resolve();
  }
  return {
    query: query2,
    getDocument: getDocument2,
    getDocuments: getDocuments3,
    subscribe,
    close
  };
}
function getDocumentStream(body) {
  if (!body)
    throw new Error("Failed to read body from response");
  let reader, cancelled = !1;
  function cancel() {
    cancelled = !0, reader && reader.cancel();
  }
  return new ReadableStream({
    start(controller) {
      reader = body.getReader();
      let decoder = new TextDecoder(), buffer = "";
      reader.read().then(processResult).catch((err) => controller.error(err));
      async function processResult(result) {
        if (result.done) {
          if (cancelled)
            return;
          if (buffer = buffer.trim(), buffer.length === 0) {
            controller.close();
            return;
          }
          controller.enqueue(JSON.parse(buffer)), controller.close();
          return;
        }
        buffer += decoder.decode(result.value, {
          stream: !0
        });
        let lines = buffer.split(`
`);
        for (let i9 = 0; i9 < lines.length - 1; ++i9) {
          let line = lines[i9].trim();
          if (line.length !== 0)
            try {
              controller.enqueue(JSON.parse(line));
            } catch (err) {
              controller.error(err), cancel();
              return;
            }
        }
        if (buffer = lines[lines.length - 1], !!reader)
          try {
            processResult(await reader.read());
          } catch (err) {
            controller.error(err);
          }
      }
    },
    cancel
  });
}
function isStreamError(result) {
  return !result || !("error" in result) || typeof result.error != "object" || result.error === null ? !1 : "description" in result.error && typeof result.error.description == "string" && !("_id" in result);
}
function getError(body) {
  return typeof body == "object" && "error" in body && "message" in body ? body.message || body.error : "<unknown error>";
}
function isRelevantDocument(doc) {
  return !doc._id.startsWith("_.");
}
function assertEnvSupport() {
  let unsupported = ["EventSource", "ReadableStream", "fetch"].filter((api) => !(api in window));
  if (unsupported.length > 0)
    throw new Error("Browser not supported. Missing browser APIs: ".concat(unsupported.join(", ")));
}
function groqStore(config2) {
  var _a2;
  assertEnvSupport();
  let EventSource2 = (_a2 = config2.EventSource) != null ? _a2 : window.EventSource;
  if (config2.token) {
    if (!config2.EventSource)
      throw new Error("When the `token` option is used the `EventSource` option must also be provided.");
    if (config2.EventSource === window.EventSource)
      throw new Error("When the `token` option is used the `EventSource` option must also be provided. EventSource cannot be `window.EventSource`, as it does not support passing a token.");
  }
  return groqStore$1(config2, {
    EventSource: EventSource2,
    getDocuments
  });
}
var import_fast_deep_equal, _templateObject, isNativeBrowserEventSource, addEventSourceListener, DEBOUNCE_MS, getDocuments, init_index_browser = __esm({
  "node_modules/@sanity/groq-store/dist/index.browser.mjs"() {
    init_groq_esm();
    init_groq_esm();
    import_fast_deep_equal = __toESM(require_fast_deep_equal(), 1);
    init_esm();
    init_dist3();
    init_esm2();
    isNativeBrowserEventSource = (eventSource) => typeof window < "u" && eventSource.addEventListener === window.EventSource.prototype.addEventListener, addEventSourceListener = (eventSource, type, listener) => {
      isNativeBrowserEventSource(eventSource) && eventSource.addEventListener(type, listener, !1), eventSource.addEventListener(type, listener);
    };
    DEBOUNCE_MS = 25;
    getDocuments = async function(_ref2) {
      let {
        projectId: projectId2,
        dataset: dataset2,
        token,
        documentLimit,
        includeTypes = []
      } = _ref2, baseUrl = "https://".concat(projectId2, ".api.sanity.io/v1/data/export/").concat(dataset2), params = includeTypes.length > 0 ? new URLSearchParams({
        types: includeTypes == null ? void 0 : includeTypes.join(",")
      }) : "", url = "".concat(baseUrl, "?").concat(params), headers = token ? {
        Authorization: "Bearer ".concat(token)
      } : void 0, response = await fetch(url, {
        credentials: "include",
        headers
      });
      if (response.status !== 200)
        throw new Error("Error streaming dataset: ".concat(getError(await response.json())));
      let reader = getDocumentStream(response.body).getReader(), documents = [], result, document2;
      do {
        if (result = await reader.read(), document2 = result.value, isStreamError(document2))
          throw new Error("Error streaming dataset: ".concat(document2.error));
        if (document2 && isRelevantDocument(document2) && documents.push(document2), documentLimit && documents.length > documentLimit)
          throw reader.cancel("Reached document limit"), new Error("Error streaming dataset: Reached limit of ".concat(documentLimit, " documents. Try using the includeTypes option to reduce the amount of documents, or increase the limit."));
      } while (!result.done);
      return documents;
    };
  }
});

// node_modules/@sanity/preview-kit/node_modules/event-source-polyfill/src/eventsource.js
var require_eventsource = __commonJS({
  "node_modules/@sanity/preview-kit/node_modules/event-source-polyfill/src/eventsource.js"(exports, module) {
    (function(global2) {
      "use strict";
      var setTimeout2 = global2.setTimeout, clearTimeout2 = global2.clearTimeout, XMLHttpRequest2 = global2.XMLHttpRequest, XDomainRequest = global2.XDomainRequest, ActiveXObject = global2.ActiveXObject, NativeEventSource = global2.EventSource, document2 = global2.document, Promise2 = global2.Promise, fetch2 = global2.fetch, Response2 = global2.Response, TextDecoder2 = global2.TextDecoder, TextEncoder2 = global2.TextEncoder, AbortController2 = global2.AbortController;
      if (typeof window < "u" && typeof document2 < "u" && !("readyState" in document2) && document2.body == null && (document2.readyState = "loading", window.addEventListener("load", function(event2) {
        document2.readyState = "complete";
      }, !1)), XMLHttpRequest2 == null && ActiveXObject != null && (XMLHttpRequest2 = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      }), Object.create == null && (Object.create = function(C3) {
        function F7() {
        }
        return F7.prototype = C3, new F7();
      }), Date.now || (Date.now = function() {
        return new Date().getTime();
      }), AbortController2 == null) {
        var originalFetch2 = fetch2;
        fetch2 = function(url, options) {
          var signal = options.signal;
          return originalFetch2(url, { headers: options.headers, credentials: options.credentials, cache: options.cache }).then(function(response) {
            var reader = response.body.getReader();
            return signal._reader = reader, signal._aborted && signal._reader.cancel(), {
              status: response.status,
              statusText: response.statusText,
              headers: response.headers,
              body: {
                getReader: function() {
                  return reader;
                }
              }
            };
          });
        }, AbortController2 = function() {
          this.signal = {
            _reader: null,
            _aborted: !1
          }, this.abort = function() {
            this.signal._reader != null && this.signal._reader.cancel(), this.signal._aborted = !0;
          };
        };
      }
      function TextDecoderPolyfill() {
        this.bitsNeeded = 0, this.codePoint = 0;
      }
      TextDecoderPolyfill.prototype.decode = function(octets) {
        function valid(codePoint2, shift, octetsCount2) {
          if (octetsCount2 === 1)
            return codePoint2 >= 128 >> shift && codePoint2 << shift <= 2047;
          if (octetsCount2 === 2)
            return codePoint2 >= 2048 >> shift && codePoint2 << shift <= 55295 || codePoint2 >= 57344 >> shift && codePoint2 << shift <= 65535;
          if (octetsCount2 === 3)
            return codePoint2 >= 65536 >> shift && codePoint2 << shift <= 1114111;
          throw new Error();
        }
        function octetsCount(bitsNeeded2, codePoint2) {
          if (bitsNeeded2 === 6 * 1)
            return codePoint2 >> 6 > 15 ? 3 : codePoint2 > 31 ? 2 : 1;
          if (bitsNeeded2 === 6 * 2)
            return codePoint2 > 15 ? 3 : 2;
          if (bitsNeeded2 === 6 * 3)
            return 3;
          throw new Error();
        }
        for (var REPLACER = 65533, string3 = "", bitsNeeded = this.bitsNeeded, codePoint = this.codePoint, i9 = 0; i9 < octets.length; i9 += 1) {
          var octet = octets[i9];
          bitsNeeded !== 0 && (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) && (bitsNeeded = 0, codePoint = REPLACER, string3 += String.fromCharCode(codePoint)), bitsNeeded === 0 ? (octet >= 0 && octet <= 127 ? (bitsNeeded = 0, codePoint = octet) : octet >= 192 && octet <= 223 ? (bitsNeeded = 6 * 1, codePoint = octet & 31) : octet >= 224 && octet <= 239 ? (bitsNeeded = 6 * 2, codePoint = octet & 15) : octet >= 240 && octet <= 247 ? (bitsNeeded = 6 * 3, codePoint = octet & 7) : (bitsNeeded = 0, codePoint = REPLACER), bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint)) && (bitsNeeded = 0, codePoint = REPLACER)) : (bitsNeeded -= 6, codePoint = codePoint << 6 | octet & 63), bitsNeeded === 0 && (codePoint <= 65535 ? string3 += String.fromCharCode(codePoint) : (string3 += String.fromCharCode(55296 + (codePoint - 65535 - 1 >> 10)), string3 += String.fromCharCode(56320 + (codePoint - 65535 - 1 & 1023))));
        }
        return this.bitsNeeded = bitsNeeded, this.codePoint = codePoint, string3;
      };
      var supportsStreamOption = function() {
        try {
          return new TextDecoder2().decode(new TextEncoder2().encode("test"), { stream: !0 }) === "test";
        } catch (error) {
          console.debug("TextDecoder does not support streaming option. Using polyfill instead: " + error);
        }
        return !1;
      };
      (TextDecoder2 == null || TextEncoder2 == null || !supportsStreamOption()) && (TextDecoder2 = TextDecoderPolyfill);
      var k2 = function() {
      };
      function XHRWrapper(xhr) {
        this.withCredentials = !1, this.readyState = 0, this.status = 0, this.statusText = "", this.responseText = "", this.onprogress = k2, this.onload = k2, this.onerror = k2, this.onreadystatechange = k2, this._contentType = "", this._xhr = xhr, this._sendTimeout = 0, this._abort = k2;
      }
      XHRWrapper.prototype.open = function(method, url) {
        this._abort(!0);
        var that = this, xhr = this._xhr, state = 1, timeout2 = 0;
        this._abort = function(silent) {
          that._sendTimeout !== 0 && (clearTimeout2(that._sendTimeout), that._sendTimeout = 0), (state === 1 || state === 2 || state === 3) && (state = 4, xhr.onload = k2, xhr.onerror = k2, xhr.onabort = k2, xhr.onprogress = k2, xhr.onreadystatechange = k2, xhr.abort(), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), silent || (that.readyState = 4, that.onabort(null), that.onreadystatechange())), state = 0;
        };
        var onStart = function() {
          if (state === 1) {
            var status = 0, statusText = "", contentType = void 0;
            if ("contentType" in xhr)
              status = 200, statusText = "OK", contentType = xhr.contentType;
            else
              try {
                status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type");
              } catch {
                status = 0, statusText = "", contentType = void 0;
              }
            status !== 0 && (state = 2, that.readyState = 2, that.status = status, that.statusText = statusText, that._contentType = contentType, that.onreadystatechange());
          }
        }, onProgress = function() {
          if (onStart(), state === 2 || state === 3) {
            state = 3;
            var responseText = "";
            try {
              responseText = xhr.responseText;
            } catch {
            }
            that.readyState = 3, that.responseText = responseText, that.onprogress();
          }
        }, onFinish = function(type, event2) {
          if ((event2 == null || event2.preventDefault == null) && (event2 = {
            preventDefault: k2
          }), onProgress(), state === 1 || state === 2 || state === 3) {
            if (state = 4, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), that.readyState = 4, type === "load")
              that.onload(event2);
            else if (type === "error")
              that.onerror(event2);
            else if (type === "abort")
              that.onabort(event2);
            else
              throw new TypeError();
            that.onreadystatechange();
          }
        }, onReadyStateChange = function(event2) {
          xhr != null && (xhr.readyState === 4 ? (!("onload" in xhr) || !("onerror" in xhr) || !("onabort" in xhr)) && onFinish(xhr.responseText === "" ? "error" : "load", event2) : xhr.readyState === 3 ? "onprogress" in xhr || onProgress() : xhr.readyState === 2 && onStart());
        }, onTimeout = function() {
          timeout2 = setTimeout2(function() {
            onTimeout();
          }, 500), xhr.readyState === 3 && onProgress();
        };
        "onload" in xhr && (xhr.onload = function(event2) {
          onFinish("load", event2);
        }), "onerror" in xhr && (xhr.onerror = function(event2) {
          onFinish("error", event2);
        }), "onabort" in xhr && (xhr.onabort = function(event2) {
          onFinish("abort", event2);
        }), "onprogress" in xhr && (xhr.onprogress = onProgress), "onreadystatechange" in xhr && (xhr.onreadystatechange = function(event2) {
          onReadyStateChange(event2);
        }), ("contentType" in xhr || !("ontimeout" in XMLHttpRequest2.prototype)) && (url += (url.indexOf("?") === -1 ? "?" : "&") + "padding=true"), xhr.open(method, url, !0), "readyState" in xhr && (timeout2 = setTimeout2(function() {
          onTimeout();
        }, 0));
      }, XHRWrapper.prototype.abort = function() {
        this._abort(!1);
      }, XHRWrapper.prototype.getResponseHeader = function(name) {
        return this._contentType;
      }, XHRWrapper.prototype.setRequestHeader = function(name, value) {
        var xhr = this._xhr;
        "setRequestHeader" in xhr && xhr.setRequestHeader(name, value);
      }, XHRWrapper.prototype.getAllResponseHeaders = function() {
        return this._xhr.getAllResponseHeaders != null && this._xhr.getAllResponseHeaders() || "";
      }, XHRWrapper.prototype.send = function() {
        if ((!("ontimeout" in XMLHttpRequest2.prototype) || !("sendAsBinary" in XMLHttpRequest2.prototype) && !("mozAnon" in XMLHttpRequest2.prototype)) && document2 != null && document2.readyState != null && document2.readyState !== "complete") {
          var that = this;
          that._sendTimeout = setTimeout2(function() {
            that._sendTimeout = 0, that.send();
          }, 4);
          return;
        }
        var xhr = this._xhr;
        "withCredentials" in xhr && (xhr.withCredentials = this.withCredentials);
        try {
          xhr.send(void 0);
        } catch (error1) {
          throw error1;
        }
      };
      function toLowerCase(name) {
        return name.replace(/[A-Z]/g, function(c9) {
          return String.fromCharCode(c9.charCodeAt(0) + 32);
        });
      }
      function HeadersPolyfill(all) {
        for (var map3 = /* @__PURE__ */ Object.create(null), array2 = all.split(`\r
`), i9 = 0; i9 < array2.length; i9 += 1) {
          var line = array2[i9], parts = line.split(": "), name = parts.shift(), value = parts.join(": ");
          map3[toLowerCase(name)] = value;
        }
        this._map = map3;
      }
      HeadersPolyfill.prototype.get = function(name) {
        return this._map[toLowerCase(name)];
      }, XMLHttpRequest2 != null && XMLHttpRequest2.HEADERS_RECEIVED == null && (XMLHttpRequest2.HEADERS_RECEIVED = 2);
      function XHRTransport() {
      }
      XHRTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        xhr.open("GET", url);
        var offset = 0;
        xhr.onprogress = function() {
          var responseText = xhr.responseText, chunk = responseText.slice(offset);
          offset += chunk.length, onProgressCallback(chunk);
        }, xhr.onerror = function(event2) {
          event2.preventDefault(), onFinishCallback(new Error("NetworkError"));
        }, xhr.onload = function() {
          onFinishCallback(null);
        }, xhr.onabort = function() {
          onFinishCallback(null);
        }, xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest2.HEADERS_RECEIVED) {
            var status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type"), headers2 = xhr.getAllResponseHeaders();
            onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers2));
          }
        }, xhr.withCredentials = withCredentials;
        for (var name in headers)
          Object.prototype.hasOwnProperty.call(headers, name) && xhr.setRequestHeader(name, headers[name]);
        return xhr.send(), xhr;
      };
      function HeadersWrapper(headers) {
        this._headers = headers;
      }
      HeadersWrapper.prototype.get = function(name) {
        return this._headers.get(name);
      };
      function FetchTransport() {
      }
      FetchTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        var reader = null, controller = new AbortController2(), signal = controller.signal, textDecoder = new TextDecoder2();
        return fetch2(url, {
          headers,
          credentials: withCredentials ? "include" : "same-origin",
          signal,
          cache: "no-store"
        }).then(function(response) {
          return reader = response.body.getReader(), onStartCallback(response.status, response.statusText, response.headers.get("Content-Type"), new HeadersWrapper(response.headers)), new Promise2(function(resolve, reject) {
            var readNextChunk = function() {
              reader.read().then(function(result) {
                if (result.done)
                  resolve(void 0);
                else {
                  var chunk = textDecoder.decode(result.value, { stream: !0 });
                  onProgressCallback(chunk), readNextChunk();
                }
              }).catch(function(error) {
                reject(error);
              });
            };
            readNextChunk();
          });
        }).catch(function(error) {
          if (error.name !== "AbortError")
            return error;
        }).then(function(error) {
          onFinishCallback(error);
        }), {
          abort: function() {
            reader != null && reader.cancel(), controller.abort();
          }
        };
      };
      function EventTarget() {
        this._listeners = /* @__PURE__ */ Object.create(null);
      }
      function throwError(e5) {
        setTimeout2(function() {
          throw e5;
        }, 0);
      }
      EventTarget.prototype.dispatchEvent = function(event2) {
        event2.target = this;
        var typeListeners = this._listeners[event2.type];
        if (typeListeners != null)
          for (var length2 = typeListeners.length, i9 = 0; i9 < length2; i9 += 1) {
            var listener = typeListeners[i9];
            try {
              typeof listener.handleEvent == "function" ? listener.handleEvent(event2) : listener.call(this, event2);
            } catch (e5) {
              throwError(e5);
            }
          }
      }, EventTarget.prototype.addEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        typeListeners == null && (typeListeners = [], listeners[type] = typeListeners);
        for (var found = !1, i9 = 0; i9 < typeListeners.length; i9 += 1)
          typeListeners[i9] === listener && (found = !0);
        found || typeListeners.push(listener);
      }, EventTarget.prototype.removeEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        if (typeListeners != null) {
          for (var filtered = [], i9 = 0; i9 < typeListeners.length; i9 += 1)
            typeListeners[i9] !== listener && filtered.push(typeListeners[i9]);
          filtered.length === 0 ? delete listeners[type] : listeners[type] = filtered;
        }
      };
      function Event2(type) {
        this.type = type, this.target = void 0;
      }
      function MessageEvent(type, options) {
        Event2.call(this, type), this.data = options.data, this.lastEventId = options.lastEventId;
      }
      MessageEvent.prototype = Object.create(Event2.prototype);
      function ConnectionEvent(type, options) {
        Event2.call(this, type), this.status = options.status, this.statusText = options.statusText, this.headers = options.headers;
      }
      ConnectionEvent.prototype = Object.create(Event2.prototype);
      function ErrorEvent(type, options) {
        Event2.call(this, type), this.error = options.error;
      }
      ErrorEvent.prototype = Object.create(Event2.prototype);
      var WAITING = -1, CONNECTING = 0, OPEN = 1, CLOSED = 2, AFTER_CR = -1, FIELD_START = 0, FIELD = 1, VALUE_START = 2, VALUE = 3, contentTypeRegExp = /^text\/event\-stream(;.*)?$/i, MINIMUM_DURATION = 1e3, MAXIMUM_DURATION = 18e6, parseDuration = function(value, def) {
        var n4 = value == null ? def : parseInt(value, 10);
        return n4 !== n4 && (n4 = def), clampDuration(n4);
      }, clampDuration = function(n4) {
        return Math.min(Math.max(n4, MINIMUM_DURATION), MAXIMUM_DURATION);
      }, fire = function(that, f9, event2) {
        try {
          typeof f9 == "function" && f9.call(that, event2);
        } catch (e5) {
          throwError(e5);
        }
      };
      function EventSourcePolyfill(url, options) {
        EventTarget.call(this), options = options || {}, this.onopen = void 0, this.onmessage = void 0, this.onerror = void 0, this.url = void 0, this.readyState = void 0, this.withCredentials = void 0, this.headers = void 0, this._close = void 0, start(this, url, options);
      }
      function getBestXHRTransport() {
        return XMLHttpRequest2 != null && "withCredentials" in XMLHttpRequest2.prototype || XDomainRequest == null ? new XMLHttpRequest2() : new XDomainRequest();
      }
      var isFetchSupported = fetch2 != null && Response2 != null && "body" in Response2.prototype;
      function start(es, url, options) {
        url = String(url);
        var withCredentials = Boolean(options.withCredentials), lastEventIdQueryParameterName = options.lastEventIdQueryParameterName || "lastEventId", initialRetry = clampDuration(1e3), heartbeatTimeout = parseDuration(options.heartbeatTimeout, 45e3), lastEventId = "", retry2 = initialRetry, wasActivity = !1, textLength = 0, headers = options.headers || {}, TransportOption = options.Transport, xhr = isFetchSupported && TransportOption == null ? void 0 : new XHRWrapper(TransportOption != null ? new TransportOption() : getBestXHRTransport()), transport = TransportOption != null && typeof TransportOption != "string" ? new TransportOption() : xhr == null ? new FetchTransport() : new XHRTransport(), abortController = void 0, timeout2 = 0, currentState = WAITING, dataBuffer = "", lastEventIdBuffer = "", eventTypeBuffer = "", textBuffer = "", state = FIELD_START, fieldStart = 0, valueStart = 0, onStart = function(status, statusText, contentType, headers2) {
          if (currentState === CONNECTING)
            if (status === 200 && contentType != null && contentTypeRegExp.test(contentType)) {
              currentState = OPEN, wasActivity = Date.now(), retry2 = initialRetry, es.readyState = OPEN;
              var event2 = new ConnectionEvent("open", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onopen, event2);
            } else {
              var message = "";
              status !== 200 ? (statusText && (statusText = statusText.replace(/\s+/g, " ")), message = "EventSource's response has a status " + status + " " + statusText + " that is not 200. Aborting the connection.") : message = "EventSource's response has a Content-Type specifying an unsupported type: " + (contentType == null ? "-" : contentType.replace(/\s+/g, " ")) + ". Aborting the connection.", close();
              var event2 = new ConnectionEvent("error", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onerror, event2), console.error(message);
            }
        }, onProgress = function(textChunk) {
          if (currentState === OPEN) {
            for (var n4 = -1, i9 = 0; i9 < textChunk.length; i9 += 1) {
              var c9 = textChunk.charCodeAt(i9);
              (c9 === `
`.charCodeAt(0) || c9 === "\r".charCodeAt(0)) && (n4 = i9);
            }
            var chunk = (n4 !== -1 ? textBuffer : "") + textChunk.slice(0, n4 + 1);
            textBuffer = (n4 === -1 ? textBuffer : "") + textChunk.slice(n4 + 1), textChunk !== "" && (wasActivity = Date.now(), textLength += textChunk.length);
            for (var position = 0; position < chunk.length; position += 1) {
              var c9 = chunk.charCodeAt(position);
              if (state === AFTER_CR && c9 === `
`.charCodeAt(0))
                state = FIELD_START;
              else if (state === AFTER_CR && (state = FIELD_START), c9 === "\r".charCodeAt(0) || c9 === `
`.charCodeAt(0)) {
                if (state !== FIELD_START) {
                  state === FIELD && (valueStart = position + 1);
                  var field = chunk.slice(fieldStart, valueStart - 1), value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === " ".charCodeAt(0) ? 1 : 0), position);
                  field === "data" ? (dataBuffer += `
`, dataBuffer += value) : field === "id" ? lastEventIdBuffer = value : field === "event" ? eventTypeBuffer = value : field === "retry" ? (initialRetry = parseDuration(value, initialRetry), retry2 = initialRetry) : field === "heartbeatTimeout" && (heartbeatTimeout = parseDuration(value, heartbeatTimeout), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = setTimeout2(function() {
                    onTimeout();
                  }, heartbeatTimeout)));
                }
                if (state === FIELD_START) {
                  if (dataBuffer !== "") {
                    lastEventId = lastEventIdBuffer, eventTypeBuffer === "" && (eventTypeBuffer = "message");
                    var event2 = new MessageEvent(eventTypeBuffer, {
                      data: dataBuffer.slice(1),
                      lastEventId: lastEventIdBuffer
                    });
                    if (es.dispatchEvent(event2), eventTypeBuffer === "open" ? fire(es, es.onopen, event2) : eventTypeBuffer === "message" ? fire(es, es.onmessage, event2) : eventTypeBuffer === "error" && fire(es, es.onerror, event2), currentState === CLOSED)
                      return;
                  }
                  dataBuffer = "", eventTypeBuffer = "";
                }
                state = c9 === "\r".charCodeAt(0) ? AFTER_CR : FIELD_START;
              } else
                state === FIELD_START && (fieldStart = position, state = FIELD), state === FIELD ? c9 === ":".charCodeAt(0) && (valueStart = position + 1, state = VALUE_START) : state === VALUE_START && (state = VALUE);
            }
          }
        }, onFinish = function(error) {
          if (currentState === OPEN || currentState === CONNECTING) {
            currentState = WAITING, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), timeout2 = setTimeout2(function() {
              onTimeout();
            }, retry2), retry2 = clampDuration(Math.min(initialRetry * 16, retry2 * 2)), es.readyState = CONNECTING;
            var event2 = new ErrorEvent("error", { error });
            es.dispatchEvent(event2), fire(es, es.onerror, event2), error != null && console.error(error);
          }
        }, close = function() {
          currentState = CLOSED, abortController != null && (abortController.abort(), abortController = void 0), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), es.readyState = CLOSED;
        }, onTimeout = function() {
          if (timeout2 = 0, currentState !== WAITING) {
            if (!wasActivity && abortController != null)
              onFinish(new Error("No activity within " + heartbeatTimeout + " milliseconds. " + (currentState === CONNECTING ? "No response received." : textLength + " chars received.") + " Reconnecting.")), abortController != null && (abortController.abort(), abortController = void 0);
            else {
              var nextHeartbeat = Math.max((wasActivity || Date.now()) + heartbeatTimeout - Date.now(), 1);
              wasActivity = !1, timeout2 = setTimeout2(function() {
                onTimeout();
              }, nextHeartbeat);
            }
            return;
          }
          wasActivity = !1, textLength = 0, timeout2 = setTimeout2(function() {
            onTimeout();
          }, heartbeatTimeout), currentState = CONNECTING, dataBuffer = "", eventTypeBuffer = "", lastEventIdBuffer = lastEventId, textBuffer = "", fieldStart = 0, valueStart = 0, state = FIELD_START;
          var requestURL = url;
          if (url.slice(0, 5) !== "data:" && url.slice(0, 5) !== "blob:" && lastEventId !== "") {
            var i9 = url.indexOf("?");
            requestURL = i9 === -1 ? url : url.slice(0, i9 + 1) + url.slice(i9 + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function(p8, paramName) {
              return paramName === lastEventIdQueryParameterName ? "" : p8;
            }), requestURL += (url.indexOf("?") === -1 ? "?" : "&") + lastEventIdQueryParameterName + "=" + encodeURIComponent(lastEventId);
          }
          var withCredentials2 = es.withCredentials, requestHeaders = {};
          requestHeaders.Accept = "text/event-stream";
          var headers2 = es.headers;
          if (headers2 != null)
            for (var name in headers2)
              Object.prototype.hasOwnProperty.call(headers2, name) && (requestHeaders[name] = headers2[name]);
          try {
            abortController = transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials2, requestHeaders);
          } catch (error) {
            throw close(), error;
          }
        };
        es.url = url, es.readyState = CONNECTING, es.withCredentials = withCredentials, es.headers = headers, es._close = close, onTimeout();
      }
      EventSourcePolyfill.prototype = Object.create(EventTarget.prototype), EventSourcePolyfill.prototype.CONNECTING = CONNECTING, EventSourcePolyfill.prototype.OPEN = OPEN, EventSourcePolyfill.prototype.CLOSED = CLOSED, EventSourcePolyfill.prototype.close = function() {
        this._close();
      }, EventSourcePolyfill.CONNECTING = CONNECTING, EventSourcePolyfill.OPEN = OPEN, EventSourcePolyfill.CLOSED = CLOSED, EventSourcePolyfill.prototype.withCredentials = void 0;
      var R3 = NativeEventSource;
      XMLHttpRequest2 != null && (NativeEventSource == null || !("withCredentials" in NativeEventSource.prototype)) && (R3 = EventSourcePolyfill), function(factory) {
        if (typeof module == "object" && typeof module.exports == "object") {
          var v5 = factory(exports);
          v5 !== void 0 && (module.exports = v5);
        } else
          typeof define == "function" && define.amd ? define(["exports"], factory) : factory(global2);
      }(function(exports2) {
        exports2.EventSourcePolyfill = EventSourcePolyfill, exports2.NativeEventSource = NativeEventSource, exports2.EventSource = R3;
      });
    })(typeof globalThis > "u" ? typeof window < "u" ? window : typeof self < "u" ? self : exports : globalThis);
  }
});

// node_modules/parse-headers/parse-headers.js
var require_parse_headers = __commonJS({
  "node_modules/parse-headers/parse-headers.js"(exports, module) {
    var trim = function(string3) {
      return string3.replace(/^\s+|\s+$/g, "");
    }, isArray = function(arg) {
      return Object.prototype.toString.call(arg) === "[object Array]";
    };
    module.exports = function(headers) {
      if (!headers)
        return {};
      for (var result = {}, headersArr = trim(headers).split(`
`), i9 = 0; i9 < headersArr.length; i9++) {
        var row = headersArr[i9], index = row.indexOf(":"), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        typeof result[key] > "u" ? result[key] = value : isArray(result[key]) ? result[key].push(value) : result[key] = [result[key], value];
      }
      return result;
    };
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s14 = 1e3, m11 = s14 * 60, h9 = m11 * 60, d15 = h9 * 24, w4 = d15 * 7, y4 = d15 * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0)
        return parse3(val);
      if (type === "number" && isFinite(val))
        return options.long ? fmtLong(val) : fmtShort(val);
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      if (str = String(str), !(str.length > 100)) {
        var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
          str
        );
        if (!!match2) {
          var n4 = parseFloat(match2[1]), type = (match2[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n4 * y4;
            case "weeks":
            case "week":
            case "w":
              return n4 * w4;
            case "days":
            case "day":
            case "d":
              return n4 * d15;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n4 * h9;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n4 * m11;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n4 * s14;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n4;
            default:
              return;
          }
        }
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      return msAbs >= d15 ? Math.round(ms / d15) + "d" : msAbs >= h9 ? Math.round(ms / h9) + "h" : msAbs >= m11 ? Math.round(ms / m11) + "m" : msAbs >= s14 ? Math.round(ms / s14) + "s" : ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      return msAbs >= d15 ? plural(ms, msAbs, d15, "day") : msAbs >= h9 ? plural(ms, msAbs, h9, "hour") : msAbs >= m11 ? plural(ms, msAbs, m11, "minute") : msAbs >= s14 ? plural(ms, msAbs, s14, "second") : ms + " ms";
    }
    function plural(ms, msAbs, n4, name) {
      var isPlural = msAbs >= n4 * 1.5;
      return Math.round(ms / n4) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = coerce, createDebug.disable = disable, createDebug.enable = enable, createDebug.enabled = enabled, createDebug.humanize = require_ms(), createDebug.destroy = destroy, Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i9 = 0; i9 < namespace.length; i9++)
          hash = (hash << 5) - hash + namespace.charCodeAt(i9), hash |= 0;
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime, enableOverride = null, namespacesCache, enabledCache;
        function debug(...args) {
          if (!debug.enabled)
            return;
          let self2 = debug, curr = Number(new Date()), ms = curr - (prevTime || curr);
          self2.diff = ms, self2.prev = prevTime, self2.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), typeof args[0] != "string" && args.unshift("%O");
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match2, format) => {
            if (match2 === "%%")
              return "%";
            index++;
            let formatter = createDebug.formatters[format];
            if (typeof formatter == "function") {
              let val = args[index];
              match2 = formatter.call(self2, val), args.splice(index, 1), index--;
            }
            return match2;
          }), createDebug.formatArgs.call(self2, args), (self2.log || createDebug.log).apply(self2, args);
        }
        return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend4, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", {
          enumerable: !0,
          configurable: !1,
          get: () => enableOverride !== null ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache),
          set: (v5) => {
            enableOverride = v5;
          }
        }), typeof createDebug.init == "function" && createDebug.init(debug), debug;
      }
      function extend4(namespace, delimiter) {
        let newDebug = createDebug(this.namespace + (typeof delimiter > "u" ? ":" : delimiter) + namespace);
        return newDebug.log = this.log, newDebug;
      }
      function enable(namespaces2) {
        createDebug.save(namespaces2), createDebug.namespaces = namespaces2, createDebug.names = [], createDebug.skips = [];
        let i9, split = (typeof namespaces2 == "string" ? namespaces2 : "").split(/[\s,]+/), len = split.length;
        for (i9 = 0; i9 < len; i9++)
          !split[i9] || (namespaces2 = split[i9].replace(/\*/g, ".*?"), namespaces2[0] === "-" ? createDebug.skips.push(new RegExp("^" + namespaces2.slice(1) + "$")) : createDebug.names.push(new RegExp("^" + namespaces2 + "$")));
      }
      function disable() {
        let namespaces2 = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        return createDebug.enable(""), namespaces2;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*")
          return !0;
        let i9, len;
        for (i9 = 0, len = createDebug.skips.length; i9 < len; i9++)
          if (createDebug.skips[i9].test(name))
            return !1;
        for (i9 = 0, len = createDebug.names.length; i9 < len; i9++)
          if (createDebug.names[i9].test(name))
            return !0;
        return !1;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        return val instanceof Error ? val.stack || val.message : val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return createDebug.enable(createDebug.load()), createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = !1;
      return () => {
        warned || (warned = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      return typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? !0 : typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? !1 : typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff), !this.useColors)
        return;
      let c9 = "color: " + this.color;
      args.splice(1, 0, c9, "color: inherit");
      let index = 0, lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match2) => {
        match2 !== "%%" && (index++, match2 === "%c" && (lastC = index));
      }), args.splice(lastC, 0, c9);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces2) {
      try {
        namespaces2 ? exports.storage.setItem("debug", namespaces2) : exports.storage.removeItem("debug");
      } catch {
      }
    }
    function load() {
      let r12;
      try {
        r12 = exports.storage.getItem("debug");
      } catch {
      }
      return !r12 && typeof process < "u" && "env" in process && (r12 = process.env.DEBUG), r12;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v5) {
      try {
        return JSON.stringify(v5);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/event-source-polyfill/src/eventsource.js
var require_eventsource2 = __commonJS({
  "node_modules/event-source-polyfill/src/eventsource.js"(exports, module) {
    (function(global2) {
      "use strict";
      var setTimeout2 = global2.setTimeout, clearTimeout2 = global2.clearTimeout, XMLHttpRequest2 = global2.XMLHttpRequest, XDomainRequest = global2.XDomainRequest, ActiveXObject = global2.ActiveXObject, NativeEventSource = global2.EventSource, document2 = global2.document, Promise2 = global2.Promise, fetch2 = global2.fetch, Response2 = global2.Response, TextDecoder2 = global2.TextDecoder, TextEncoder2 = global2.TextEncoder, AbortController2 = global2.AbortController;
      if (typeof window < "u" && typeof document2 < "u" && !("readyState" in document2) && document2.body == null && (document2.readyState = "loading", window.addEventListener("load", function(event2) {
        document2.readyState = "complete";
      }, !1)), XMLHttpRequest2 == null && ActiveXObject != null && (XMLHttpRequest2 = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      }), Object.create == null && (Object.create = function(C3) {
        function F7() {
        }
        return F7.prototype = C3, new F7();
      }), Date.now || (Date.now = function() {
        return new Date().getTime();
      }), AbortController2 == null) {
        var originalFetch2 = fetch2;
        fetch2 = function(url, options) {
          var signal = options.signal;
          return originalFetch2(url, { headers: options.headers, credentials: options.credentials, cache: options.cache }).then(function(response) {
            var reader = response.body.getReader();
            return signal._reader = reader, signal._aborted && signal._reader.cancel(), {
              status: response.status,
              statusText: response.statusText,
              headers: response.headers,
              body: {
                getReader: function() {
                  return reader;
                }
              }
            };
          });
        }, AbortController2 = function() {
          this.signal = {
            _reader: null,
            _aborted: !1
          }, this.abort = function() {
            this.signal._reader != null && this.signal._reader.cancel(), this.signal._aborted = !0;
          };
        };
      }
      function TextDecoderPolyfill() {
        this.bitsNeeded = 0, this.codePoint = 0;
      }
      TextDecoderPolyfill.prototype.decode = function(octets) {
        function valid(codePoint2, shift, octetsCount2) {
          if (octetsCount2 === 1)
            return codePoint2 >= 128 >> shift && codePoint2 << shift <= 2047;
          if (octetsCount2 === 2)
            return codePoint2 >= 2048 >> shift && codePoint2 << shift <= 55295 || codePoint2 >= 57344 >> shift && codePoint2 << shift <= 65535;
          if (octetsCount2 === 3)
            return codePoint2 >= 65536 >> shift && codePoint2 << shift <= 1114111;
          throw new Error();
        }
        function octetsCount(bitsNeeded2, codePoint2) {
          if (bitsNeeded2 === 6 * 1)
            return codePoint2 >> 6 > 15 ? 3 : codePoint2 > 31 ? 2 : 1;
          if (bitsNeeded2 === 6 * 2)
            return codePoint2 > 15 ? 3 : 2;
          if (bitsNeeded2 === 6 * 3)
            return 3;
          throw new Error();
        }
        for (var REPLACER = 65533, string3 = "", bitsNeeded = this.bitsNeeded, codePoint = this.codePoint, i9 = 0; i9 < octets.length; i9 += 1) {
          var octet = octets[i9];
          bitsNeeded !== 0 && (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) && (bitsNeeded = 0, codePoint = REPLACER, string3 += String.fromCharCode(codePoint)), bitsNeeded === 0 ? (octet >= 0 && octet <= 127 ? (bitsNeeded = 0, codePoint = octet) : octet >= 192 && octet <= 223 ? (bitsNeeded = 6 * 1, codePoint = octet & 31) : octet >= 224 && octet <= 239 ? (bitsNeeded = 6 * 2, codePoint = octet & 15) : octet >= 240 && octet <= 247 ? (bitsNeeded = 6 * 3, codePoint = octet & 7) : (bitsNeeded = 0, codePoint = REPLACER), bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint)) && (bitsNeeded = 0, codePoint = REPLACER)) : (bitsNeeded -= 6, codePoint = codePoint << 6 | octet & 63), bitsNeeded === 0 && (codePoint <= 65535 ? string3 += String.fromCharCode(codePoint) : (string3 += String.fromCharCode(55296 + (codePoint - 65535 - 1 >> 10)), string3 += String.fromCharCode(56320 + (codePoint - 65535 - 1 & 1023))));
        }
        return this.bitsNeeded = bitsNeeded, this.codePoint = codePoint, string3;
      };
      var supportsStreamOption = function() {
        try {
          return new TextDecoder2().decode(new TextEncoder2().encode("test"), { stream: !0 }) === "test";
        } catch (error) {
          console.debug("TextDecoder does not support streaming option. Using polyfill instead: " + error);
        }
        return !1;
      };
      (TextDecoder2 == null || TextEncoder2 == null || !supportsStreamOption()) && (TextDecoder2 = TextDecoderPolyfill);
      var k2 = function() {
      };
      function XHRWrapper(xhr) {
        this.withCredentials = !1, this.readyState = 0, this.status = 0, this.statusText = "", this.responseText = "", this.onprogress = k2, this.onload = k2, this.onerror = k2, this.onreadystatechange = k2, this._contentType = "", this._xhr = xhr, this._sendTimeout = 0, this._abort = k2;
      }
      XHRWrapper.prototype.open = function(method, url) {
        this._abort(!0);
        var that = this, xhr = this._xhr, state = 1, timeout2 = 0;
        this._abort = function(silent) {
          that._sendTimeout !== 0 && (clearTimeout2(that._sendTimeout), that._sendTimeout = 0), (state === 1 || state === 2 || state === 3) && (state = 4, xhr.onload = k2, xhr.onerror = k2, xhr.onabort = k2, xhr.onprogress = k2, xhr.onreadystatechange = k2, xhr.abort(), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), silent || (that.readyState = 4, that.onabort(null), that.onreadystatechange())), state = 0;
        };
        var onStart = function() {
          if (state === 1) {
            var status = 0, statusText = "", contentType = void 0;
            if ("contentType" in xhr)
              status = 200, statusText = "OK", contentType = xhr.contentType;
            else
              try {
                status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type");
              } catch {
                status = 0, statusText = "", contentType = void 0;
              }
            status !== 0 && (state = 2, that.readyState = 2, that.status = status, that.statusText = statusText, that._contentType = contentType, that.onreadystatechange());
          }
        }, onProgress = function() {
          if (onStart(), state === 2 || state === 3) {
            state = 3;
            var responseText = "";
            try {
              responseText = xhr.responseText;
            } catch {
            }
            that.readyState = 3, that.responseText = responseText, that.onprogress();
          }
        }, onFinish = function(type, event2) {
          if ((event2 == null || event2.preventDefault == null) && (event2 = {
            preventDefault: k2
          }), onProgress(), state === 1 || state === 2 || state === 3) {
            if (state = 4, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), that.readyState = 4, type === "load")
              that.onload(event2);
            else if (type === "error")
              that.onerror(event2);
            else if (type === "abort")
              that.onabort(event2);
            else
              throw new TypeError();
            that.onreadystatechange();
          }
        }, onReadyStateChange = function(event2) {
          xhr != null && (xhr.readyState === 4 ? (!("onload" in xhr) || !("onerror" in xhr) || !("onabort" in xhr)) && onFinish(xhr.responseText === "" ? "error" : "load", event2) : xhr.readyState === 3 ? "onprogress" in xhr || onProgress() : xhr.readyState === 2 && onStart());
        }, onTimeout = function() {
          timeout2 = setTimeout2(function() {
            onTimeout();
          }, 500), xhr.readyState === 3 && onProgress();
        };
        "onload" in xhr && (xhr.onload = function(event2) {
          onFinish("load", event2);
        }), "onerror" in xhr && (xhr.onerror = function(event2) {
          onFinish("error", event2);
        }), "onabort" in xhr && (xhr.onabort = function(event2) {
          onFinish("abort", event2);
        }), "onprogress" in xhr && (xhr.onprogress = onProgress), "onreadystatechange" in xhr && (xhr.onreadystatechange = function(event2) {
          onReadyStateChange(event2);
        }), ("contentType" in xhr || !("ontimeout" in XMLHttpRequest2.prototype)) && (url += (url.indexOf("?") === -1 ? "?" : "&") + "padding=true"), xhr.open(method, url, !0), "readyState" in xhr && (timeout2 = setTimeout2(function() {
          onTimeout();
        }, 0));
      }, XHRWrapper.prototype.abort = function() {
        this._abort(!1);
      }, XHRWrapper.prototype.getResponseHeader = function(name) {
        return this._contentType;
      }, XHRWrapper.prototype.setRequestHeader = function(name, value) {
        var xhr = this._xhr;
        "setRequestHeader" in xhr && xhr.setRequestHeader(name, value);
      }, XHRWrapper.prototype.getAllResponseHeaders = function() {
        return this._xhr.getAllResponseHeaders != null && this._xhr.getAllResponseHeaders() || "";
      }, XHRWrapper.prototype.send = function() {
        if ((!("ontimeout" in XMLHttpRequest2.prototype) || !("sendAsBinary" in XMLHttpRequest2.prototype) && !("mozAnon" in XMLHttpRequest2.prototype)) && document2 != null && document2.readyState != null && document2.readyState !== "complete") {
          var that = this;
          that._sendTimeout = setTimeout2(function() {
            that._sendTimeout = 0, that.send();
          }, 4);
          return;
        }
        var xhr = this._xhr;
        "withCredentials" in xhr && (xhr.withCredentials = this.withCredentials);
        try {
          xhr.send(void 0);
        } catch (error1) {
          throw error1;
        }
      };
      function toLowerCase(name) {
        return name.replace(/[A-Z]/g, function(c9) {
          return String.fromCharCode(c9.charCodeAt(0) + 32);
        });
      }
      function HeadersPolyfill(all) {
        for (var map3 = /* @__PURE__ */ Object.create(null), array2 = all.split(`\r
`), i9 = 0; i9 < array2.length; i9 += 1) {
          var line = array2[i9], parts = line.split(": "), name = parts.shift(), value = parts.join(": ");
          map3[toLowerCase(name)] = value;
        }
        this._map = map3;
      }
      HeadersPolyfill.prototype.get = function(name) {
        return this._map[toLowerCase(name)];
      }, XMLHttpRequest2 != null && XMLHttpRequest2.HEADERS_RECEIVED == null && (XMLHttpRequest2.HEADERS_RECEIVED = 2);
      function XHRTransport() {
      }
      XHRTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        xhr.open("GET", url);
        var offset = 0;
        xhr.onprogress = function() {
          var responseText = xhr.responseText, chunk = responseText.slice(offset);
          offset += chunk.length, onProgressCallback(chunk);
        }, xhr.onerror = function(event2) {
          event2.preventDefault(), onFinishCallback(new Error("NetworkError"));
        }, xhr.onload = function() {
          onFinishCallback(null);
        }, xhr.onabort = function() {
          onFinishCallback(null);
        }, xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest2.HEADERS_RECEIVED) {
            var status = xhr.status, statusText = xhr.statusText, contentType = xhr.getResponseHeader("Content-Type"), headers2 = xhr.getAllResponseHeaders();
            onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers2));
          }
        }, xhr.withCredentials = withCredentials;
        for (var name in headers)
          Object.prototype.hasOwnProperty.call(headers, name) && xhr.setRequestHeader(name, headers[name]);
        return xhr.send(), xhr;
      };
      function HeadersWrapper(headers) {
        this._headers = headers;
      }
      HeadersWrapper.prototype.get = function(name) {
        return this._headers.get(name);
      };
      function FetchTransport() {
      }
      FetchTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        var reader = null, controller = new AbortController2(), signal = controller.signal, textDecoder = new TextDecoder2();
        return fetch2(url, {
          headers,
          credentials: withCredentials ? "include" : "same-origin",
          signal,
          cache: "no-store"
        }).then(function(response) {
          return reader = response.body.getReader(), onStartCallback(response.status, response.statusText, response.headers.get("Content-Type"), new HeadersWrapper(response.headers)), new Promise2(function(resolve, reject) {
            var readNextChunk = function() {
              reader.read().then(function(result) {
                if (result.done)
                  resolve(void 0);
                else {
                  var chunk = textDecoder.decode(result.value, { stream: !0 });
                  onProgressCallback(chunk), readNextChunk();
                }
              }).catch(function(error) {
                reject(error);
              });
            };
            readNextChunk();
          });
        }).catch(function(error) {
          if (error.name !== "AbortError")
            return error;
        }).then(function(error) {
          onFinishCallback(error);
        }), {
          abort: function() {
            reader != null && reader.cancel(), controller.abort();
          }
        };
      };
      function EventTarget() {
        this._listeners = /* @__PURE__ */ Object.create(null);
      }
      function throwError(e5) {
        setTimeout2(function() {
          throw e5;
        }, 0);
      }
      EventTarget.prototype.dispatchEvent = function(event2) {
        event2.target = this;
        var typeListeners = this._listeners[event2.type];
        if (typeListeners != null)
          for (var length2 = typeListeners.length, i9 = 0; i9 < length2; i9 += 1) {
            var listener = typeListeners[i9];
            try {
              typeof listener.handleEvent == "function" ? listener.handleEvent(event2) : listener.call(this, event2);
            } catch (e5) {
              throwError(e5);
            }
          }
      }, EventTarget.prototype.addEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        typeListeners == null && (typeListeners = [], listeners[type] = typeListeners);
        for (var found = !1, i9 = 0; i9 < typeListeners.length; i9 += 1)
          typeListeners[i9] === listener && (found = !0);
        found || typeListeners.push(listener);
      }, EventTarget.prototype.removeEventListener = function(type, listener) {
        type = String(type);
        var listeners = this._listeners, typeListeners = listeners[type];
        if (typeListeners != null) {
          for (var filtered = [], i9 = 0; i9 < typeListeners.length; i9 += 1)
            typeListeners[i9] !== listener && filtered.push(typeListeners[i9]);
          filtered.length === 0 ? delete listeners[type] : listeners[type] = filtered;
        }
      };
      function Event2(type) {
        this.type = type, this.target = void 0;
      }
      function MessageEvent(type, options) {
        Event2.call(this, type), this.data = options.data, this.lastEventId = options.lastEventId;
      }
      MessageEvent.prototype = Object.create(Event2.prototype);
      function ConnectionEvent(type, options) {
        Event2.call(this, type), this.status = options.status, this.statusText = options.statusText, this.headers = options.headers;
      }
      ConnectionEvent.prototype = Object.create(Event2.prototype);
      function ErrorEvent(type, options) {
        Event2.call(this, type), this.error = options.error;
      }
      ErrorEvent.prototype = Object.create(Event2.prototype);
      var WAITING = -1, CONNECTING = 0, OPEN = 1, CLOSED = 2, AFTER_CR = -1, FIELD_START = 0, FIELD = 1, VALUE_START = 2, VALUE = 3, contentTypeRegExp = /^text\/event\-stream(;.*)?$/i, MINIMUM_DURATION = 1e3, MAXIMUM_DURATION = 18e6, parseDuration = function(value, def) {
        var n4 = value == null ? def : parseInt(value, 10);
        return n4 !== n4 && (n4 = def), clampDuration(n4);
      }, clampDuration = function(n4) {
        return Math.min(Math.max(n4, MINIMUM_DURATION), MAXIMUM_DURATION);
      }, fire = function(that, f9, event2) {
        try {
          typeof f9 == "function" && f9.call(that, event2);
        } catch (e5) {
          throwError(e5);
        }
      };
      function EventSourcePolyfill(url, options) {
        EventTarget.call(this), options = options || {}, this.onopen = void 0, this.onmessage = void 0, this.onerror = void 0, this.url = void 0, this.readyState = void 0, this.withCredentials = void 0, this.headers = void 0, this._close = void 0, start(this, url, options);
      }
      function getBestXHRTransport() {
        return XMLHttpRequest2 != null && "withCredentials" in XMLHttpRequest2.prototype || XDomainRequest == null ? new XMLHttpRequest2() : new XDomainRequest();
      }
      var isFetchSupported = fetch2 != null && Response2 != null && "body" in Response2.prototype;
      function start(es, url, options) {
        url = String(url);
        var withCredentials = Boolean(options.withCredentials), lastEventIdQueryParameterName = options.lastEventIdQueryParameterName || "lastEventId", initialRetry = clampDuration(1e3), heartbeatTimeout = parseDuration(options.heartbeatTimeout, 45e3), lastEventId = "", retry2 = initialRetry, wasActivity = !1, textLength = 0, headers = options.headers || {}, TransportOption = options.Transport, xhr = isFetchSupported && TransportOption == null ? void 0 : new XHRWrapper(TransportOption != null ? new TransportOption() : getBestXHRTransport()), transport = TransportOption != null && typeof TransportOption != "string" ? new TransportOption() : xhr == null ? new FetchTransport() : new XHRTransport(), abortController = void 0, timeout2 = 0, currentState = WAITING, dataBuffer = "", lastEventIdBuffer = "", eventTypeBuffer = "", textBuffer = "", state = FIELD_START, fieldStart = 0, valueStart = 0, onStart = function(status, statusText, contentType, headers2) {
          if (currentState === CONNECTING)
            if (status === 200 && contentType != null && contentTypeRegExp.test(contentType)) {
              currentState = OPEN, wasActivity = Date.now(), retry2 = initialRetry, es.readyState = OPEN;
              var event2 = new ConnectionEvent("open", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onopen, event2);
            } else {
              var message = "";
              status !== 200 ? (statusText && (statusText = statusText.replace(/\s+/g, " ")), message = "EventSource's response has a status " + status + " " + statusText + " that is not 200. Aborting the connection.") : message = "EventSource's response has a Content-Type specifying an unsupported type: " + (contentType == null ? "-" : contentType.replace(/\s+/g, " ")) + ". Aborting the connection.", close();
              var event2 = new ConnectionEvent("error", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event2), fire(es, es.onerror, event2), console.error(message);
            }
        }, onProgress = function(textChunk) {
          if (currentState === OPEN) {
            for (var n4 = -1, i9 = 0; i9 < textChunk.length; i9 += 1) {
              var c9 = textChunk.charCodeAt(i9);
              (c9 === `
`.charCodeAt(0) || c9 === "\r".charCodeAt(0)) && (n4 = i9);
            }
            var chunk = (n4 !== -1 ? textBuffer : "") + textChunk.slice(0, n4 + 1);
            textBuffer = (n4 === -1 ? textBuffer : "") + textChunk.slice(n4 + 1), textChunk !== "" && (wasActivity = Date.now(), textLength += textChunk.length);
            for (var position = 0; position < chunk.length; position += 1) {
              var c9 = chunk.charCodeAt(position);
              if (state === AFTER_CR && c9 === `
`.charCodeAt(0))
                state = FIELD_START;
              else if (state === AFTER_CR && (state = FIELD_START), c9 === "\r".charCodeAt(0) || c9 === `
`.charCodeAt(0)) {
                if (state !== FIELD_START) {
                  state === FIELD && (valueStart = position + 1);
                  var field = chunk.slice(fieldStart, valueStart - 1), value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === " ".charCodeAt(0) ? 1 : 0), position);
                  field === "data" ? (dataBuffer += `
`, dataBuffer += value) : field === "id" ? lastEventIdBuffer = value : field === "event" ? eventTypeBuffer = value : field === "retry" ? (initialRetry = parseDuration(value, initialRetry), retry2 = initialRetry) : field === "heartbeatTimeout" && (heartbeatTimeout = parseDuration(value, heartbeatTimeout), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = setTimeout2(function() {
                    onTimeout();
                  }, heartbeatTimeout)));
                }
                if (state === FIELD_START) {
                  if (dataBuffer !== "") {
                    lastEventId = lastEventIdBuffer, eventTypeBuffer === "" && (eventTypeBuffer = "message");
                    var event2 = new MessageEvent(eventTypeBuffer, {
                      data: dataBuffer.slice(1),
                      lastEventId: lastEventIdBuffer
                    });
                    if (es.dispatchEvent(event2), eventTypeBuffer === "open" ? fire(es, es.onopen, event2) : eventTypeBuffer === "message" ? fire(es, es.onmessage, event2) : eventTypeBuffer === "error" && fire(es, es.onerror, event2), currentState === CLOSED)
                      return;
                  }
                  dataBuffer = "", eventTypeBuffer = "";
                }
                state = c9 === "\r".charCodeAt(0) ? AFTER_CR : FIELD_START;
              } else
                state === FIELD_START && (fieldStart = position, state = FIELD), state === FIELD ? c9 === ":".charCodeAt(0) && (valueStart = position + 1, state = VALUE_START) : state === VALUE_START && (state = VALUE);
            }
          }
        }, onFinish = function(error) {
          if (currentState === OPEN || currentState === CONNECTING) {
            currentState = WAITING, timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), timeout2 = setTimeout2(function() {
              onTimeout();
            }, retry2), retry2 = clampDuration(Math.min(initialRetry * 16, retry2 * 2)), es.readyState = CONNECTING;
            var event2 = new ErrorEvent("error", { error });
            es.dispatchEvent(event2), fire(es, es.onerror, event2), error != null && console.error(error);
          }
        }, close = function() {
          currentState = CLOSED, abortController != null && (abortController.abort(), abortController = void 0), timeout2 !== 0 && (clearTimeout2(timeout2), timeout2 = 0), es.readyState = CLOSED;
        }, onTimeout = function() {
          if (timeout2 = 0, currentState !== WAITING) {
            if (!wasActivity && abortController != null)
              onFinish(new Error("No activity within " + heartbeatTimeout + " milliseconds. " + (currentState === CONNECTING ? "No response received." : textLength + " chars received.") + " Reconnecting.")), abortController != null && (abortController.abort(), abortController = void 0);
            else {
              var nextHeartbeat = Math.max((wasActivity || Date.now()) + heartbeatTimeout - Date.now(), 1);
              wasActivity = !1, timeout2 = setTimeout2(function() {
                onTimeout();
              }, nextHeartbeat);
            }
            return;
          }
          wasActivity = !1, textLength = 0, timeout2 = setTimeout2(function() {
            onTimeout();
          }, heartbeatTimeout), currentState = CONNECTING, dataBuffer = "", eventTypeBuffer = "", lastEventIdBuffer = lastEventId, textBuffer = "", fieldStart = 0, valueStart = 0, state = FIELD_START;
          var requestURL = url;
          if (url.slice(0, 5) !== "data:" && url.slice(0, 5) !== "blob:" && lastEventId !== "") {
            var i9 = url.indexOf("?");
            requestURL = i9 === -1 ? url : url.slice(0, i9 + 1) + url.slice(i9 + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function(p8, paramName) {
              return paramName === lastEventIdQueryParameterName ? "" : p8;
            }), requestURL += (url.indexOf("?") === -1 ? "?" : "&") + lastEventIdQueryParameterName + "=" + encodeURIComponent(lastEventId);
          }
          var withCredentials2 = es.withCredentials, requestHeaders = {};
          requestHeaders.Accept = "text/event-stream";
          var headers2 = es.headers;
          if (headers2 != null)
            for (var name in headers2)
              Object.prototype.hasOwnProperty.call(headers2, name) && (requestHeaders[name] = headers2[name]);
          try {
            abortController = transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials2, requestHeaders);
          } catch (error) {
            throw close(), error;
          }
        };
        es.url = url, es.readyState = CONNECTING, es.withCredentials = withCredentials, es.headers = headers, es._close = close, onTimeout();
      }
      EventSourcePolyfill.prototype = Object.create(EventTarget.prototype), EventSourcePolyfill.prototype.CONNECTING = CONNECTING, EventSourcePolyfill.prototype.OPEN = OPEN, EventSourcePolyfill.prototype.CLOSED = CLOSED, EventSourcePolyfill.prototype.close = function() {
        this._close();
      }, EventSourcePolyfill.CONNECTING = CONNECTING, EventSourcePolyfill.OPEN = OPEN, EventSourcePolyfill.CLOSED = CLOSED, EventSourcePolyfill.prototype.withCredentials = void 0;
      var R3 = NativeEventSource;
      XMLHttpRequest2 != null && (NativeEventSource == null || !("withCredentials" in NativeEventSource.prototype)) && (R3 = EventSourcePolyfill), function(factory) {
        if (typeof module == "object" && typeof module.exports == "object") {
          var v5 = factory(exports);
          v5 !== void 0 && (module.exports = v5);
        } else
          typeof define == "function" && define.amd ? define(["exports"], factory) : factory(global2);
      }(function(exports2) {
        exports2.EventSourcePolyfill = EventSourcePolyfill, exports2.NativeEventSource = NativeEventSource, exports2.EventSource = R3;
      });
    })(typeof globalThis > "u" ? typeof window < "u" ? window : typeof self < "u" ? self : exports : globalThis);
  }
});

// node_modules/@sanity/eventsource/browser.js
var require_browser2 = __commonJS({
  "node_modules/@sanity/eventsource/browser.js"(exports, module) {
    var evs = require_eventsource2();
    module.exports = evs.EventSourcePolyfill;
  }
});

// server-entry-module:@remix-run/dev/server-build
var server_build_exports = {};
__export(server_build_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  publicPath: () => publicPath,
  routes: () => routes
});

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});

// node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js
function _extends4() {
  return _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i9 = 1; i9 < arguments.length; i9++) {
      var source = arguments[i9];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends4.apply(this, arguments);
}

// node_modules/@remix-run/react/dist/esm/components.js
var React3 = __toESM(require_react());
init_dist2();

// node_modules/@remix-run/react/dist/esm/errorBoundaries.js
var import_react = __toESM(require_react());
init_dist2();
var RemixErrorBoundary = class extends import_react.default.Component {
  constructor(props) {
    super(props), this.state = {
      error: props.error || null,
      location: props.location
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    return state.location !== props.location ? {
      error: props.error || null,
      location: props.location
    } : {
      error: props.error || state.error,
      location: state.location
    };
  }
  render() {
    return this.state.error ? /* @__PURE__ */ import_react.default.createElement(this.props.component, {
      error: this.state.error
    }) : this.props.children;
  }
};
function RemixRootDefaultErrorBoundary({
  error
}) {
  return console.error(error), /* @__PURE__ */ import_react.default.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ import_react.default.createElement("head", null, /* @__PURE__ */ import_react.default.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ import_react.default.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  }), /* @__PURE__ */ import_react.default.createElement("title", null, "Application Error!")), /* @__PURE__ */ import_react.default.createElement("body", null, /* @__PURE__ */ import_react.default.createElement("main", {
    style: {
      fontFamily: "system-ui, sans-serif",
      padding: "2rem"
    }
  }, /* @__PURE__ */ import_react.default.createElement("h1", {
    style: {
      fontSize: "24px"
    }
  }, "Application Error"), /* @__PURE__ */ import_react.default.createElement("pre", {
    style: {
      padding: "2rem",
      background: "hsla(10, 50%, 50%, 0.1)",
      color: "red",
      overflow: "auto"
    }
  }, error.stack)), /* @__PURE__ */ import_react.default.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."
              );
            `
    }
  })));
}
function V2_RemixRootDefaultErrorBoundary() {
  let error = useRouteError();
  if (isRouteErrorResponse(error))
    return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultCatchBoundaryImpl, {
      caught: error
    });
  if (error instanceof Error)
    return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultErrorBoundary, {
      error
    });
  {
    let errorString = error == null ? "Unknown Error" : typeof error == "object" && "toString" in error ? error.toString() : JSON.stringify(error);
    return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultErrorBoundary, {
      error: new Error(errorString)
    });
  }
}
var RemixCatchContext = /* @__PURE__ */ import_react.default.createContext(void 0);
function useCatch() {
  return (0, import_react.useContext)(RemixCatchContext);
}
function RemixCatchBoundary({
  catch: catchVal,
  component: Component4,
  children
}) {
  return catchVal ? /* @__PURE__ */ import_react.default.createElement(RemixCatchContext.Provider, {
    value: catchVal
  }, /* @__PURE__ */ import_react.default.createElement(Component4, null)) : /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, children);
}
function RemixRootDefaultCatchBoundary() {
  let caught = useCatch();
  return /* @__PURE__ */ import_react.default.createElement(RemixRootDefaultCatchBoundaryImpl, {
    caught
  });
}
function RemixRootDefaultCatchBoundaryImpl({
  caught
}) {
  return /* @__PURE__ */ import_react.default.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ import_react.default.createElement("head", null, /* @__PURE__ */ import_react.default.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ import_react.default.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  }), /* @__PURE__ */ import_react.default.createElement("title", null, "Unhandled Thrown Response!")), /* @__PURE__ */ import_react.default.createElement("body", null, /* @__PURE__ */ import_react.default.createElement("h1", {
    style: {
      fontFamily: "system-ui, sans-serif",
      padding: "2rem"
    }
  }, caught.status, " ", caught.statusText), /* @__PURE__ */ import_react.default.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws 404s (and other responses). Check out https://remix.run/guides/not-found for more information."
              );
            `
    }
  })));
}

// node_modules/@remix-run/react/dist/esm/invariant.js
function invariant2(value, message) {
  if (value === !1 || value === null || typeof value > "u")
    throw new Error(message);
}

// node_modules/@remix-run/react/dist/esm/links.js
init_dist2();

// node_modules/@remix-run/react/dist/esm/routeModules.js
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache)
    return routeModulesCache[route.id];
  try {
    let routeModule = await import(
      /* webpackIgnore: true */
      route.module
    );
    return routeModulesCache[route.id] = routeModule, routeModule;
  } catch {
    return window.location.reload(), new Promise(() => {
    });
  }
}

// node_modules/@remix-run/react/dist/esm/links.js
function getLinksForMatches(matches, routeModules, manifest) {
  let descriptors = matches.map((match2) => {
    var _module$links;
    let module = routeModules[match2.route.id];
    return ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || [];
  }).flat(1), preloads = getCurrentPageModulePreloadHrefs(matches, manifest);
  return dedupe(descriptors, preloads);
}
function isPageLinkDescriptor(object) {
  return object != null && typeof object.page == "string";
}
function isHtmlLinkDescriptor(object) {
  return object == null ? !1 : object.href == null ? object.rel === "preload" && (typeof object.imageSrcSet == "string" || typeof object.imagesrcset == "string") && (typeof object.imageSizes == "string" || typeof object.imagesizes == "string") : typeof object.rel == "string" && typeof object.href == "string";
}
async function getStylesheetPrefetchLinks(matches, manifest, routeModules) {
  return (await Promise.all(matches.map(async (match2) => {
    let mod = await loadRouteModule(manifest.routes[match2.route.id], routeModules);
    return mod.links ? mod.links() : [];
  }))).flat(1).filter(isHtmlLinkDescriptor).filter((link3) => link3.rel === "stylesheet" || link3.rel === "preload").map((link3) => link3.rel === "preload" ? {
    ...link3,
    rel: "prefetch"
  } : {
    ...link3,
    rel: "prefetch",
    as: "style"
  });
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location2, mode) {
  let path2 = parsePathPatch(page), isNew = (match2, index) => currentMatches[index] ? match2.route.id !== currentMatches[index].route.id : !0, matchPathChanged = (match2, index) => {
    var _currentMatches$index;
    return currentMatches[index].pathname !== match2.pathname || ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith("*")) && currentMatches[index].params["*"] !== match2.params["*"];
  };
  return mode === "data" && location2.search !== path2.search ? nextMatches.filter((match2, index) => {
    if (!manifest.routes[match2.route.id].hasLoader)
      return !1;
    if (isNew(match2, index) || matchPathChanged(match2, index))
      return !0;
    if (match2.route.shouldRevalidate) {
      var _currentMatches$;
      let routeChoice = match2.route.shouldRevalidate({
        currentUrl: new URL(location2.pathname + location2.search + location2.hash, window.origin),
        currentParams: ((_currentMatches$ = currentMatches[0]) === null || _currentMatches$ === void 0 ? void 0 : _currentMatches$.params) || {},
        nextUrl: new URL(page, window.origin),
        nextParams: match2.params,
        defaultShouldRevalidate: !0
      });
      if (typeof routeChoice == "boolean")
        return routeChoice;
    }
    return !0;
  }) : nextMatches.filter((match2, index) => {
    let manifestRoute = manifest.routes[match2.route.id];
    return (mode === "assets" || manifestRoute.hasLoader) && (isNew(match2, index) || matchPathChanged(match2, index));
  });
}
function getDataLinkHrefs(page, matches, manifest) {
  let path2 = parsePathPatch(page);
  return dedupeHrefs(matches.filter((match2) => manifest.routes[match2.route.id].hasLoader).map((match2) => {
    let {
      pathname,
      search
    } = path2, searchParams = new URLSearchParams(search);
    return searchParams.set("_data", match2.route.id), `${pathname}?${searchParams}`;
  }));
}
function getModuleLinkHrefs(matches, manifestPatch) {
  return dedupeHrefs(matches.map((match2) => {
    let route = manifestPatch.routes[match2.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function getCurrentPageModulePreloadHrefs(matches, manifest) {
  return dedupeHrefs(matches.map((match2) => {
    let route = manifest.routes[match2.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function dedupe(descriptors, preloads) {
  let set = /* @__PURE__ */ new Set(), preloadsSet = new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    if (!isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href))
      return deduped;
    let str = JSON.stringify(descriptor);
    return set.has(str) || (set.add(str), deduped.push(descriptor)), deduped;
  }, []);
}
function parsePathPatch(href) {
  let path2 = parsePath(href);
  return path2.search === void 0 && (path2.search = ""), path2;
}

// node_modules/@remix-run/react/dist/esm/markup.js
var ESCAPE_LOOKUP = {
  "&": "\\u0026",
  ">": "\\u003e",
  "<": "\\u003c",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
}, ESCAPE_REGEX = /[&><\u2028\u2029]/g;
function escapeHtml(html) {
  return html.replace(ESCAPE_REGEX, (match2) => ESCAPE_LOOKUP[match2]);
}
function createHtml(html) {
  return {
    __html: html
  };
}

// node_modules/@remix-run/react/dist/esm/transition.js
var IDLE_TRANSITION = {
  state: "idle",
  submission: void 0,
  location: void 0,
  type: "idle"
}, IDLE_FETCHER2 = {
  state: "idle",
  type: "init",
  data: void 0,
  submission: void 0
};

// node_modules/@remix-run/react/dist/esm/components.js
function useDataRouterContext3() {
  let context2 = React3.useContext(DataRouterContext);
  return invariant2(context2, "You must render this element inside a <DataRouterContext.Provider> element"), context2;
}
function useDataRouterStateContext() {
  let context2 = React3.useContext(DataRouterStateContext);
  return invariant2(context2, "You must render this element inside a <DataRouterStateContext.Provider> element"), context2;
}
var RemixContext = /* @__PURE__ */ React3.createContext(void 0);
RemixContext.displayName = "Remix";
function useRemixContext() {
  let context2 = React3.useContext(RemixContext);
  return invariant2(context2, "You must render this element inside a <Remix> element"), context2;
}
function RemixRoute({
  id
}) {
  let {
    routeModules
  } = useRemixContext();
  invariant2(routeModules, `Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`);
  let {
    default: Component4
  } = routeModules[id];
  return invariant2(Component4, `Route "${id}" has no component! Please go add a \`default\` export in the route module file.
If you were trying to navigate or submit to a resource route, use \`<a>\` instead of \`<Link>\` or \`<Form reloadDocument>\`.`), /* @__PURE__ */ React3.createElement(Component4, null);
}
function RemixRouteError({
  id
}) {
  let {
    future: future2,
    routeModules
  } = useRemixContext();
  invariant2(routeModules, `Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`);
  let error = useRouteError(), {
    CatchBoundary: CatchBoundary2,
    ErrorBoundary: ErrorBoundary2
  } = routeModules[id];
  if (future2.v2_errorBoundary) {
    if (id === "root" && (ErrorBoundary2 || (ErrorBoundary2 = V2_RemixRootDefaultErrorBoundary)), ErrorBoundary2)
      return /* @__PURE__ */ React3.createElement(ErrorBoundary2, null);
    throw error;
  }
  if (id === "root" && (CatchBoundary2 || (CatchBoundary2 = RemixRootDefaultCatchBoundary), ErrorBoundary2 || (ErrorBoundary2 = RemixRootDefaultErrorBoundary)), isRouteErrorResponse(error)) {
    let tError = error;
    if ((tError == null ? void 0 : tError.error) instanceof Error && tError.status !== 404 && ErrorBoundary2)
      return /* @__PURE__ */ React3.createElement(ErrorBoundary2, {
        error: tError.error
      });
    if (CatchBoundary2)
      return /* @__PURE__ */ React3.createElement(RemixCatchBoundary, {
        component: CatchBoundary2,
        catch: error
      });
  }
  if (error instanceof Error && ErrorBoundary2)
    return /* @__PURE__ */ React3.createElement(ErrorBoundary2, {
      error
    });
  throw error;
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let [maybePrefetch, setMaybePrefetch] = React3.useState(!1), [shouldPrefetch, setShouldPrefetch] = React3.useState(!1), {
    onFocus,
    onBlur,
    onMouseEnter,
    onMouseLeave,
    onTouchStart: onTouchStart2
  } = theirElementProps;
  React3.useEffect(() => {
    prefetch === "render" && setShouldPrefetch(!0);
  }, [prefetch]);
  let setIntent = () => {
    prefetch === "intent" && setMaybePrefetch(!0);
  }, cancelIntent = () => {
    prefetch === "intent" && (setMaybePrefetch(!1), setShouldPrefetch(!1));
  };
  return React3.useEffect(() => {
    if (maybePrefetch) {
      let id = setTimeout(() => {
        setShouldPrefetch(!0);
      }, 100);
      return () => {
        clearTimeout(id);
      };
    }
  }, [maybePrefetch]), [shouldPrefetch, {
    onFocus: composeEventHandlers(onFocus, setIntent),
    onBlur: composeEventHandlers(onBlur, cancelIntent),
    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
    onTouchStart: composeEventHandlers(onTouchStart2, setIntent)
  }];
}
var NavLink2 = /* @__PURE__ */ React3.forwardRef(({
  to,
  prefetch = "none",
  ...props
}, forwardedRef) => {
  let isAbsolute = typeof to == "string" && (/^[a-z+]+:\/\//i.test(to) || to.startsWith("//")), href = useHref(to), [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(NavLink, _extends4({
    ref: forwardedRef,
    to
  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React3.createElement(PrefetchPageLinks, {
    page: href
  }) : null);
});
NavLink2.displayName = "NavLink";
var Link2 = /* @__PURE__ */ React3.forwardRef(({
  to,
  prefetch = "none",
  ...props
}, forwardedRef) => {
  let isAbsolute = typeof to == "string" && (/^[a-z+]+:\/\//i.test(to) || to.startsWith("//")), href = useHref(to), [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Link, _extends4({
    ref: forwardedRef,
    to
  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React3.createElement(PrefetchPageLinks, {
    page: href
  }) : null);
});
Link2.displayName = "Link";
function composeEventHandlers(theirHandler, ourHandler) {
  return (event2) => {
    theirHandler && theirHandler(event2), event2.defaultPrevented || ourHandler(event2);
  };
}
function Links() {
  let {
    manifest,
    routeModules
  } = useRemixContext(), {
    matches
  } = useDataRouterStateContext(), links5 = React3.useMemo(() => getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, links5.map((link3) => {
    if (isPageLinkDescriptor(link3))
      return /* @__PURE__ */ React3.createElement(PrefetchPageLinks, _extends4({
        key: link3.page
      }, link3));
    let imageSrcSet = null;
    return "useId" in React3 ? (link3.imagesrcset && (link3.imageSrcSet = imageSrcSet = link3.imagesrcset, delete link3.imagesrcset), link3.imagesizes && (link3.imageSizes = link3.imagesizes, delete link3.imagesizes)) : (link3.imageSrcSet && (link3.imagesrcset = imageSrcSet = link3.imageSrcSet, delete link3.imageSrcSet), link3.imageSizes && (link3.imagesizes = link3.imageSizes, delete link3.imageSizes)), /* @__PURE__ */ React3.createElement("link", _extends4({
      key: link3.rel + (link3.href || "") + (imageSrcSet || "")
    }, link3));
  }));
}
function PrefetchPageLinks({
  page,
  ...dataLinkProps
}) {
  let {
    router
  } = useDataRouterContext3(), matches = React3.useMemo(() => matchRoutes(router.routes, page), [router.routes, page]);
  return matches ? /* @__PURE__ */ React3.createElement(PrefetchPageLinksImpl, _extends4({
    page,
    matches
  }, dataLinkProps)) : (console.warn(`Tried to prefetch ${page} but no routes matched.`), null);
}
function usePrefetchedStylesheets(matches) {
  let {
    manifest,
    routeModules
  } = useRemixContext(), [styleLinks, setStyleLinks] = React3.useState([]);
  return React3.useEffect(() => {
    let interrupted = !1;
    return getStylesheetPrefetchLinks(matches, manifest, routeModules).then((links5) => {
      interrupted || setStyleLinks(links5);
    }), () => {
      interrupted = !0;
    };
  }, [matches, manifest, routeModules]), styleLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location2 = useLocation(), {
    manifest
  } = useRemixContext(), {
    matches
  } = useDataRouterStateContext(), newMatchesForData = React3.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location2, "data"), [page, nextMatches, matches, manifest, location2]), newMatchesForAssets = React3.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location2, "assets"), [page, nextMatches, matches, manifest, location2]), dataHrefs = React3.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]), moduleHrefs = React3.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]), styleLinks = usePrefetchedStylesheets(newMatchesForAssets);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: href,
    rel: "prefetch",
    as: "fetch",
    href
  }, linkProps))), moduleHrefs.map((href) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: href,
    rel: "modulepreload",
    href
  }, linkProps))), styleLinks.map((link3) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: link3.href
  }, link3))));
}
function V1Meta() {
  let {
    routeModules
  } = useRemixContext(), {
    matches,
    loaderData
  } = useDataRouterStateContext(), location2 = useLocation(), meta5 = {}, parentsData = {};
  for (let match2 of matches) {
    let routeId = match2.route.id, data = loaderData[routeId], params = match2.params, routeModule = routeModules[routeId];
    if (routeModule.meta) {
      let routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
        data,
        parentsData,
        params,
        location: location2,
        matches: void 0
      }) : routeModule.meta;
      if (routeMeta && Array.isArray(routeMeta))
        throw new Error(
          "The route at " + match2.route.path + " returns an array. This is only supported with the `v2_meta` future flag in the Remix config. Either set the flag to `true` or update the route's meta function to return an object.\n\nTo reference the v1 meta function API, see https://remix.run/route/meta"
        );
      Object.assign(meta5, routeMeta);
    }
    parentsData[routeId] = data;
  }
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, Object.entries(meta5).map(([name, value]) => {
    if (!value)
      return null;
    if (["charset", "charSet"].includes(name))
      return /* @__PURE__ */ React3.createElement("meta", {
        key: "charset",
        charSet: value
      });
    if (name === "title")
      return /* @__PURE__ */ React3.createElement("title", {
        key: "title"
      }, String(value));
    let isOpenGraphTag = /^(og|music|video|article|book|profile|fb):.+$/.test(name);
    return [value].flat().map((content) => isOpenGraphTag ? /* @__PURE__ */ React3.createElement("meta", {
      property: name,
      content,
      key: name + content
    }) : typeof content == "string" ? /* @__PURE__ */ React3.createElement("meta", {
      name,
      content,
      key: name + content
    }) : /* @__PURE__ */ React3.createElement("meta", _extends4({
      key: name + JSON.stringify(content)
    }, content)));
  }));
}
function V2Meta() {
  let {
    routeModules
  } = useRemixContext(), {
    matches,
    loaderData
  } = useDataRouterStateContext(), location2 = useLocation(), meta5 = [], leafMeta = null, parentsData = {}, matchesWithMeta = matches.map((match2) => ({
    ...match2,
    meta: []
  })), index = -1;
  for (let match2 of matches) {
    index++;
    let routeId = match2.route.id, data = loaderData[routeId], params = match2.params, routeModule = routeModules[routeId], routeMeta = [];
    if (routeModule != null && routeModule.meta ? routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
      data,
      parentsData,
      params,
      location: location2,
      matches: matchesWithMeta
    }) : routeModule.meta : leafMeta && (routeMeta = leafMeta), routeMeta = routeMeta || [], !Array.isArray(routeMeta))
      throw new Error("The `v2_meta` API is enabled in the Remix config, but the route at " + match2.route.path + ` returns an invalid value. In v2, all route meta functions must return an array of meta objects.

To reference the v1 meta function API, see https://remix.run/route/meta`);
    matchesWithMeta[index].meta = routeMeta, meta5 = routeMeta, parentsData[routeId] = data, leafMeta = meta5;
  }
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, meta5.flat().map((metaProps) => metaProps ? "title" in metaProps ? /* @__PURE__ */ React3.createElement("title", {
    key: "title"
  }, String(metaProps.title)) : "charSet" in metaProps || "charset" in metaProps ? /* @__PURE__ */ React3.createElement("meta", {
    key: "charset",
    charSet: metaProps.charSet || metaProps.charset
  }) : /* @__PURE__ */ React3.createElement("meta", _extends4({
    key: JSON.stringify(metaProps)
  }, metaProps)) : null));
}
function Meta() {
  let {
    future: future2
  } = useRemixContext();
  return future2 != null && future2.v2_meta ? /* @__PURE__ */ React3.createElement(V2Meta, null) : /* @__PURE__ */ React3.createElement(V1Meta, null);
}
function Await2(props) {
  return /* @__PURE__ */ React3.createElement(Await, props);
}
var isHydrated = !1;
function Scripts(props) {
  let {
    manifest,
    serverHandoffString,
    abortDelay
  } = useRemixContext(), {
    router,
    static: isStatic,
    staticContext
  } = useDataRouterContext3(), {
    matches
  } = useDataRouterStateContext(), navigation = useNavigation();
  React3.useEffect(() => {
    isHydrated = !0;
  }, []);
  let deferredScripts = [], initialScripts = React3.useMemo(() => {
    let contextScript = staticContext ? `window.__remixContext = ${serverHandoffString};` : " ", activeDeferreds = staticContext == null ? void 0 : staticContext.activeDeferreds;
    contextScript += activeDeferreds ? ["__remixContext.p = function(v,e,p,x) {", "  if (typeof e !== 'undefined') {", "    x=new Error(e.message);", "x.stack=e.stack;", "    p=Promise.reject(x);", "  } else {", "    p=Promise.resolve(v);", "  }", "  return p;", "};", "__remixContext.n = function(i,k) {", "  __remixContext.t = __remixContext.t || {};", "  __remixContext.t[i] = __remixContext.t[i] || {};", "  let p = new Promise((r, e) => {__remixContext.t[i][k] = {r:(v)=>{r(v);},e:(v)=>{e(v);}};});", typeof abortDelay == "number" ? `setTimeout(() => {if(typeof p._error !== "undefined" || typeof p._data !== "undefined"){return;} __remixContext.t[i][k].e(new Error("Server timeout."))}, ${abortDelay});` : "", "  return p;", "};", "__remixContext.r = function(i,k,v,e,p,x) {", "  p = __remixContext.t[i][k];", "  if (typeof e !== 'undefined') {", "    x=new Error(e.message);", "x.stack=e.stack;", "    p.e(x);", "  } else {", "    p.r(v);", "  }", "};"].join(`
`) + Object.entries(activeDeferreds).map(([routeId, deferredData]) => {
      let pendingKeys = new Set(deferredData.pendingKeys), promiseKeyValues = deferredData.deferredKeys.map((key) => {
        if (pendingKeys.has(key))
          return deferredScripts.push(/* @__PURE__ */ React3.createElement(DeferredHydrationScript, {
            key: `${routeId} | ${key}`,
            deferredData,
            routeId,
            dataKey: key
          })), `${JSON.stringify(key)}:__remixContext.n(${JSON.stringify(routeId)}, ${JSON.stringify(key)})`;
        {
          let trackedPromise = deferredData.data[key];
          if (typeof trackedPromise._error < "u") {
            let toSerialize = {
              message: trackedPromise._error.message,
              stack: void 0
            };
            return toSerialize.stack = trackedPromise._error.stack, `${JSON.stringify(key)}:__remixContext.p(!1, ${escapeHtml(JSON.stringify(toSerialize))})`;
          } else {
            if (typeof trackedPromise._data > "u")
              throw new Error(`The deferred data for ${key} was not resolved, did you forget to return data from a deferred promise?`);
            return `${JSON.stringify(key)}:__remixContext.p(${escapeHtml(JSON.stringify(trackedPromise._data))})`;
          }
        }
      }).join(`,
`);
      return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;
    }).join(`
`) + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "") : "";
    let routeModulesScript = isStatic ? `${matches.map((match2, index) => `import ${JSON.stringify(manifest.url)};
import * as route${index} from ${JSON.stringify(manifest.routes[match2.route.id].module)};`).join(`
`)}
window.__remixRouteModules = {${matches.map((match2, index) => `${JSON.stringify(match2.route.id)}:route${index}`).join(",")}};

import(${JSON.stringify(manifest.entry.module)});` : " ";
    return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("script", _extends4({}, props, {
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: createHtml(contextScript),
      type: void 0
    })), /* @__PURE__ */ React3.createElement("script", _extends4({}, props, {
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: createHtml(routeModulesScript),
      type: "module",
      async: !0
    })));
  }, []);
  if (!isStatic && typeof __remixContext == "object" && __remixContext.a)
    for (let i9 = 0; i9 < __remixContext.a; i9++)
      deferredScripts.push(/* @__PURE__ */ React3.createElement(DeferredHydrationScript, {
        key: i9
      }));
  let nextMatches = React3.useMemo(() => {
    if (navigation.location) {
      let matches2 = matchRoutes(router.routes, navigation.location);
      return invariant2(matches2, `No routes match path "${navigation.location.pathname}"`), matches2;
    }
    return [];
  }, [navigation.location, router.routes]), routePreloads = matches.concat(nextMatches).map((match2) => {
    let route = manifest.routes[match2.route.id];
    return (route.imports || []).concat([route.module]);
  }).flat(1), preloads = manifest.entry.imports.concat(routePreloads);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("link", {
    rel: "modulepreload",
    href: manifest.url,
    crossOrigin: props.crossOrigin
  }), /* @__PURE__ */ React3.createElement("link", {
    rel: "modulepreload",
    href: manifest.entry.module,
    crossOrigin: props.crossOrigin
  }), dedupe2(preloads).map((path2) => /* @__PURE__ */ React3.createElement("link", {
    key: path2,
    rel: "modulepreload",
    href: path2,
    crossOrigin: props.crossOrigin
  })), !isHydrated && initialScripts, !isHydrated && deferredScripts);
}
function DeferredHydrationScript({
  dataKey,
  deferredData,
  routeId
}) {
  return typeof document > "u" && deferredData && dataKey && routeId && invariant2(deferredData.pendingKeys.includes(dataKey), `Deferred data for route ${routeId} with key ${dataKey} was not pending but tried to render a script for it.`), /* @__PURE__ */ React3.createElement(React3.Suspense, {
    fallback: typeof document > "u" && deferredData && dataKey && routeId ? null : /* @__PURE__ */ React3.createElement("script", {
      async: !0,
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: {
        __html: " "
      }
    })
  }, typeof document > "u" && deferredData && dataKey && routeId ? /* @__PURE__ */ React3.createElement(Await2, {
    resolve: deferredData.data[dataKey],
    errorElement: /* @__PURE__ */ React3.createElement(ErrorDeferredHydrationScript, {
      dataKey,
      routeId
    }),
    children: (data) => /* @__PURE__ */ React3.createElement("script", {
      async: !0,
      suppressHydrationWarning: !0,
      dangerouslySetInnerHTML: {
        __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, ${escapeHtml(JSON.stringify(data))});`
      }
    })
  }) : /* @__PURE__ */ React3.createElement("script", {
    async: !0,
    suppressHydrationWarning: !0,
    dangerouslySetInnerHTML: {
      __html: " "
    }
  }));
}
function ErrorDeferredHydrationScript({
  dataKey,
  routeId
}) {
  let error = useAsyncError(), toSerialize = {
    message: error.message,
    stack: void 0
  };
  return toSerialize.stack = error.stack, /* @__PURE__ */ React3.createElement("script", {
    suppressHydrationWarning: !0,
    dangerouslySetInnerHTML: {
      __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, !1, ${escapeHtml(JSON.stringify(toSerialize))});`
    }
  });
}
function dedupe2(array2) {
  return [...new Set(array2)];
}
function useMatches2() {
  let {
    routeModules
  } = useRemixContext();
  return useMatches().map((match2) => ({
    id: match2.id,
    pathname: match2.pathname,
    params: match2.params,
    data: match2.data,
    handle: routeModules[match2.id].handle
  }));
}
function useLoaderData2() {
  return useLoaderData();
}
function useActionData2() {
  return useActionData();
}
function useTransition() {
  let navigation = useNavigation();
  return React3.useMemo(() => convertNavigationToTransition(navigation), [navigation]);
}
function convertNavigationToTransition(navigation) {
  let {
    location: location2,
    state,
    formMethod,
    formAction,
    formEncType,
    formData
  } = navigation;
  if (!location2)
    return IDLE_TRANSITION;
  let isActionSubmission = formMethod != null && ["POST", "PUT", "PATCH", "DELETE"].includes(formMethod.toUpperCase());
  if (state === "submitting" && formMethod && formAction && formEncType && formData) {
    if (isActionSubmission)
      return {
        location: location2,
        state,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        type: "actionSubmission"
      };
    invariant2(!1, "Encountered an unexpected navigation scenario in useTransition()");
  }
  if (state === "loading") {
    let {
      _isRedirect,
      _isFetchActionRedirect
    } = location2.state || {};
    if (formMethod && formAction && formEncType && formData) {
      if (_isRedirect)
        return isActionSubmission ? {
          location: location2,
          state,
          submission: {
            method: formMethod.toUpperCase(),
            action: formAction,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "actionRedirect"
        } : {
          location: location2,
          state,
          submission: {
            method: formMethod.toUpperCase(),
            action: formAction,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "loaderSubmissionRedirect"
        };
      if (isActionSubmission)
        return {
          location: location2,
          state,
          submission: {
            method: formMethod.toUpperCase(),
            action: formAction,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "actionReload"
        };
      {
        let url = new URL(formAction, window.location.origin);
        return url.search = new URLSearchParams(formData.entries()).toString(), {
          location: location2,
          state: "submitting",
          submission: {
            method: formMethod.toUpperCase(),
            action: url.pathname + url.search,
            encType: formEncType,
            formData,
            key: ""
          },
          type: "loaderSubmission"
        };
      }
    } else if (_isRedirect)
      return _isFetchActionRedirect ? {
        location: location2,
        state,
        submission: void 0,
        type: "fetchActionRedirect"
      } : {
        location: location2,
        state,
        submission: void 0,
        type: "normalRedirect"
      };
  }
  return {
    location: location2,
    state: "loading",
    submission: void 0,
    type: "normalLoad"
  };
}
function useFetchers2() {
  return useFetchers().map((f9) => convertRouterFetcherToRemixFetcher({
    state: f9.state,
    data: f9.data,
    formMethod: f9.formMethod,
    formAction: f9.formAction,
    formData: f9.formData,
    formEncType: f9.formEncType,
    " _hasFetcherDoneAnything ": f9[" _hasFetcherDoneAnything "]
  }));
}
function useFetcher2() {
  let fetcherRR = useFetcher();
  return React3.useMemo(() => ({
    ...convertRouterFetcherToRemixFetcher({
      state: fetcherRR.state,
      data: fetcherRR.data,
      formMethod: fetcherRR.formMethod,
      formAction: fetcherRR.formAction,
      formData: fetcherRR.formData,
      formEncType: fetcherRR.formEncType,
      " _hasFetcherDoneAnything ": fetcherRR[" _hasFetcherDoneAnything "]
    }),
    load: fetcherRR.load,
    submit: fetcherRR.submit,
    Form: fetcherRR.Form
  }), [fetcherRR]);
}
function convertRouterFetcherToRemixFetcher(fetcherRR) {
  let {
    state,
    formMethod,
    formAction,
    formEncType,
    formData,
    data
  } = fetcherRR, isActionSubmission = formMethod != null && ["POST", "PUT", "PATCH", "DELETE"].includes(formMethod.toUpperCase());
  if (state === "idle")
    return fetcherRR[" _hasFetcherDoneAnything "] === !0 ? {
      state: "idle",
      type: "done",
      submission: void 0,
      data
    } : IDLE_FETCHER2;
  if (state === "submitting" && formMethod && formAction && formEncType && formData) {
    if (isActionSubmission)
      return {
        state,
        type: "actionSubmission",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        data
      };
    invariant2(!1, "Encountered an unexpected fetcher scenario in useFetcher()");
  }
  if (state === "loading" && formMethod && formAction && formEncType && formData) {
    if (isActionSubmission)
      return data ? {
        state,
        type: "actionReload",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        data
      } : {
        state,
        type: "actionRedirect",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: formAction,
          encType: formEncType,
          formData,
          key: ""
        },
        data: void 0
      };
    {
      let url = new URL(formAction, window.location.origin);
      return url.search = new URLSearchParams(formData.entries()).toString(), {
        state: "submitting",
        type: "loaderSubmission",
        formMethod: formMethod.toUpperCase(),
        formAction,
        formEncType,
        formData,
        submission: {
          method: formMethod.toUpperCase(),
          action: url.pathname + url.search,
          encType: formEncType,
          formData,
          key: ""
        },
        data
      };
    }
  }
  return {
    state: "loading",
    type: "normalLoad",
    submission: void 0,
    data
  };
}

// node_modules/@remix-run/react/dist/esm/routes.js
var React4 = __toESM(require_react());
function createServerRoutes(manifest, routeModules, future2, parentId) {
  return Object.values(manifest).filter((route) => route.parentId === parentId).map((route) => {
    let hasErrorBoundary = future2.v2_errorBoundary === !0 ? route.id === "root" || route.hasErrorBoundary : route.id === "root" || route.hasCatchBoundary || route.hasErrorBoundary, dataRoute = {
      caseSensitive: route.caseSensitive,
      element: /* @__PURE__ */ React4.createElement(RemixRoute, {
        id: route.id
      }),
      errorElement: hasErrorBoundary ? /* @__PURE__ */ React4.createElement(RemixRouteError, {
        id: route.id
      }) : void 0,
      id: route.id,
      index: route.index,
      path: route.path,
      handle: routeModules[route.id].handle
    }, children = createServerRoutes(manifest, routeModules, future2, route.id);
    return children.length > 0 && (dataRoute.children = children), dataRoute;
  });
}

// node_modules/@remix-run/react/dist/esm/index.js
init_dist2();

// node_modules/@remix-run/react/dist/esm/scroll-restoration.js
var React5 = __toESM(require_react());
init_dist2();
var STORAGE_KEY = "positions";
function ScrollRestoration2({
  getKey,
  ...props
}) {
  let location2 = useLocation(), matches = useMatches2();
  useScrollRestoration({
    getKey,
    storageKey: STORAGE_KEY
  });
  let key = React5.useMemo(
    () => {
      if (!getKey)
        return null;
      let userKey = getKey(location2, matches);
      return userKey !== location2.key ? userKey : null;
    },
    []
  ), restoreScroll = ((STORAGE_KEY2, restoreKey) => {
    if (!window.history.state || !window.history.state.key) {
      let key2 = Math.random().toString(32).slice(2);
      window.history.replaceState({
        key: key2
      }, "");
    }
    try {
      let storedY = JSON.parse(sessionStorage.getItem(STORAGE_KEY2) || "{}")[restoreKey || window.history.state.key];
      typeof storedY == "number" && window.scrollTo(0, storedY);
    } catch (error) {
      console.error(error), sessionStorage.removeItem(STORAGE_KEY2);
    }
  }).toString();
  return /* @__PURE__ */ React5.createElement("script", _extends4({}, props, {
    suppressHydrationWarning: !0,
    dangerouslySetInnerHTML: {
      __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)}, ${JSON.stringify(key)})`
    }
  }));
}

// node_modules/@remix-run/react/dist/esm/server.js
var React6 = __toESM(require_react()), import_server = __toESM(require_server());
function RemixServer({
  context: context2,
  url,
  abortDelay
}) {
  typeof url == "string" && (url = new URL(url));
  let {
    manifest,
    routeModules,
    serverHandoffString
  } = context2, routes2 = createServerRoutes(manifest.routes, routeModules, context2.future), router = (0, import_server.createStaticRouter)(routes2, context2.staticHandlerContext);
  return /* @__PURE__ */ React6.createElement(RemixContext.Provider, {
    value: {
      manifest,
      routeModules,
      serverHandoffString,
      future: context2.future,
      abortDelay
    }
  }, /* @__PURE__ */ React6.createElement(RemixErrorBoundary, {
    location: router.state.location,
    component: RemixRootDefaultErrorBoundary
  }, /* @__PURE__ */ React6.createElement(import_server.StaticRouterProvider, {
    router,
    context: context2.staticHandlerContext,
    hydrate: !1
  })));
}

// app/entry.server.tsx
var import_server3 = __toESM(require_server_browser());

// node_modules/isbot/index.mjs
function _iterableToArrayLimit(arr, i9) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e4, _x, _r, _arr = [], _n = !0, _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, i9 === 0) {
        if (Object(_i) !== _i)
          return;
        _n = !1;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i9); _n = !0)
          ;
    } catch (err) {
      _d = !0, _e4 = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e4;
      }
    }
    return _arr;
  }
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i9 = 0; i9 < props.length; i9++) {
    var descriptor = props[i9];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", {
    writable: !1
  }), Constructor;
}
function _defineProperty(obj, key, value) {
  return key = _toPropertyKey(key), key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _slicedToArray(arr, i9) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i9) || _unsupportedIterableToArray(arr, i9) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray(o8, minLen) {
  if (!!o8) {
    if (typeof o8 == "string")
      return _arrayLikeToArray(o8, minLen);
    var n4 = Object.prototype.toString.call(o8).slice(8, -1);
    if (n4 === "Object" && o8.constructor && (n4 = o8.constructor.name), n4 === "Map" || n4 === "Set")
      return Array.from(o8);
    if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
      return _arrayLikeToArray(o8, minLen);
  }
}
function _arrayLikeToArray(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i9 = 0, arr2 = new Array(len); i9 < len; i9++)
    arr2[i9] = arr[i9];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function _toPrimitive(input, hint) {
  if (typeof input != "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res != "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key == "symbol" ? key : String(key);
}
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  return _classApplyDescriptorSet(receiver, descriptor, value), value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action4) {
  if (!privateMap.has(receiver))
    throw new TypeError("attempted to " + action4 + " private field on non-instance");
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  return descriptor.get ? descriptor.get.call(receiver) : descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set)
    descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable)
      throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
  }
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver))
    throw new TypeError("attempted to get private field on non-instance");
  return fn;
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap), privateMap.set(obj, value);
}
function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet), privateSet.add(obj);
}
var list = [
  " daum[ /]",
  " deusu/",
  "(?:^| )site",
  "@[a-z]",
  "\\(at\\)[a-z]",
  "\\(github\\.com/",
  "\\[at\\][a-z]",
  "^12345",
  "^<",
  "^[\\w \\.\\-\\(\\)]+(/v?\\d+(\\.\\d+)?(\\.\\d{1,10})?)?$",
  "^[^ ]{50,}$",
  "^active",
  "^ad muncher",
  "^anglesharp/",
  "^anonymous",
  "^avsdevicesdk/",
  "^axios/",
  "^bidtellect/",
  "^biglotron",
  "^castro",
  "^clamav[ /]",
  "^cobweb/",
  "^coccoc",
  "^custom",
  "^ddg[_-]android",
  "^discourse",
  "^dispatch/\\d",
  "^downcast/",
  "^duckduckgo",
  "^facebook",
  "^fdm[ /]\\d",
  "^getright/",
  "^gozilla/",
  "^hatena",
  "^hobbit",
  "^hotzonu",
  "^hwcdn/",
  "^jeode/",
  "^jetty/",
  "^jigsaw",
  "^linkdex",
  "^lwp[-: ]",
  "^metauri",
  "^microsoft bits",
  "^movabletype",
  "^mozilla/\\d\\.\\d \\(compatible;?\\)$",
  "^mozilla/\\d\\.\\d \\w*$",
  "^navermailapp",
  "^netsurf",
  "^offline explorer",
  "^phantom",
  "^php",
  "^postman",
  "^postrank",
  "^python",
  "^read",
  "^reed",
  "^restsharp/",
  "^snapchat",
  "^space bison",
  "^svn",
  "^swcd ",
  "^taringa",
  "^test certificate info",
  "^thumbor/",
  "^tumblr/",
  "^user-agent:mozilla",
  "^valid",
  "^venus/fedoraplanet",
  "^w3c",
  "^webbandit/",
  "^webcopier",
  "^wget",
  "^whatsapp",
  "^xenu link sleuth",
  "^yahoo",
  "^yandex",
  "^zdm/\\d",
  "^zoom marketplace/",
  "^{{.*}}$",
  "adbeat\\.com",
  "appinsights",
  "archive",
  "ask jeeves/teoma",
  "bit\\.ly/",
  "bluecoat drtr",
  "bot",
  "browsex",
  "burpcollaborator",
  "capture",
  "catch",
  "check",
  "chrome-lighthouse",
  "chromeframe",
  "client",
  "cloud",
  "crawl",
  "cryptoapi",
  "dareboost",
  "datanyze",
  "dataprovider",
  "dejaclick",
  "dmbrowser",
  "download",
  "evc-batch/",
  "feed",
  "firephp",
  "freesafeip",
  "ghost",
  "gomezagent",
  "google",
  "headlesschrome/",
  "http",
  "httrack",
  "hubspot marketing grader",
  "hydra",
  "ibisbrowser",
  "images",
  "iplabel",
  "ips-agent",
  "java",
  "library",
  "mail\\.ru/",
  "manager",
  "monitor",
  "morningscore/",
  "neustar wpm",
  "news",
  "nutch",
  "offbyone",
  "optimize",
  "pageburst",
  "pagespeed",
  "perl",
  "pingdom",
  "powermarks",
  "preview",
  "proxy",
  "ptst[ /]\\d",
  "reader",
  "rexx;",
  "rigor",
  "rss",
  "scan",
  "scrape",
  "search",
  "serp ?reputation ?management",
  "server",
  "sogou",
  "sparkler/",
  "spider",
  "statuscake",
  "stumbleupon\\.com",
  "supercleaner",
  "synapse",
  "synthetic",
  "taginspector/",
  "torrent",
  "tracemyfile",
  "transcoder",
  "trendsmapresolver",
  "twingly recon",
  "url",
  "virtuoso",
  "wappalyzer",
  "webglance",
  "webkit2png",
  "websitemetadataretriever",
  "whatcms/",
  "wordpress",
  "zgrab"
];
function amend(list2) {
  try {
    new RegExp("(?<! cu)bot").test("dangerbot");
  } catch {
    return list2;
  }
  return [
    ["bot", "(?<! cu)bot"],
    ["google", "(?<! (?:channel/|google/))google(?!(app|/google| pixel))"],
    ["http", "(?<!(?:lib))http"],
    ["java", "java(?!;)"],
    ["search", "(?<! ya(?:yandex)?)search"]
  ].forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), search = _ref2[0], replace = _ref2[1], index = list2.lastIndexOf(search);
    ~index && list2.splice(index, 1, replace);
  }), list2;
}
amend(list);
var flags = "i", _list = /* @__PURE__ */ new WeakMap(), _pattern = /* @__PURE__ */ new WeakMap(), _update = /* @__PURE__ */ new WeakSet(), _index = /* @__PURE__ */ new WeakSet(), Isbot = /* @__PURE__ */ function() {
  function Isbot2(patterns) {
    var _this = this;
    _classCallCheck(this, Isbot2), _classPrivateMethodInitSpec(this, _index), _classPrivateMethodInitSpec(this, _update), _classPrivateFieldInitSpec(this, _list, {
      writable: !0,
      value: void 0
    }), _classPrivateFieldInitSpec(this, _pattern, {
      writable: !0,
      value: void 0
    }), _classPrivateFieldSet(this, _list, patterns || list.slice()), _classPrivateMethodGet(this, _update, _update2).call(this);
    var isbot2 = function(ua) {
      return _this.test(ua);
    };
    return Object.defineProperties(isbot2, Object.entries(Object.getOwnPropertyDescriptors(Isbot2.prototype)).reduce(function(accumulator, _ref) {
      var _ref2 = _slicedToArray(_ref, 2), prop = _ref2[0], descriptor = _ref2[1];
      return typeof descriptor.value == "function" && Object.assign(accumulator, _defineProperty({}, prop, {
        value: _this[prop].bind(_this)
      })), typeof descriptor.get == "function" && Object.assign(accumulator, _defineProperty({}, prop, {
        get: function() {
          return _this[prop];
        }
      })), accumulator;
    }, {}));
  }
  return _createClass(Isbot2, [{
    key: "pattern",
    get: function() {
      return new RegExp(_classPrivateFieldGet(this, _pattern));
    }
  }, {
    key: "test",
    value: function(ua) {
      return Boolean(ua) && _classPrivateFieldGet(this, _pattern).test(ua);
    }
  }, {
    key: "find",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", match2 = ua.match(_classPrivateFieldGet(this, _pattern));
      return match2 && match2[0];
    }
  }, {
    key: "matches",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      return _classPrivateFieldGet(this, _list).filter(function(entry2) {
        return new RegExp(entry2, flags).test(ua);
      });
    }
  }, {
    key: "clear",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      this.exclude(this.matches(ua));
    }
  }, {
    key: "extend",
    value: function() {
      var _this2 = this, filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      [].push.apply(_classPrivateFieldGet(this, _list), filters.filter(function(rule) {
        return _classPrivateMethodGet(_this2, _index, _index2).call(_this2, rule) === -1;
      }).map(function(filter2) {
        return filter2.toLowerCase();
      })), _classPrivateMethodGet(this, _update, _update2).call(this);
    }
  }, {
    key: "exclude",
    value: function() {
      for (var filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], length2 = filters.length; length2--; ) {
        var index = _classPrivateMethodGet(this, _index, _index2).call(this, filters[length2]);
        index > -1 && _classPrivateFieldGet(this, _list).splice(index, 1);
      }
      _classPrivateMethodGet(this, _update, _update2).call(this);
    }
  }, {
    key: "spawn",
    value: function(list2) {
      return new Isbot2(list2 || _classPrivateFieldGet(this, _list));
    }
  }]), Isbot2;
}();
function _update2() {
  _classPrivateFieldSet(this, _pattern, new RegExp(_classPrivateFieldGet(this, _list).join("|"), flags));
}
function _index2(rule) {
  return _classPrivateFieldGet(this, _list).indexOf(rule.toLowerCase());
}
var isbot = new Isbot();

// app/entry.server.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime());
async function handleRequest(request, responseStatusCode, responseHeaders, remixContext) {
  let body = await (0, import_server3.renderToReadableStream)(
    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(RemixServer, { context: remixContext, url: request.url }, void 0, !1, {
      fileName: "app/entry.server.tsx",
      lineNumber: 13,
      columnNumber: 5
    }, this)
  );
  return isbot(request.headers.get("User-Agent")) && await body.allReady, responseHeaders.set("Content-Type", "text/html"), new Response(body, {
    status: responseStatusCode,
    headers: responseHeaders
  });
}

// app/root.jsx
var root_exports = {};
__export(root_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action,
  default: () => App,
  getAllProductsData: () => getAllProductsData,
  getCart: () => getCart,
  getShopPage: () => getShopPage,
  handle: () => handle,
  links: () => links,
  loader: () => loader,
  meta: () => meta
});

// node_modules/@remix-run/server-runtime/dist/esm/cookies.js
var import_cookie = __toESM(require_cookie());

// node_modules/@remix-run/server-runtime/dist/esm/warnings.js
var alreadyWarned2 = {};
function warnOnce(condition, message) {
  !condition && !alreadyWarned2[message] && (alreadyWarned2[message] = !0, console.warn(message));
}

// node_modules/@remix-run/server-runtime/dist/esm/cookies.js
var createCookieFactory = ({
  sign: sign3,
  unsign: unsign3
}) => (name, cookieOptions = {}) => {
  let {
    secrets,
    ...options
  } = {
    secrets: [],
    path: "/",
    sameSite: "lax",
    ...cookieOptions
  };
  return warnOnceAboutExpiresCookie(name, options.expires), {
    get name() {
      return name;
    },
    get isSigned() {
      return secrets.length > 0;
    },
    get expires() {
      return typeof options.maxAge < "u" ? new Date(Date.now() + options.maxAge * 1e3) : options.expires;
    },
    async parse(cookieHeader, parseOptions) {
      if (!cookieHeader)
        return null;
      let cookies = (0, import_cookie.parse)(cookieHeader, {
        ...options,
        ...parseOptions
      });
      return name in cookies ? cookies[name] === "" ? "" : await decodeCookieValue(unsign3, cookies[name], secrets) : null;
    },
    async serialize(value, serializeOptions) {
      return (0, import_cookie.serialize)(name, value === "" ? "" : await encodeCookieValue(sign3, value, secrets), {
        ...options,
        ...serializeOptions
      });
    }
  };
}, isCookie = (object) => object != null && typeof object.name == "string" && typeof object.isSigned == "boolean" && typeof object.parse == "function" && typeof object.serialize == "function";
async function encodeCookieValue(sign3, value, secrets) {
  let encoded = encodeData(value);
  return secrets.length > 0 && (encoded = await sign3(encoded, secrets[0])), encoded;
}
async function decodeCookieValue(unsign3, value, secrets) {
  if (secrets.length > 0) {
    for (let secret of secrets) {
      let unsignedValue = await unsign3(value, secret);
      if (unsignedValue !== !1)
        return decodeData(unsignedValue);
    }
    return null;
  }
  return decodeData(value);
}
function encodeData(value) {
  return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));
}
function decodeData(value) {
  try {
    return JSON.parse(decodeURIComponent(myEscape(atob(value))));
  } catch {
    return {};
  }
}
function myEscape(value) {
  let str = value.toString(), result = "", index = 0, chr, code;
  for (; index < str.length; )
    chr = str.charAt(index++), /[\w*+\-./@]/.exec(chr) ? result += chr : (code = chr.charCodeAt(0), code < 256 ? result += "%" + hex(code, 2) : result += "%u" + hex(code, 4).toUpperCase());
  return result;
}
function hex(code, length2) {
  let result = code.toString(16);
  for (; result.length < length2; )
    result = "0" + result;
  return result;
}
function myUnescape(value) {
  let str = value.toString(), result = "", index = 0, chr, part;
  for (; index < str.length; ) {
    if (chr = str.charAt(index++), chr === "%") {
      if (str.charAt(index) === "u") {
        if (part = str.slice(index + 1, index + 5), /^[\da-f]{4}$/i.exec(part)) {
          result += String.fromCharCode(parseInt(part, 16)), index += 5;
          continue;
        }
      } else if (part = str.slice(index, index + 2), /^[\da-f]{2}$/i.exec(part)) {
        result += String.fromCharCode(parseInt(part, 16)), index += 2;
        continue;
      }
    }
    result += chr;
  }
  return result;
}
function warnOnceAboutExpiresCookie(name, expires) {
  warnOnce(!expires, `The "${name}" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \`commitSession(session, { expires })\` if using a session storage object, or \`cookie.serialize("value", { expires })\` if you're using the cookie directly.`);
}

// node_modules/@remix-run/server-runtime/dist/esm/responses.js
init_router();

// node_modules/@remix-run/server-runtime/dist/esm/errors.js
init_router();
async function serializeError(error) {
  return {
    message: error.message,
    stack: error.stack
  };
}
function serializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors), serialized = {};
  for (let [key, val] of entries)
    isRouteErrorResponse(val) ? serialized[key] = {
      ...val,
      __type: "RouteErrorResponse"
    } : val instanceof Error ? serialized[key] = {
      message: val.message,
      stack: val.stack,
      __type: "Error"
    } : serialized[key] = val;
  return serialized;
}

// node_modules/@remix-run/server-runtime/dist/esm/responses.js
var json3 = (data, init = {}) => {
  let responseInit = typeof init == "number" ? {
    status: init
  } : init, headers = new Headers(responseInit.headers);
  return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), {
    ...responseInit,
    headers
  });
}, defer3 = (data, init = {}) => {
  let responseInit = typeof init == "number" ? {
    status: init
  } : init, headers = new Headers(responseInit.headers);
  return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), defer(data, {
    ...responseInit,
    headers
  });
}, redirect3 = (url, init = 302) => {
  let responseInit = init;
  typeof responseInit == "number" ? responseInit = {
    status: responseInit
  } : typeof responseInit.status > "u" && (responseInit.status = 302);
  let headers = new Headers(responseInit.headers);
  return headers.set("Location", url), new Response(null, {
    ...responseInit,
    headers
  });
};
function isDeferredData(value) {
  let deferred = value;
  return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
}
function isResponse2(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
var redirectStatusCodes2 = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
function isRedirectStatusCode(statusCode) {
  return redirectStatusCodes2.has(statusCode);
}
function isRedirectResponse2(response) {
  return isRedirectStatusCode(response.status);
}
function isTrackedPromise2(value) {
  return value != null && typeof value.then == "function" && value._tracked === !0;
}
var DEFERRED_VALUE_PLACEHOLDER_PREFIX = "__deferred_promise:";
function createDeferredReadableStream(deferredData, signal) {
  let encoder3 = new TextEncoder();
  return new ReadableStream({
    async start(controller) {
      let criticalData = {}, preresolvedKeys = [];
      for (let [key, value] of Object.entries(deferredData.data))
        isTrackedPromise2(value) ? (criticalData[key] = `${DEFERRED_VALUE_PLACEHOLDER_PREFIX}${key}`, (typeof value._data < "u" || typeof value._error < "u") && preresolvedKeys.push(key)) : criticalData[key] = value;
      controller.enqueue(encoder3.encode(JSON.stringify(criticalData) + `

`));
      for (let preresolvedKey of preresolvedKeys)
        enqueueTrackedPromise(controller, encoder3, preresolvedKey, deferredData.data[preresolvedKey]);
      let unsubscribe = deferredData.subscribe((aborted, settledKey) => {
        settledKey && enqueueTrackedPromise(controller, encoder3, settledKey, deferredData.data[settledKey]);
      });
      await deferredData.resolveData(signal), unsubscribe(), controller.close();
    }
  });
}
function enqueueTrackedPromise(controller, encoder3, settledKey, promise2) {
  "_error" in promise2 ? controller.enqueue(encoder3.encode("error:" + JSON.stringify({
    [settledKey]: serializeError(promise2._error)
  }) + `

`)) : controller.enqueue(encoder3.encode("data:" + JSON.stringify({
    [settledKey]: promise2._data ?? null
  }) + `

`));
}

// node_modules/@remix-run/server-runtime/dist/esm/server.js
init_router();

// node_modules/@remix-run/server-runtime/dist/esm/entry.js
function createEntryRouteModules(manifest) {
  return Object.keys(manifest).reduce((memo, routeId) => (memo[routeId] = manifest[routeId].module, memo), {});
}

// node_modules/@remix-run/server-runtime/dist/esm/headers.js
var import_set_cookie_parser = __toESM(require_set_cookie());
function getDocumentHeadersRR(build, context2) {
  return (context2.errors ? context2.matches.slice(0, context2.matches.findIndex((m11) => context2.errors[m11.route.id]) + 1) : context2.matches).reduce((parentHeaders, match2) => {
    let {
      id
    } = match2.route, routeModule = build.routes[id].module, loaderHeaders = context2.loaderHeaders[id] || new Headers(), actionHeaders = context2.actionHeaders[id] || new Headers(), headers = new Headers(routeModule.headers ? typeof routeModule.headers == "function" ? routeModule.headers({
      loaderHeaders,
      parentHeaders,
      actionHeaders
    }) : routeModule.headers : void 0);
    return prependCookies(actionHeaders, headers), prependCookies(loaderHeaders, headers), prependCookies(parentHeaders, headers), headers;
  }, new Headers());
}
function prependCookies(parentHeaders, childHeaders) {
  let parentSetCookieString = parentHeaders.get("Set-Cookie");
  parentSetCookieString && (0, import_set_cookie_parser.splitCookiesString)(parentSetCookieString).forEach((cookie) => {
    childHeaders.append("Set-Cookie", cookie);
  });
}

// node_modules/@remix-run/server-runtime/dist/esm/invariant.js
function invariant3(value, message) {
  if (value === !1 || value === null || typeof value > "u")
    throw console.error("The following error is a bug in Remix; please open an issue! https://github.com/remix-run/remix/issues/new"), new Error(message);
}

// node_modules/@remix-run/server-runtime/dist/esm/mode.js
var ServerMode;
(function(ServerMode2) {
  ServerMode2.Development = "development", ServerMode2.Production = "production", ServerMode2.Test = "test";
})(ServerMode || (ServerMode = {}));
function isServerMode(value) {
  return value === ServerMode.Development || value === ServerMode.Production || value === ServerMode.Test;
}

// node_modules/@remix-run/server-runtime/dist/esm/routeMatching.js
init_router();
function matchServerRoutes(routes2, pathname) {
  let matches = matchRoutes(routes2, pathname);
  return matches ? matches.map((match2) => ({
    params: match2.params,
    pathname: match2.pathname,
    route: match2.route
  })) : null;
}

// node_modules/@remix-run/server-runtime/dist/esm/data.js
async function callRouteActionRR({
  loadContext,
  action: action4,
  params,
  request,
  routeId
}) {
  let result = await action4({
    request: stripDataParam(stripIndexParam(request)),
    context: loadContext,
    params
  });
  if (result === void 0)
    throw new Error(`You defined an action for route "${routeId}" but didn't return anything from your \`action\` function. Please return a value or \`null\`.`);
  return isResponse2(result) ? result : json3(result);
}
async function callRouteLoaderRR({
  loadContext,
  loader: loader12,
  params,
  request,
  routeId
}) {
  let result = await loader12({
    request: stripDataParam(stripIndexParam(request)),
    context: loadContext,
    params
  });
  if (result === void 0)
    throw new Error(`You defined a loader for route "${routeId}" but didn't return anything from your \`loader\` function. Please return a value or \`null\`.`);
  return isDeferredData(result) ? result.init && isRedirectStatusCode(result.init.status || 200) ? redirect3(new Headers(result.init.headers).get("Location"), result.init) : result : isResponse2(result) ? result : json3(result);
}
function stripIndexParam(request) {
  let url = new URL(request.url), indexValues = url.searchParams.getAll("index");
  url.searchParams.delete("index");
  let indexValuesToKeep = [];
  for (let indexValue of indexValues)
    indexValue && indexValuesToKeep.push(indexValue);
  for (let toKeep of indexValuesToKeep)
    url.searchParams.append("index", toKeep);
  return new Request(url.href, request);
}
function stripDataParam(request) {
  let url = new URL(request.url);
  return url.searchParams.delete("_data"), new Request(url.href, request);
}

// node_modules/@remix-run/server-runtime/dist/esm/routes.js
function createRoutes(manifest, parentId) {
  return Object.entries(manifest).filter(([, route]) => route.parentId === parentId).map(([id, route]) => ({
    ...route,
    children: createRoutes(manifest, id)
  }));
}
function createStaticHandlerDataRoutes(manifest, future2, parentId) {
  return Object.values(manifest).filter((route) => route.parentId === parentId).map((route) => {
    let commonRoute = {
      hasErrorBoundary: future2.v2_errorBoundary === !0 ? route.id === "root" || route.module.ErrorBoundary != null : route.id === "root" || route.module.CatchBoundary != null || route.module.ErrorBoundary != null,
      id: route.id,
      path: route.path,
      loader: route.module.loader ? (args) => callRouteLoaderRR({
        request: args.request,
        params: args.params,
        loadContext: args.context,
        loader: route.module.loader,
        routeId: route.id
      }) : void 0,
      action: route.module.action ? (args) => callRouteActionRR({
        request: args.request,
        params: args.params,
        loadContext: args.context,
        action: route.module.action,
        routeId: route.id
      }) : void 0,
      handle: route.module.handle
    };
    return route.index ? {
      index: !0,
      ...commonRoute
    } : {
      caseSensitive: route.caseSensitive,
      children: createStaticHandlerDataRoutes(manifest, future2, route.id),
      ...commonRoute
    };
  });
}

// node_modules/@remix-run/server-runtime/dist/esm/markup.js
var ESCAPE_LOOKUP2 = {
  "&": "\\u0026",
  ">": "\\u003e",
  "<": "\\u003c",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
}, ESCAPE_REGEX2 = /[&><\u2028\u2029]/g;
function escapeHtml2(html) {
  return html.replace(ESCAPE_REGEX2, (match2) => ESCAPE_LOOKUP2[match2]);
}

// node_modules/@remix-run/server-runtime/dist/esm/serverHandoff.js
function createServerHandoffString(serverHandoff) {
  return escapeHtml2(JSON.stringify(serverHandoff));
}

// node_modules/@remix-run/server-runtime/dist/esm/server.js
var createRequestHandler = (build, mode) => {
  let routes2 = createRoutes(build.routes), dataRoutes = createStaticHandlerDataRoutes(build.routes, build.future), serverMode = isServerMode(mode) ? mode : ServerMode.Production, staticHandler = createStaticHandler(dataRoutes);
  return async function(request, loadContext = {}) {
    let url = new URL(request.url), {
      unstable_dev
    } = build.future;
    if (mode === "development" && unstable_dev !== !1 && url.pathname === (unstable_dev.remixRequestHandlerPath ?? "") + "/__REMIX_ASSETS_MANIFEST")
      return request.method !== "GET" ? new Response("Method not allowed", {
        status: 405
      }) : new Response(JSON.stringify(build.assets), {
        status: 200,
        headers: {
          "Content-Type": "application/json"
        }
      });
    let matches = matchServerRoutes(routes2, url.pathname), response;
    if (url.searchParams.has("_data")) {
      let routeId = url.searchParams.get("_data");
      if (response = await handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext), build.entry.module.handleDataRequest) {
        let match2 = matches.find((match3) => match3.route.id == routeId);
        response = await build.entry.module.handleDataRequest(response, {
          context: loadContext,
          params: match2.params,
          request
        });
      }
    } else
      matches && matches[matches.length - 1].route.module.default == null ? response = await handleResourceRequestRR(serverMode, staticHandler, matches.slice(-1)[0].route.id, request, loadContext) : response = await handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext);
    return request.method === "HEAD" ? new Response(null, {
      headers: response.headers,
      status: response.status,
      statusText: response.statusText
    }) : response;
  };
};
async function handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext) {
  try {
    let response = await staticHandler.queryRoute(request, {
      routeId,
      requestContext: loadContext
    });
    if (isRedirectResponse2(response)) {
      let headers = new Headers(response.headers);
      return headers.set("X-Remix-Redirect", headers.get("Location")), headers.set("X-Remix-Status", response.status), headers.delete("Location"), response.headers.get("Set-Cookie") !== null && headers.set("X-Remix-Revalidate", "yes"), new Response(null, {
        status: 204,
        headers
      });
    }
    if (UNSAFE_DEFERRED_SYMBOL in response) {
      let deferredData = response[UNSAFE_DEFERRED_SYMBOL], body = createDeferredReadableStream(deferredData, request.signal), init = deferredData.init || {}, headers = new Headers(init.headers);
      return headers.set("Content-Type", "text/remix-deferred"), init.headers = headers, new Response(body, init);
    }
    return response;
  } catch (error) {
    if (isResponse2(error))
      return error.headers.set("X-Remix-Catch", "yes"), error;
    let status = 500, errorInstance = error;
    return isRouteErrorResponse(error) && (status = error.status, errorInstance = error.error || errorInstance), serverMode !== ServerMode.Test && !request.signal.aborted && console.error(errorInstance), serverMode === ServerMode.Development && errorInstance instanceof Error ? errorBoundaryError(errorInstance, status) : errorBoundaryError(new Error("Unexpected Server Error"), status);
  }
}
function findParentBoundary(routes2, routeId, error) {
  let route = routes2[routeId] || routes2.root, isCatch = isRouteErrorResponse(error) && (!error.error || error.status === 404);
  return isCatch && route.module.CatchBoundary || !isCatch && route.module.ErrorBoundary || !route.parentId ? route.id : findParentBoundary(routes2, route.parentId, error);
}
function differentiateCatchVersusErrorBoundaries(build, context2) {
  if (!context2.errors)
    return;
  let errors = {};
  for (let routeId of Object.keys(context2.errors)) {
    let error = context2.errors[routeId], handlingRouteId = findParentBoundary(build.routes, routeId, error);
    errors[handlingRouteId] = error;
  }
  context2.errors = errors;
}
async function handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext) {
  let context2;
  try {
    context2 = await staticHandler.query(request, {
      requestContext: loadContext
    });
  } catch (error) {
    return !request.signal.aborted && serverMode !== ServerMode.Test && console.error(error), new Response(null, {
      status: 500
    });
  }
  if (isResponse2(context2))
    return context2;
  build.future.v2_errorBoundary !== !0 && differentiateCatchVersusErrorBoundaries(build, context2);
  let headers = getDocumentHeadersRR(build, context2), entryContext = {
    manifest: build.assets,
    routeModules: createEntryRouteModules(build.routes),
    staticHandlerContext: context2,
    serverHandoffString: createServerHandoffString({
      state: {
        loaderData: context2.loaderData,
        actionData: context2.actionData,
        errors: serializeErrors(context2.errors)
      },
      future: build.future,
      dev: build.dev
    }),
    future: build.future
  }, handleDocumentRequestFunction = build.entry.module.default;
  try {
    return await handleDocumentRequestFunction(request, context2.statusCode, headers, entryContext);
  } catch (error) {
    context2 = getStaticContextFromError(staticHandler.dataRoutes, context2, error), build.future.v2_errorBoundary !== !0 && differentiateCatchVersusErrorBoundaries(build, context2), entryContext = {
      ...entryContext,
      staticHandlerContext: context2,
      serverHandoffString: createServerHandoffString({
        state: {
          loaderData: context2.loaderData,
          actionData: context2.actionData,
          errors: serializeErrors(context2.errors)
        },
        future: build.future
      })
    };
    try {
      return await handleDocumentRequestFunction(request, context2.statusCode, headers, entryContext);
    } catch (error2) {
      return returnLastResortErrorResponse(error2, serverMode);
    }
  }
}
async function handleResourceRequestRR(serverMode, staticHandler, routeId, request, loadContext) {
  try {
    let response = await staticHandler.queryRoute(request, {
      routeId,
      requestContext: loadContext
    });
    return invariant3(isResponse2(response), "Expected a Response to be returned from queryRoute"), response;
  } catch (error) {
    return isResponse2(error) ? (error.headers.set("X-Remix-Catch", "yes"), error) : returnLastResortErrorResponse(error, serverMode);
  }
}
async function errorBoundaryError(error, status) {
  return json3(await serializeError(error), {
    status,
    headers: {
      "X-Remix-Error": "yes"
    }
  });
}
function returnLastResortErrorResponse(error, serverMode) {
  serverMode !== ServerMode.Test && console.error(error);
  let message = "Unexpected Server Error";
  return serverMode !== ServerMode.Production && (message += `

${String(error)}`), new Response(message, {
    status: 500,
    headers: {
      "Content-Type": "text/plain"
    }
  });
}

// node_modules/@remix-run/server-runtime/dist/esm/sessions.js
function flash(name) {
  return `__flash_${name}__`;
}
var createSession = (initialData = {}, id = "") => {
  let map3 = new Map(Object.entries(initialData));
  return {
    get id() {
      return id;
    },
    get data() {
      return Object.fromEntries(map3);
    },
    has(name) {
      return map3.has(name) || map3.has(flash(name));
    },
    get(name) {
      if (map3.has(name))
        return map3.get(name);
      let flashName = flash(name);
      if (map3.has(flashName)) {
        let value = map3.get(flashName);
        return map3.delete(flashName), value;
      }
    },
    set(name, value) {
      map3.set(name, value);
    },
    flash(name, value) {
      map3.set(flash(name), value);
    },
    unset(name) {
      map3.delete(name);
    }
  };
};
var createSessionStorageFactory = (createCookie2) => ({
  cookie: cookieArg,
  createData,
  readData,
  updateData,
  deleteData
}) => {
  let cookie = isCookie(cookieArg) ? cookieArg : createCookie2((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
  return warnOnceAboutSigningSessionCookie(cookie), {
    async getSession(cookieHeader, options) {
      let id = cookieHeader && await cookie.parse(cookieHeader, options), data = id && await readData(id);
      return createSession(data || {}, id || "");
    },
    async commitSession(session, options) {
      let {
        id,
        data
      } = session;
      return id ? await updateData(id, data, cookie.expires) : id = await createData(data, cookie.expires), cookie.serialize(id, options);
    },
    async destroySession(session, options) {
      return await deleteData(session.id), cookie.serialize("", {
        ...options,
        expires: new Date(0)
      });
    }
  };
};
function warnOnceAboutSigningSessionCookie(cookie) {
  warnOnce(cookie.isSigned, `The "${cookie.name}" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/utils/cookies#signing-cookies for more information.`);
}

// node_modules/@remix-run/server-runtime/dist/esm/sessions/cookieStorage.js
var createCookieSessionStorageFactory = (createCookie2) => ({
  cookie: cookieArg
} = {}) => {
  let cookie = isCookie(cookieArg) ? cookieArg : createCookie2((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
  return warnOnceAboutSigningSessionCookie(cookie), {
    async getSession(cookieHeader, options) {
      return createSession(cookieHeader && await cookie.parse(cookieHeader, options) || {});
    },
    async commitSession(session, options) {
      let serializedCookie = await cookie.serialize(session.data, options);
      if (serializedCookie.length > 4096)
        throw new Error("Cookie length will exceed browser maximum. Length: " + serializedCookie.length);
      return serializedCookie;
    },
    async destroySession(_session, options) {
      return cookie.serialize("", {
        ...options,
        expires: new Date(0)
      });
    }
  };
};

// node_modules/@remix-run/server-runtime/dist/esm/sessions/memoryStorage.js
var createMemorySessionStorageFactory = (createSessionStorage) => ({
  cookie
} = {}) => {
  let uniqueId = 0, map3 = /* @__PURE__ */ new Map();
  return createSessionStorage({
    cookie,
    async createData(data, expires) {
      let id = (++uniqueId).toString();
      return map3.set(id, {
        data,
        expires
      }), id;
    },
    async readData(id) {
      if (map3.has(id)) {
        let {
          data,
          expires
        } = map3.get(id);
        if (!expires || expires > new Date())
          return data;
        expires && map3.delete(id);
      }
      return null;
    },
    async updateData(id, data, expires) {
      map3.set(id, {
        data,
        expires
      });
    },
    async deleteData(id) {
      map3.delete(id);
    }
  });
};

// node_modules/@shopify/remix-oxygen/dist/production/index.js
var s = new TextEncoder(), c = async (e5, o8) => {
  let t13 = await p(o8, ["sign"]), r12 = s.encode(e5), n4 = await crypto.subtle.sign("HMAC", t13, r12), a9 = btoa(String.fromCharCode(...new Uint8Array(n4))).replace(/=+$/, "");
  return e5 + "." + a9;
}, u = async (e5, o8) => {
  let t13 = e5.lastIndexOf("."), r12 = e5.slice(0, t13), n4 = e5.slice(t13 + 1), a9 = await p(o8, ["verify"]), l12 = s.encode(r12), y4 = g(atob(n4));
  return await crypto.subtle.verify("HMAC", a9, y4, l12) ? r12 : !1;
};
async function p(e5, o8) {
  return await crypto.subtle.importKey("raw", s.encode(e5), { name: "HMAC", hash: "SHA-256" }, !1, o8);
}
function g(e5) {
  let o8 = new Uint8Array(e5.length);
  for (let t13 = 0; t13 < e5.length; t13++)
    o8[t13] = e5.charCodeAt(t13);
  return o8;
}
var i = createCookieFactory({ sign: c, unsign: u }), F = createCookieSessionStorageFactory(i), d = createSessionStorageFactory(i), f = createMemorySessionStorageFactory(d);
function H({ build: e5, mode: o8, getLoadContext: t13 }) {
  let r12 = createRequestHandler(e5, o8);
  return async (n4) => r12(n4, await (t13 == null ? void 0 : t13(n4)));
}
function A(e5) {
  return e5.headers.get("oxygen-buyer-ip") ?? void 0;
}

// node_modules/@shopify/hydrogen/dist/production/index.js
init_chunk_JXANKGQN();

// node_modules/@shopify/hydrogen-react/dist/browser-prod/flatten-connection.mjs
function flattenConnection(connection) {
  if (!connection) {
    let noConnectionErr = `flattenConnection(): needs a 'connection' to flatten, but received '${connection ?? ""}' instead.`;
    return console.error(noConnectionErr + " Returning an empty array"), [];
  }
  return "nodes" in connection ? connection.nodes : "edges" in connection && Array.isArray(connection.edges) ? connection.edges.map((edge) => {
    if (!(edge != null && edge.node))
      throw new Error(
        "flattenConnection(): Connection edges must contain nodes"
      );
    return edge.node;
  }) : [];
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/ShopifyProvider.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1), import_react3 = __toESM(require_react(), 1);

// node_modules/@shopify/hydrogen-react/dist/browser-prod/storefront-api-constants.mjs
var SFAPI_VERSION = "2023-01";

// node_modules/@shopify/hydrogen-react/dist/browser-prod/storefront-client.mjs
function createStorefrontClient(props) {
  let {
    storeDomain,
    privateStorefrontToken,
    publicStorefrontToken,
    storefrontApiVersion,
    contentType
  } = props;
  return storefrontApiVersion !== SFAPI_VERSION && warnOnce2(
    `StorefrontClient: The Storefront API version that you're using is different than the version this build of Hydrogen React is targeting. You may run into unexpected errors if these versions don't match. Received verion: "${storefrontApiVersion}"; expected version "${SFAPI_VERSION}"`
  ), {
    getShopifyDomain(overrideProps) {
      return (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? storeDomain;
    },
    getStorefrontApiUrl(overrideProps) {
      let finalDomainUrl = (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? storeDomain;
      return `${finalDomainUrl}${finalDomainUrl.endsWith("/") ? "" : "/"}api/${(overrideProps == null ? void 0 : overrideProps.storefrontApiVersion) ?? storefrontApiVersion}/graphql.json`;
    },
    getPrivateTokenHeaders(overrideProps) {
      if (!privateStorefrontToken && !(overrideProps != null && overrideProps.privateStorefrontToken))
        throw new Error(
          "StorefrontClient: You did not pass in a 'privateStorefrontToken' while using 'getPrivateTokenHeaders()'"
        );
      return {
        "content-type": ((overrideProps == null ? void 0 : overrideProps.contentType) ?? contentType) === "graphql" ? "application/graphql" : "application/json",
        "X-SDK-Variant": "hydrogen-react",
        "X-SDK-Variant-Source": "react",
        "X-SDK-Version": storefrontApiVersion,
        "Shopify-Storefront-Private-Token": (overrideProps == null ? void 0 : overrideProps.privateStorefrontToken) ?? privateStorefrontToken ?? "",
        ...overrideProps != null && overrideProps.buyerIp ? { "Shopify-Storefront-Buyer-IP": overrideProps.buyerIp } : {}
      };
    },
    getPublicTokenHeaders(overrideProps) {
      if (!publicStorefrontToken && !(overrideProps != null && overrideProps.publicStorefrontToken))
        throw new Error(
          "StorefrontClient: You did not pass in a 'publicStorefrontToken' while using 'getPublicTokenHeaders()'"
        );
      let finalContentType = (overrideProps == null ? void 0 : overrideProps.contentType) ?? contentType ?? "json";
      return getPublicTokenHeadersRaw(
        finalContentType,
        storefrontApiVersion,
        (overrideProps == null ? void 0 : overrideProps.publicStorefrontToken) ?? publicStorefrontToken ?? ""
      );
    }
  };
}
function getPublicTokenHeadersRaw(contentType, storefrontApiVersion, accessToken) {
  return {
    "content-type": contentType === "graphql" ? "application/graphql" : "application/json",
    "X-SDK-Variant": "hydrogen-react",
    "X-SDK-Variant-Source": "react",
    "X-SDK-Version": storefrontApiVersion,
    "X-Shopify-Storefront-Access-Token": accessToken
  };
}
var warnings = /* @__PURE__ */ new Set(), warnOnce2 = (string3) => {
  warnings.has(string3) || (console.warn(string3), warnings.add(string3));
};

// node_modules/@shopify/hydrogen-react/dist/browser-prod/ShopifyProvider.mjs
var ShopifyContext = (0, import_react3.createContext)({
  storeDomain: "test",
  storefrontToken: "abc123",
  storefrontApiVersion: SFAPI_VERSION,
  countryIsoCode: "US",
  languageIsoCode: "EN",
  getStorefrontApiUrl() {
    return "";
  },
  getPublicTokenHeaders() {
    return {};
  },
  getShopifyDomain() {
    return "";
  }
});
function useShop() {
  let shopContext = (0, import_react3.useContext)(ShopifyContext);
  if (!shopContext)
    throw new Error("'useShop()' must be a descendent of <ShopifyProvider/>");
  return shopContext;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/cart-constants.mjs
var SHOPIFY_Y = "_shopify_y", SHOPIFY_S = "_shopify_s";

// node_modules/worktop/cookie/index.mjs
var g3 = /* @__PURE__ */ new Set([
  "domain",
  "path",
  "max-age",
  "expires",
  "samesite",
  "secure",
  "httponly"
]);
function u3(a9) {
  let r12 = {}, e5, t13, n4 = 0, m11 = a9.split(/;\s*/g), s14, i9;
  for (; n4 < m11.length; n4++)
    if (t13 = m11[n4], e5 = t13.indexOf("="), ~e5) {
      if (s14 = t13.substring(0, e5++).trim(), i9 = t13.substring(e5).trim(), i9[0] === '"' && (i9 = i9.substring(1, i9.length - 1)), ~i9.indexOf("%"))
        try {
          i9 = decodeURIComponent(i9);
        } catch {
        }
      g3.has(t13 = s14.toLowerCase()) ? t13 === "expires" ? r12.expires = new Date(i9) : t13 === "max-age" ? r12.maxage = +i9 : r12[t13] = i9 : r12[s14] = i9;
    } else
      (s14 = t13.trim().toLowerCase()) && (s14 === "httponly" || s14 === "secure") && (r12[s14] = !0);
  return r12;
}
function l(a9, r12, e5 = {}) {
  let t13 = a9 + "=" + encodeURIComponent(r12);
  return e5.expires && (t13 += "; Expires=" + new Date(e5.expires).toUTCString()), e5.maxage != null && e5.maxage >= 0 && (t13 += "; Max-Age=" + (e5.maxage | 0)), e5.domain && (t13 += "; Domain=" + e5.domain), e5.path && (t13 += "; Path=" + e5.path), e5.samesite && (t13 += "; SameSite=" + e5.samesite), (e5.secure || e5.samesite === "None") && (t13 += "; Secure"), e5.httponly && (t13 += "; HttpOnly"), t13;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/cookies-utils.mjs
var tokenHash = "xxxx-4xxx-xxxx-xxxxxxxxxxxx";
function buildUUID() {
  let hash = "";
  try {
    let crypto2 = window.crypto, randomValuesArray = new Uint16Array(31);
    crypto2.getRandomValues(randomValuesArray);
    let i9 = 0;
    hash = tokenHash.replace(/[x]/g, (c9) => {
      let r12 = randomValuesArray[i9] % 16, v5 = c9 === "x" ? r12 : r12 & 3 | 8;
      return i9++, v5.toString(16);
    }).toUpperCase();
  } catch {
    hash = tokenHash.replace(/[x]/g, (c9) => {
      let r12 = Math.random() * 16 | 0;
      return (c9 === "x" ? r12 : r12 & 3 | 8).toString(16);
    }).toUpperCase();
  }
  return `${hexTime()}-${hash}`;
}
function hexTime() {
  let dateNumber = 0, perfNumber = 0;
  dateNumber = new Date().getTime() >>> 0;
  try {
    perfNumber = performance.now() >>> 0;
  } catch {
    perfNumber = 0;
  }
  let output = Math.abs(dateNumber + perfNumber).toString(16).toLowerCase();
  return output.padStart(8 - output.length, "0");
}
function getShopifyCookies(cookies) {
  let cookieData = u3(cookies);
  return {
    [SHOPIFY_Y]: cookieData[SHOPIFY_Y] || "",
    [SHOPIFY_S]: cookieData[SHOPIFY_S] || ""
  };
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-constants.mjs
var AnalyticsEventName = {
  PAGE_VIEW: "PAGE_VIEW",
  ADD_TO_CART: "ADD_TO_CART"
}, AnalyticsPageType = {
  article: "article",
  blog: "blog",
  captcha: "captcha",
  cart: "cart",
  collection: "collection",
  customersAccount: "customers/account",
  customersActivateAccount: "customers/activate_account",
  customersAddresses: "customers/addresses",
  customersLogin: "customers/login",
  customersOrder: "customers/order",
  customersRegister: "customers/register",
  customersResetPassword: "customers/reset_password",
  giftCard: "gift_card",
  home: "index",
  listCollections: "list-collections",
  forbidden: "403",
  notFound: "404",
  page: "page",
  password: "password",
  product: "product",
  policy: "policy",
  search: "search"
}, ShopifySalesChannel = {
  hydrogen: "hydrogen",
  headless: "headless"
}, ShopifyAppId = {
  hydrogen: "6167201",
  headless: "12875497473"
};

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-utils.mjs
function schemaWrapper(schemaId, payload) {
  return {
    schema_id: schemaId,
    payload,
    metadata: {
      event_created_at_ms: Date.now()
    }
  };
}
function parseGid(gid) {
  let defaultReturn = { id: "", resource: null };
  if (typeof gid != "string")
    return defaultReturn;
  let matches = gid.match(/^gid:\/\/shopify\/(\w+)\/([a-z0-9]+)/);
  if (!matches || matches.length === 1)
    return defaultReturn;
  let id = matches[2] ?? null, resource = matches[1] ?? null;
  return { id, resource };
}
function addDataIf(keyValuePairs, formattedData) {
  return typeof keyValuePairs != "object" ? {} : (Object.entries(keyValuePairs).forEach(([key, value]) => {
    value && (formattedData[key] = value);
  }), formattedData);
}
function errorIfServer(fnName) {
  return typeof document > "u" ? (console.error(
    `${fnName} should only be used within the useEffect callback or event handlers`
  ), !0) : !1;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-schema-trekkie-storefront-page-view.mjs
var SCHEMA_ID = "trekkie_storefront_page_view/1.4", OXYGEN_DOMAIN = "myshopify.dev";
function pageView(payload) {
  let pageViewPayload = payload, { id, resource } = parseGid(pageViewPayload.resourceId), resourceType = resource ? resource.toLowerCase() : void 0;
  return [
    schemaWrapper(
      SCHEMA_ID,
      addDataIf(
        {
          pageType: pageViewPayload.pageType,
          customerId: pageViewPayload.customerId,
          resourceType,
          resourceId: parseInt(id)
        },
        formatPayload(pageViewPayload)
      )
    )
  ];
}
function formatPayload(payload) {
  return {
    appClientId: payload.shopifySalesChannel ? ShopifyAppId[payload.shopifySalesChannel] : ShopifyAppId.headless,
    isMerchantRequest: isMerchantRequest(payload.url),
    hydrogenSubchannelId: payload.storefrontId || "0",
    isPersistentCookie: payload.hasUserConsent,
    uniqToken: payload.uniqueToken,
    visitToken: payload.visitToken,
    microSessionId: buildUUID(),
    microSessionCount: 1,
    url: payload.url,
    path: payload.path,
    search: payload.search,
    referrer: payload.referrer,
    title: payload.title,
    shopId: parseInt(parseGid(payload.shopId).id),
    currency: payload.currency,
    contentLanguage: payload.acceptedLanguage || "en"
  };
}
function isMerchantRequest(url) {
  if (typeof url != "string")
    return !1;
  let hostname = new URL(url).hostname;
  return hostname.indexOf(OXYGEN_DOMAIN) !== -1 || hostname === "localhost";
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics-schema-custom-storefront-customer-tracking.mjs
var SCHEMA_ID2 = "custom_storefront_customer_tracking/1.0", PAGE_RENDERED_EVENT_NAME = "page_rendered", COLLECTION_PAGE_RENDERED_EVENT_NAME = "collection_page_rendered", PRODUCT_PAGE_RENDERED_EVENT_NAME = "product_page_rendered", PRODUCT_ADDED_TO_CART_EVENT_NAME = "product_added_to_cart", SEARCH_SUBMITTED_EVENT_NAME = "search_submitted";
function pageView2(payload) {
  let pageViewPayload = payload, additionalPayload = {
    canonical_url: pageViewPayload.canonicalUrl || pageViewPayload.url,
    customer_id: pageViewPayload.customerId
  }, pageType = pageViewPayload.pageType, pageViewEvents = [];
  switch (pageViewEvents.push(
    schemaWrapper(
      SCHEMA_ID2,
      addDataIf(
        {
          event_name: PAGE_RENDERED_EVENT_NAME,
          ...additionalPayload
        },
        formatPayload2(pageViewPayload)
      )
    )
  ), pageType) {
    case AnalyticsPageType.collection:
      pageViewEvents.push(
        schemaWrapper(
          SCHEMA_ID2,
          addDataIf(
            {
              event_name: COLLECTION_PAGE_RENDERED_EVENT_NAME,
              ...additionalPayload,
              collection_name: pageViewPayload.collectionHandle
            },
            formatPayload2(pageViewPayload)
          )
        )
      );
      break;
    case AnalyticsPageType.product:
      pageViewEvents.push(
        schemaWrapper(
          SCHEMA_ID2,
          addDataIf(
            {
              event_name: PRODUCT_PAGE_RENDERED_EVENT_NAME,
              ...additionalPayload,
              products: formatProductPayload(pageViewPayload.products),
              total_value: pageViewPayload.totalValue
            },
            formatPayload2(pageViewPayload)
          )
        )
      );
      break;
    case AnalyticsPageType.search:
      pageViewEvents.push(
        schemaWrapper(
          SCHEMA_ID2,
          addDataIf(
            {
              event_name: SEARCH_SUBMITTED_EVENT_NAME,
              ...additionalPayload,
              search_string: pageViewPayload.searchString
            },
            formatPayload2(pageViewPayload)
          )
        )
      );
      break;
  }
  return pageViewEvents;
}
function addToCart(payload) {
  let addToCartPayload = payload, cartToken = parseGid(addToCartPayload.cartId), cart_token = cartToken != null && cartToken.id ? `${cartToken.id}` : null;
  return [
    schemaWrapper(
      SCHEMA_ID2,
      addDataIf(
        {
          event_name: PRODUCT_ADDED_TO_CART_EVENT_NAME,
          customerId: addToCartPayload.customerId,
          cart_token,
          total_value: addToCartPayload.totalValue,
          products: formatProductPayload(addToCartPayload.products)
        },
        formatPayload2(addToCartPayload)
      )
    )
  ];
}
function formatPayload2(payload) {
  return {
    source: payload.shopifySalesChannel || ShopifySalesChannel.headless,
    hydrogenSubchannelId: payload.storefrontId || "0",
    is_persistent_cookie: payload.hasUserConsent,
    ccpa_enforced: !1,
    gdpr_enforced: !1,
    unique_token: payload.uniqueToken,
    event_time: Date.now(),
    event_id: buildUUID(),
    event_source_url: payload.url,
    referrer: payload.referrer,
    user_agent: payload.userAgent,
    navigation_type: payload.navigationType,
    navigation_api: payload.navigationApi,
    shop_id: parseInt(parseGid(payload.shopId).id),
    currency: payload.currency
  };
}
function formatProductPayload(products) {
  return products ? products.map((p8) => {
    let product = addDataIf(
      {
        variant_gid: p8.variantGid,
        category: p8.category,
        sku: p8.sku,
        product_id: parseInt(parseGid(p8.productGid).id),
        variant_id: parseInt(parseGid(p8.variantGid).id)
      },
      {
        product_gid: p8.productGid,
        name: p8.name,
        variant: p8.variantName || "",
        brand: p8.brand,
        price: p8.price,
        quantity: Number(p8.quantity || 0)
      }
    );
    return JSON.stringify(product);
  }) : [];
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/analytics.mjs
function sendShopifyAnalytics(event2, shopDomain) {
  let { eventName, payload } = event2;
  if (!payload.hasUserConsent)
    return Promise.resolve();
  let events2 = [];
  if (eventName === AnalyticsEventName.PAGE_VIEW) {
    let pageViewPayload = payload;
    events2 = events2.concat(
      pageView(pageViewPayload),
      pageView2(pageViewPayload)
    );
  } else
    eventName === AnalyticsEventName.ADD_TO_CART && (events2 = events2.concat(
      addToCart(payload)
    ));
  return events2.length ? sendToShopify(events2, shopDomain) : Promise.resolve();
}
var ERROR_MESSAGE = "sendShopifyAnalytics request is unsuccessful";
function sendToShopify(events2, shopDomain) {
  let eventsToBeSent = {
    events: events2,
    metadata: {
      event_sent_at_ms: Date.now()
    }
  };
  try {
    return fetch(
      shopDomain ? `https://${shopDomain}/.well-known/shopify/monorail/unstable/produce_batch` : "https://monorail-edge.shopifysvc.com/unstable/produce_batch",
      {
        method: "post",
        headers: {
          "content-type": "text/plain"
        },
        body: JSON.stringify(eventsToBeSent)
      }
    ).then((response) => {
      if (!response.ok)
        throw new Error("Response failed");
      return response.text();
    }).then((data) => {
      data && JSON.parse(data).result.forEach((eventResponse) => {
        eventResponse.status !== 200 && console.error(ERROR_MESSAGE, `

`, eventResponse.message);
      });
    }).catch((err) => {
      console.error(ERROR_MESSAGE, err);
    });
  } catch {
    return Promise.resolve();
  }
}
function getClientBrowserParameters() {
  if (errorIfServer("getClientBrowserParameters"))
    return {
      uniqueToken: "",
      visitToken: "",
      url: "",
      path: "",
      search: "",
      referrer: "",
      title: "",
      userAgent: "",
      navigationType: "",
      navigationApi: ""
    };
  let [navigationType, navigationApi] = getNavigationType(), cookies = getShopifyCookies(document.cookie);
  return {
    uniqueToken: cookies[SHOPIFY_Y],
    visitToken: cookies[SHOPIFY_S],
    url: location.href,
    path: location.pathname,
    search: location.search,
    referrer: document.referrer,
    title: document.title,
    userAgent: navigator.userAgent,
    navigationType,
    navigationApi
  };
}
function getNavigationTypeExperimental() {
  try {
    let navigationEntries = (performance == null ? void 0 : performance.getEntriesByType) && (performance == null ? void 0 : performance.getEntriesByType("navigation"));
    if (navigationEntries && navigationEntries[0]) {
      let rawType = window.performance.getEntriesByType(
        "navigation"
      )[0].type;
      return rawType && rawType.toString();
    }
  } catch {
  }
}
function getNavigationTypeLegacy() {
  var _a2, _b;
  try {
    if (PerformanceNavigation && ((_a2 = performance == null ? void 0 : performance.navigation) == null ? void 0 : _a2.type) !== null && ((_b = performance == null ? void 0 : performance.navigation) == null ? void 0 : _b.type) !== void 0) {
      let rawType = performance.navigation.type;
      switch (rawType) {
        case PerformanceNavigation.TYPE_NAVIGATE:
          return "navigate";
        case PerformanceNavigation.TYPE_RELOAD:
          return "reload";
        case PerformanceNavigation.TYPE_BACK_FORWARD:
          return "back_forward";
        default:
          return `unknown: ${rawType}`;
      }
    }
  } catch {
  }
}
function getNavigationType() {
  try {
    let navApi = "PerformanceNavigationTiming", navType = getNavigationTypeExperimental();
    return navType || (navType = getNavigationTypeLegacy(), navApi = "performance.navigation"), navType ? [navType, navApi] : ["unknown", "unknown"];
  } catch {
  }
  return ["error", "error"];
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/Money.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);

// node_modules/@shopify/hydrogen-react/dist/browser-prod/useMoney.mjs
var import_react4 = __toESM(require_react(), 1);
function useMoney(money) {
  let { countryIsoCode, languageIsoCode } = useShop(), locale = `${languageIsoCode}-${countryIsoCode}`;
  if (!locale)
    throw new Error(
      "useMoney(): Unable to get 'locale' from 'useShop()', which means that 'locale' was not passed to '<ShopifyProvider/>'. 'locale' is required for 'useMoney()' to work"
    );
  let amount = parseFloat(money.amount), options = (0, import_react4.useMemo)(
    () => ({
      style: "currency",
      currency: money.currencyCode
    }),
    [money.currencyCode]
  ), defaultFormatter = useLazyFormatter(locale, options), nameFormatter = useLazyFormatter(locale, {
    ...options,
    currencyDisplay: "name"
  }), narrowSymbolFormatter = useLazyFormatter(locale, {
    ...options,
    currencyDisplay: "narrowSymbol"
  }), withoutTrailingZerosFormatter = useLazyFormatter(locale, {
    ...options,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }), withoutCurrencyFormatter = useLazyFormatter(locale), withoutTrailingZerosOrCurrencyFormatter = useLazyFormatter(locale, {
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }), isPartCurrency = (part) => part.type === "currency", lazyFormatters = (0, import_react4.useMemo)(
    () => ({
      original: () => money,
      currencyCode: () => money.currencyCode,
      localizedString: () => defaultFormatter().format(amount),
      parts: () => defaultFormatter().formatToParts(amount),
      withoutTrailingZeros: () => amount % 1 === 0 ? withoutTrailingZerosFormatter().format(amount) : defaultFormatter().format(amount),
      withoutTrailingZerosAndCurrency: () => amount % 1 === 0 ? withoutTrailingZerosOrCurrencyFormatter().format(amount) : withoutCurrencyFormatter().format(amount),
      currencyName: () => {
        var _a2;
        return ((_a2 = nameFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a2.value) ?? money.currencyCode;
      },
      currencySymbol: () => {
        var _a2;
        return ((_a2 = defaultFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a2.value) ?? money.currencyCode;
      },
      currencyNarrowSymbol: () => {
        var _a2;
        return ((_a2 = narrowSymbolFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a2.value) ?? "";
      },
      amount: () => defaultFormatter().formatToParts(amount).filter(
        (part) => ["decimal", "fraction", "group", "integer", "literal"].includes(
          part.type
        )
      ).map((part) => part.value).join("")
    }),
    [
      money,
      amount,
      nameFormatter,
      defaultFormatter,
      narrowSymbolFormatter,
      withoutCurrencyFormatter,
      withoutTrailingZerosFormatter,
      withoutTrailingZerosOrCurrencyFormatter
    ]
  );
  return (0, import_react4.useMemo)(
    () => new Proxy(lazyFormatters, {
      get: (target, key) => {
        var _a2;
        return (_a2 = Reflect.get(target, key)) == null ? void 0 : _a2.call(null);
      }
    }),
    [lazyFormatters]
  );
}
function useLazyFormatter(locale, options) {
  return (0, import_react4.useMemo)(() => {
    let memoized;
    return () => memoized ?? (memoized = new Intl.NumberFormat(locale, options));
  }, [locale, options]);
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/Money.mjs
function Money({
  data,
  as,
  withoutCurrency,
  withoutTrailingZeros,
  measurement,
  measurementSeparator = "/",
  ...passthroughProps
}) {
  if (!isMoney(data))
    throw new Error(
      "<Money/> needs a valid 'data' prop that has 'amount' and 'currencyCode'"
    );
  let moneyObject = useMoney(data), Wrapper = as ?? "div", output = moneyObject.localizedString;
  return (withoutCurrency || withoutTrailingZeros) && (withoutCurrency && !withoutTrailingZeros ? output = moneyObject.amount : !withoutCurrency && withoutTrailingZeros ? output = moneyObject.withoutTrailingZeros : output = moneyObject.withoutTrailingZerosAndCurrency), /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Wrapper, { ...passthroughProps, children: [
    output,
    measurement && measurement.referenceUnit && /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      measurementSeparator,
      measurement.referenceUnit
    ] })
  ] });
}
function isMoney(maybeMoney) {
  return typeof maybeMoney.amount == "string" && !!maybeMoney.amount && typeof maybeMoney.currencyCode == "string" && !!maybeMoney.currencyCode;
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/Image.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);

// node_modules/@shopify/hydrogen-react/dist/browser-prod/image-size.mjs
var PRODUCTION_CDN_HOSTNAMES = [
  "cdn.shopify.com",
  "cdn.shopifycdn.net",
  "shopify-assets.shopifycdn.com",
  "shopify-assets.shopifycdn.net"
], LOCAL_CDN_HOSTNAMES = ["spin.dev"], ALL_CDN_HOSTNAMES = [...PRODUCTION_CDN_HOSTNAMES, ...LOCAL_CDN_HOSTNAMES], IMG_SRC_SET_SIZES = [352, 832, 1200, 1920, 2560];
function addImageSizeParametersToUrl({
  src,
  width,
  height,
  crop,
  scale
}) {
  let newUrl = new URL(src), multipliedScale = scale ?? 1;
  if (width) {
    let finalWidth;
    typeof width == "string" ? finalWidth = (IMG_SRC_SET_SIZES[0] * multipliedScale).toString() : finalWidth = (Number(width) * multipliedScale).toString(), newUrl.searchParams.append("width", finalWidth);
  }
  return height && typeof height == "number" && newUrl.searchParams.append("height", (height * multipliedScale).toString()), crop && newUrl.searchParams.append("crop", crop), newUrl.toString();
}
function shopifyImageLoader(params) {
  let newSrc = new URL(params.src);
  return !ALL_CDN_HOSTNAMES.some(
    (allowedHostname) => newSrc.hostname.endsWith(allowedHostname)
  ) || !params.width && !params.height && !params.crop && !params.scale ? params.src : addImageSizeParametersToUrl(params);
}
function getShopifyImageDimensions({
  data: sfapiImage,
  loaderOptions,
  elementProps
}) {
  let aspectRatio = null;
  return (sfapiImage == null ? void 0 : sfapiImage.width) && (sfapiImage == null ? void 0 : sfapiImage.height) && (aspectRatio = (sfapiImage == null ? void 0 : sfapiImage.width) / (sfapiImage == null ? void 0 : sfapiImage.height)), (loaderOptions == null ? void 0 : loaderOptions.width) || (loaderOptions == null ? void 0 : loaderOptions.height) ? {
    width: (loaderOptions == null ? void 0 : loaderOptions.width) ?? (aspectRatio && typeof loaderOptions.height == "number" ? Math.round(aspectRatio * loaderOptions.height) : null),
    height: (loaderOptions == null ? void 0 : loaderOptions.height) ?? (aspectRatio && typeof loaderOptions.width == "number" ? Math.round(aspectRatio * loaderOptions.width) : null)
  } : (elementProps == null ? void 0 : elementProps.width) || (elementProps == null ? void 0 : elementProps.height) ? {
    width: (elementProps == null ? void 0 : elementProps.width) ?? (aspectRatio && typeof elementProps.height == "number" ? Math.round(aspectRatio * elementProps.height) : null),
    height: (elementProps == null ? void 0 : elementProps.height) ?? (aspectRatio && typeof elementProps.width == "number" ? Math.round(aspectRatio * elementProps.width) : null)
  } : (sfapiImage == null ? void 0 : sfapiImage.width) || (sfapiImage == null ? void 0 : sfapiImage.height) ? {
    width: (sfapiImage == null ? void 0 : sfapiImage.width) ?? null,
    height: (sfapiImage == null ? void 0 : sfapiImage.height) ?? null
  } : { width: null, height: null };
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/Image.mjs
function Image({
  data,
  width,
  height,
  loading,
  loader: loader12 = shopifyImageLoader,
  loaderOptions,
  widths,
  decoding = "async",
  ...rest
}) {
  if (!data.url) {
    let missingUrlError = `<Image/>: the 'data' prop requires the 'url' property. Image: ${data.id ?? "no ID provided"}`;
    return console.error(missingUrlError), null;
  }
  let { width: imgElementWidth, height: imgElementHeight } = getShopifyImageDimensions({
    data,
    loaderOptions,
    elementProps: {
      width,
      height
    }
  }), finalSrc = data.url;
  if (loader12 && (finalSrc = loader12({
    ...loaderOptions,
    src: data.url,
    width: imgElementWidth,
    height: imgElementHeight
  }), typeof finalSrc != "string" || !finalSrc))
    throw new Error(
      `<Image/>: 'loader' did not return a valid string. Image: ${data.id ?? data.url}`
    );
  let maxWidth = width && imgElementWidth && width < imgElementWidth ? width : imgElementWidth, finalSrcset = rest.srcSet ?? internalImageSrcSet({
    ...loaderOptions,
    widths,
    src: data.url,
    width: maxWidth,
    height: imgElementHeight,
    loader: loader12
  });
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    "img",
    {
      id: data.id ?? "",
      alt: data.altText ?? rest.alt ?? "",
      loading: loading ?? "lazy",
      ...rest,
      src: finalSrc,
      width: imgElementWidth ?? void 0,
      height: imgElementHeight ?? void 0,
      srcSet: finalSrcset,
      decoding
    }
  );
}
function internalImageSrcSet({
  src,
  width,
  crop,
  scale,
  widths,
  loader: loader12,
  height
}) {
  let hasCustomWidths = widths && Array.isArray(widths);
  if (hasCustomWidths && widths.some((size) => isNaN(size)))
    throw new Error(
      `<Image/>: the 'widths' must be an array of numbers. Image: ${src}`
    );
  let aspectRatio = 1;
  width && height && (aspectRatio = Number(height) / Number(width));
  let setSizes = hasCustomWidths ? widths : IMG_SRC_SET_SIZES;
  !hasCustomWidths && width && width < IMG_SRC_SET_SIZES[IMG_SRC_SET_SIZES.length - 1] && (setSizes = IMG_SRC_SET_SIZES.filter((size) => size <= width));
  let srcGenerator = loader12 || addImageSizeParametersToUrl;
  return setSizes.map(
    (size) => `${srcGenerator({
      src,
      width: size,
      height: crop ? Number(size) * aspectRatio : void 0,
      crop,
      scale
    })} ${size ?? ""}w`
  ).join(", ");
}

// node_modules/@shopify/hydrogen-react/dist/browser-prod/useShopifyCookies.mjs
var import_react5 = __toESM(require_react(), 1);
var longTermLength = 60 * 60 * 24 * 360 * 1, shortTermLength = 60 * 30;
function useShopifyCookies(options) {
  let { hasUserConsent = !1, domain = "" } = options || {};
  (0, import_react5.useEffect)(() => {
    let cookies = getShopifyCookies(document.cookie);
    hasUserConsent ? (setCookie(
      SHOPIFY_Y,
      cookies[SHOPIFY_Y] || buildUUID(),
      longTermLength,
      domain
    ), setCookie(
      SHOPIFY_S,
      cookies[SHOPIFY_S] || buildUUID(),
      shortTermLength,
      domain
    )) : (setCookie(SHOPIFY_Y, "", 0, domain), setCookie(SHOPIFY_S, "", 0, domain));
  });
}
function setCookie(name, value, maxage, domain) {
  document.cookie = l(name, value, {
    maxage,
    domain,
    samesite: "Lax",
    path: "/"
  });
}

// node_modules/@shopify/hydrogen/dist/production/index.js
var Le = m((p8) => {
  var E5 = Symbol.for("react.element"), ct = Symbol.for("react.portal"), ut = Symbol.for("react.fragment"), pt2 = Symbol.for("react.strict_mode"), ft = Symbol.for("react.profiler"), lt2 = Symbol.for("react.provider"), ht = Symbol.for("react.context"), gt2 = Symbol.for("react.forward_ref"), dt = Symbol.for("react.suspense"), yt2 = Symbol.for("react.memo"), mt = Symbol.for("react.lazy"), be = Symbol.iterator;
  function St(e5) {
    return e5 === null || typeof e5 != "object" ? null : (e5 = be && e5[be] || e5["@@iterator"], typeof e5 == "function" ? e5 : null);
  }
  var Ae = { isMounted: function() {
    return !1;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, Pe2 = Object.assign, Ie2 = {};
  function x5(e5, t13, r12) {
    this.props = e5, this.context = t13, this.refs = Ie2, this.updater = r12 || Ae;
  }
  x5.prototype.isReactComponent = {}, x5.prototype.setState = function(e5, t13) {
    if (typeof e5 != "object" && typeof e5 != "function" && e5 != null)
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, e5, t13, "setState");
  }, x5.prototype.forceUpdate = function(e5) {
    this.updater.enqueueForceUpdate(this, e5, "forceUpdate");
  };
  function Oe2() {
  }
  Oe2.prototype = x5.prototype;
  function Y3(e5, t13, r12) {
    this.props = e5, this.context = t13, this.refs = Ie2, this.updater = r12 || Ae;
  }
  var Z4 = Y3.prototype = new Oe2();
  Z4.constructor = Y3, Pe2(Z4, x5.prototype), Z4.isPureReactComponent = !0;
  var Ee2 = Array.isArray, _e4 = Object.prototype.hasOwnProperty, ee2 = { current: null }, ve = { key: !0, ref: !0, __self: !0, __source: !0 };
  function Me3(e5, t13, r12) {
    var n4, o8 = {}, s14 = null, a9 = null;
    if (t13 != null)
      for (n4 in t13.ref !== void 0 && (a9 = t13.ref), t13.key !== void 0 && (s14 = "" + t13.key), t13)
        _e4.call(t13, n4) && !ve.hasOwnProperty(n4) && (o8[n4] = t13[n4]);
    var i9 = arguments.length - 2;
    if (i9 === 1)
      o8.children = r12;
    else if (1 < i9) {
      for (var c9 = Array(i9), u9 = 0; u9 < i9; u9++)
        c9[u9] = arguments[u9 + 2];
      o8.children = c9;
    }
    if (e5 && e5.defaultProps)
      for (n4 in i9 = e5.defaultProps, i9)
        o8[n4] === void 0 && (o8[n4] = i9[n4]);
    return { $$typeof: E5, type: e5, key: s14, ref: a9, props: o8, _owner: ee2.current };
  }
  function Ct(e5, t13) {
    return { $$typeof: E5, type: e5.type, key: t13, ref: e5.ref, props: e5.props, _owner: e5._owner };
  }
  function te2(e5) {
    return typeof e5 == "object" && e5 !== null && e5.$$typeof === E5;
  }
  function Tt(e5) {
    var t13 = { "=": "=0", ":": "=2" };
    return "$" + e5.replace(/[=:]/g, function(r12) {
      return t13[r12];
    });
  }
  var ke4 = /\/+/g;
  function X5(e5, t13) {
    return typeof e5 == "object" && e5 !== null && e5.key != null ? Tt("" + e5.key) : t13.toString(36);
  }
  function O2(e5, t13, r12, n4, o8) {
    var s14 = typeof e5;
    (s14 === "undefined" || s14 === "boolean") && (e5 = null);
    var a9 = !1;
    if (e5 === null)
      a9 = !0;
    else
      switch (s14) {
        case "string":
        case "number":
          a9 = !0;
          break;
        case "object":
          switch (e5.$$typeof) {
            case E5:
            case ct:
              a9 = !0;
          }
      }
    if (a9)
      return a9 = e5, o8 = o8(a9), e5 = n4 === "" ? "." + X5(a9, 0) : n4, Ee2(o8) ? (r12 = "", e5 != null && (r12 = e5.replace(ke4, "$&/") + "/"), O2(o8, t13, r12, "", function(u9) {
        return u9;
      })) : o8 != null && (te2(o8) && (o8 = Ct(o8, r12 + (!o8.key || a9 && a9.key === o8.key ? "" : ("" + o8.key).replace(ke4, "$&/") + "/") + e5)), t13.push(o8)), 1;
    if (a9 = 0, n4 = n4 === "" ? "." : n4 + ":", Ee2(e5))
      for (var i9 = 0; i9 < e5.length; i9++) {
        s14 = e5[i9];
        var c9 = n4 + X5(s14, i9);
        a9 += O2(s14, t13, r12, c9, o8);
      }
    else if (c9 = St(e5), typeof c9 == "function")
      for (e5 = c9.call(e5), i9 = 0; !(s14 = e5.next()).done; )
        s14 = s14.value, c9 = n4 + X5(s14, i9++), a9 += O2(s14, t13, r12, c9, o8);
    else if (s14 === "object")
      throw t13 = String(e5), Error("Objects are not valid as a React child (found: " + (t13 === "[object Object]" ? "object with keys {" + Object.keys(e5).join(", ") + "}" : t13) + "). If you meant to render a collection of children, use an array instead.");
    return a9;
  }
  function I4(e5, t13, r12) {
    if (e5 == null)
      return e5;
    var n4 = [], o8 = 0;
    return O2(e5, n4, "", "", function(s14) {
      return t13.call(r12, s14, o8++);
    }), n4;
  }
  function Rt2(e5) {
    if (e5._status === -1) {
      var t13 = e5._result;
      t13 = t13(), t13.then(function(r12) {
        (e5._status === 0 || e5._status === -1) && (e5._status = 1, e5._result = r12);
      }, function(r12) {
        (e5._status === 0 || e5._status === -1) && (e5._status = 2, e5._result = r12);
      }), e5._status === -1 && (e5._status = 0, e5._result = t13);
    }
    if (e5._status === 1)
      return e5._result.default;
    throw e5._result;
  }
  var m11 = { current: null }, _3 = { transition: null }, wt = { ReactCurrentDispatcher: m11, ReactCurrentBatchConfig: _3, ReactCurrentOwner: ee2 };
  p8.Children = { map: I4, forEach: function(e5, t13, r12) {
    I4(e5, function() {
      t13.apply(this, arguments);
    }, r12);
  }, count: function(e5) {
    var t13 = 0;
    return I4(e5, function() {
      t13++;
    }), t13;
  }, toArray: function(e5) {
    return I4(e5, function(t13) {
      return t13;
    }) || [];
  }, only: function(e5) {
    if (!te2(e5))
      throw Error("React.Children.only expected to receive a single React element child.");
    return e5;
  } }, p8.Component = x5, p8.Fragment = ut, p8.Profiler = ft, p8.PureComponent = Y3, p8.StrictMode = pt2, p8.Suspense = dt, p8.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = wt, p8.cloneElement = function(e5, t13, r12) {
    if (e5 == null)
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + e5 + ".");
    var n4 = Pe2({}, e5.props), o8 = e5.key, s14 = e5.ref, a9 = e5._owner;
    if (t13 != null) {
      if (t13.ref !== void 0 && (s14 = t13.ref, a9 = ee2.current), t13.key !== void 0 && (o8 = "" + t13.key), e5.type && e5.type.defaultProps)
        var i9 = e5.type.defaultProps;
      for (c9 in t13)
        _e4.call(t13, c9) && !ve.hasOwnProperty(c9) && (n4[c9] = t13[c9] === void 0 && i9 !== void 0 ? i9[c9] : t13[c9]);
    }
    var c9 = arguments.length - 2;
    if (c9 === 1)
      n4.children = r12;
    else if (1 < c9) {
      i9 = Array(c9);
      for (var u9 = 0; u9 < c9; u9++)
        i9[u9] = arguments[u9 + 2];
      n4.children = i9;
    }
    return { $$typeof: E5, type: e5.type, key: o8, ref: s14, props: n4, _owner: a9 };
  }, p8.createContext = function(e5) {
    return e5 = { $$typeof: ht, _currentValue: e5, _currentValue2: e5, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, e5.Provider = { $$typeof: lt2, _context: e5 }, e5.Consumer = e5;
  }, p8.createElement = Me3, p8.createFactory = function(e5) {
    var t13 = Me3.bind(null, e5);
    return t13.type = e5, t13;
  }, p8.createRef = function() {
    return { current: null };
  }, p8.forwardRef = function(e5) {
    return { $$typeof: gt2, render: e5 };
  }, p8.isValidElement = te2, p8.lazy = function(e5) {
    return { $$typeof: mt, _payload: { _status: -1, _result: e5 }, _init: Rt2 };
  }, p8.memo = function(e5, t13) {
    return { $$typeof: yt2, type: e5, compare: t13 === void 0 ? null : t13 };
  }, p8.startTransition = function(e5) {
    var t13 = _3.transition;
    _3.transition = {};
    try {
      e5();
    } finally {
      _3.transition = t13;
    }
  }, p8.unstable_act = function() {
    throw Error("act(...) is not supported in production builds of React.");
  }, p8.useCallback = function(e5, t13) {
    return m11.current.useCallback(e5, t13);
  }, p8.useContext = function(e5) {
    return m11.current.useContext(e5);
  }, p8.useDebugValue = function() {
  }, p8.useDeferredValue = function(e5) {
    return m11.current.useDeferredValue(e5);
  }, p8.useEffect = function(e5, t13) {
    return m11.current.useEffect(e5, t13);
  }, p8.useId = function() {
    return m11.current.useId();
  }, p8.useImperativeHandle = function(e5, t13, r12) {
    return m11.current.useImperativeHandle(e5, t13, r12);
  }, p8.useInsertionEffect = function(e5, t13) {
    return m11.current.useInsertionEffect(e5, t13);
  }, p8.useLayoutEffect = function(e5, t13) {
    return m11.current.useLayoutEffect(e5, t13);
  }, p8.useMemo = function(e5, t13) {
    return m11.current.useMemo(e5, t13);
  }, p8.useReducer = function(e5, t13, r12) {
    return m11.current.useReducer(e5, t13, r12);
  }, p8.useRef = function(e5) {
    return m11.current.useRef(e5);
  }, p8.useState = function(e5) {
    return m11.current.useState(e5);
  }, p8.useSyncExternalStore = function(e5, t13, r12) {
    return m11.current.useSyncExternalStore(e5, t13, r12);
  }, p8.useTransition = function() {
    return m11.current.useTransition();
  }, p8.version = "18.2.0";
}), qe = m((pr, je2) => {
  je2.exports = Le();
});
function se(e5) {
  let t13 = Array.isArray(e5) ? e5 : [e5], r12 = "";
  for (let n4 of t13)
    n4 != null && (typeof n4 == "object" ? !!n4.body && typeof n4.body == "string" ? r12 += n4.body : r12 += JSON.stringify(n4) : r12 += n4);
  return r12;
}
var N = "public", Be = "private", Ve = "no-store", ie = { maxAge: "max-age", staleWhileRevalidate: "stale-while-revalidate", sMaxAge: "s-maxage", staleIfError: "stale-if-error" };
function b(e5) {
  let t13 = [];
  return Object.keys(e5).forEach((r12) => {
    r12 === "mode" ? t13.push(e5[r12]) : ie[r12] && t13.push(`${ie[r12]}=${e5[r12]}`);
  }), t13.join(", ");
}
function F2() {
  return { mode: Ve };
}
function ce(e5) {
  if ((e5 == null ? void 0 : e5.mode) && (e5 == null ? void 0 : e5.mode) !== N && (e5 == null ? void 0 : e5.mode) !== Be)
    throw Error("'mode' must be either 'public' or 'private'");
}
function T(e5) {
  return ce(e5), { mode: N, maxAge: 1, staleWhileRevalidate: 9, ...e5 };
}
function W(e5) {
  return ce(e5), { mode: N, maxAge: 3600, staleWhileRevalidate: 82800, ...e5 };
}
function B(e5) {
  return e5;
}
function A2(e5, t13) {
  return e5 && t13 ? { ...e5, ...t13 } : e5 || T();
}
function V(e5) {
  return b(A2(e5));
}
async function Qe(e5, t13) {
  if (!e5)
    return;
  let r12 = await e5.match(t13);
  if (!r12) {
    t13.url;
    return;
  }
  return t13.url, r12;
}
async function Ge(e5, t13, r12, n4) {
  if (!e5)
    return;
  let o8 = A2(n4);
  t13.headers.set("cache-control", V(A2(o8, { maxAge: (o8.maxAge || 0) + (o8.staleWhileRevalidate || 0) })));
  let s14 = V(A2(o8));
  r12.headers.set("cache-control", s14), r12.headers.set("real-cache-control", s14), r12.headers.set("cache-put-date", new Date().toUTCString()), t13.url, await e5.put(t13, r12);
}
async function Ke(e5, t13) {
  !e5 || (t13.url, await e5.delete(t13));
}
function ze(e5, t13) {
  let r12 = t13.headers.get("cache-put-date"), n4 = t13.headers.get("real-cache-control"), o8 = 0;
  if (n4) {
    let c9 = n4.match(/max-age=(\d*)/);
    c9 && c9.length > 1 && (o8 = parseFloat(c9[1]));
  }
  if (!r12)
    return !1;
  let i9 = (new Date().valueOf() - new Date(r12).valueOf()) / 1e3 > o8;
  return i9 && e5.url, i9;
}
var P = { get: Qe, set: Ge, delete: Ke, generateDefaultCacheControlHeader: V, isStale: ze };
function Q(e5) {
  return `https://shopify.dev/?${e5}`;
}
function Je(e5) {
  return e5 || T();
}
async function ue(e5, t13) {
  if (!e5)
    return;
  let r12 = Q(t13), n4 = new Request(r12), o8 = await P.get(e5, n4);
  if (o8)
    return [await o8.json(), o8];
}
async function G(e5, t13, r12, n4) {
  if (!e5)
    return;
  let o8 = Q(t13), s14 = new Request(o8), a9 = new Response(JSON.stringify(r12));
  await P.set(e5, s14, a9, Je(n4));
}
function pe(e5, t13) {
  return P.isStale(new Request(Q(e5)), t13);
}
function fe(e5, t13) {
  return [e5, { status: t13.status, statusText: t13.statusText, headers: Array.from(t13.headers.entries()) }];
}
var le = (e5) => !(e5 != null && e5.errors), K = /* @__PURE__ */ new Set();
async function he(e5, t13, { cacheInstance: r12, cache: n4, cacheKey: o8 = [e5, t13], shouldCacheResponse: s14 = () => !0, waitUntil: a9, returnType: i9 = "json" } = {}) {
  !n4 && (!t13.method || t13.method === "GET") && (n4 = T());
  let c9 = async () => {
    let d15 = await fetch(e5, t13), l12;
    try {
      l12 = await d15[i9]();
    } catch {
      l12 = await d15.text();
    }
    return [l12, d15];
  };
  if (!r12 || !o8 || !n4)
    return c9();
  let u9 = se([...typeof o8 == "string" ? [o8] : o8]), h9 = await ue(r12, u9);
  if (h9) {
    let [d15, l12] = h9;
    if (!K.has(u9) && pe(u9, l12)) {
      K.add(u9);
      let q3 = Promise.resolve().then(async () => {
        try {
          let [C3, k2] = await c9();
          s14(C3, k2) && await G(r12, u9, fe(C3, k2), n4);
        } catch (C3) {
          C3.message && (C3.message = "SWR in sub-request failed: " + C3.message), console.error(C3);
        } finally {
          K.delete(u9);
        }
      });
      a9 == null || a9(q3);
    }
    let [y4, w4] = d15;
    return [y4, new Response(y4, w4)];
  }
  let [S4, f9] = await c9();
  if (s14(S4, f9)) {
    let d15 = G(r12, u9, fe(S4, f9), n4);
    a9 == null || a9(d15);
  }
  return [S4, f9];
}
var ge = "Custom-Storefront-Request-Group-ID", de = "Shopify-Storefront-Buyer-IP", ye = "Shopify-Storefront-Id";
function me() {
  return typeof crypto < "u" && !!crypto.randomUUID ? crypto.randomUUID() : `weak-${Math.random().toString(16).substring(2)}`;
}
function Se(e5) {
  return String(e5).includes("__proto__") ? JSON.parse(e5, Xe) : JSON.parse(e5);
}
function Xe(e5, t13) {
  if (e5 !== "__proto__")
    return t13;
}
var Ce = /* @__PURE__ */ new Set(), Te = (e5) => {
  Ce.has(e5) || (console.warn(e5), Ce.add(e5));
}, z = "2023.1.5", xe = class extends Error {
}, Ze = (e5) => e5 instanceof xe, et = /(^|}\s)query[\s({]/im, tt = /(^|}\s)mutation[\s({]/im;
function Re(e5) {
  return e5.replace(/\s*#.*$/gm, "").replace(/\s+/gm, " ").trim();
}
var rt = { language: "EN", country: "US" };
function rr({ cache: e5, waitUntil: t13, buyerIp: r12, i18n: n4, requestGroupId: o8, storefrontId: s14, ...a9 }) {
  e5 || Te("Storefront API client created without a cache instance. This may slow down your sub-requests.");
  let { getPublicTokenHeaders: i9, getPrivateTokenHeaders: c9, getStorefrontApiUrl: u9, getShopifyDomain: h9 } = createStorefrontClient(a9), f9 = (a9.privateStorefrontToken ? c9 : i9)({ contentType: "json" });
  f9[ge] = o8 || me(), r12 && (f9[de] = r12), s14 && (f9[ye] = s14), f9["user-agent"] = `Hydrogen ${z}`;
  async function d15({ query: l12, mutation: y4, variables: w4, cache: q3, headers: C3 = [], storefrontApiVersion: k2 }) {
    let De2 = C3 instanceof Headers ? Object.fromEntries(C3.entries()) : Array.isArray(C3) ? Object.fromEntries(C3) : C3;
    l12 = l12 ?? y4;
    let U4 = { ...w4 };
    n4 && (!(w4 != null && w4.country) && /\$country/.test(l12) && (U4.country = n4.country), !(w4 != null && w4.language) && /\$language/.test(l12) && (U4.language = n4.language));
    let $e2 = u9({ storefrontApiVersion: k2 }), Ne4 = { method: "POST", headers: { ...f9, ...De2 }, body: JSON.stringify({ query: l12, variables: U4 }) }, [H6, D4] = await he($e2, Ne4, { cacheInstance: y4 ? void 0 : e5, cache: q3 || T(), shouldCacheResponse: le, waitUntil: t13 });
    if (!D4.ok) {
      let $3;
      try {
        $3 = Se(H6);
      } catch {
        $3 = [{ message: H6 }];
      }
      we(D4, $3);
    }
    let { data: Fe3, errors: ne2 } = H6;
    return ne2 != null && ne2.length && we(D4, ne2, xe), Fe3;
  }
  return { storefront: { query: (l12, y4) => {
    if (l12 = Re(l12), tt.test(l12))
      throw new Error("storefront.query cannot execute mutations");
    return d15({ ...y4, query: l12 });
  }, mutate: (l12, y4) => {
    if (l12 = Re(l12), et.test(l12))
      throw new Error("storefront.mutate cannot execute queries");
    return d15({ ...y4, mutation: l12 });
  }, cache: e5, CacheNone: F2, CacheLong: W, CacheShort: T, CacheCustom: B, generateCacheControlHeader: b, getPublicTokenHeaders: i9, getPrivateTokenHeaders: c9, getShopifyDomain: h9, getApiUrl: u9, isApiError: Ze, i18n: n4 ?? rt } };
}
function we(e5, t13, r12 = Error) {
  let n4 = e5.headers.get("x-request-id"), o8 = n4 ? ` - Request ID: ${n4}` : "";
  if (t13) {
    let s14 = typeof t13 == "string" ? t13 : t13.map((a9) => a9.message).join(`
`);
    throw new r12(s14 + o8);
  }
  throw new r12(`API response error: ${e5.status}` + o8);
}
var _e, _a, J = (_a = class {
  constructor() {
    __privateAdd(this, _e, void 0);
    __privateSet(this, _e, /* @__PURE__ */ new Map());
  }
  add(t13) {
    throw new Error("Method not implemented. Use `put` instead.");
  }
  addAll(t13) {
    throw new Error("Method not implemented. Use `put` instead.");
  }
  matchAll(t13, r12) {
    throw new Error("Method not implemented. Use `match` instead.");
  }
  async put(t13, r12) {
    var _a2;
    if (t13.method !== "GET")
      throw new TypeError("Cannot cache response to non-GET request.");
    if (r12.status === 206)
      throw new TypeError("Cannot cache response to a range request (206 Partial Content).");
    if ((_a2 = r12.headers.get("vary")) != null && _a2.includes("*"))
      throw new TypeError("Cannot cache response with 'Vary: *' header.");
    __privateGet(this, _e).set(t13.url, { body: new Uint8Array(await r12.arrayBuffer()), status: r12.status, headers: [...r12.headers], timestamp: Date.now() });
  }
  async match(t13) {
    var _a2, _b;
    if (t13.method !== "GET")
      return;
    let r12 = __privateGet(this, _e).get(t13.url);
    if (!r12)
      return;
    let { body: n4, timestamp: o8, ...s14 } = r12, a9 = new Headers(s14.headers), i9 = a9.get("cache-control") || a9.get("real-cache-control") || "", c9 = parseInt(((_a2 = i9.match(/max-age=(\d+)/)) == null ? void 0 : _a2[1]) || "0", 10), u9 = parseInt(((_b = i9.match(/stale-while-revalidate=(\d+)/)) == null ? void 0 : _b[1]) || "0", 10), h9 = (Date.now() - o8) / 1e3;
    if (h9 > c9 + u9) {
      __privateGet(this, _e).delete(t13.url);
      return;
    }
    let f9 = h9 > c9;
    return a9.set("cache", f9 ? "STALE" : "HIT"), a9.set("date", new Date(o8).toUTCString()), new Response(n4, { status: s14.status ?? 200, headers: a9 });
  }
  async delete(t13) {
    return __privateGet(this, _e).has(t13.url) ? (__privateGet(this, _e).delete(t13.url), !0) : !1;
  }
  keys(t13) {
    let r12 = [];
    for (let n4 of __privateGet(this, _e).keys())
      (!t13 || t13.url === n4) && r12.push(new Request(n4));
    return Promise.resolve(r12);
  }
}, _e = new WeakMap(), _a);
async function ot({ storefront: e5, request: t13, response: r12 = new Response("Not Found", { status: 404 }) }) {
  var _a2, _b, _c;
  let { pathname: n4, search: o8 } = new URL(t13.url), s14 = n4 + o8;
  try {
    let { urlRedirects: a9 } = await e5.query(st, { variables: { query: "path:" + s14 }, storefrontApiVersion: "2023-01" }), i9 = (_c = (_b = (_a2 = a9 == null ? void 0 : a9.edges) == null ? void 0 : _a2[0]) == null ? void 0 : _b.node) == null ? void 0 : _c.target;
    if (i9)
      return new Response(null, { status: 302, headers: { location: i9 } });
    let c9 = new URLSearchParams(o8), u9 = c9.get("return_to") || c9.get("redirect");
    if (u9) {
      if (at(u9))
        return redirect3(u9);
      console.warn(`Cross-domain redirects are not supported. Tried to redirect from ${s14} to ${u9}`);
    }
  } catch (a9) {
    console.error(`Failed to fetch redirects from Storefront API for route ${s14}`, a9);
  }
  return r12;
}
function at(e5) {
  try {
    new URL(e5);
  } catch {
    return !0;
  }
  return !1;
}
var st = `#graphql
  query redirects($query: String) {
    urlRedirects(first: 1, query: $query) {
      edges {
        node {
          target
        }
      }
    }
  }
`;
function it({ context: e5 } = {}) {
  if (!(e5 != null && e5.storefront))
    throw new Error("GraphiQL: Hydrogen's storefront client must be injected in the loader context.");
  let t13 = e5.storefront.getApiUrl(), r12 = e5.storefront.getPublicTokenHeaders()["X-Shopify-Storefront-Access-Token"];
  return new Response(`
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>GraphiQL</title>
    <style>
      body {
        height: 100%;
        margin: 0;
        width: 100%;
        overflow: hidden;
      }

      #graphiql {
        height: 100vh;
      }
    </style>

    <script
      src="https://unpkg.com/react@17/umd/react.development.js"
      integrity="sha512-Vf2xGDzpqUOEIKO+X2rgTLWPY+65++WPwCHkX2nFMu9IcstumPsf/uKKRd5prX3wOu8Q0GBylRpsDB26R6ExOg=="
      crossorigin="anonymous"
    ></script>
    <script
      src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"
      integrity="sha512-Wr9OKCTtq1anK0hq5bY3X/AvDI5EflDSAh0mE9gma+4hl+kXdTJPKZ3TwLMBcrgUeoY0s3dq9JjhCQc7vddtFg=="
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="https://unpkg.com/graphiql/graphiql.min.css" />
  </head>

  <body>
    <div id="graphiql">Loading...</div>
    <script
      src="https://unpkg.com/graphiql/graphiql.min.js"
      type="application/javascript"
    ></script>
    <script>
      ReactDOM.render(
        React.createElement(GraphiQL, {
          fetcher: GraphiQL.createFetcher({
            url: '${t13}',
            headers: {
              'X-Shopify-Storefront-Access-Token': '${r12}',
            }
          }),
          defaultEditorToolsVisibility: true,
          initialTabs: [{query: '{\\n  shop {\\n    name\\n  }\\n}'}]
        }),
        document.getElementById('graphiql'),
      );
    </script>
  </body>
</html>
  `, { status: 200, headers: { "content-type": "text/html" } });
}
var R = u2(qe(), 1), v = "Error in SEO input: ", M = { title: { validate: (e5) => {
  if (typeof e5 == "string" && e5.length > 120)
    throw new Error(v.concat("`title` should not be longer than 120 characters"));
  return e5;
} }, description: { validate: (e5) => {
  if (typeof e5 == "string" && e5.length > 155)
    throw new Error(v.concat("`description` should not be longer than 155 characters"));
  return e5;
} }, url: { validate: (e5) => {
  if (typeof e5 == "string" && !e5.startsWith("http"))
    throw new Error(v.concat("`url` should be a valid URL"));
  return e5;
} }, handle: { validate: (e5) => {
  if (typeof e5 == "string" && !e5.startsWith("@"))
    throw new Error(v.concat("`handle` should start with `@`"));
  return e5;
} } };
function He(e5) {
  let t13 = [], r12 = { "@context": "https://schema.org", "@type": "Thing" };
  for (let o8 of Object.keys(e5)) {
    let s14 = re(e5[o8]), a9;
    if (!s14)
      return [];
    let c9 = s14.map((u9) => {
      let h9 = [];
      if (!u9)
        return h9;
      switch (o8) {
        case "title": {
          a9 = L(M.title, u9);
          let S4 = xt(e5 == null ? void 0 : e5.titleTemplate, a9);
          h9.push(g4("title", { title: S4 }), g4("meta", { property: "og:title", content: S4 }), g4("meta", { name: "twitter:title", content: S4 })), r12.name = a9;
          break;
        }
        case "description":
          a9 = L(M.description, u9), h9.push(g4("meta", { name: "description", content: a9 }), g4("meta", { property: "og:description", content: a9 }), g4("meta", { name: "twitter:description", content: a9 })), r12.description = a9;
          break;
        case "url":
          a9 = L(M.url, u9), h9.push(g4("meta", { property: "og:url", content: a9 }), g4("link", { rel: "canonical", href: a9 })), r12.url = a9, r12["@type"] = Et(a9);
          break;
        case "handle":
          a9 = L(M.handle, u9), h9.push(g4("meta", { name: "twitter:site", content: a9 }), g4("meta", { name: "twitter:creator", content: a9 }));
          break;
        case "jsonLd":
          r12 = { ...r12, ...u9 };
          break;
        case "media": {
          let S4 = re(u9);
          for (let f9 of S4)
            if (typeof f9 == "string" && (h9.push(g4("meta", { name: "og:image", content: f9 })), r12.image = f9), f9 && typeof f9 == "object") {
              let d15 = f9.type || "image", l12 = f9 ? { url: f9 == null ? void 0 : f9.url, secure_url: f9 == null ? void 0 : f9.url, type: bt(f9.url), width: f9 == null ? void 0 : f9.width, height: f9 == null ? void 0 : f9.height, alt: f9 == null ? void 0 : f9.altText } : {};
              for (let y4 of Object.keys(l12))
                l12[y4] && (a9 = l12[y4], h9.push(g4("meta", { property: `og:${d15}:${y4}`, content: a9 }, l12.url)));
            }
          break;
        }
        case "alternates": {
          let S4 = re(u9);
          for (let f9 of S4) {
            if (!f9)
              continue;
            let { language: d15, url: l12, default: y4 } = f9, w4 = d15 ? `${d15}${y4 ? "-default" : ""}` : void 0;
            h9.push(g4("link", { rel: "alternate", hrefLang: w4, href: l12 }));
          }
          break;
        }
      }
      return h9;
    }).flat();
    t13.push(c9.filter((u9) => !!u9));
  }
  let n4 = [g4("meta", { property: "og:type", content: "website" }), g4("meta", { name: "twitter:card", content: "summary_large_image" })];
  return [...t13, ...n4].flat().sort((o8, s14) => o8.key.localeCompare(s14.key)).concat(g4("script", { type: "application/ld+json", children: r12 })).flat();
}
function g4(e5, t13, r12) {
  let n4 = { tag: e5, props: {}, key: "" };
  return e5 === "title" ? (n4.children = t13.title, n4.key = Ue(n4), n4) : (e5 === "script" && (n4.children = JSON.stringify(t13.children), delete t13.children), n4.props = t13, Object.keys(n4.props).forEach((o8) => !n4.props[o8] && delete n4.props[o8]), n4.key = Ue(n4, r12), n4);
}
function Ue(e5, t13) {
  let { tag: r12, props: n4 } = e5;
  if (r12 === "title")
    return "0-title";
  if (r12 === "meta") {
    let o8 = n4.content === t13 && typeof n4.property == "string" && !n4.property.endsWith("secure_url") && "0";
    return [r12, t13, o8, n4.property || n4.name].filter((a9) => a9).join("-");
  }
  return r12 === "link" ? [r12, n4.rel, n4.hrefLang || n4.media].filter((s14) => s14).join("-").replace(/\s+/g, "-") : `${r12}-${n4.type}`;
}
function xt(e5, t13) {
  return e5 ? typeof e5 == "function" ? e5(t13) : e5.replace("%s", t13 ?? "") : t13;
}
function bt(e5) {
  let t13 = e5 && e5.split(".").pop();
  return t13 === "svg" ? "image/svg+xml" : t13 === "png" ? "image/png" : t13 === "jpg" || t13 === "jpeg" ? "image/jpeg" : t13 === "gif" ? "image/gif" : t13 === "swf" ? "application/x-shockwave-flash" : t13 === "mp3" ? "audio/mpeg" : "image/jpeg";
}
function Et(e5) {
  let t13 = "Thing";
  if (!e5)
    return t13;
  let n4 = [{ type: "WebSite", pattern: "^/$" }, { type: "Product", pattern: "/products/.*" }, { type: "ItemList", pattern: /\/collections$/ }, { type: "ItemList", pattern: /\/collections\/([^/]+)/ }, { type: "WebPage", pattern: /\/pages\/([^/]+)/ }, { type: "WebSite", pattern: /\/blogs\/([^/]+)/ }, { type: "BlogPosting", pattern: /\/blogs\/([^/]+)\/([^/]+)/ }, { type: "Organization", pattern: "/policies" }, { type: "Organization", pattern: /\/policies\/([^/]+)/ }].filter((o8) => {
    let { pattern: s14 } = o8;
    return new RegExp(s14).test(e5);
  });
  return n4.length > 0 ? n4[n4.length - 1].type : t13;
}
function re(e5) {
  return Array.isArray(e5) ? e5 : [e5];
}
function L(e5, t13) {
  try {
    return e5.validate(t13);
  } catch (r12) {
    let n4 = r12.message;
    return console.warn(n4), t13;
  }
}
var Pt = R.default.lazy(() => Promise.resolve().then(() => (init_log_seo_tags_GYSQ3BE2(), log_seo_tags_GYSQ3BE2_exports)));
function It({ debug: e5 }) {
  let t13 = useMatches2(), r12 = useLocation(), n4 = t13.flatMap((i9) => {
    let { handle: c9, ...u9 } = i9, h9 = { ...u9, ...r12 };
    return c9 === void 0 || c9.seo === void 0 ? [] : j(c9.seo, h9);
  }).reduce((i9, c9) => (Object.keys(c9).forEach((u9) => !c9[u9] && delete c9[u9]), { ...i9, ...c9 }), {}), o8 = He(n4);
  e5 && h(o8);
  let s14 = o8.map((i9) => i9.tag === "script" ? R.default.createElement(i9.tag, { ...i9.props, key: i9.key, dangerouslySetInnerHTML: { __html: i9.children } }) : R.default.createElement(i9.tag, { ...i9.props, key: i9.key }, i9.children)), a9 = R.default.createElement(R.default.Suspense, { fallback: null }, R.default.createElement(Pt, { headTags: o8 }));
  return R.default.createElement(R.default.Fragment, null, s14, e5 && a9);
}
function j(e5, ...t13) {
  if (e5 instanceof Function)
    return j(e5(...t13), ...t13);
  let r12 = {};
  return Array.isArray(e5) ? (r12 = e5.reduce((n4, o8) => [...n4, j(o8)], []), r12) : e5 instanceof Object ? (Object.entries(e5).forEach(([o8, s14]) => {
    r12[o8] = j(s14, ...t13);
  }), r12) : e5;
}

// app/lib/utils.ts
var import_typographic_base = __toESM(require_index_es515());

// app/data/countries.ts
var countries = {
  default: {
    label: "United Kingdom (GBP \xA3)",
    language: "EN",
    country: "GB",
    currency: "GBP"
  },
  "/en-ad": {
    label: "Andorra (EUR \u20AC)",
    language: "EN",
    country: "AD",
    currency: "EUR"
  },
  "/en-at": {
    label: "Austria (EUR \u20AC)",
    language: "EN",
    country: "AT",
    currency: "EUR"
  },
  "/en-au": {
    label: "Australia (AUD $)",
    language: "EN",
    country: "AU",
    currency: "AUD"
  },
  "/en-be": {
    label: "Belgium (EUR \u20AC)",
    language: "EN",
    country: "BE",
    currency: "EUR"
  },
  "/en-ca": {
    label: "Canada (CAD $)",
    language: "EN",
    country: "CA",
    currency: "CAD"
  },
  "/en-cn": {
    label: "China (CNY \xA5)",
    language: "EN",
    country: "CN",
    currency: "CNY"
  },
  "/en-cy": {
    label: "Cyprus (EUR \u20AC)",
    language: "EN",
    country: "CY",
    currency: "EUR"
  },
  "/en-de": {
    label: "Germany (EUR \u20AC)",
    language: "EN",
    country: "DE",
    currency: "EUR"
  },
  "/en-ee": {
    label: "Estonia (EUR \u20AC)",
    language: "EN",
    country: "EE",
    currency: "EUR"
  },
  "/en-es": {
    label: "Spain (EUR \u20AC)",
    language: "EN",
    country: "ES",
    currency: "EUR"
  },
  "/en-fi": {
    label: "Finland (EUR \u20AC)",
    language: "EN",
    country: "FI",
    currency: "EUR"
  },
  "/en-fr": {
    label: "France (EUR \u20AC)",
    language: "EN",
    country: "FR",
    currency: "EUR"
  },
  "/en-gb": {
    label: "United Kingdom (GBP \xA3)",
    language: "EN",
    country: "GB",
    currency: "GBP"
  },
  "/en-gr": {
    label: "Greece (EUR \u20AC)",
    language: "EN",
    country: "GR",
    currency: "EUR"
  },
  "/en-id": {
    label: "Indonesia (IDR Rp)",
    language: "EN",
    country: "ID",
    currency: "IDR"
  },
  "/en-ie": {
    label: "Ireland (EUR \u20AC)",
    language: "EN",
    country: "IE",
    currency: "EUR"
  },
  "/en-in": {
    label: "India (INR \u20B9)",
    language: "EN",
    country: "IN",
    currency: "INR"
  },
  "/en-it": {
    label: "Italy (EUR \u20AC)",
    language: "EN",
    country: "IT",
    currency: "EUR"
  },
  "/en-jp": {
    label: "Japan (JPY \xA5)",
    language: "EN",
    country: "JP",
    currency: "JPY"
  },
  "/en-kr": {
    label: "South Korea (KRW \u20A9)",
    language: "EN",
    country: "KR",
    currency: "KRW"
  },
  "/en-lt": {
    label: "Lithuania (EUR \u20AC)",
    language: "EN",
    country: "LT",
    currency: "EUR"
  },
  "/en-lu": {
    label: "Luxembourg (EUR \u20AC)",
    language: "EN",
    country: "LU",
    currency: "EUR"
  },
  "/en-lv": {
    label: "Latvia (EUR \u20AC)",
    language: "EN",
    country: "LV",
    currency: "EUR"
  },
  "/en-mc": {
    label: "Monaco (EUR \u20AC)",
    language: "EN",
    country: "MC",
    currency: "EUR"
  },
  "/en-me": {
    label: "Montenegro (EUR \u20AC)",
    language: "EN",
    country: "ME",
    currency: "EUR"
  },
  "/en-mt": {
    label: "Malta (EUR \u20AC)",
    language: "EN",
    country: "MT",
    currency: "EUR"
  },
  "/en-nl": {
    label: "Netherlands (EUR \u20AC)",
    language: "EN",
    country: "NL",
    currency: "EUR"
  },
  "/en-nz": {
    label: "New Zealand (NZD $)",
    language: "EN",
    country: "NZ",
    currency: "NZD"
  },
  "/en-pt": {
    label: "Portugal (EUR \u20AC)",
    language: "EN",
    country: "PT",
    currency: "EUR"
  },
  "/en-sg": {
    label: "Singapore (SGD $)",
    language: "EN",
    country: "SG",
    currency: "SGD"
  },
  "/en-si": {
    label: "Slovenia (EUR \u20AC)",
    language: "EN",
    country: "SI",
    currency: "EUR"
  },
  "/en-sk": {
    label: "Slovakia (EUR \u20AC)",
    language: "EN",
    country: "SK",
    currency: "EUR"
  },
  "/en-sm": {
    label: "San Marino (EUR \u20AC)",
    language: "EN",
    country: "SM",
    currency: "EUR"
  },
  "/en-th": {
    label: "Thailand (THB \u0E3F)",
    language: "EN",
    country: "TH",
    currency: "THB"
  },
  "/en-va": {
    label: "Vatican City (EUR \u20AC)",
    language: "EN",
    country: "VA",
    currency: "EUR"
  },
  "/en-vn": {
    label: "Vietnam (VND \u20AB)",
    language: "EN",
    country: "VN",
    currency: "VND"
  },
  "/en-xk": {
    label: "Kosovo (EUR \u20AC)",
    language: "EN",
    country: "XK",
    currency: "EUR"
  }
};

// app/lib/utils.ts
function missingClass(string3, prefix2) {
  if (!string3)
    return !0;
  let regex = new RegExp(` ?${prefix2}`, "g");
  return string3.match(regex) === null;
}
function formatText(input) {
  if (!!input)
    return typeof input != "string" ? input : (0, import_typographic_base.default)(input, { locale: "en-us" }).replace(
      /\s([^\s<]+)\s*$/g,
      "\xA0$1"
    );
}
function isNewArrival(date, daysOld = 30) {
  return new Date(date).valueOf() > new Date().setDate(new Date().getDate() - daysOld).valueOf();
}
function isDiscounted(price, compareAtPrice) {
  return (compareAtPrice == null ? void 0 : compareAtPrice.amount) > (price == null ? void 0 : price.amount);
}
var INPUT_STYLE_CLASSES = "appearance-none rounded dark:bg-transparent border focus:border-primary/50 focus:ring-0 w-full py-2 px-3  placeholder: leading-tight focus:shadow-outline", getInputStyleClasses = (isError) => `${INPUT_STYLE_CLASSES} ${isError ? "border-red-500" : "border-primary/20"}`;
var DEFAULT_LOCALE = Object.freeze({
  ...countries.default,
  pathPrefix: ""
});
function getLocaleFromRequest(request) {
  let firstPathPart = "/" + new URL(request.url).pathname.substring(1).split("/")[0].toLowerCase();
  return countries[firstPathPart] ? {
    ...countries[firstPathPart],
    pathPrefix: firstPathPart
  } : {
    ...countries.default,
    pathPrefix: ""
  };
}
function usePrefixPathWithLocale(path2) {
  var _a2;
  let [root] = useMatches2();
  return `${(((_a2 = root.data) == null ? void 0 : _a2.selectedLocale) ?? DEFAULT_LOCALE).pathPrefix}${path2.startsWith("/") ? path2 : "/" + path2}`;
}
function useIsHomePath() {
  var _a2;
  let { pathname } = useLocation(), [root] = useMatches2(), selectedLocale = ((_a2 = root.data) == null ? void 0 : _a2.selectedLocale) ?? DEFAULT_LOCALE;
  return pathname.replace(selectedLocale.pathPrefix, "") === "/";
}

// node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1), {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/react-use/esm/misc/util.js
function on(obj) {
  for (var args = [], _i = 1; _i < arguments.length; _i++)
    args[_i - 1] = arguments[_i];
  obj && obj.addEventListener && obj.addEventListener.apply(obj, args);
}
function off(obj) {
  for (var args = [], _i = 1; _i < arguments.length; _i++)
    args[_i - 1] = arguments[_i];
  obj && obj.removeEventListener && obj.removeEventListener.apply(obj, args);
}
var isBrowser3 = typeof window < "u";

// node_modules/react-use/esm/useEffectOnce.js
var import_react8 = __toESM(require_react()), useEffectOnce = function(effect) {
  (0, import_react8.useEffect)(effect, []);
}, useEffectOnce_default = useEffectOnce;

// node_modules/react-use/esm/useRafState.js
var import_react10 = __toESM(require_react());

// node_modules/react-use/esm/useUnmount.js
var import_react9 = __toESM(require_react());
var useUnmount = function(fn) {
  var fnRef = (0, import_react9.useRef)(fn);
  fnRef.current = fn, useEffectOnce_default(function() {
    return function() {
      return fnRef.current();
    };
  });
}, useUnmount_default = useUnmount;

// node_modules/react-use/esm/useRafState.js
var useRafState = function(initialState) {
  var frame = (0, import_react10.useRef)(0), _a2 = (0, import_react10.useState)(initialState), state = _a2[0], setState = _a2[1], setRafState = (0, import_react10.useCallback)(function(value) {
    cancelAnimationFrame(frame.current), frame.current = requestAnimationFrame(function() {
      setState(value);
    });
  }, []);
  return useUnmount_default(function() {
    cancelAnimationFrame(frame.current);
  }), [state, setRafState];
}, useRafState_default = useRafState;

// node_modules/react-use/esm/useScroll.js
var import_react11 = __toESM(require_react());
var useScroll = function(ref) {
  (typeof ref != "object" || typeof ref.current > "u") && console.error("`useScroll` expects a single ref argument.");
  var _a2 = useRafState_default({
    x: 0,
    y: 0
  }), state = _a2[0], setState = _a2[1];
  return (0, import_react11.useEffect)(function() {
    var handler = function() {
      ref.current && setState({
        x: ref.current.scrollLeft,
        y: ref.current.scrollTop
      });
    };
    return ref.current && on(ref.current, "scroll", handler, {
      capture: !1,
      passive: !0
    }), function() {
      ref.current && off(ref.current, "scroll", handler);
    };
  }, [ref]), state;
}, useScroll_default = useScroll;

// node_modules/react-use/esm/useWindowScroll.js
var import_react12 = __toESM(require_react());
var useWindowScroll = function() {
  var _a2 = useRafState_default(function() {
    return {
      x: isBrowser3 ? window.pageXOffset : 0,
      y: isBrowser3 ? window.pageYOffset : 0
    };
  }), state = _a2[0], setState = _a2[1];
  return (0, import_react12.useEffect)(function() {
    var handler = function() {
      setState(function(state2) {
        var pageXOffset = window.pageXOffset, pageYOffset = window.pageYOffset;
        return state2.x !== pageXOffset || state2.y !== pageYOffset ? {
          x: pageXOffset,
          y: pageYOffset
        } : state2;
      });
    };
    return handler(), on(window, "scroll", handler, {
      capture: !1,
      passive: !0
    }), function() {
      off(window, "scroll", handler);
    };
  }, []), state;
}, useWindowScroll_default = useWindowScroll;

// node_modules/@headlessui/react/dist/hooks/use-iso-morphic-effect.js
var import_react13 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/env.js
var i3 = Object.defineProperty, d3 = (t13, e5, n4) => e5 in t13 ? i3(t13, e5, { enumerable: !0, configurable: !0, writable: !0, value: n4 }) : t13[e5] = n4, r2 = (t13, e5, n4) => (d3(t13, typeof e5 != "symbol" ? e5 + "" : e5, n4), n4), o = class {
  constructor() {
    r2(this, "current", this.detect()), r2(this, "handoffState", "pending"), r2(this, "currentId", 0);
  }
  set(e5) {
    this.current !== e5 && (this.handoffState = "pending", this.currentId = 0, this.current = e5);
  }
  reset() {
    this.set(this.detect());
  }
  nextId() {
    return ++this.currentId;
  }
  get isServer() {
    return this.current === "server";
  }
  get isClient() {
    return this.current === "client";
  }
  detect() {
    return typeof window > "u" || typeof document > "u" ? "server" : "client";
  }
  handoff() {
    this.handoffState === "pending" && (this.handoffState = "complete");
  }
  get isHandoffComplete() {
    return this.handoffState === "complete";
  }
}, s2 = new o();

// node_modules/@headlessui/react/dist/hooks/use-iso-morphic-effect.js
var l2 = (e5, f9) => {
  s2.isServer ? (0, import_react13.useEffect)(e5, f9) : (0, import_react13.useLayoutEffect)(e5, f9);
};

// node_modules/@headlessui/react/dist/hooks/use-latest-value.js
var import_react14 = __toESM(require_react(), 1);
function s3(e5) {
  let r12 = (0, import_react14.useRef)(e5);
  return l2(() => {
    r12.current = e5;
  }, [e5]), r12;
}

// node_modules/@headlessui/react/dist/hooks/use-disposables.js
var import_react15 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/micro-task.js
function t4(e5) {
  typeof queueMicrotask == "function" ? queueMicrotask(e5) : Promise.resolve().then(e5).catch((o8) => setTimeout(() => {
    throw o8;
  }));
}

// node_modules/@headlessui/react/dist/utils/disposables.js
function m2() {
  let a9 = [], i9 = [], r12 = { enqueue(e5) {
    i9.push(e5);
  }, addEventListener(e5, t13, n4, s14) {
    return e5.addEventListener(t13, n4, s14), r12.add(() => e5.removeEventListener(t13, n4, s14));
  }, requestAnimationFrame(...e5) {
    let t13 = requestAnimationFrame(...e5);
    return r12.add(() => cancelAnimationFrame(t13));
  }, nextFrame(...e5) {
    return r12.requestAnimationFrame(() => r12.requestAnimationFrame(...e5));
  }, setTimeout(...e5) {
    let t13 = setTimeout(...e5);
    return r12.add(() => clearTimeout(t13));
  }, microTask(...e5) {
    let t13 = { current: !0 };
    return t4(() => {
      t13.current && e5[0]();
    }), r12.add(() => {
      t13.current = !1;
    });
  }, add(e5) {
    return a9.push(e5), () => {
      let t13 = a9.indexOf(e5);
      if (t13 >= 0) {
        let [n4] = a9.splice(t13, 1);
        n4();
      }
    };
  }, dispose() {
    for (let e5 of a9.splice(0))
      e5();
  }, async workQueue() {
    for (let e5 of i9.splice(0))
      await e5();
  }, style(e5, t13, n4) {
    let s14 = e5.style.getPropertyValue(t13);
    return Object.assign(e5.style, { [t13]: n4 }), this.add(() => {
      Object.assign(e5.style, { [t13]: s14 });
    });
  } };
  return r12;
}

// node_modules/@headlessui/react/dist/hooks/use-disposables.js
function p3() {
  let [e5] = (0, import_react15.useState)(m2);
  return (0, import_react15.useEffect)(() => () => e5.dispose(), [e5]), e5;
}

// node_modules/@headlessui/react/dist/hooks/use-event.js
var import_react16 = __toESM(require_react(), 1);
var o3 = function(t13) {
  let e5 = s3(t13);
  return import_react16.default.useCallback((...r12) => e5.current(...r12), [e5]);
};

// node_modules/@headlessui/react/dist/hooks/use-id.js
var import_react18 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/hooks/use-server-handoff-complete.js
var import_react17 = __toESM(require_react(), 1);
function l3() {
  let [e5, f9] = (0, import_react17.useState)(s2.isHandoffComplete);
  return e5 && s2.isHandoffComplete === !1 && f9(!1), (0, import_react17.useEffect)(() => {
    e5 !== !0 && f9(!0);
  }, [e5]), (0, import_react17.useEffect)(() => s2.handoff(), []), e5;
}

// node_modules/@headlessui/react/dist/hooks/use-id.js
var o5, I = (o5 = import_react18.default.useId) != null ? o5 : function() {
  let n4 = l3(), [e5, u9] = import_react18.default.useState(n4 ? () => s2.nextId() : null);
  return l2(() => {
    e5 === null && u9(s2.nextId());
  }, [e5]), e5 != null ? "" + e5 : void 0;
};

// node_modules/@headlessui/react/dist/hooks/use-outside-click.js
var import_react20 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/match.js
function u4(r12, n4, ...a9) {
  if (r12 in n4) {
    let e5 = n4[r12];
    return typeof e5 == "function" ? e5(...a9) : e5;
  }
  let t13 = new Error(`Tried to handle "${r12}" but there is no handler defined. Only defined handlers are: ${Object.keys(n4).map((e5) => `"${e5}"`).join(", ")}.`);
  throw Error.captureStackTrace && Error.captureStackTrace(t13, u4), t13;
}

// node_modules/@headlessui/react/dist/utils/owner.js
function e(r12) {
  return s2.isServer ? null : r12 instanceof Node ? r12.ownerDocument : r12 != null && r12.hasOwnProperty("current") && r12.current instanceof Node ? r12.current.ownerDocument : document;
}

// node_modules/@headlessui/react/dist/utils/focus-management.js
var f3 = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map((e5) => `${e5}:not([tabindex='-1'])`).join(","), L2 = ((r12) => (r12[r12.First = 1] = "First", r12[r12.Previous = 2] = "Previous", r12[r12.Next = 4] = "Next", r12[r12.Last = 8] = "Last", r12[r12.WrapAround = 16] = "WrapAround", r12[r12.NoScroll = 32] = "NoScroll", r12))(L2 || {}), N2 = ((o8) => (o8[o8.Error = 0] = "Error", o8[o8.Overflow = 1] = "Overflow", o8[o8.Success = 2] = "Success", o8[o8.Underflow = 3] = "Underflow", o8))(N2 || {}), T2 = ((n4) => (n4[n4.Previous = -1] = "Previous", n4[n4.Next = 1] = "Next", n4))(T2 || {});
function E(e5 = document.body) {
  return e5 == null ? [] : Array.from(e5.querySelectorAll(f3)).sort((t13, n4) => Math.sign((t13.tabIndex || Number.MAX_SAFE_INTEGER) - (n4.tabIndex || Number.MAX_SAFE_INTEGER)));
}
var F3 = ((n4) => (n4[n4.Strict = 0] = "Strict", n4[n4.Loose = 1] = "Loose", n4))(F3 || {});
function h2(e5, t13 = 0) {
  var n4;
  return e5 === ((n4 = e(e5)) == null ? void 0 : n4.body) ? !1 : u4(t13, { [0]() {
    return e5.matches(f3);
  }, [1]() {
    let l12 = e5;
    for (; l12 !== null; ) {
      if (l12.matches(f3))
        return !0;
      l12 = l12.parentElement;
    }
    return !1;
  } });
}
function S(e5) {
  e5 == null || e5.focus({ preventScroll: !0 });
}
var H2 = ["textarea", "input"].join(",");
function w(e5) {
  var t13, n4;
  return (n4 = (t13 = e5 == null ? void 0 : e5.matches) == null ? void 0 : t13.call(e5, H2)) != null ? n4 : !1;
}
function A3(e5, t13 = (n4) => n4) {
  return e5.slice().sort((n4, l12) => {
    let o8 = t13(n4), i9 = t13(l12);
    if (o8 === null || i9 === null)
      return 0;
    let r12 = o8.compareDocumentPosition(i9);
    return r12 & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : r12 & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;
  });
}
function I2(e5, t13, { sorted: n4 = !0, relativeTo: l12 = null, skipElements: o8 = [] } = {}) {
  let i9 = Array.isArray(e5) ? e5.length > 0 ? e5[0].ownerDocument : document : e5.ownerDocument, r12 = Array.isArray(e5) ? n4 ? A3(e5) : e5 : E(e5);
  o8.length > 0 && r12.length > 1 && (r12 = r12.filter((s14) => !o8.includes(s14))), l12 = l12 ?? i9.activeElement;
  let d15 = (() => {
    if (t13 & 5)
      return 1;
    if (t13 & 10)
      return -1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), x5 = (() => {
    if (t13 & 1)
      return 0;
    if (t13 & 2)
      return Math.max(0, r12.indexOf(l12)) - 1;
    if (t13 & 4)
      return Math.max(0, r12.indexOf(l12)) + 1;
    if (t13 & 8)
      return r12.length - 1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), p8 = t13 & 32 ? { preventScroll: !0 } : {}, c9 = 0, a9 = r12.length, u9;
  do {
    if (c9 >= a9 || c9 + a9 <= 0)
      return 0;
    let s14 = x5 + c9;
    if (t13 & 16)
      s14 = (s14 + a9) % a9;
    else {
      if (s14 < 0)
        return 3;
      if (s14 >= a9)
        return 1;
    }
    u9 = r12[s14], u9 == null || u9.focus(p8), c9 += d15;
  } while (u9 !== i9.activeElement);
  return t13 & 6 && w(u9) && u9.select(), u9.hasAttribute("tabindex") || u9.setAttribute("tabindex", "0"), 2;
}

// node_modules/@headlessui/react/dist/hooks/use-document-event.js
var import_react19 = __toESM(require_react(), 1);
function d4(e5, r12, n4) {
  let o8 = s3(r12);
  (0, import_react19.useEffect)(() => {
    function t13(u9) {
      o8.current(u9);
    }
    return document.addEventListener(e5, t13, n4), () => document.removeEventListener(e5, t13, n4);
  }, [e5, n4]);
}

// node_modules/@headlessui/react/dist/hooks/use-outside-click.js
function L3(m11, E5, c9 = !0) {
  let i9 = (0, import_react20.useRef)(!1);
  (0, import_react20.useEffect)(() => {
    requestAnimationFrame(() => {
      i9.current = c9;
    });
  }, [c9]);
  function f9(e5, o8) {
    if (!i9.current || e5.defaultPrevented)
      return;
    let l12 = function r12(t13) {
      return typeof t13 == "function" ? r12(t13()) : Array.isArray(t13) || t13 instanceof Set ? t13 : [t13];
    }(m11), n4 = o8(e5);
    if (n4 !== null && !!n4.getRootNode().contains(n4)) {
      for (let r12 of l12) {
        if (r12 === null)
          continue;
        let t13 = r12 instanceof HTMLElement ? r12 : r12.current;
        if (t13 != null && t13.contains(n4) || e5.composed && e5.composedPath().includes(t13))
          return;
      }
      return !h2(n4, F3.Loose) && n4.tabIndex !== -1 && e5.preventDefault(), E5(e5, n4);
    }
  }
  let u9 = (0, import_react20.useRef)(null);
  d4("mousedown", (e5) => {
    var o8, l12;
    i9.current && (u9.current = ((l12 = (o8 = e5.composedPath) == null ? void 0 : o8.call(e5)) == null ? void 0 : l12[0]) || e5.target);
  }, !0), d4("click", (e5) => {
    !u9.current || (f9(e5, () => u9.current), u9.current = null);
  }, !0), d4("blur", (e5) => f9(e5, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), !0);
}

// node_modules/@headlessui/react/dist/hooks/use-resolve-button-type.js
var import_react21 = __toESM(require_react(), 1);
function i4(t13) {
  var n4;
  if (t13.type)
    return t13.type;
  let e5 = (n4 = t13.as) != null ? n4 : "button";
  if (typeof e5 == "string" && e5.toLowerCase() === "button")
    return "button";
}
function s6(t13, e5) {
  let [n4, u9] = (0, import_react21.useState)(() => i4(t13));
  return l2(() => {
    u9(i4(t13));
  }, [t13.type, t13.as]), l2(() => {
    n4 || !e5.current || e5.current instanceof HTMLButtonElement && !e5.current.hasAttribute("type") && u9("button");
  }, [n4, e5]), n4;
}

// node_modules/@headlessui/react/dist/hooks/use-sync-refs.js
var import_react22 = __toESM(require_react(), 1);
var u5 = Symbol();
function T3(t13, n4 = !0) {
  return Object.assign(t13, { [u5]: n4 });
}
function y(...t13) {
  let n4 = (0, import_react22.useRef)(t13);
  (0, import_react22.useEffect)(() => {
    n4.current = t13;
  }, [t13]);
  let c9 = o3((e5) => {
    for (let o8 of n4.current)
      o8 != null && (typeof o8 == "function" ? o8(e5) : o8.current = e5);
  });
  return t13.every((e5) => e5 == null || (e5 == null ? void 0 : e5[u5])) ? void 0 : c9;
}

// node_modules/@headlessui/react/dist/utils/render.js
var import_react23 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/class-names.js
function e2(...n4) {
  return n4.filter(Boolean).join(" ");
}

// node_modules/@headlessui/react/dist/utils/render.js
var j2 = ((a9) => (a9[a9.None = 0] = "None", a9[a9.RenderStrategy = 1] = "RenderStrategy", a9[a9.Static = 2] = "Static", a9))(j2 || {}), w2 = ((e5) => (e5[e5.Unmount = 0] = "Unmount", e5[e5.Hidden = 1] = "Hidden", e5))(w2 || {});
function X({ ourProps: r12, theirProps: t13, slot: e5, defaultTag: a9, features: s14, visible: n4 = !0, name: l12 }) {
  let o8 = h3(t13, r12);
  if (n4)
    return m4(o8, e5, a9, l12);
  let u9 = s14 ?? 0;
  if (u9 & 2) {
    let { static: i9 = !1, ...d15 } = o8;
    if (i9)
      return m4(d15, e5, a9, l12);
  }
  if (u9 & 1) {
    let { unmount: i9 = !0, ...d15 } = o8;
    return u4(i9 ? 0 : 1, { [0]() {
      return null;
    }, [1]() {
      return m4({ ...d15, hidden: !0, style: { display: "none" } }, e5, a9, l12);
    } });
  }
  return m4(o8, e5, a9, l12);
}
function m4(r12, t13 = {}, e5, a9) {
  var y4;
  let { as: s14 = e5, children: n4, refName: l12 = "ref", ...o8 } = T4(r12, ["unmount", "static"]), u9 = r12.ref !== void 0 ? { [l12]: r12.ref } : {}, i9 = typeof n4 == "function" ? n4(t13) : n4;
  o8.className && typeof o8.className == "function" && (o8.className = o8.className(t13));
  let d15 = {};
  if (t13) {
    let f9 = !1, c9 = [];
    for (let [p8, F7] of Object.entries(t13))
      typeof F7 == "boolean" && (f9 = !0), F7 === !0 && c9.push(p8);
    f9 && (d15["data-headlessui-state"] = c9.join(" "));
  }
  if (s14 === import_react23.Fragment && Object.keys(P2(o8)).length > 0) {
    if (!(0, import_react23.isValidElement)(i9) || Array.isArray(i9) && i9.length > 1)
      throw new Error(['Passing props on "Fragment"!', "", `The current component <${a9} /> is rendering a "Fragment".`, "However we need to passthrough the following props:", Object.keys(o8).map((p8) => `  - ${p8}`).join(`
`), "", "You can apply a few solutions:", ['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".', "Render a single element as the child so that we can forward the props onto that element."].map((p8) => `  - ${p8}`).join(`
`)].join(`
`));
    let f9 = e2((y4 = i9.props) == null ? void 0 : y4.className, o8.className), c9 = f9 ? { className: f9 } : {};
    return (0, import_react23.cloneElement)(i9, Object.assign({}, h3(i9.props, P2(T4(o8, ["ref"]))), d15, u9, O(i9.ref, u9.ref), c9));
  }
  return (0, import_react23.createElement)(s14, Object.assign({}, T4(o8, ["ref"]), s14 !== import_react23.Fragment && u9, s14 !== import_react23.Fragment && d15), i9);
}
function O(...r12) {
  return { ref: r12.every((t13) => t13 == null) ? void 0 : (t13) => {
    for (let e5 of r12)
      e5 != null && (typeof e5 == "function" ? e5(t13) : e5.current = t13);
  } };
}
function h3(...r12) {
  var a9;
  if (r12.length === 0)
    return {};
  if (r12.length === 1)
    return r12[0];
  let t13 = {}, e5 = {};
  for (let s14 of r12)
    for (let n4 in s14)
      n4.startsWith("on") && typeof s14[n4] == "function" ? ((a9 = e5[n4]) != null || (e5[n4] = []), e5[n4].push(s14[n4])) : t13[n4] = s14[n4];
  if (t13.disabled || t13["aria-disabled"])
    return Object.assign(t13, Object.fromEntries(Object.keys(e5).map((s14) => [s14, void 0])));
  for (let s14 in e5)
    Object.assign(t13, { [s14](n4, ...l12) {
      let o8 = e5[s14];
      for (let u9 of o8) {
        if ((n4 instanceof Event || (n4 == null ? void 0 : n4.nativeEvent) instanceof Event) && n4.defaultPrevented)
          return;
        u9(n4, ...l12);
      }
    } });
  return t13;
}
function V2(r12) {
  var t13;
  return Object.assign((0, import_react23.forwardRef)(r12), { displayName: (t13 = r12.displayName) != null ? t13 : r12.name });
}
function P2(r12) {
  let t13 = Object.assign({}, r12);
  for (let e5 in t13)
    t13[e5] === void 0 && delete t13[e5];
  return t13;
}
function T4(r12, t13 = []) {
  let e5 = Object.assign({}, r12);
  for (let a9 of t13)
    a9 in e5 && delete e5[a9];
  return e5;
}

// node_modules/@headlessui/react/dist/utils/bugs.js
function r4(n4) {
  let e5 = n4.parentElement, l12 = null;
  for (; e5 && !(e5 instanceof HTMLFieldSetElement); )
    e5 instanceof HTMLLegendElement && (l12 = e5), e5 = e5.parentElement;
  let t13 = (e5 == null ? void 0 : e5.getAttribute("disabled")) === "";
  return t13 && i6(l12) ? !1 : t13;
}
function i6(n4) {
  if (!n4)
    return !1;
  let e5 = n4.previousElementSibling;
  for (; e5 !== null; ) {
    if (e5 instanceof HTMLLegendElement)
      return !1;
    e5 = e5.previousElementSibling;
  }
  return !0;
}

// node_modules/@headlessui/react/dist/internal/hidden.js
var a3 = "div", s7 = ((e5) => (e5[e5.None = 1] = "None", e5[e5.Focusable = 2] = "Focusable", e5[e5.Hidden = 4] = "Hidden", e5))(s7 || {}), h4 = V2(function(t13, o8) {
  let { features: e5 = 1, ...r12 } = t13, d15 = { ref: o8, "aria-hidden": (e5 & 2) === 2 ? !0 : void 0, style: { position: "fixed", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0", ...(e5 & 4) === 4 && (e5 & 2) !== 2 && { display: "none" } } };
  return X({ ourProps: d15, theirProps: r12, slot: {}, defaultTag: a3, name: "Hidden" });
});

// node_modules/@headlessui/react/dist/internal/open-closed.js
var import_react24 = __toESM(require_react(), 1), n = (0, import_react24.createContext)(null);
n.displayName = "OpenClosedContext";
var d6 = ((e5) => (e5[e5.Open = 1] = "Open", e5[e5.Closed = 2] = "Closed", e5[e5.Closing = 4] = "Closing", e5[e5.Opening = 8] = "Opening", e5))(d6 || {});
function C() {
  return (0, import_react24.useContext)(n);
}
function c3({ value: o8, children: r12 }) {
  return import_react24.default.createElement(n.Provider, { value: o8 }, r12);
}

// node_modules/@headlessui/react/dist/components/keyboard.js
var o7 = ((r12) => (r12.Space = " ", r12.Enter = "Enter", r12.Escape = "Escape", r12.Backspace = "Backspace", r12.Delete = "Delete", r12.ArrowLeft = "ArrowLeft", r12.ArrowUp = "ArrowUp", r12.ArrowRight = "ArrowRight", r12.ArrowDown = "ArrowDown", r12.Home = "Home", r12.End = "End", r12.PageUp = "PageUp", r12.PageDown = "PageDown", r12.Tab = "Tab", r12))(o7 || {});

// node_modules/@headlessui/react/dist/hooks/use-watch.js
var import_react25 = __toESM(require_react(), 1);
function m5(u9, t13) {
  let e5 = (0, import_react25.useRef)([]), r12 = o3(u9);
  (0, import_react25.useEffect)(() => {
    let o8 = [...e5.current];
    for (let [n4, a9] of t13.entries())
      if (e5.current[n4] !== a9) {
        let l12 = r12(t13, o8);
        return e5.current = t13, l12;
      }
  }, [r12, ...t13]);
}

// node_modules/@headlessui/react/dist/utils/platform.js
function t7() {
  return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;
}

// node_modules/@headlessui/react/dist/components/dialog/dialog.js
var import_react36 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/components/focus-trap/focus-trap.js
var import_react31 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/hooks/use-tab-direction.js
var import_react27 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/hooks/use-window-event.js
var import_react26 = __toESM(require_react(), 1);
function s9(e5, r12, n4) {
  let o8 = s3(r12);
  (0, import_react26.useEffect)(() => {
    function t13(i9) {
      o8.current(i9);
    }
    return window.addEventListener(e5, t13, n4), () => window.removeEventListener(e5, t13, n4);
  }, [e5, n4]);
}

// node_modules/@headlessui/react/dist/hooks/use-tab-direction.js
var s10 = ((r12) => (r12[r12.Forwards = 0] = "Forwards", r12[r12.Backwards = 1] = "Backwards", r12))(s10 || {});
function n2() {
  let e5 = (0, import_react27.useRef)(0);
  return s9("keydown", (o8) => {
    o8.key === "Tab" && (e5.current = o8.shiftKey ? 1 : 0);
  }, !0), e5;
}

// node_modules/@headlessui/react/dist/hooks/use-is-mounted.js
var import_react28 = __toESM(require_react(), 1);
function f5() {
  let e5 = (0, import_react28.useRef)(!1);
  return l2(() => (e5.current = !0, () => {
    e5.current = !1;
  }), []), e5;
}

// node_modules/@headlessui/react/dist/hooks/use-owner.js
var import_react29 = __toESM(require_react(), 1);
function n3(...e5) {
  return (0, import_react29.useMemo)(() => e(...e5), [...e5]);
}

// node_modules/@headlessui/react/dist/hooks/use-event-listener.js
var import_react30 = __toESM(require_react(), 1);
function E3(n4, e5, a9, t13) {
  let i9 = s3(a9);
  (0, import_react30.useEffect)(() => {
    n4 = n4 ?? window;
    function r12(o8) {
      i9.current(o8);
    }
    return n4.addEventListener(e5, r12, t13), () => n4.removeEventListener(e5, r12, t13);
  }, [n4, e5, t13]);
}

// node_modules/@headlessui/react/dist/components/focus-trap/focus-trap.js
var z2 = "div", A4 = ((t13) => (t13[t13.None = 1] = "None", t13[t13.InitialFocus = 2] = "InitialFocus", t13[t13.TabLock = 4] = "TabLock", t13[t13.FocusLock = 8] = "FocusLock", t13[t13.RestoreFocus = 16] = "RestoreFocus", t13[t13.All = 30] = "All", t13))(A4 || {}), de2 = Object.assign(V2(function(u9, e5) {
  let l12 = (0, import_react31.useRef)(null), a9 = y(l12, e5), { initialFocus: m11, containers: t13, features: n4 = 30, ...E5 } = u9;
  l3() || (n4 = 1);
  let s14 = n3(l12);
  J2({ ownerDocument: s14 }, Boolean(n4 & 16));
  let S4 = Q2({ ownerDocument: s14, container: l12, initialFocus: m11 }, Boolean(n4 & 2));
  X2({ ownerDocument: s14, container: l12, containers: t13, previousActiveElement: S4 }, Boolean(n4 & 8));
  let H6 = n2(), R3 = o3((o8) => {
    let c9 = l12.current;
    !c9 || ((_3) => _3())(() => {
      u4(H6.current, { [s10.Forwards]: () => {
        I2(c9, L2.First, { skipElements: [o8.relatedTarget] });
      }, [s10.Backwards]: () => {
        I2(c9, L2.Last, { skipElements: [o8.relatedTarget] });
      } });
    });
  }), B4 = p3(), L7 = (0, import_react31.useRef)(!1), P5 = { ref: a9, onKeyDown(o8) {
    o8.key == "Tab" && (L7.current = !0, B4.requestAnimationFrame(() => {
      L7.current = !1;
    }));
  }, onBlur(o8) {
    let c9 = new Set(t13 == null ? void 0 : t13.current);
    c9.add(l12);
    let p8 = o8.relatedTarget;
    p8 instanceof HTMLElement && p8.dataset.headlessuiFocusGuard !== "true" && (h5(c9, p8) || (L7.current ? I2(l12.current, u4(H6.current, { [s10.Forwards]: () => L2.Next, [s10.Backwards]: () => L2.Previous }) | L2.WrapAround, { relativeTo: o8.target }) : o8.target instanceof HTMLElement && S(o8.target)));
  } };
  return import_react31.default.createElement(import_react31.default.Fragment, null, Boolean(n4 & 4) && import_react31.default.createElement(h4, { as: "button", type: "button", "data-headlessui-focus-guard": !0, onFocus: R3, features: s7.Focusable }), X({ ourProps: P5, theirProps: E5, defaultTag: z2, name: "FocusTrap" }), Boolean(n4 & 4) && import_react31.default.createElement(h4, { as: "button", type: "button", "data-headlessui-focus-guard": !0, onFocus: R3, features: s7.Focusable }));
}), { features: A4 });
function J2({ ownerDocument: r12 }, u9) {
  let e5 = (0, import_react31.useRef)(null);
  E3(r12 == null ? void 0 : r12.defaultView, "focusout", (a9) => {
    !u9 || e5.current || (e5.current = a9.target);
  }, !0), m5(() => {
    u9 || ((r12 == null ? void 0 : r12.activeElement) === (r12 == null ? void 0 : r12.body) && S(e5.current), e5.current = null);
  }, [u9]);
  let l12 = (0, import_react31.useRef)(!1);
  (0, import_react31.useEffect)(() => (l12.current = !1, () => {
    l12.current = !0, t4(() => {
      !l12.current || (S(e5.current), e5.current = null);
    });
  }), []);
}
function Q2({ ownerDocument: r12, container: u9, initialFocus: e5 }, l12) {
  let a9 = (0, import_react31.useRef)(null), m11 = f5();
  return m5(() => {
    if (!l12)
      return;
    let t13 = u9.current;
    !t13 || t4(() => {
      if (!m11.current)
        return;
      let n4 = r12 == null ? void 0 : r12.activeElement;
      if (e5 != null && e5.current) {
        if ((e5 == null ? void 0 : e5.current) === n4) {
          a9.current = n4;
          return;
        }
      } else if (t13.contains(n4)) {
        a9.current = n4;
        return;
      }
      e5 != null && e5.current ? S(e5.current) : I2(t13, L2.First) === N2.Error && console.warn("There are no focusable elements inside the <FocusTrap />"), a9.current = r12 == null ? void 0 : r12.activeElement;
    });
  }, [l12]), a9;
}
function X2({ ownerDocument: r12, container: u9, containers: e5, previousActiveElement: l12 }, a9) {
  let m11 = f5();
  E3(r12 == null ? void 0 : r12.defaultView, "focus", (t13) => {
    if (!a9 || !m11.current)
      return;
    let n4 = new Set(e5 == null ? void 0 : e5.current);
    n4.add(u9);
    let E5 = l12.current;
    if (!E5)
      return;
    let s14 = t13.target;
    s14 && s14 instanceof HTMLElement ? h5(n4, s14) ? (l12.current = s14, S(s14)) : (t13.preventDefault(), t13.stopPropagation(), S(E5)) : S(l12.current);
  }, !0);
}
function h5(r12, u9) {
  var e5;
  for (let l12 of r12)
    if ((e5 = l12.current) != null && e5.contains(u9))
      return !0;
  return !1;
}

// node_modules/@headlessui/react/dist/hooks/use-inert-others.js
var i7 = /* @__PURE__ */ new Set(), r6 = /* @__PURE__ */ new Map();
function u6(t13) {
  t13.setAttribute("aria-hidden", "true"), t13.inert = !0;
}
function l6(t13) {
  let n4 = r6.get(t13);
  !n4 || (n4["aria-hidden"] === null ? t13.removeAttribute("aria-hidden") : t13.setAttribute("aria-hidden", n4["aria-hidden"]), t13.inert = n4.inert);
}
function M2(t13, n4 = !0) {
  l2(() => {
    if (!n4 || !t13.current)
      return;
    let o8 = t13.current, a9 = e(o8);
    if (a9) {
      i7.add(o8);
      for (let e5 of r6.keys())
        e5.contains(o8) && (l6(e5), r6.delete(e5));
      return a9.querySelectorAll("body > *").forEach((e5) => {
        if (e5 instanceof HTMLElement) {
          for (let f9 of i7)
            if (e5.contains(f9))
              return;
          i7.size === 1 && (r6.set(e5, { "aria-hidden": e5.getAttribute("aria-hidden"), inert: e5.inert }), u6(e5));
        }
      }), () => {
        if (i7.delete(o8), i7.size > 0)
          a9.querySelectorAll("body > *").forEach((e5) => {
            if (e5 instanceof HTMLElement && !r6.has(e5)) {
              for (let f9 of i7)
                if (e5.contains(f9))
                  return;
              r6.set(e5, { "aria-hidden": e5.getAttribute("aria-hidden"), inert: e5.inert }), u6(e5);
            }
          });
        else
          for (let e5 of r6.keys())
            l6(e5), r6.delete(e5);
      };
    }
  }, [n4]);
}

// node_modules/@headlessui/react/dist/components/portal/portal.js
var import_react33 = __toESM(require_react(), 1), import_react_dom = __toESM(require_react_dom(), 1);

// node_modules/@headlessui/react/dist/internal/portal-force-root.js
var import_react32 = __toESM(require_react(), 1), e3 = (0, import_react32.createContext)(!1);
function l7() {
  return (0, import_react32.useContext)(e3);
}
function P3(o8) {
  return import_react32.default.createElement(e3.Provider, { value: o8.force }, o8.children);
}

// node_modules/@headlessui/react/dist/components/portal/portal.js
function x2(i9) {
  let u9 = l7(), o8 = (0, import_react33.useContext)(A5), e5 = n3(i9), [r12, f9] = (0, import_react33.useState)(() => {
    if (!u9 && o8 !== null || s2.isServer)
      return null;
    let n4 = e5 == null ? void 0 : e5.getElementById("headlessui-portal-root");
    if (n4)
      return n4;
    if (e5 === null)
      return null;
    let t13 = e5.createElement("div");
    return t13.setAttribute("id", "headlessui-portal-root"), e5.body.appendChild(t13);
  });
  return (0, import_react33.useEffect)(() => {
    r12 !== null && (e5 != null && e5.body.contains(r12) || e5 == null || e5.body.appendChild(r12));
  }, [r12, e5]), (0, import_react33.useEffect)(() => {
    u9 || o8 !== null && f9(o8.current);
  }, [o8, f9, u9]), r12;
}
var _ = import_react33.Fragment, U2 = V2(function(u9, o8) {
  let e5 = u9, r12 = (0, import_react33.useRef)(null), f9 = y(T3((a9) => {
    r12.current = a9;
  }), o8), n4 = n3(r12), t13 = x2(r12), [l12] = (0, import_react33.useState)(() => {
    var a9;
    return s2.isServer ? null : (a9 = n4 == null ? void 0 : n4.createElement("div")) != null ? a9 : null;
  }), b5 = l3(), p8 = (0, import_react33.useRef)(!1);
  return l2(() => {
    if (p8.current = !1, !(!t13 || !l12))
      return t13.contains(l12) || (l12.setAttribute("data-headlessui-portal", ""), t13.appendChild(l12)), () => {
        p8.current = !0, t4(() => {
          var a9;
          !p8.current || !t13 || !l12 || (l12 instanceof Node && t13.contains(l12) && t13.removeChild(l12), t13.childNodes.length <= 0 && ((a9 = t13.parentElement) == null || a9.removeChild(t13)));
        });
      };
  }, [t13, l12]), b5 ? !t13 || !l12 ? null : (0, import_react_dom.createPortal)(X({ ourProps: { ref: f9 }, theirProps: e5, defaultTag: _, name: "Portal" }), l12) : null;
}), j3 = import_react33.Fragment, A5 = (0, import_react33.createContext)(null), F4 = V2(function(u9, o8) {
  let { target: e5, ...r12 } = u9, n4 = { ref: y(o8) };
  return import_react33.default.createElement(A5.Provider, { value: e5 }, X({ ourProps: n4, theirProps: r12, defaultTag: j3, name: "Popover.Group" }));
}), $ = Object.assign(U2, { Group: F4 });

// node_modules/@headlessui/react/dist/components/description/description.js
var import_react34 = __toESM(require_react(), 1);
var d11 = (0, import_react34.createContext)(null);
function u7() {
  let n4 = (0, import_react34.useContext)(d11);
  if (n4 === null) {
    let t13 = new Error("You used a <Description /> component, but it is not inside a relevant parent.");
    throw Error.captureStackTrace && Error.captureStackTrace(t13, u7), t13;
  }
  return n4;
}
function k() {
  let [n4, t13] = (0, import_react34.useState)([]);
  return [n4.length > 0 ? n4.join(" ") : void 0, (0, import_react34.useMemo)(() => function(e5) {
    let i9 = o3((r12) => (t13((o8) => [...o8, r12]), () => t13((o8) => {
      let s14 = o8.slice(), p8 = s14.indexOf(r12);
      return p8 !== -1 && s14.splice(p8, 1), s14;
    }))), a9 = (0, import_react34.useMemo)(() => ({ register: i9, slot: e5.slot, name: e5.name, props: e5.props }), [i9, e5.slot, e5.name, e5.props]);
    return import_react34.default.createElement(d11.Provider, { value: a9 }, e5.children);
  }, [t13])];
}
var S2 = "p", F5 = V2(function(t13, c9) {
  let e5 = I(), { id: i9 = `headlessui-description-${e5}`, ...a9 } = t13, r12 = u7(), o8 = y(c9);
  l2(() => r12.register(i9), [i9, r12.register]);
  let s14 = { ref: o8, ...r12.props, id: i9 };
  return X({ ourProps: s14, theirProps: a9, slot: r12.slot || {}, defaultTag: S2, name: r12.name || "Description" });
});

// node_modules/@headlessui/react/dist/internal/stack-context.js
var import_react35 = __toESM(require_react(), 1);
var a4 = (0, import_react35.createContext)(() => {
});
a4.displayName = "StackContext";
var s12 = ((e5) => (e5[e5.Add = 0] = "Add", e5[e5.Remove = 1] = "Remove", e5))(s12 || {});
function x3() {
  return (0, import_react35.useContext)(a4);
}
function M3({ children: i9, onUpdate: r12, type: e5, element: n4, enabled: u9 }) {
  let l12 = x3(), o8 = o3((...t13) => {
    r12 == null || r12(...t13), l12(...t13);
  });
  return l2(() => {
    let t13 = u9 === void 0 || u9 === !0;
    return t13 && o8(0, e5, n4), () => {
      t13 && o8(1, e5, n4);
    };
  }, [o8, e5, n4, u9]), import_react35.default.createElement(a4.Provider, { value: o8 }, i9);
}

// node_modules/@headlessui/react/dist/use-sync-external-store-shim/index.js
var e4 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/use-sync-external-store-shim/useSyncExternalStoreShimClient.js
var l9 = __toESM(require_react(), 1);
function i8(e5, t13) {
  return e5 === t13 && (e5 !== 0 || 1 / e5 === 1 / t13) || e5 !== e5 && t13 !== t13;
}
var d13 = typeof Object.is == "function" ? Object.is : i8, { useState: u8, useEffect: h7, useLayoutEffect: f7, useDebugValue: p5 } = l9;
function y3(e5, t13, c9) {
  let a9 = t13(), [{ inst: n4 }, o8] = u8({ inst: { value: a9, getSnapshot: t13 } });
  return f7(() => {
    n4.value = a9, n4.getSnapshot = t13, r8(n4) && o8({ inst: n4 });
  }, [e5, a9, t13]), h7(() => (r8(n4) && o8({ inst: n4 }), e5(() => {
    r8(n4) && o8({ inst: n4 });
  })), [e5]), p5(a9), a9;
}
function r8(e5) {
  let t13 = e5.getSnapshot, c9 = e5.value;
  try {
    let a9 = t13();
    return !d13(c9, a9);
  } catch {
    return !0;
  }
}

// node_modules/@headlessui/react/dist/use-sync-external-store-shim/useSyncExternalStoreShimServer.js
function t11(r12, e5, n4) {
  return e5();
}

// node_modules/@headlessui/react/dist/use-sync-external-store-shim/index.js
var r9 = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", s13 = !r9, c6 = s13 ? t11 : y3, a5 = "useSyncExternalStore" in e4 ? ((n4) => n4.useSyncExternalStore)(e4) : c6;

// node_modules/@headlessui/react/dist/hooks/use-store.js
function S3(t13) {
  return a5(t13.subscribe, t13.getSnapshot, t13.getSnapshot);
}

// node_modules/@headlessui/react/dist/utils/store.js
function a6(o8, r12) {
  let t13 = o8(), n4 = /* @__PURE__ */ new Set();
  return { getSnapshot() {
    return t13;
  }, subscribe(e5) {
    return n4.add(e5), () => n4.delete(e5);
  }, dispatch(e5, ...s14) {
    let i9 = r12[e5].call(t13, ...s14);
    i9 && (t13 = i9, n4.forEach((c9) => c9()));
  } };
}

// node_modules/@headlessui/react/dist/hooks/document-overflow/adjust-scrollbar-padding.js
function c7() {
  let o8;
  return { before({ doc: e5 }) {
    var l12;
    let n4 = e5.documentElement;
    o8 = ((l12 = e5.defaultView) != null ? l12 : window).innerWidth - n4.clientWidth;
  }, after({ doc: e5, d: n4 }) {
    let t13 = e5.documentElement, l12 = t13.clientWidth - t13.offsetWidth, r12 = o8 - l12;
    n4.style(t13, "paddingRight", `${r12}px`);
  } };
}

// node_modules/@headlessui/react/dist/hooks/document-overflow/handle-ios-locking.js
function p6() {
  if (!t7())
    return {};
  let o8;
  return { before() {
    o8 = window.pageYOffset;
  }, after({ doc: r12, d: l12, meta: s14 }) {
    function i9(e5) {
      return s14.containers.flatMap((t13) => t13()).some((t13) => t13.contains(e5));
    }
    l12.style(r12.body, "marginTop", `-${o8}px`), window.scrollTo(0, 0);
    let n4 = null;
    l12.addEventListener(r12, "click", (e5) => {
      if (e5.target instanceof HTMLElement)
        try {
          let t13 = e5.target.closest("a");
          if (!t13)
            return;
          let { hash: c9 } = new URL(t13.href), a9 = r12.querySelector(c9);
          a9 && !i9(a9) && (n4 = a9);
        } catch {
        }
    }, !0), l12.addEventListener(r12, "touchmove", (e5) => {
      e5.target instanceof HTMLElement && !i9(e5.target) && e5.preventDefault();
    }, { passive: !1 }), l12.add(() => {
      window.scrollTo(0, window.pageYOffset + o8), n4 && n4.isConnected && (n4.scrollIntoView({ block: "nearest" }), n4 = null);
    });
  } };
}

// node_modules/@headlessui/react/dist/hooks/document-overflow/prevent-scroll.js
function l10() {
  return { before({ doc: e5, d: o8 }) {
    o8.style(e5.documentElement, "overflow", "hidden");
  } };
}

// node_modules/@headlessui/react/dist/hooks/document-overflow/overflow-store.js
function m9(e5) {
  let n4 = {};
  for (let t13 of e5)
    Object.assign(n4, t13(n4));
  return n4;
}
var a7 = a6(() => /* @__PURE__ */ new Map(), { PUSH(e5, n4) {
  var o8;
  let t13 = (o8 = this.get(e5)) != null ? o8 : { doc: e5, count: 0, d: m2(), meta: /* @__PURE__ */ new Set() };
  return t13.count++, t13.meta.add(n4), this.set(e5, t13), this;
}, POP(e5, n4) {
  let t13 = this.get(e5);
  return t13 && (t13.count--, t13.meta.delete(n4)), this;
}, SCROLL_PREVENT({ doc: e5, d: n4, meta: t13 }) {
  let o8 = { doc: e5, d: n4, meta: m9(t13) }, c9 = [p6(), c7(), l10()];
  c9.forEach(({ before: r12 }) => r12 == null ? void 0 : r12(o8)), c9.forEach(({ after: r12 }) => r12 == null ? void 0 : r12(o8));
}, SCROLL_ALLOW({ d: e5 }) {
  e5.dispose();
}, TEARDOWN({ doc: e5 }) {
  this.delete(e5);
} });
a7.subscribe(() => {
  let e5 = a7.getSnapshot(), n4 = /* @__PURE__ */ new Map();
  for (let [t13] of e5)
    n4.set(t13, t13.documentElement.style.overflow);
  for (let t13 of e5.values()) {
    let o8 = n4.get(t13.doc) === "hidden", c9 = t13.count !== 0;
    (c9 && !o8 || !c9 && o8) && a7.dispatch(t13.count > 0 ? "SCROLL_PREVENT" : "SCROLL_ALLOW", t13), t13.count === 0 && a7.dispatch("TEARDOWN", t13);
  }
});

// node_modules/@headlessui/react/dist/hooks/document-overflow/use-document-overflow.js
function p7(e5, r12, n4) {
  let f9 = S3(a7), o8 = e5 ? f9.get(e5) : void 0, i9 = o8 ? o8.count > 0 : !1;
  return l2(() => {
    if (!(!e5 || !r12))
      return a7.dispatch("PUSH", e5, n4), () => a7.dispatch("POP", e5, n4);
  }, [r12, e5]), i9;
}

// node_modules/@headlessui/react/dist/components/dialog/dialog.js
var Oe = ((t13) => (t13[t13.Open = 0] = "Open", t13[t13.Closed = 1] = "Closed", t13))(Oe || {}), Se2 = ((e5) => (e5[e5.SetTitleId = 0] = "SetTitleId", e5))(Se2 || {}), Le2 = { [0](r12, e5) {
  return r12.titleId === e5.id ? r12 : { ...r12, titleId: e5.id };
} }, M4 = (0, import_react36.createContext)(null);
M4.displayName = "DialogContext";
function L5(r12) {
  let e5 = (0, import_react36.useContext)(M4);
  if (e5 === null) {
    let t13 = new Error(`<${r12} /> is missing a parent <Dialog /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(t13, L5), t13;
  }
  return e5;
}
function ke(r12, e5, t13 = () => [document.body]) {
  p7(r12, e5, (u9) => {
    var l12;
    return { containers: [...(l12 = u9.containers) != null ? l12 : [], t13] };
  });
}
function Fe(r12, e5) {
  return u4(e5.type, Le2, r12, e5);
}
var Ie = "div", Me = j2.RenderStrategy | j2.Static, _e2 = V2(function(e5, t13) {
  let u9 = I(), { id: l12 = `headlessui-dialog-${u9}`, open: a9, onClose: o8, initialFocus: i9, __demoMode: c9 = !1, ...g7 } = e5, [D4, k2] = (0, import_react36.useState)(0), n4 = C();
  a9 === void 0 && n4 !== null && (a9 = (n4 & d6.Open) === d6.Open);
  let _3 = (0, import_react36.useRef)(/* @__PURE__ */ new Set()), T8 = (0, import_react36.useRef)(null), Q5 = y(T8, t13), $3 = (0, import_react36.useRef)(null), P5 = n3(T8), N5 = e5.hasOwnProperty("open") || n4 !== null, W2 = e5.hasOwnProperty("onClose");
  if (!N5 && !W2)
    throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");
  if (!N5)
    throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");
  if (!W2)
    throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");
  if (typeof a9 != "boolean")
    throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${a9}`);
  if (typeof o8 != "function")
    throw new Error(`You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${o8}`);
  let s14 = a9 ? 0 : 1, [y4, X5] = (0, import_react36.useReducer)(Fe, { titleId: null, descriptionId: null, panelRef: (0, import_react36.createRef)() }), R3 = o3(() => o8(!1)), Y3 = o3((p8) => X5({ type: 0, id: p8 })), w4 = l3() ? c9 ? !1 : s14 === 0 : !1, F7 = D4 > 1, Z4 = (0, import_react36.useContext)(M4) !== null, ee2 = F7 ? "parent" : "leaf", j5 = n4 !== null ? (n4 & d6.Closing) === d6.Closing : !1, te2 = (() => !F7 || j5 ? !1 : w4)();
  M2(T8, te2);
  let K4 = o3(() => {
    var E5, f9;
    return [...Array.from((E5 = P5 == null ? void 0 : P5.querySelectorAll("html > *, body > *, [data-headlessui-portal]")) != null ? E5 : []).filter((m11) => !(m11 === document.body || m11 === document.head || !(m11 instanceof HTMLElement) || m11.contains($3.current) || y4.panelRef.current && m11.contains(y4.panelRef.current))), (f9 = y4.panelRef.current) != null ? f9 : T8.current];
  }), oe3 = (() => !(!w4 || F7))();
  L3(() => K4(), R3, oe3);
  let re4 = (() => !(F7 || s14 !== 0))();
  E3(P5 == null ? void 0 : P5.defaultView, "keydown", (p8) => {
    !re4 || p8.defaultPrevented || p8.key === o7.Escape && (p8.preventDefault(), p8.stopPropagation(), R3());
  });
  let le4 = (() => !(j5 || s14 !== 0 || Z4))();
  ke(P5, le4, K4), (0, import_react36.useEffect)(() => {
    if (s14 !== 0 || !T8.current)
      return;
    let p8 = new IntersectionObserver((E5) => {
      for (let f9 of E5)
        f9.boundingClientRect.x === 0 && f9.boundingClientRect.y === 0 && f9.boundingClientRect.width === 0 && f9.boundingClientRect.height === 0 && R3();
    });
    return p8.observe(T8.current), () => p8.disconnect();
  }, [s14, T8, R3]);
  let [ne2, ae2] = k(), ie4 = (0, import_react36.useMemo)(() => [{ dialogState: s14, close: R3, setTitleId: Y3 }, y4], [s14, y4, R3, Y3]), V4 = (0, import_react36.useMemo)(() => ({ open: s14 === 0 }), [s14]), se5 = { ref: Q5, id: l12, role: "dialog", "aria-modal": s14 === 0 ? !0 : void 0, "aria-labelledby": y4.titleId, "aria-describedby": ne2 };
  return import_react36.default.createElement(M3, { type: "Dialog", enabled: s14 === 0, element: T8, onUpdate: o3((p8, E5, f9) => {
    E5 === "Dialog" && u4(p8, { [s12.Add]() {
      _3.current.add(f9), k2((m11) => m11 + 1);
    }, [s12.Remove]() {
      _3.current.add(f9), k2((m11) => m11 - 1);
    } });
  }) }, import_react36.default.createElement(P3, { force: !0 }, import_react36.default.createElement($, null, import_react36.default.createElement(M4.Provider, { value: ie4 }, import_react36.default.createElement($.Group, { target: T8 }, import_react36.default.createElement(P3, { force: !1 }, import_react36.default.createElement(ae2, { slot: V4, name: "Dialog.Description" }, import_react36.default.createElement(de2, { initialFocus: i9, containers: _3, features: w4 ? u4(ee2, { parent: de2.features.RestoreFocus, leaf: de2.features.All & ~de2.features.FocusLock }) : de2.features.None }, X({ ourProps: se5, theirProps: g7, slot: V4, defaultTag: Ie, features: Me, visible: s14 === 0, name: "Dialog" })))))))), import_react36.default.createElement(h4, { features: s7.Hidden, ref: $3 }));
}), we2 = "div", xe2 = V2(function(e5, t13) {
  let u9 = I(), { id: l12 = `headlessui-dialog-overlay-${u9}`, ...a9 } = e5, [{ dialogState: o8, close: i9 }] = L5("Dialog.Overlay"), c9 = y(t13), g7 = o3((n4) => {
    if (n4.target === n4.currentTarget) {
      if (r4(n4.currentTarget))
        return n4.preventDefault();
      n4.preventDefault(), n4.stopPropagation(), i9();
    }
  }), D4 = (0, import_react36.useMemo)(() => ({ open: o8 === 0 }), [o8]);
  return X({ ourProps: { ref: c9, id: l12, "aria-hidden": !0, onClick: g7 }, theirProps: a9, slot: D4, defaultTag: we2, name: "Dialog.Overlay" });
}), He2 = "div", Ge2 = V2(function(e5, t13) {
  let u9 = I(), { id: l12 = `headlessui-dialog-backdrop-${u9}`, ...a9 } = e5, [{ dialogState: o8 }, i9] = L5("Dialog.Backdrop"), c9 = y(t13);
  (0, import_react36.useEffect)(() => {
    if (i9.panelRef.current === null)
      throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.");
  }, [i9.panelRef]);
  let g7 = (0, import_react36.useMemo)(() => ({ open: o8 === 0 }), [o8]);
  return import_react36.default.createElement(P3, { force: !0 }, import_react36.default.createElement($, null, X({ ourProps: { ref: c9, id: l12, "aria-hidden": !0 }, theirProps: a9, slot: g7, defaultTag: He2, name: "Dialog.Backdrop" })));
}), Be2 = "div", Ue2 = V2(function(e5, t13) {
  let u9 = I(), { id: l12 = `headlessui-dialog-panel-${u9}`, ...a9 } = e5, [{ dialogState: o8 }, i9] = L5("Dialog.Panel"), c9 = y(t13, i9.panelRef), g7 = (0, import_react36.useMemo)(() => ({ open: o8 === 0 }), [o8]), D4 = o3((n4) => {
    n4.stopPropagation();
  });
  return X({ ourProps: { ref: c9, id: l12, onClick: D4 }, theirProps: a9, slot: g7, defaultTag: Be2, name: "Dialog.Panel" });
}), $e = "h2", Ne = V2(function(e5, t13) {
  let u9 = I(), { id: l12 = `headlessui-dialog-title-${u9}`, ...a9 } = e5, [{ dialogState: o8, setTitleId: i9 }] = L5("Dialog.Title"), c9 = y(t13);
  (0, import_react36.useEffect)(() => (i9(l12), () => i9(null)), [l12, i9]);
  let g7 = (0, import_react36.useMemo)(() => ({ open: o8 === 0 }), [o8]);
  return X({ ourProps: { ref: c9, id: l12 }, theirProps: a9, slot: g7, defaultTag: $e, name: "Dialog.Title" });
}), yt = Object.assign(_e2, { Backdrop: Ge2, Panel: Ue2, Overlay: xe2, Title: Ne, Description: F5 });

// node_modules/@headlessui/react/dist/components/disclosure/disclosure.js
var import_react38 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/start-transition.js
var import_react37 = __toESM(require_react(), 1), t12, a8 = (t12 = import_react37.default.startTransition) != null ? t12 : function(i9) {
  i9();
};

// node_modules/@headlessui/react/dist/components/disclosure/disclosure.js
var Q3 = ((l12) => (l12[l12.Open = 0] = "Open", l12[l12.Closed = 1] = "Closed", l12))(Q3 || {}), V3 = ((t13) => (t13[t13.ToggleDisclosure = 0] = "ToggleDisclosure", t13[t13.CloseDisclosure = 1] = "CloseDisclosure", t13[t13.SetButtonId = 2] = "SetButtonId", t13[t13.SetPanelId = 3] = "SetPanelId", t13[t13.LinkPanel = 4] = "LinkPanel", t13[t13.UnlinkPanel = 5] = "UnlinkPanel", t13))(V3 || {}), X3 = { [0]: (e5) => ({ ...e5, disclosureState: u4(e5.disclosureState, { [0]: 1, [1]: 0 }) }), [1]: (e5) => e5.disclosureState === 1 ? e5 : { ...e5, disclosureState: 1 }, [4](e5) {
  return e5.linkedPanel === !0 ? e5 : { ...e5, linkedPanel: !0 };
}, [5](e5) {
  return e5.linkedPanel === !1 ? e5 : { ...e5, linkedPanel: !1 };
}, [2](e5, n4) {
  return e5.buttonId === n4.buttonId ? e5 : { ...e5, buttonId: n4.buttonId };
}, [3](e5, n4) {
  return e5.panelId === n4.panelId ? e5 : { ...e5, panelId: n4.panelId };
} }, B2 = (0, import_react38.createContext)(null);
B2.displayName = "DisclosureContext";
function v3(e5) {
  let n4 = (0, import_react38.useContext)(B2);
  if (n4 === null) {
    let l12 = new Error(`<${e5} /> is missing a parent <Disclosure /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(l12, v3), l12;
  }
  return n4;
}
var h8 = (0, import_react38.createContext)(null);
h8.displayName = "DisclosureAPIContext";
function K2(e5) {
  let n4 = (0, import_react38.useContext)(h8);
  if (n4 === null) {
    let l12 = new Error(`<${e5} /> is missing a parent <Disclosure /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(l12, K2), l12;
  }
  return n4;
}
var H4 = (0, import_react38.createContext)(null);
H4.displayName = "DisclosurePanelContext";
function Y() {
  return (0, import_react38.useContext)(H4);
}
function Z(e5, n4) {
  return u4(n4.type, X3, e5, n4);
}
var ee = import_react38.Fragment, te = V2(function(n4, l12) {
  let { defaultOpen: y4 = !1, ...u9 } = n4, T8 = (0, import_react38.useRef)(null), t13 = y(l12, T3((a9) => {
    T8.current = a9;
  }, n4.as === void 0 || n4.as === import_react38.Fragment)), o8 = (0, import_react38.useRef)(null), f9 = (0, import_react38.useRef)(null), s14 = (0, import_react38.useReducer)(Z, { disclosureState: y4 ? 0 : 1, linkedPanel: !1, buttonRef: f9, panelRef: o8, buttonId: null, panelId: null }), [{ disclosureState: i9, buttonId: p8 }, D4] = s14, d15 = o3((a9) => {
    D4({ type: 1 });
    let r12 = e(T8);
    if (!r12 || !p8)
      return;
    let c9 = (() => a9 ? a9 instanceof HTMLElement ? a9 : a9.current instanceof HTMLElement ? a9.current : r12.getElementById(p8) : r12.getElementById(p8))();
    c9 == null || c9.focus();
  }), P5 = (0, import_react38.useMemo)(() => ({ close: d15 }), [d15]), I4 = (0, import_react38.useMemo)(() => ({ open: i9 === 0, close: d15 }), [i9, d15]), S4 = { ref: t13 };
  return import_react38.default.createElement(B2.Provider, { value: s14 }, import_react38.default.createElement(h8.Provider, { value: P5 }, import_react38.default.createElement(c3, { value: u4(i9, { [0]: d6.Open, [1]: d6.Closed }) }, X({ ourProps: S4, theirProps: u9, slot: I4, defaultTag: ee, name: "Disclosure" }))));
}), ne = "button", le2 = V2(function(n4, l12) {
  let y4 = I(), { id: u9 = `headlessui-disclosure-button-${y4}`, ...T8 } = n4, [t13, o8] = v3("Disclosure.Button"), f9 = Y(), s14 = f9 === null ? !1 : f9 === t13.panelId, i9 = (0, import_react38.useRef)(null), p8 = y(i9, l12, s14 ? null : t13.buttonRef);
  (0, import_react38.useEffect)(() => {
    if (!s14)
      return o8({ type: 2, buttonId: u9 }), () => {
        o8({ type: 2, buttonId: null });
      };
  }, [u9, o8, s14]);
  let D4 = o3((r12) => {
    var c9;
    if (s14) {
      if (t13.disclosureState === 1)
        return;
      switch (r12.key) {
        case o7.Space:
        case o7.Enter:
          r12.preventDefault(), r12.stopPropagation(), o8({ type: 0 }), (c9 = t13.buttonRef.current) == null || c9.focus();
          break;
      }
    } else
      switch (r12.key) {
        case o7.Space:
        case o7.Enter:
          r12.preventDefault(), r12.stopPropagation(), o8({ type: 0 });
          break;
      }
  }), d15 = o3((r12) => {
    switch (r12.key) {
      case o7.Space:
        r12.preventDefault();
        break;
    }
  }), P5 = o3((r12) => {
    var c9;
    r4(r12.currentTarget) || n4.disabled || (s14 ? (o8({ type: 0 }), (c9 = t13.buttonRef.current) == null || c9.focus()) : o8({ type: 0 }));
  }), I4 = (0, import_react38.useMemo)(() => ({ open: t13.disclosureState === 0 }), [t13]), S4 = s6(n4, i9), a9 = s14 ? { ref: p8, type: S4, onKeyDown: D4, onClick: P5 } : { ref: p8, id: u9, type: S4, "aria-expanded": n4.disabled ? void 0 : t13.disclosureState === 0, "aria-controls": t13.linkedPanel ? t13.panelId : void 0, onKeyDown: D4, onKeyUp: d15, onClick: P5 };
  return X({ ourProps: a9, theirProps: T8, slot: I4, defaultTag: ne, name: "Disclosure.Button" });
}), re2 = "div", oe = j2.RenderStrategy | j2.Static, se2 = V2(function(n4, l12) {
  let y4 = I(), { id: u9 = `headlessui-disclosure-panel-${y4}`, ...T8 } = n4, [t13, o8] = v3("Disclosure.Panel"), { close: f9 } = K2("Disclosure.Panel"), s14 = y(l12, t13.panelRef, (P5) => {
    a8(() => o8({ type: P5 ? 4 : 5 }));
  });
  (0, import_react38.useEffect)(() => (o8({ type: 3, panelId: u9 }), () => {
    o8({ type: 3, panelId: null });
  }), [u9, o8]);
  let i9 = C(), p8 = (() => i9 !== null ? (i9 & d6.Open) === d6.Open : t13.disclosureState === 0)(), D4 = (0, import_react38.useMemo)(() => ({ open: t13.disclosureState === 0, close: f9 }), [t13, f9]), d15 = { ref: s14, id: u9 };
  return import_react38.default.createElement(H4.Provider, { value: t13.panelId }, X({ ourProps: d15, theirProps: T8, slot: D4, defaultTag: re2, features: oe, visible: p8, name: "Disclosure.Panel" }));
}), ke2 = Object.assign(te, { Button: le2, Panel: se2 });

// node_modules/@headlessui/react/dist/components/popover/popover.js
var import_react39 = __toESM(require_react(), 1);
var Me2 = ((p8) => (p8[p8.Open = 0] = "Open", p8[p8.Closed = 1] = "Closed", p8))(Me2 || {}), Le3 = ((t13) => (t13[t13.TogglePopover = 0] = "TogglePopover", t13[t13.ClosePopover = 1] = "ClosePopover", t13[t13.SetButton = 2] = "SetButton", t13[t13.SetButtonId = 3] = "SetButtonId", t13[t13.SetPanel = 4] = "SetPanel", t13[t13.SetPanelId = 5] = "SetPanelId", t13))(Le3 || {}), Fe2 = { [0]: (n4) => ({ ...n4, popoverState: u4(n4.popoverState, { [0]: 1, [1]: 0 }) }), [1](n4) {
  return n4.popoverState === 1 ? n4 : { ...n4, popoverState: 1 };
}, [2](n4, r12) {
  return n4.button === r12.button ? n4 : { ...n4, button: r12.button };
}, [3](n4, r12) {
  return n4.buttonId === r12.buttonId ? n4 : { ...n4, buttonId: r12.buttonId };
}, [4](n4, r12) {
  return n4.panel === r12.panel ? n4 : { ...n4, panel: r12.panel };
}, [5](n4, r12) {
  return n4.panelId === r12.panelId ? n4 : { ...n4, panelId: r12.panelId };
} }, le3 = (0, import_react39.createContext)(null);
le3.displayName = "PopoverContext";
function Z2(n4) {
  let r12 = (0, import_react39.useContext)(le3);
  if (r12 === null) {
    let p8 = new Error(`<${n4} /> is missing a parent <Popover /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(p8, Z2), p8;
  }
  return r12;
}
var ae = (0, import_react39.createContext)(null);
ae.displayName = "PopoverAPIContext";
function ue3(n4) {
  let r12 = (0, import_react39.useContext)(ae);
  if (r12 === null) {
    let p8 = new Error(`<${n4} /> is missing a parent <Popover /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(p8, ue3), p8;
  }
  return r12;
}
var se3 = (0, import_react39.createContext)(null);
se3.displayName = "PopoverGroupContext";
function Te2() {
  return (0, import_react39.useContext)(se3);
}
var pe3 = (0, import_react39.createContext)(null);
pe3.displayName = "PopoverPanelContext";
function he2() {
  return (0, import_react39.useContext)(pe3);
}
function Be3(n4, r12) {
  return u4(r12.type, Fe2, n4, r12);
}
var xe3 = "div", De = V2(function(r12, p8) {
  var x5;
  let O2 = (0, import_react39.useRef)(null), R3 = y(p8, T3((e5) => {
    O2.current = e5;
  })), C3 = (0, import_react39.useRef)([]), t13 = (0, import_react39.useReducer)(Be3, { popoverState: 1, buttons: C3, button: null, buttonId: null, panel: null, panelId: null, beforePanelSentinel: (0, import_react39.createRef)(), afterPanelSentinel: (0, import_react39.createRef)() }), [{ popoverState: o8, button: a9, buttonId: v5, panel: c9, panelId: M7, beforePanelSentinel: T8, afterPanelSentinel: d15 }, i9] = t13, u9 = n3((x5 = O2.current) != null ? x5 : a9), f9 = (0, import_react39.useMemo)(() => {
    if (!a9 || !c9)
      return !1;
    for (let K4 of document.querySelectorAll("body > *"))
      if (Number(K4 == null ? void 0 : K4.contains(a9)) ^ Number(K4 == null ? void 0 : K4.contains(c9)))
        return !0;
    let e5 = E(), l12 = e5.indexOf(a9), A6 = (l12 + e5.length - 1) % e5.length, b5 = (l12 + 1) % e5.length, G2 = e5[A6], me2 = e5[b5];
    return !c9.contains(G2) && !c9.contains(me2);
  }, [a9, c9]), g7 = s3(v5), y4 = s3(M7), L7 = (0, import_react39.useMemo)(() => ({ buttonId: g7, panelId: y4, close: () => i9({ type: 1 }) }), [g7, y4, i9]), I4 = Te2(), F7 = I4 == null ? void 0 : I4.registerPopover, V4 = o3(() => {
    var e5;
    return (e5 = I4 == null ? void 0 : I4.isFocusWithinPopoverGroup()) != null ? e5 : (u9 == null ? void 0 : u9.activeElement) && ((a9 == null ? void 0 : a9.contains(u9.activeElement)) || (c9 == null ? void 0 : c9.contains(u9.activeElement)));
  });
  (0, import_react39.useEffect)(() => F7 == null ? void 0 : F7(L7), [F7, L7]), E3(u9 == null ? void 0 : u9.defaultView, "focus", (e5) => {
    var l12, A6, b5, G2;
    o8 === 0 && (V4() || !a9 || !c9 || e5.target !== window && ((A6 = (l12 = T8.current) == null ? void 0 : l12.contains) != null && A6.call(l12, e5.target) || (G2 = (b5 = d15.current) == null ? void 0 : b5.contains) != null && G2.call(b5, e5.target) || i9({ type: 1 })));
  }, !0), L3([a9, c9], (e5, l12) => {
    i9({ type: 1 }), h2(l12, F3.Loose) || (e5.preventDefault(), a9 == null || a9.focus());
  }, o8 === 0);
  let h9 = o3((e5) => {
    i9({ type: 1 });
    let l12 = (() => e5 ? e5 instanceof HTMLElement ? e5 : "current" in e5 && e5.current instanceof HTMLElement ? e5.current : a9 : a9)();
    l12 == null || l12.focus();
  }), s14 = (0, import_react39.useMemo)(() => ({ close: h9, isPortalled: f9 }), [h9, f9]), m11 = (0, import_react39.useMemo)(() => ({ open: o8 === 0, close: h9 }), [o8, h9]), E5 = r12, P5 = { ref: R3 };
  return import_react39.default.createElement(le3.Provider, { value: t13 }, import_react39.default.createElement(ae.Provider, { value: s14 }, import_react39.default.createElement(c3, { value: u4(o8, { [0]: d6.Open, [1]: d6.Closed }) }, X({ ourProps: P5, theirProps: E5, slot: m11, defaultTag: xe3, name: "Popover" }))));
}), He3 = "button", ke3 = V2(function(r12, p8) {
  let O2 = I(), { id: R3 = `headlessui-popover-button-${O2}`, ...C3 } = r12, [t13, o8] = Z2("Popover.Button"), { isPortalled: a9 } = ue3("Popover.Button"), v5 = (0, import_react39.useRef)(null), c9 = `headlessui-focus-sentinel-${I()}`, M7 = Te2(), T8 = M7 == null ? void 0 : M7.closeOthers, i9 = he2() !== null;
  (0, import_react39.useEffect)(() => {
    if (!i9)
      return o8({ type: 3, buttonId: R3 }), () => {
        o8({ type: 3, buttonId: null });
      };
  }, [i9, R3, o8]);
  let [u9] = (0, import_react39.useState)(() => Symbol()), f9 = y(v5, p8, i9 ? null : (e5) => {
    if (e5)
      t13.buttons.current.push(u9);
    else {
      let l12 = t13.buttons.current.indexOf(u9);
      l12 !== -1 && t13.buttons.current.splice(l12, 1);
    }
    t13.buttons.current.length > 1 && console.warn("You are already using a <Popover.Button /> but only 1 <Popover.Button /> is supported."), e5 && o8({ type: 2, button: e5 });
  }), g7 = y(v5, p8), y4 = n3(v5), L7 = o3((e5) => {
    var l12, A6, b5;
    if (i9) {
      if (t13.popoverState === 1)
        return;
      switch (e5.key) {
        case o7.Space:
        case o7.Enter:
          e5.preventDefault(), (A6 = (l12 = e5.target).click) == null || A6.call(l12), o8({ type: 1 }), (b5 = t13.button) == null || b5.focus();
          break;
      }
    } else
      switch (e5.key) {
        case o7.Space:
        case o7.Enter:
          e5.preventDefault(), e5.stopPropagation(), t13.popoverState === 1 && (T8 == null || T8(t13.buttonId)), o8({ type: 0 });
          break;
        case o7.Escape:
          if (t13.popoverState !== 0)
            return T8 == null ? void 0 : T8(t13.buttonId);
          if (!v5.current || (y4 == null ? void 0 : y4.activeElement) && !v5.current.contains(y4.activeElement))
            return;
          e5.preventDefault(), e5.stopPropagation(), o8({ type: 1 });
          break;
      }
  }), I4 = o3((e5) => {
    i9 || e5.key === o7.Space && e5.preventDefault();
  }), F7 = o3((e5) => {
    var l12, A6;
    r4(e5.currentTarget) || r12.disabled || (i9 ? (o8({ type: 1 }), (l12 = t13.button) == null || l12.focus()) : (e5.preventDefault(), e5.stopPropagation(), t13.popoverState === 1 && (T8 == null || T8(t13.buttonId)), o8({ type: 0 }), (A6 = t13.button) == null || A6.focus()));
  }), V4 = o3((e5) => {
    e5.preventDefault(), e5.stopPropagation();
  }), h9 = t13.popoverState === 0, s14 = (0, import_react39.useMemo)(() => ({ open: h9 }), [h9]), m11 = s6(r12, v5), E5 = i9 ? { ref: g7, type: m11, onKeyDown: L7, onClick: F7 } : { ref: f9, id: t13.buttonId, type: m11, "aria-expanded": r12.disabled ? void 0 : t13.popoverState === 0, "aria-controls": t13.panel ? t13.panelId : void 0, onKeyDown: L7, onKeyUp: I4, onClick: F7, onMouseDown: V4 }, P5 = n2(), x5 = o3(() => {
    let e5 = t13.panel;
    if (!e5)
      return;
    function l12() {
      u4(P5.current, { [s10.Forwards]: () => I2(e5, L2.First), [s10.Backwards]: () => I2(e5, L2.Last) }) === N2.Error && I2(E().filter((b5) => b5.dataset.headlessuiFocusGuard !== "true"), u4(P5.current, { [s10.Forwards]: L2.Next, [s10.Backwards]: L2.Previous }), { relativeTo: t13.button });
    }
    l12();
  });
  return import_react39.default.createElement(import_react39.default.Fragment, null, X({ ourProps: E5, theirProps: C3, slot: s14, defaultTag: He3, name: "Popover.Button" }), h9 && !i9 && a9 && import_react39.default.createElement(h4, { id: c9, features: s7.Focusable, "data-headlessui-focus-guard": !0, as: "button", type: "button", onFocus: x5 }));
}), Ge3 = "div", we3 = j2.RenderStrategy | j2.Static, _e3 = V2(function(r12, p8) {
  let O2 = I(), { id: R3 = `headlessui-popover-overlay-${O2}`, ...C3 } = r12, [{ popoverState: t13 }, o8] = Z2("Popover.Overlay"), a9 = y(p8), v5 = C(), c9 = (() => v5 !== null ? (v5 & d6.Open) === d6.Open : t13 === 0)(), M7 = o3((i9) => {
    if (r4(i9.currentTarget))
      return i9.preventDefault();
    o8({ type: 1 });
  }), T8 = (0, import_react39.useMemo)(() => ({ open: t13 === 0 }), [t13]);
  return X({ ourProps: { ref: a9, id: R3, "aria-hidden": !0, onClick: M7 }, theirProps: C3, slot: T8, defaultTag: Ge3, features: we3, visible: c9, name: "Popover.Overlay" });
}), Ne2 = "div", Ke2 = j2.RenderStrategy | j2.Static, Ue3 = V2(function(r12, p8) {
  let O2 = I(), { id: R3 = `headlessui-popover-panel-${O2}`, focus: C3 = !1, ...t13 } = r12, [o8, a9] = Z2("Popover.Panel"), { close: v5, isPortalled: c9 } = ue3("Popover.Panel"), M7 = `headlessui-focus-sentinel-before-${I()}`, T8 = `headlessui-focus-sentinel-after-${I()}`, d15 = (0, import_react39.useRef)(null), i9 = y(d15, p8, (s14) => {
    a9({ type: 4, panel: s14 });
  }), u9 = n3(d15);
  l2(() => (a9({ type: 5, panelId: R3 }), () => {
    a9({ type: 5, panelId: null });
  }), [R3, a9]);
  let f9 = C(), g7 = (() => f9 !== null ? (f9 & d6.Open) === d6.Open : o8.popoverState === 0)(), y4 = o3((s14) => {
    var m11;
    switch (s14.key) {
      case o7.Escape:
        if (o8.popoverState !== 0 || !d15.current || (u9 == null ? void 0 : u9.activeElement) && !d15.current.contains(u9.activeElement))
          return;
        s14.preventDefault(), s14.stopPropagation(), a9({ type: 1 }), (m11 = o8.button) == null || m11.focus();
        break;
    }
  });
  (0, import_react39.useEffect)(() => {
    var s14;
    r12.static || o8.popoverState === 1 && ((s14 = r12.unmount) != null ? s14 : !0) && a9({ type: 4, panel: null });
  }, [o8.popoverState, r12.unmount, r12.static, a9]), (0, import_react39.useEffect)(() => {
    if (!C3 || o8.popoverState !== 0 || !d15.current)
      return;
    let s14 = u9 == null ? void 0 : u9.activeElement;
    d15.current.contains(s14) || I2(d15.current, L2.First);
  }, [C3, d15, o8.popoverState]);
  let L7 = (0, import_react39.useMemo)(() => ({ open: o8.popoverState === 0, close: v5 }), [o8, v5]), I4 = { ref: i9, id: R3, onKeyDown: y4, onBlur: C3 && o8.popoverState === 0 ? (s14) => {
    var E5, P5, x5, e5, l12;
    let m11 = s14.relatedTarget;
    !m11 || !d15.current || (E5 = d15.current) != null && E5.contains(m11) || (a9({ type: 1 }), (((x5 = (P5 = o8.beforePanelSentinel.current) == null ? void 0 : P5.contains) == null ? void 0 : x5.call(P5, m11)) || ((l12 = (e5 = o8.afterPanelSentinel.current) == null ? void 0 : e5.contains) == null ? void 0 : l12.call(e5, m11))) && m11.focus({ preventScroll: !0 }));
  } : void 0, tabIndex: -1 }, F7 = n2(), V4 = o3(() => {
    let s14 = d15.current;
    if (!s14)
      return;
    function m11() {
      u4(F7.current, { [s10.Forwards]: () => {
        var P5;
        I2(s14, L2.First) === N2.Error && ((P5 = o8.afterPanelSentinel.current) == null || P5.focus());
      }, [s10.Backwards]: () => {
        var E5;
        (E5 = o8.button) == null || E5.focus({ preventScroll: !0 });
      } });
    }
    m11();
  }), h9 = o3(() => {
    let s14 = d15.current;
    if (!s14)
      return;
    function m11() {
      u4(F7.current, { [s10.Forwards]: () => {
        var A6;
        if (!o8.button)
          return;
        let E5 = E(), P5 = E5.indexOf(o8.button), x5 = E5.slice(0, P5 + 1), l12 = [...E5.slice(P5 + 1), ...x5];
        for (let b5 of l12.slice())
          if (b5.dataset.headlessuiFocusGuard === "true" || ((A6 = o8.panel) == null ? void 0 : A6.contains(b5))) {
            let G2 = l12.indexOf(b5);
            G2 !== -1 && l12.splice(G2, 1);
          }
        I2(l12, L2.First, { sorted: !1 });
      }, [s10.Backwards]: () => {
        var P5;
        I2(s14, L2.Previous) === N2.Error && ((P5 = o8.button) == null || P5.focus());
      } });
    }
    m11();
  });
  return import_react39.default.createElement(pe3.Provider, { value: R3 }, g7 && c9 && import_react39.default.createElement(h4, { id: M7, ref: o8.beforePanelSentinel, features: s7.Focusable, "data-headlessui-focus-guard": !0, as: "button", type: "button", onFocus: V4 }), X({ ourProps: I4, theirProps: t13, slot: L7, defaultTag: Ne2, features: Ke2, visible: g7, name: "Popover.Panel" }), g7 && c9 && import_react39.default.createElement(h4, { id: T8, ref: o8.afterPanelSentinel, features: s7.Focusable, "data-headlessui-focus-guard": !0, as: "button", type: "button", onFocus: h9 }));
}), We = "div", je = V2(function(r12, p8) {
  let O2 = (0, import_react39.useRef)(null), R3 = y(O2, p8), [C3, t13] = (0, import_react39.useState)([]), o8 = o3((u9) => {
    t13((f9) => {
      let g7 = f9.indexOf(u9);
      if (g7 !== -1) {
        let y4 = f9.slice();
        return y4.splice(g7, 1), y4;
      }
      return f9;
    });
  }), a9 = o3((u9) => (t13((f9) => [...f9, u9]), () => o8(u9))), v5 = o3(() => {
    var g7;
    let u9 = e(O2);
    if (!u9)
      return !1;
    let f9 = u9.activeElement;
    return (g7 = O2.current) != null && g7.contains(f9) ? !0 : C3.some((y4) => {
      var L7, I4;
      return ((L7 = u9.getElementById(y4.buttonId.current)) == null ? void 0 : L7.contains(f9)) || ((I4 = u9.getElementById(y4.panelId.current)) == null ? void 0 : I4.contains(f9));
    });
  }), c9 = o3((u9) => {
    for (let f9 of C3)
      f9.buttonId.current !== u9 && f9.close();
  }), M7 = (0, import_react39.useMemo)(() => ({ registerPopover: a9, unregisterPopover: o8, isFocusWithinPopoverGroup: v5, closeOthers: c9 }), [a9, o8, v5, c9]), T8 = (0, import_react39.useMemo)(() => ({}), []), d15 = r12, i9 = { ref: R3 };
  return import_react39.default.createElement(se3.Provider, { value: M7 }, X({ ourProps: i9, theirProps: d15, slot: T8, defaultTag: We, name: "Popover.Group" }));
}), Rt = Object.assign(De, { Button: ke3, Overlay: _e3, Panel: Ue3, Group: je });

// node_modules/@headlessui/react/dist/hooks/use-flags.js
var import_react40 = __toESM(require_react(), 1);
function b4(g7 = 0) {
  let [t13, l12] = (0, import_react40.useState)(g7), u9 = (0, import_react40.useCallback)((e5) => l12((a9) => a9 | e5), [t13]), n4 = (0, import_react40.useCallback)((e5) => Boolean(t13 & e5), [t13]), o8 = (0, import_react40.useCallback)((e5) => l12((a9) => a9 & ~e5), [l12]), s14 = (0, import_react40.useCallback)((e5) => l12((a9) => a9 ^ e5), [l12]);
  return { flags: t13, addFlag: u9, hasFlag: n4, removeFlag: o8, toggleFlag: s14 };
}

// node_modules/@headlessui/react/dist/components/transitions/transition.js
var import_react41 = __toESM(require_react(), 1);

// node_modules/@headlessui/react/dist/utils/once.js
function l11(r12) {
  let e5 = { called: !1 };
  return (...t13) => {
    if (!e5.called)
      return e5.called = !0, r12(...t13);
  };
}

// node_modules/@headlessui/react/dist/components/transitions/utils/transition.js
function v4(t13, ...e5) {
  t13 && e5.length > 0 && t13.classList.add(...e5);
}
function f8(t13, ...e5) {
  t13 && e5.length > 0 && t13.classList.remove(...e5);
}
function F6(t13, e5) {
  let n4 = m2();
  if (!t13)
    return n4.dispose;
  let { transitionDuration: a9, transitionDelay: i9 } = getComputedStyle(t13), [m11, d15] = [a9, i9].map((o8) => {
    let [r12 = 0] = o8.split(",").filter(Boolean).map((l12) => l12.includes("ms") ? parseFloat(l12) : parseFloat(l12) * 1e3).sort((l12, g7) => g7 - l12);
    return r12;
  });
  if (m11 + d15 !== 0) {
    let o8 = n4.addEventListener(t13, "transitionend", (r12) => {
      r12.target === r12.currentTarget && (e5(), o8());
    });
  } else
    e5();
  return n4.add(() => e5()), n4.dispose;
}
function M5(t13, e5, n4, a9) {
  let i9 = n4 ? "enter" : "leave", m11 = m2(), d15 = a9 !== void 0 ? l11(a9) : () => {
  };
  i9 === "enter" && (t13.removeAttribute("hidden"), t13.style.display = "");
  let u9 = u4(i9, { enter: () => e5.enter, leave: () => e5.leave }), o8 = u4(i9, { enter: () => e5.enterTo, leave: () => e5.leaveTo }), r12 = u4(i9, { enter: () => e5.enterFrom, leave: () => e5.leaveFrom });
  return f8(t13, ...e5.enter, ...e5.enterTo, ...e5.enterFrom, ...e5.leave, ...e5.leaveFrom, ...e5.leaveTo, ...e5.entered), v4(t13, ...u9, ...r12), m11.nextFrame(() => {
    f8(t13, ...r12), v4(t13, ...o8), F6(t13, () => (f8(t13, ...u9), v4(t13, ...e5.entered), d15()));
  }), m11.dispose;
}

// node_modules/@headlessui/react/dist/hooks/use-transition.js
function D3({ container: i9, direction: t13, classes: o8, onStart: s14, onStop: u9 }) {
  let a9 = f5(), c9 = p3(), r12 = s3(t13);
  l2(() => {
    let e5 = m2();
    c9.add(e5.dispose);
    let n4 = i9.current;
    if (!!n4 && r12.current !== "idle" && !!a9.current)
      return e5.dispose(), s14.current(r12.current), e5.add(M5(n4, o8.current, r12.current === "enter", () => {
        e5.dispose(), u9.current(r12.current);
      })), e5.dispose;
  }, [t13]);
}

// node_modules/@headlessui/react/dist/components/transitions/transition.js
function H5(i9 = "") {
  return i9.split(" ").filter((e5) => e5.trim().length > 1);
}
var M6 = (0, import_react41.createContext)(null);
M6.displayName = "TransitionContext";
var Ee = ((s14) => (s14.Visible = "visible", s14.Hidden = "hidden", s14))(Ee || {});
function Se3() {
  let i9 = (0, import_react41.useContext)(M6);
  if (i9 === null)
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
  return i9;
}
function xe4() {
  let i9 = (0, import_react41.useContext)(I3);
  if (i9 === null)
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
  return i9;
}
var I3 = (0, import_react41.createContext)(null);
I3.displayName = "NestingContext";
function _2(i9) {
  return "children" in i9 ? _2(i9.children) : i9.current.filter(({ el: e5 }) => e5.current !== null).filter(({ state: e5 }) => e5 === "visible").length > 0;
}
function re3(i9, e5) {
  let s14 = s3(i9), n4 = (0, import_react41.useRef)([]), m11 = f5(), y4 = p3(), E5 = o3((l12, r12 = w2.Hidden) => {
    let t13 = n4.current.findIndex(({ el: o8 }) => o8 === l12);
    t13 !== -1 && (u4(r12, { [w2.Unmount]() {
      n4.current.splice(t13, 1);
    }, [w2.Hidden]() {
      n4.current[t13].state = "hidden";
    } }), y4.microTask(() => {
      var o8;
      !_2(n4) && m11.current && ((o8 = s14.current) == null || o8.call(s14));
    }));
  }), S4 = o3((l12) => {
    let r12 = n4.current.find(({ el: t13 }) => t13 === l12);
    return r12 ? r12.state !== "visible" && (r12.state = "visible") : n4.current.push({ el: l12, state: "visible" }), () => E5(l12, w2.Unmount);
  }), x5 = (0, import_react41.useRef)([]), u9 = (0, import_react41.useRef)(Promise.resolve()), p8 = (0, import_react41.useRef)({ enter: [], leave: [], idle: [] }), d15 = o3((l12, r12, t13) => {
    x5.current.splice(0), e5 && (e5.chains.current[r12] = e5.chains.current[r12].filter(([o8]) => o8 !== l12)), e5 == null || e5.chains.current[r12].push([l12, new Promise((o8) => {
      x5.current.push(o8);
    })]), e5 == null || e5.chains.current[r12].push([l12, new Promise((o8) => {
      Promise.all(p8.current[r12].map(([f9, a9]) => a9)).then(() => o8());
    })]), r12 === "enter" ? u9.current = u9.current.then(() => e5 == null ? void 0 : e5.wait.current).then(() => t13(r12)) : t13(r12);
  }), v5 = o3((l12, r12, t13) => {
    Promise.all(p8.current[r12].splice(0).map(([o8, f9]) => f9)).then(() => {
      var o8;
      (o8 = x5.current.shift()) == null || o8();
    }).then(() => t13(r12));
  });
  return (0, import_react41.useMemo)(() => ({ children: n4, register: S4, unregister: E5, onStart: d15, onStop: v5, wait: u9, chains: p8 }), [S4, E5, n4, d15, v5, p8, u9]);
}
function Pe() {
}
var He4 = ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave"];
function ie3(i9) {
  var s14;
  let e5 = {};
  for (let n4 of He4)
    e5[n4] = (s14 = i9[n4]) != null ? s14 : Pe;
  return e5;
}
function Ne3(i9) {
  let e5 = (0, import_react41.useRef)(ie3(i9));
  return (0, import_react41.useEffect)(() => {
    e5.current = ie3(i9);
  }, [i9]), e5;
}
var Re2 = "div", oe2 = j2.RenderStrategy, se4 = V2(function(e5, s14) {
  let { beforeEnter: n4, afterEnter: m11, beforeLeave: y4, afterLeave: E5, enter: S4, enterFrom: x5, enterTo: u9, entered: p8, leave: d15, leaveFrom: v5, leaveTo: l12, ...r12 } = e5, t13 = (0, import_react41.useRef)(null), o8 = y(t13, s14), f9 = r12.unmount ? w2.Unmount : w2.Hidden, { show: a9, appear: P5, initial: le4 } = Se3(), [h9, j5] = (0, import_react41.useState)(a9 ? "visible" : "hidden"), Q5 = xe4(), { register: F7, unregister: L7 } = Q5, U4 = (0, import_react41.useRef)(null);
  (0, import_react41.useEffect)(() => F7(t13), [F7, t13]), (0, import_react41.useEffect)(() => {
    if (f9 === w2.Hidden && !!t13.current) {
      if (a9 && h9 !== "visible") {
        j5("visible");
        return;
      }
      return u4(h9, { hidden: () => L7(t13), visible: () => F7(t13) });
    }
  }, [h9, t13, F7, L7, a9, f9]);
  let k2 = s3({ enter: H5(S4), enterFrom: H5(x5), enterTo: H5(u9), entered: H5(p8), leave: H5(d15), leaveFrom: H5(v5), leaveTo: H5(l12) }), O2 = Ne3({ beforeEnter: n4, afterEnter: m11, beforeLeave: y4, afterLeave: E5 }), G2 = l3();
  (0, import_react41.useEffect)(() => {
    if (G2 && h9 === "visible" && t13.current === null)
      throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?");
  }, [t13, h9, G2]);
  let B4 = le4 && !P5, ae2 = (() => !G2 || B4 || U4.current === a9 ? "idle" : a9 ? "enter" : "leave")(), D4 = b4(0), ue4 = o3((g7) => u4(g7, { enter: () => {
    D4.addFlag(d6.Opening), O2.current.beforeEnter();
  }, leave: () => {
    D4.addFlag(d6.Closing), O2.current.beforeLeave();
  }, idle: () => {
  } })), de4 = o3((g7) => u4(g7, { enter: () => {
    D4.removeFlag(d6.Opening), O2.current.afterEnter();
  }, leave: () => {
    D4.removeFlag(d6.Closing), O2.current.afterLeave();
  }, idle: () => {
  } })), w4 = re3(() => {
    j5("hidden"), L7(t13);
  }, Q5);
  D3({ container: t13, classes: k2, direction: ae2, onStart: s3((g7) => {
    w4.onStart(t13, g7, ue4);
  }), onStop: s3((g7) => {
    w4.onStop(t13, g7, de4), g7 === "leave" && !_2(w4) && (j5("hidden"), L7(t13));
  }) }), (0, import_react41.useEffect)(() => {
    !B4 || (f9 === w2.Hidden ? U4.current = null : U4.current = a9);
  }, [a9, B4, h9]);
  let W2 = r12, fe3 = { ref: o8 };
  return P5 && a9 && s2.isServer && (W2 = { ...W2, className: e2(r12.className, ...k2.current.enter, ...k2.current.enterFrom) }), import_react41.default.createElement(I3.Provider, { value: w4 }, import_react41.default.createElement(c3, { value: u4(h9, { visible: d6.Open, hidden: d6.Closed }) | D4.flags }, X({ ourProps: fe3, theirProps: W2, defaultTag: Re2, features: oe2, visible: h9 === "visible", name: "Transition.Child" })));
}), K3 = V2(function(e5, s14) {
  let { show: n4, appear: m11 = !1, unmount: y4, ...E5 } = e5, S4 = (0, import_react41.useRef)(null), x5 = y(S4, s14);
  l3();
  let u9 = C();
  if (n4 === void 0 && u9 !== null && (n4 = (u9 & d6.Open) === d6.Open), ![!0, !1].includes(n4))
    throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop.");
  let [p8, d15] = (0, import_react41.useState)(n4 ? "visible" : "hidden"), v5 = re3(() => {
    d15("hidden");
  }), [l12, r12] = (0, import_react41.useState)(!0), t13 = (0, import_react41.useRef)([n4]);
  l2(() => {
    l12 !== !1 && t13.current[t13.current.length - 1] !== n4 && (t13.current.push(n4), r12(!1));
  }, [t13, n4]);
  let o8 = (0, import_react41.useMemo)(() => ({ show: n4, appear: m11, initial: l12 }), [n4, m11, l12]);
  (0, import_react41.useEffect)(() => {
    if (n4)
      d15("visible");
    else if (!_2(v5))
      d15("hidden");
    else {
      let a9 = S4.current;
      if (!a9)
        return;
      let P5 = a9.getBoundingClientRect();
      P5.x === 0 && P5.y === 0 && P5.width === 0 && P5.height === 0 && d15("hidden");
    }
  }, [n4, v5]);
  let f9 = { unmount: y4 };
  return import_react41.default.createElement(I3.Provider, { value: v5 }, import_react41.default.createElement(M6.Provider, { value: o8 }, X({ ourProps: { ...f9, as: import_react41.Fragment, children: import_react41.default.createElement(se4, { ref: x5, ...f9, ...E5 }) }, theirProps: {}, defaultTag: import_react41.Fragment, features: oe2, visible: p8 === "visible", name: "Transition" })));
}), ye3 = V2(function(e5, s14) {
  let n4 = (0, import_react41.useContext)(M6) !== null, m11 = C() !== null;
  return import_react41.default.createElement(import_react41.default.Fragment, null, !n4 && m11 ? import_react41.default.createElement(K3, { ref: s14, ...e5 }) : import_react41.default.createElement(se4, { ref: s14, ...e5 }));
}), Ye = Object.assign(K3, { Child: ye3, Root: K3 });

// app/components/Layout.tsx
var import_react46 = __toESM(require_react());

// app/hooks/useIsHydrated.tsx
var import_react42 = __toESM(require_react());
function useIsHydrated() {
  let [isHydrated2, setHydrated] = (0, import_react42.useState)(!1);
  return (0, import_react42.useEffect)(() => {
    setHydrated(!0);
  }, []), isHydrated2;
}

// app/hooks/useCartFetchers.tsx
function useCartFetchers(actionName) {
  var _a2;
  let fetchers = useFetchers2(), cartFetchers = [];
  for (let fetcher of fetchers) {
    let formData = (_a2 = fetcher.submission) == null ? void 0 : _a2.formData;
    formData && formData.get("cartAction") === actionName && cartFetchers.push(fetcher);
  }
  return cartFetchers;
}

// app/components/Layout.tsx
var import_jsx_dev_runtime2 = __toESM(require_jsx_dev_runtime());
function Layout({
  children,
  layout: layout3
}) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_jsx_dev_runtime2.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex flex-col min-h-screen", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("a", { href: "#mainContent", className: "sr-only", children: "Skip to content" }, void 0, !1, {
        fileName: "app/components/Layout.tsx",
        lineNumber: 42,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/Layout.tsx",
        lineNumber: 41,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
        Header,
        {
          title: (layout3 == null ? void 0 : layout3.shop.name) ?? "Hydrogen",
          menu: layout3 == null ? void 0 : layout3.headerMenu
        },
        void 0,
        !1,
        {
          fileName: "app/components/Layout.tsx",
          lineNumber: 46,
          columnNumber: 9
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("main", { role: "main", id: "mainContent", className: "flex-grow", children }, void 0, !1, {
        fileName: "app/components/Layout.tsx",
        lineNumber: 50,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/Layout.tsx",
      lineNumber: 40,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Footer, { menu: layout3 == null ? void 0 : layout3.footerMenu }, void 0, !1, {
      fileName: "app/components/Layout.tsx",
      lineNumber: 54,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 39,
    columnNumber: 5
  }, this);
}
function Header({ title, menu }) {
  let isHome = useIsHomePath(), {
    isOpen: isCartOpen,
    openDrawer: openCart,
    closeDrawer: closeCart
  } = useDrawer(), {
    isOpen: isMenuOpen,
    openDrawer: openMenu,
    closeDrawer: closeMenu
  } = useDrawer(), addToCartFetchers = useCartFetchers("ADD_TO_CART");
  return (0, import_react46.useEffect)(() => {
    isCartOpen || !addToCartFetchers.length || openCart();
  }, [addToCartFetchers, isCartOpen, openCart]), /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_jsx_dev_runtime2.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(CartDrawer, { isOpen: isCartOpen, onClose: closeCart }, void 0, !1, {
      fileName: "app/components/Layout.tsx",
      lineNumber: 84,
      columnNumber: 7
    }, this),
    menu && /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(MenuDrawer, { isOpen: isMenuOpen, onClose: closeMenu, menu }, void 0, !1, {
      fileName: "app/components/Layout.tsx",
      lineNumber: 86,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
      DesktopHeader,
      {
        isHome,
        title,
        menu,
        openCart
      },
      void 0,
      !1,
      {
        fileName: "app/components/Layout.tsx",
        lineNumber: 88,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
      MobileHeader,
      {
        isHome,
        title,
        openCart,
        openMenu
      },
      void 0,
      !1,
      {
        fileName: "app/components/Layout.tsx",
        lineNumber: 94,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 83,
    columnNumber: 5
  }, this);
}
function CartDrawer({ isOpen, onClose }) {
  var _a2;
  let [root] = useMatches2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Drawer, { open: isOpen, onClose, heading: "Cart", openFrom: "right", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "grid", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react46.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(CartLoading, {}, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 110,
    columnNumber: 29
  }, this), children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Await2, { resolve: (_a2 = root.data) == null ? void 0 : _a2.cart, children: (cart) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Cart, { layout: "drawer", onClose, cart }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 112,
    columnNumber: 24
  }, this) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 111,
    columnNumber: 11
  }, this) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 110,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 109,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 108,
    columnNumber: 5
  }, this);
}
function MenuDrawer({
  isOpen,
  onClose,
  menu
}) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Drawer, { open: isOpen, onClose, openFrom: "left", heading: "Menu", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "grid", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(MenuMobileNav, { menu, onClose }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 132,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 131,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 130,
    columnNumber: 5
  }, this);
}
function MenuMobileNav({
  menu,
  onClose
}) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("nav", { className: "grid gap-4 p-6 sm:gap-6 sm:px-12 sm:py-8", children: ((menu == null ? void 0 : menu.items) || []).map((item) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("span", { className: "block", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    Link3,
    {
      to: item.to,
      target: item.target,
      onClick: onClose,
      className: ({ isActive }) => isActive ? "pb-1 border-b -mb-px" : "pb-1",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Text, { as: "span", size: "copy", children: item.title }, void 0, !1, {
        fileName: "app/components/Layout.tsx",
        lineNumber: 158,
        columnNumber: 13
      }, this)
    },
    void 0,
    !1,
    {
      fileName: "app/components/Layout.tsx",
      lineNumber: 150,
      columnNumber: 11
    },
    this
  ) }, item.id, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 149,
    columnNumber: 9
  }, this)) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 146,
    columnNumber: 5
  }, this);
}
function MobileHeader({
  title,
  isHome,
  openCart,
  openMenu
}) {
  let params = useParams();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    "header",
    {
      role: "banner",
      className: `${isHome ? "bg-primary/80 dark:bg-contrast/60 text-contrast dark:text-primary shadow-darkHeader" : "bg-contrast/80 text-primary"} flex lg:hidden items-center h-nav sticky backdrop-blur-lg z-40 top-0 justify-between w-full leading-none gap-4 px-4 md:px-8`,
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex items-center justify-start w-full gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
            "button",
            {
              onClick: openMenu,
              className: "relative flex items-center justify-center w-8 h-8",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(IconMenu, {}, void 0, !1, {
                fileName: "app/components/Layout.tsx",
                lineNumber: 197,
                columnNumber: 11
              }, this)
            },
            void 0,
            !1,
            {
              fileName: "app/components/Layout.tsx",
              lineNumber: 193,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
            Form,
            {
              method: "get",
              action: params.lang ? `/${params.lang}/search` : "/search",
              className: "items-center gap-2 sm:flex",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
                  "button",
                  {
                    type: "submit",
                    className: "relative flex items-center justify-center w-8 h-8",
                    children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(IconSearch, {}, void 0, !1, {
                      fileName: "app/components/Layout.tsx",
                      lineNumber: 208,
                      columnNumber: 13
                    }, this)
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/components/Layout.tsx",
                    lineNumber: 204,
                    columnNumber: 11
                  },
                  this
                ),
                /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
                  Input,
                  {
                    className: isHome ? "focus:border-contrast/20 dark:focus:border-primary/20" : "focus:border-primary/20",
                    type: "search",
                    variant: "minisearch",
                    placeholder: "Search",
                    name: "q"
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/components/Layout.tsx",
                    lineNumber: 210,
                    columnNumber: 11
                  },
                  this
                )
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/components/Layout.tsx",
              lineNumber: 199,
              columnNumber: 9
            },
            this
          )
        ] }, void 0, !0, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 192,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
          Link3,
          {
            className: "flex items-center self-stretch leading-[3rem] md:leading-[4rem] justify-center flex-grow w-full h-full",
            to: "/",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Heading, { className: "font-bold text-center", as: isHome ? "h1" : "h2", children: title }, void 0, !1, {
              fileName: "app/components/Layout.tsx",
              lineNumber: 228,
              columnNumber: 9
            }, this)
          },
          void 0,
          !1,
          {
            fileName: "app/components/Layout.tsx",
            lineNumber: 224,
            columnNumber: 7
          },
          this
        ),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex items-center justify-end w-full gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
            Link3,
            {
              to: "/account",
              className: "relative flex items-center justify-center w-8 h-8",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(IconAccount, {}, void 0, !1, {
                fileName: "app/components/Layout.tsx",
                lineNumber: 238,
                columnNumber: 11
              }, this)
            },
            void 0,
            !1,
            {
              fileName: "app/components/Layout.tsx",
              lineNumber: 234,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(CartCount, { isHome, openCart }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 240,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 233,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/Layout.tsx",
      lineNumber: 184,
      columnNumber: 5
    },
    this
  );
}
function DesktopHeader({
  isHome,
  menu,
  openCart,
  title
}) {
  let params = useParams(), { y: y4 } = useWindowScroll_default();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    "header",
    {
      role: "banner",
      className: `${isHome ? "bg-primary/80 dark:bg-contrast/60 text-contrast dark:text-primary shadow-darkHeader" : "bg-contrast/80 text-primary"} ${!isHome && y4 > 50 && " shadow-lightHeader"} hidden h-nav lg:flex items-center sticky transition duration-300 backdrop-blur-lg z-40 top-0 justify-between w-full leading-none gap-8 px-12 py-8`,
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex gap-12", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Link3, { className: "font-bold", to: "/", prefetch: "intent", children: title }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 271,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("nav", { className: "flex gap-8", children: ((menu == null ? void 0 : menu.items) || []).map((item) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
            Link3,
            {
              to: item.to,
              target: item.target,
              prefetch: "intent",
              className: ({ isActive }) => isActive ? "pb-1 border-b -mb-px" : "pb-1",
              children: item.title
            },
            item.id,
            !1,
            {
              fileName: "app/components/Layout.tsx",
              lineNumber: 277,
              columnNumber: 13
            },
            this
          )) }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 274,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 270,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
            Form,
            {
              method: "get",
              action: params.lang ? `/${params.lang}/search` : "/search",
              className: "flex items-center gap-2",
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
                  Input,
                  {
                    className: isHome ? "focus:border-contrast/20 dark:focus:border-primary/20" : "focus:border-primary/20",
                    type: "search",
                    variant: "minisearch",
                    placeholder: "Search",
                    name: "q"
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/components/Layout.tsx",
                    lineNumber: 297,
                    columnNumber: 11
                  },
                  this
                ),
                /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
                  "button",
                  {
                    type: "submit",
                    className: "relative flex items-center justify-center w-8 h-8 focus:ring-primary/5",
                    children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(IconSearch, {}, void 0, !1, {
                      fileName: "app/components/Layout.tsx",
                      lineNumber: 312,
                      columnNumber: 13
                    }, this)
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/components/Layout.tsx",
                    lineNumber: 308,
                    columnNumber: 11
                  },
                  this
                )
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/components/Layout.tsx",
              lineNumber: 292,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
            Link3,
            {
              to: "/account",
              className: "relative flex items-center justify-center w-8 h-8 focus:ring-primary/5",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(IconAccount, {}, void 0, !1, {
                fileName: "app/components/Layout.tsx",
                lineNumber: 319,
                columnNumber: 11
              }, this)
            },
            void 0,
            !1,
            {
              fileName: "app/components/Layout.tsx",
              lineNumber: 315,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(CartCount, { isHome, openCart }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 321,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 291,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/Layout.tsx",
      lineNumber: 260,
      columnNumber: 5
    },
    this
  );
}
function CartCount({
  isHome,
  openCart
}) {
  var _a2;
  let [root] = useMatches2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react46.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Badge, { count: 0, dark: isHome, openCart }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 337,
    columnNumber: 25
  }, this), children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Await2, { resolve: (_a2 = root.data) == null ? void 0 : _a2.cart, children: (cart) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    Badge,
    {
      dark: isHome,
      openCart,
      count: (cart == null ? void 0 : cart.totalQuantity) || 0
    },
    void 0,
    !1,
    {
      fileName: "app/components/Layout.tsx",
      lineNumber: 340,
      columnNumber: 11
    },
    this
  ) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 338,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 337,
    columnNumber: 5
  }, this);
}
function Badge({
  openCart,
  dark,
  count: count2
}) {
  let isHydrated2 = useIsHydrated(), BadgeCounter = (0, import_react46.useMemo)(
    () => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_jsx_dev_runtime2.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(IconBag, {}, void 0, !1, {
        fileName: "app/components/Layout.tsx",
        lineNumber: 365,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
        "div",
        {
          className: `${dark ? "text-primary bg-contrast dark:text-contrast dark:bg-primary" : "text-contrast bg-primary"} absolute bottom-1 right-1 text-[0.625rem] font-medium subpixel-antialiased h-3 min-w-[0.75rem] flex items-center justify-center leading-none text-center rounded-full w-auto px-[0.125rem] pb-px`,
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("span", { children: count2 || 0 }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 373,
            columnNumber: 11
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/Layout.tsx",
          lineNumber: 366,
          columnNumber: 9
        },
        this
      )
    ] }, void 0, !0, {
      fileName: "app/components/Layout.tsx",
      lineNumber: 364,
      columnNumber: 7
    }, this),
    [count2, dark]
  );
  return isHydrated2 ? /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    "button",
    {
      onClick: openCart,
      className: "relative flex items-center justify-center w-8 h-8 focus:ring-primary/5",
      children: BadgeCounter
    },
    void 0,
    !1,
    {
      fileName: "app/components/Layout.tsx",
      lineNumber: 381,
      columnNumber: 5
    },
    this
  ) : /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    Link3,
    {
      to: "/cart",
      className: "relative flex items-center justify-center w-8 h-8 focus:ring-primary/5",
      children: BadgeCounter
    },
    void 0,
    !1,
    {
      fileName: "app/components/Layout.tsx",
      lineNumber: 388,
      columnNumber: 5
    },
    this
  );
}
function Footer({ menu }) {
  var _a2, _b;
  let isHome = useIsHomePath(), itemsCount = menu ? ((_a2 = menu == null ? void 0 : menu.items) == null ? void 0 : _a2.length) + 1 > 4 ? 4 : ((_b = menu == null ? void 0 : menu.items) == null ? void 0 : _b.length) + 1 : [];
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
    Section,
    {
      divider: isHome ? "none" : "top",
      as: "footer",
      role: "contentinfo",
      className: `grid min-h-[25rem] items-start grid-flow-row w-full gap-6 py-8 px-6 md:px-8 lg:px-12 md:gap-8 lg:gap-12 grid-cols-1 md:grid-cols-2 lg:grid-cols-${itemsCount}
        bg-primary dark:bg-contrast dark:text-primary text-contrast overflow-hidden`,
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(FooterMenu, { menu }, void 0, !1, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 413,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(CountrySelector, {}, void 0, !1, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 414,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
          "div",
          {
            className: `self-end pt-8 opacity-50 md:col-span-2 lg:col-span-${itemsCount}`,
            children: [
              "\xA9 ",
              new Date().getFullYear(),
              " / Shopify, Inc. Hydrogen is an MIT Licensed Open Source project."
            ]
          },
          void 0,
          !0,
          {
            fileName: "app/components/Layout.tsx",
            lineNumber: 415,
            columnNumber: 7
          },
          this
        )
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/Layout.tsx",
      lineNumber: 406,
      columnNumber: 5
    },
    this
  );
}
var FooterLink = ({ item }) => item.to.startsWith("http") ? /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("a", { href: item.to, target: item.target, rel: "noopener noreferrer", children: item.title }, void 0, !1, {
  fileName: "app/components/Layout.tsx",
  lineNumber: 428,
  columnNumber: 7
}, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Link3, { to: item.to, target: item.target, prefetch: "intent", children: item.title }, void 0, !1, {
  fileName: "app/components/Layout.tsx",
  lineNumber: 435,
  columnNumber: 5
}, this);
function FooterMenu({ menu }) {
  let styles = {
    section: "grid gap-4",
    nav: "grid gap-2 pb-6"
  };
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_jsx_dev_runtime2.Fragment, { children: ((menu == null ? void 0 : menu.items) || []).map((item) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("section", { className: styles.section, children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(ke2, { children: ({ open }) => {
    var _a2, _b;
    return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_jsx_dev_runtime2.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(ke2.Button, { className: "text-left md:cursor-default", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Heading, { className: "flex justify-between", size: "lead", as: "h3", children: [
        item.title,
        ((_a2 = item == null ? void 0 : item.items) == null ? void 0 : _a2.length) > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("span", { className: "md:hidden", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(IconCaret, { direction: open ? "up" : "down" }, void 0, !1, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 459,
          columnNumber: 25
        }, this) }, void 0, !1, {
          fileName: "app/components/Layout.tsx",
          lineNumber: 458,
          columnNumber: 23
        }, this)
      ] }, void 0, !0, {
        fileName: "app/components/Layout.tsx",
        lineNumber: 455,
        columnNumber: 19
      }, this) }, void 0, !1, {
        fileName: "app/components/Layout.tsx",
        lineNumber: 454,
        columnNumber: 17
      }, this),
      ((_b = item == null ? void 0 : item.items) == null ? void 0 : _b.length) > 0 ? /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
        "div",
        {
          className: `${open ? "max-h-48 h-fit" : "max-h-0 md:max-h-fit"} overflow-hidden transition-all duration-300`,
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react46.Suspense, { "data-comment": "This suspense fixes a hydration bug in Disclosure.Panel with static prop", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(ke2.Panel, { static: !0, children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("nav", { className: styles.nav, children: item.items.map((subItem) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(FooterLink, { item: subItem }, subItem.id, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 474,
            columnNumber: 29
          }, this)) }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 472,
            columnNumber: 25
          }, this) }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 471,
            columnNumber: 23
          }, this) }, void 0, !1, {
            fileName: "app/components/Layout.tsx",
            lineNumber: 470,
            columnNumber: 21
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/Layout.tsx",
          lineNumber: 465,
          columnNumber: 19
        },
        this
      ) : null
    ] }, void 0, !0, {
      fileName: "app/components/Layout.tsx",
      lineNumber: 453,
      columnNumber: 15
    }, this);
  } }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 451,
    columnNumber: 11
  }, this) }, item.id, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 450,
    columnNumber: 9
  }, this)) }, void 0, !1, {
    fileName: "app/components/Layout.tsx",
    lineNumber: 448,
    columnNumber: 5
  }, this);
}

// app/components/Drawer.tsx
var import_react48 = __toESM(require_react());
var import_jsx_dev_runtime3 = __toESM(require_jsx_dev_runtime());
function Drawer({
  heading,
  open,
  onClose,
  openFrom = "right",
  children
}) {
  let offScreen = {
    right: "translate-x-full",
    left: "-translate-x-full"
  };
  return /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Ye, { appear: !0, show: open, as: import_react48.Fragment, children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(yt, { as: "div", className: "relative z-50", onClose, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
      Ye.Child,
      {
        as: import_react48.Fragment,
        enter: "ease-out duration-300",
        enterFrom: "opacity-0 left-0",
        enterTo: "opacity-100",
        leave: "ease-in duration-200",
        leaveFrom: "opacity-100",
        leaveTo: "opacity-0",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)("div", { className: "fixed inset-0 bg-black bg-opacity-25" }, void 0, !1, {
          fileName: "app/components/Drawer.tsx",
          lineNumber: 44,
          columnNumber: 11
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/components/Drawer.tsx",
        lineNumber: 35,
        columnNumber: 9
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)("div", { className: "fixed inset-0", children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)("div", { className: "absolute inset-0 overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
      "div",
      {
        className: `fixed inset-y-0 flex max-w-full ${openFrom === "right" ? "right-0" : ""}`,
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
          Ye.Child,
          {
            as: import_react48.Fragment,
            enter: "transform transition ease-in-out duration-300",
            enterFrom: offScreen[openFrom],
            enterTo: "translate-x-0",
            leave: "transform transition ease-in-out duration-300",
            leaveFrom: "translate-x-0",
            leaveTo: offScreen[openFrom],
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(yt.Panel, { className: "w-screen max-w-lg text-left align-middle transition-all transform shadow-xl h-screen-dynamic bg-contrast", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
                "header",
                {
                  className: `sticky top-0 flex items-center px-6 h-nav sm:px-8 md:px-12 ${heading ? "justify-between" : "justify-end"}`,
                  children: [
                    heading !== null && /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(yt.Title, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Heading, { as: "span", size: "lead", id: "cart-contents", children: heading }, void 0, !1, {
                      fileName: "app/components/Drawer.tsx",
                      lineNumber: 71,
                      columnNumber: 25
                    }, this) }, void 0, !1, {
                      fileName: "app/components/Drawer.tsx",
                      lineNumber: 70,
                      columnNumber: 23
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
                      "button",
                      {
                        type: "button",
                        className: "p-4 -m-4 transition text-primary hover:",
                        onClick: onClose,
                        "data-test": "close-cart",
                        children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(IconClose, { "aria-label": "Close panel" }, void 0, !1, {
                          fileName: "app/components/Drawer.tsx",
                          lineNumber: 82,
                          columnNumber: 23
                        }, this)
                      },
                      void 0,
                      !1,
                      {
                        fileName: "app/components/Drawer.tsx",
                        lineNumber: 76,
                        columnNumber: 21
                      },
                      this
                    )
                  ]
                },
                void 0,
                !0,
                {
                  fileName: "app/components/Drawer.tsx",
                  lineNumber: 64,
                  columnNumber: 19
                },
                this
              ),
              children
            ] }, void 0, !0, {
              fileName: "app/components/Drawer.tsx",
              lineNumber: 63,
              columnNumber: 17
            }, this)
          },
          void 0,
          !1,
          {
            fileName: "app/components/Drawer.tsx",
            lineNumber: 54,
            columnNumber: 15
          },
          this
        )
      },
      void 0,
      !1,
      {
        fileName: "app/components/Drawer.tsx",
        lineNumber: 49,
        columnNumber: 13
      },
      this
    ) }, void 0, !1, {
      fileName: "app/components/Drawer.tsx",
      lineNumber: 48,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/Drawer.tsx",
      lineNumber: 47,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Drawer.tsx",
    lineNumber: 34,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/Drawer.tsx",
    lineNumber: 33,
    columnNumber: 5
  }, this);
}
Drawer.Title = yt.Title;
function useDrawer(openDefault = !1) {
  let [isOpen, setIsOpen] = (0, import_react48.useState)(openDefault);
  function openDrawer() {
    setIsOpen(!0);
  }
  function closeDrawer() {
    setIsOpen(!1);
  }
  return {
    isOpen,
    openDrawer,
    closeDrawer
  };
}

// node_modules/class-variance-authority/dist/index.esm.js
var falsyToString = (value) => typeof value == "boolean" ? "".concat(value) : value === 0 ? "0" : value, cx = function() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++)
    classes[_key] = arguments[_key];
  return classes.flat(1 / 0).filter(Boolean).join(" ");
}, cva = (base, config2) => (props) => {
  var ref;
  if ((config2 == null ? void 0 : config2.variants) == null)
    return cx(base, props == null ? void 0 : props.class, props == null ? void 0 : props.className);
  let { variants, defaultVariants } = config2, getVariantClassNames = Object.keys(variants).map((variant) => {
    let variantProp = props == null ? void 0 : props[variant], defaultVariantProp = defaultVariants == null ? void 0 : defaultVariants[variant];
    if (variantProp === null)
      return null;
    let variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
    return variants[variant][variantKey];
  }), propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
    let [key, value] = param;
    return value === void 0 || (acc[key] = value), acc;
  }, {}), getCompoundVariantClassNames = config2 == null || (ref = config2.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1) => {
    let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param1;
    return Object.entries(compoundVariantOptions).every((param) => {
      let [key, value] = param;
      return Array.isArray(value) ? value.includes({
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key]) : {
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key] === value;
    }) ? [
      ...acc,
      cvClass,
      cvClassName
    ] : acc;
  }, []);
  return cx(base, getVariantClassNames, getCompoundVariantClassNames, props == null ? void 0 : props.class, props == null ? void 0 : props.className);
};

// app/components/Text.tsx
var import_jsx_dev_runtime4 = __toESM(require_jsx_dev_runtime());
function Text({
  as: Component4 = "span",
  className,
  color = "default",
  format,
  size = "copy",
  width = "default",
  children,
  ...props
}) {
  let colors = {
    default: "inherit",
    primary: "",
    subtle: "",
    notice: "text-notice",
    contrast: "text-contrast/90"
  }, sizes = {
    lead: "text-lead font-medium",
    copy: "text-copy",
    fine: "text-fine subpixel-antialiased"
  }, widths = {
    default: "max-w-prose",
    narrow: "max-w-prose-narrow",
    wide: "max-w-prose-wide"
  }, styles = cx(
    missingClass(className, "max-w-") && widths[width],
    missingClass(className, "whitespace-") && "whitespace-pre-wrap",
    missingClass(className, "text-") && colors[color],
    sizes[size],
    className
  );
  return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Component4, { ...props, className: styles, children: format ? formatText(children) : children }, void 0, !1, {
    fileName: "app/components/Text.tsx",
    lineNumber: 53,
    columnNumber: 5
  }, this);
}
function Heading({
  as: Component4 = "h2",
  children,
  className = "",
  format,
  size = "heading",
  width = "default",
  ...props
}) {
  let sizes = {
    display: "font-bold text-display",
    heading: "font-bold text-heading",
    lead: "font-bold text-lead",
    copy: "font-medium text-copy"
  }, widths = {
    default: "max-w-prose",
    narrow: "max-w-prose-narrow",
    wide: "max-w-prose-wide"
  }, styles = cx(
    missingClass(className, "whitespace-") && "whitespace-pre-wrap",
    missingClass(className, "max-w-") && widths[width],
    missingClass(className, "font-") && sizes[size],
    className
  );
  return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Component4, { ...props, className: styles, children: format ? formatText(children) : children }, void 0, !1, {
    fileName: "app/components/Text.tsx",
    lineNumber: 95,
    columnNumber: 5
  }, this);
}
function Section({
  as: Component4 = "section",
  children,
  className,
  divider = "none",
  display = "grid",
  heading,
  padding = "all",
  ...props
}) {
  let paddings = {
    x: "px-6 md:px-8 lg:px-12",
    y: "py-6 md:py-8 lg:py-12",
    swimlane: "pt-4 md:pt-8 lg:pt-12 md:pb-4 lg:pb-8",
    all: "p-6 md:p-8 lg:p-12"
  }, dividers = {
    none: "border-none",
    top: "border-t border-primary/05",
    bottom: "border-b border-primary/05",
    both: "border-y border-primary/05"
  }, styles = cx(
    "w-full gap-4 md:gap-8",
    {
      flex: "flex",
      grid: "grid"
    }[display],
    missingClass(className, "\\mp[xy]?-") && paddings[padding],
    dividers[divider],
    className
  );
  return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Component4, { ...props, className: styles, children: [
    heading && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Heading, { size: "lead", className: padding === "y" ? paddings.x : "", children: heading }, void 0, !1, {
      fileName: "app/components/Text.tsx",
      lineNumber: 150,
      columnNumber: 9
    }, this),
    children
  ] }, void 0, !0, {
    fileName: "app/components/Text.tsx",
    lineNumber: 148,
    columnNumber: 5
  }, this);
}
function PageHeader({
  children,
  className,
  heading,
  variant = "default",
  ...props
}) {
  let styles = cx({
    default: "grid w-full gap-8 p-6 py-8 md:p-8 lg:p-12 justify-items-start",
    blogPost: "grid md:text-center w-full gap-4 p-6 py-8 md:p-8 lg:p-12 md:justify-items-center",
    allCollections: "flex justify-between items-baseline gap-8 p-6 md:p-8 lg:p-12"
  }[variant], className);
  return null;
}

// app/components/Input.tsx
var import_jsx_dev_runtime5 = __toESM(require_jsx_dev_runtime());
function Input({
  className = "",
  type,
  variant,
  ...props
}) {
  let styles = cx({
    search: "bg-transparent px-0 py-2 text-heading w-full focus:ring-0 border-x-0 border-t-0 transition border-b-2  focus:border-primary/90",
    minisearch: "bg-transparent hidden md:inline-block text-left lg:text-right border-b transition border-transparent -mb-px border-x-0 border-t-0 appearance-none px-0 py-1 focus:ring-transparent placeholder:opacity-20 placeholder:text-inherit"
  }[variant], className);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("input", { type, ...props, className: styles }, void 0, !1, {
    fileName: "app/components/Input.tsx",
    lineNumber: 23,
    columnNumber: 10
  }, this);
}

// app/components/ProductGallery.tsx
var import_jsx_dev_runtime6 = __toESM(require_jsx_dev_runtime());

// app/lib/placeholders.ts
var PLACEHOLDERS = {
  HEROS: [
    {
      heading: { value: "All Mountain All Season" },
      byline: {
        value: "The All New Hydrogen Snowboard Exclusively From Shopify"
      },
      cta: { value: "Shop Now \u2192" },
      handle: "freestyle",
      spread: {
        reference: {
          mediaContentType: "IMAGE",
          alt: "Tracks in the snow leading to a person on a mountain top with a red jacket contrasting to an epic blue horizon with a mountain range in the distance.",
          previewImage: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Hydrogen_Hero_Feature_1.jpg?v=1654902468"
          },
          id: "gid://shopify/MediaImage/29259478466616",
          image: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Hydrogen_Hero_Feature_1.jpg?v=1654902468",
            width: 2500,
            height: 3155
          }
        }
      },
      spreadSecondary: {
        reference: {
          __typename: "MediaImage",
          mediaContentType: "IMAGE",
          alt: "A snowboarder standing on a mountain top in choppy snow, shows off the back of his snowboard which reads Hydrogen in a cursive script.",
          previewImage: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Hydrogen_Hero_Feature_2.jpg?v=1654902468"
          },
          id: "gid://shopify/MediaImage/29259478499384",
          image: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Hydrogen_Hero_Feature_2.jpg?v=1654902468",
            width: 2500,
            height: 3155
          }
        }
      },
      height: "full",
      top: !0,
      loading: "eager"
    },
    {
      heading: { value: "From the Slopes to the Chalet" },
      byline: null,
      cta: { value: "Shop Now \u2192" },
      handle: "backcountry",
      spread: {
        reference: {
          __typename: "MediaImage",
          mediaContentType: "IMAGE",
          alt: "A skier hikes up a mountain through the snow with skis over their shoulder.",
          previewImage: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Chalet_Collection_Feature_1.jpg?v=1654902306"
          },
          id: "gid://shopify/MediaImage/29259478368312",
          image: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Chalet_Collection_Feature_1.jpg?v=1654902306",
            width: 2500,
            height: 2500
          }
        }
      },
      spreadSecondary: {
        reference: {
          __typename: "MediaImage",
          mediaContentType: "IMAGE",
          alt: "A snow covered lodge is illuminated by lights at night with a dark starry sky and mountain backdrop.",
          previewImage: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Chalet_Collection_Feature_2.jpg?v=1654902306"
          },
          id: "gid://shopify/MediaImage/29259478401080",
          image: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Chalet_Collection_Feature_2.jpg?v=1654902306",
            width: 2500,
            height: 2500
          }
        }
      }
    },
    {
      heading: { value: "The Winter 2022 Collection" },
      byline: { value: "Just Dropped" },
      cta: { value: "Shop Now \u2192" },
      handle: "winter-2022",
      spread: {
        reference: {
          __typename: "MediaImage",
          mediaContentType: "IMAGE",
          alt: "Three young women in snowboarding attire embracing and laughing while snow falls around them",
          previewImage: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Collection_Feature_Wide.jpg?v=1654902160"
          },
          id: "gid://shopify/MediaImage/29259478302776",
          image: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/files/Collection_Feature_Wide.jpg?v=1654902160",
            width: 5e3,
            height: 2500
          }
        }
      },
      spreadSecondary: null
    }
  ],
  PRODUCT_INFO: [
    {
      title: "Description",
      content: "We threw snow tires on our core classics... Good for all year round! Named after my favorite football match of the year. Just like any of our joints, dress them up or down..."
    },
    {
      title: "Size and Fit",
      content: "We threw snow tires on our core classics... Good for all year round! Named after my favorite football match of the year. Just like any of our joints, dress them up or down..."
    },
    {
      title: "Delivery and Returns",
      content: "The towels had been hanging from the rod for years. They were stained and worn, and quite frankly, just plain ugly. Debra didn't want to touch them but she really didn't have a choice. It was important for her to see what was living within them. Patrick didn't want to go. The fact that she was insisting they must go made him want to go even less. He had no desire to make small talk with strangers he would never again see just to be polite. But she insisted that Patrick go, and she would soon find out that this would be the biggest mistake she could make in their relationship."
    }
  ],
  PRODUCT: {
    label: "Limited Edition",
    id: "gid://shopify/Product/6730850828344",
    title: "The Hydrogen",
    publishedAt: "2021-06-17T18:33:17Z",
    handle: "snowboard",
    description: "Description Our flagship board, ideal for technical terrain and those who dare to go where the chairlift can't take you. The Hydrogen excels in the backcountry making riding out of bounds as easy as resort groomers. New for 2021, the Hydrogen Snowboard has Oxygen Pack inserts giving you more float on the deepest days. Care Guide Clean well after use Wax regularly Specs Weight: 5 lb Length: 4 ft Width: 1 ft Manufactured on: 8/2/2021, 3:30:00 PM Manufactured by: Shopify",
    priceRange: {
      minVariantPrice: {
        amount: "775.0",
        currencyCode: "CAD"
      },
      maxVariantPrice: {
        amount: "775.0",
        currencyCode: "CAD"
      }
    },
    options: [
      {
        name: "Color",
        values: ["Morning", "Evening", "Night"]
      },
      {
        name: "Size",
        values: ["154", "158", "160"]
      }
    ],
    variants: {
      nodes: [
        {
          id: "gid://shopify/ProductVariant/41007289630776",
          image: {
            url: "https://cdn.shopify.com/s/files/1/0551/4566/0472/products/hydrogen-morning.jpg?v=1636146509",
            altText: "The Hydrogen snowboard, color Morning",
            width: 1200,
            height: 1504
          },
          price: {
            amount: "775.0",
            currencyCode: "CAD"
          },
          compareAtPrice: {
            amount: "840.0",
            currencyCode: "CAD"
          }
        }
      ]
    }
  }
};
function getProductPlaceholder() {
  return PLACEHOLDERS.PRODUCT;
}

// app/components/ProductCard.tsx
var import_jsx_dev_runtime7 = __toESM(require_jsx_dev_runtime());
function ProductCard({
  product,
  label,
  className,
  loading,
  onClick: onClick2,
  quickAdd
}) {
  var _a2, _b;
  let cardLabel, cardProduct = product != null && product.variants ? product : getProductPlaceholder();
  if (!((_b = (_a2 = cardProduct == null ? void 0 : cardProduct.variants) == null ? void 0 : _a2.nodes) != null && _b.length))
    return null;
  let firstVariant = flattenConnection(cardProduct.variants)[0];
  if (!firstVariant)
    return null;
  let { image, price, compareAtPrice } = firstVariant;
  label ? cardLabel = label : isDiscounted(price, compareAtPrice) ? cardLabel = "Sale" : isNewArrival(product.publishedAt) && (cardLabel = "New");
  let productAnalytics = {
    productGid: product.id,
    variantGid: firstVariant.id,
    name: product.title,
    variantName: firstVariant.title,
    brand: product.vendor,
    price: firstVariant.price.amount,
    quantity: 1
  };
  return /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)("div", { className: "flex flex-col gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(
      Link3,
      {
        onClick: onClick2,
        to: `/products/${product.handle}`,
        prefetch: "intent",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)("div", { className: cx("grid gap-4", className), children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)("div", { className: "card-image aspect-[4/5] bg-primary/5", children: [
            image && /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(
              Image,
              {
                className: "aspect-[4/5] w-full object-cover fadeIn",
                widths: [320],
                sizes: "320px",
                loaderOptions: {
                  crop: "center",
                  scale: 2,
                  width: 320,
                  height: 400
                },
                data: image,
                alt: image.altText || `Picture of ${product.title}`,
                loading
              },
              void 0,
              !1,
              {
                fileName: "app/components/ProductCard.tsx",
                lineNumber: 70,
                columnNumber: 15
              },
              this
            ),
            /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(
              Text,
              {
                as: "label",
                size: "fine",
                className: "absolute top-0 right-0 m-4 text-right text-notice",
                children: cardLabel
              },
              void 0,
              !1,
              {
                fileName: "app/components/ProductCard.tsx",
                lineNumber: 85,
                columnNumber: 13
              },
              this
            )
          ] }, void 0, !0, {
            fileName: "app/components/ProductCard.tsx",
            lineNumber: 68,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)("div", { className: "grid gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(
              Text,
              {
                className: "w-full overflow-hidden whitespace-nowrap text-ellipsis ",
                as: "h3",
                children: product.title
              },
              void 0,
              !1,
              {
                fileName: "app/components/ProductCard.tsx",
                lineNumber: 94,
                columnNumber: 13
              },
              this
            ),
            /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)("div", { className: "flex gap-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(Text, { className: "flex gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(Money, { withoutTrailingZeros: !0, data: price }, void 0, !1, {
                fileName: "app/components/ProductCard.tsx",
                lineNumber: 102,
                columnNumber: 17
              }, this),
              isDiscounted(price, compareAtPrice) && /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(
                CompareAtPrice,
                {
                  className: "opacity-50",
                  data: compareAtPrice
                },
                void 0,
                !1,
                {
                  fileName: "app/components/ProductCard.tsx",
                  lineNumber: 104,
                  columnNumber: 19
                },
                this
              )
            ] }, void 0, !0, {
              fileName: "app/components/ProductCard.tsx",
              lineNumber: 101,
              columnNumber: 15
            }, this) }, void 0, !1, {
              fileName: "app/components/ProductCard.tsx",
              lineNumber: 100,
              columnNumber: 13
            }, this)
          ] }, void 0, !0, {
            fileName: "app/components/ProductCard.tsx",
            lineNumber: 93,
            columnNumber: 11
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/ProductCard.tsx",
          lineNumber: 67,
          columnNumber: 9
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/components/ProductCard.tsx",
        lineNumber: 62,
        columnNumber: 7
      },
      this
    ),
    quickAdd && /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(
      AddToCartButton,
      {
        lines: [
          {
            quantity: 1,
            merchandiseId: firstVariant.id
          }
        ],
        variant: "secondary",
        className: "mt-2",
        analytics: {
          products: [productAnalytics],
          totalValue: parseFloat(productAnalytics.price)
        },
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(Text, { as: "span", className: "flex items-center justify-center gap-2", children: "Add to Bag" }, void 0, !1, {
          fileName: "app/components/ProductCard.tsx",
          lineNumber: 129,
          columnNumber: 11
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/components/ProductCard.tsx",
        lineNumber: 115,
        columnNumber: 9
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/ProductCard.tsx",
    lineNumber: 61,
    columnNumber: 5
  }, this);
}
function CompareAtPrice({
  data,
  className
}) {
  let { currencyNarrowSymbol, withoutTrailingZerosAndCurrency } = useMoney(data), styles = cx("strike", className);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)("span", { className: styles, children: [
    currencyNarrowSymbol,
    withoutTrailingZerosAndCurrency
  ] }, void 0, !0, {
    fileName: "app/components/ProductCard.tsx",
    lineNumber: 151,
    columnNumber: 5
  }, this);
}

// app/components/ProductSwimlane.tsx
var import_jsx_dev_runtime8 = __toESM(require_jsx_dev_runtime()), mockProducts = new Array(12).fill("");
function ProductSwimlane({
  title = "Featured Products",
  products = mockProducts,
  count: count2 = 12,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)(Section, { heading: title, padding: "y", ...props, children: /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("div", { className: "swimlane hiddenScroll md:pb-8 md:scroll-px-8 lg:scroll-px-12 md:px-8 lg:px-12", children: products.map((product) => /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)(
    ProductCard,
    {
      product,
      className: "snap-start w-80"
    },
    product.id,
    !1,
    {
      fileName: "app/components/ProductSwimlane.tsx",
      lineNumber: 21,
      columnNumber: 11
    },
    this
  )) }, void 0, !1, {
    fileName: "app/components/ProductSwimlane.tsx",
    lineNumber: 19,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/ProductSwimlane.tsx",
    lineNumber: 18,
    columnNumber: 5
  }, this);
}

// app/components/ProductGrid.tsx
var import_react49 = __toESM(require_react()), import_jsx_dev_runtime9 = __toESM(require_jsx_dev_runtime());

// app/components/Skeleton.tsx
var import_jsx_dev_runtime10 = __toESM(require_jsx_dev_runtime());
function Skeleton({
  as: Component4 = "div",
  width,
  height,
  className,
  ...props
}) {
  let styles = cx("rounded bg-primary/10", className);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime10.jsxDEV)(Component4, { ...props, width, height, className: styles }, void 0, !1, {
    fileName: "app/components/Skeleton.tsx",
    lineNumber: 22,
    columnNumber: 5
  }, this);
}

// app/components/Button.tsx
var import_react50 = __toESM(require_react());
var import_jsx_dev_runtime11 = __toESM(require_jsx_dev_runtime()), Button = (0, import_react50.forwardRef)(
  ({
    as = "button",
    className = "",
    variant = "primary",
    width = "auto",
    ...props
  }, ref) => {
    let Component4 = props != null && props.to ? Link2 : as, baseButtonClasses = "inline-block rounded font-medium text-center py-3 px-6", variants = {
      primary: `${baseButtonClasses} bg-primary text-contrast`,
      secondary: `${baseButtonClasses} border bg-contrast text-primary`,
      inline: "border-b leading-none pb-1"
    }, widths = {
      auto: "w-auto",
      full: "w-full"
    }, styles = cx(
      missingClass(className, "bg-") && variants[variant],
      missingClass(className, "w-") && widths[width],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(
      Component4,
      {
        className: styles,
        ...props,
        ref
      },
      void 0,
      !1,
      {
        fileName: "app/components/Button.tsx",
        lineNumber: 46,
        columnNumber: 7
      },
      this
    );
  }
);

// app/components/CountrySelector.tsx
var import_react53 = __toESM(require_react());

// node_modules/react-intersection-observer/react-intersection-observer.modern.mjs
var React7 = __toESM(require_react(), 1);
var observerMap = /* @__PURE__ */ new Map(), RootIds = /* @__PURE__ */ new WeakMap(), rootId = 0, unsupportedValue;
function getRootId(root) {
  return root ? (RootIds.has(root) || (rootId += 1, RootIds.set(root, rootId.toString())), RootIds.get(root)) : "0";
}
function optionsToId(options) {
  return Object.keys(options).sort().filter((key) => options[key] !== void 0).map((key) => `${key}_${key === "root" ? getRootId(options.root) : options[key]}`).toString();
}
function createObserver(options) {
  let id = optionsToId(options), instance = observerMap.get(id);
  if (!instance) {
    let elements = /* @__PURE__ */ new Map(), thresholds, observer = new IntersectionObserver((entries) => {
      entries.forEach((entry2) => {
        var _elements$get;
        let inView = entry2.isIntersecting && thresholds.some((threshold) => entry2.intersectionRatio >= threshold);
        options.trackVisibility && typeof entry2.isVisible > "u" && (entry2.isVisible = inView), (_elements$get = elements.get(entry2.target)) == null || _elements$get.forEach((callback) => {
          callback(inView, entry2);
        });
      });
    }, options);
    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]), instance = {
      id,
      observer,
      elements
    }, observerMap.set(id, instance);
  }
  return instance;
}
function observe(element, callback, options = {}, fallbackInView = unsupportedValue) {
  if (typeof window.IntersectionObserver > "u" && fallbackInView !== void 0) {
    let bounds = element.getBoundingClientRect();
    return callback(fallbackInView, {
      isIntersecting: fallbackInView,
      target: element,
      intersectionRatio: typeof options.threshold == "number" ? options.threshold : 0,
      time: 0,
      boundingClientRect: bounds,
      intersectionRect: bounds,
      rootBounds: bounds
    }), () => {
    };
  }
  let {
    id,
    observer,
    elements
  } = createObserver(options), callbacks = elements.get(element) || [];
  return elements.has(element) || elements.set(element, callbacks), callbacks.push(callback), observer.observe(element), function() {
    callbacks.splice(callbacks.indexOf(callback), 1), callbacks.length === 0 && (elements.delete(element), observer.unobserve(element)), elements.size === 0 && (observer.disconnect(), observerMap.delete(id));
  };
}
function useInView({
  threshold,
  delay,
  trackVisibility,
  rootMargin,
  root,
  triggerOnce,
  skip,
  initialInView,
  fallbackInView,
  onChange
} = {}) {
  var _state$entry;
  let [ref, setRef] = React7.useState(null), callback = React7.useRef(), [state, setState] = React7.useState({
    inView: !!initialInView,
    entry: void 0
  });
  callback.current = onChange, React7.useEffect(
    () => {
      if (skip || !ref)
        return;
      let unobserve;
      return unobserve = observe(ref, (inView, entry2) => {
        setState({
          inView,
          entry: entry2
        }), callback.current && callback.current(inView, entry2), entry2.isIntersecting && triggerOnce && unobserve && (unobserve(), unobserve = void 0);
      }, {
        root,
        rootMargin,
        threshold,
        trackVisibility,
        delay
      }, fallbackInView), () => {
        unobserve && unobserve();
      };
    },
    [
      Array.isArray(threshold) ? threshold.toString() : threshold,
      ref,
      root,
      rootMargin,
      triggerOnce,
      skip,
      trackVisibility,
      fallbackInView,
      delay
    ]
  );
  let entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target, previousEntryTarget = React7.useRef();
  !ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget && (previousEntryTarget.current = entryTarget, setState({
    inView: !!initialInView,
    entry: void 0
  }));
  let result = [setRef, state.inView, state.entry];
  return result.ref = result[0], result.inView = result[1], result.entry = result[2], result;
}

// app/components/CountrySelector.tsx
var import_jsx_dev_runtime12 = __toESM(require_jsx_dev_runtime());
function CountrySelector() {
  var _a2;
  let [root] = useMatches2(), fetcher = useFetcher2(), closeRef = (0, import_react53.useRef)(null), selectedLocale = ((_a2 = root.data) == null ? void 0 : _a2.selectedLocale) ?? DEFAULT_LOCALE, { pathname, search } = useLocation(), pathWithoutLocale = `${pathname.replace(
    selectedLocale.pathPrefix,
    ""
  )}${search}`, countries2 = fetcher.data ?? {}, defaultLocale = countries2 == null ? void 0 : countries2.default, defaultLocalePrefix = defaultLocale ? `${defaultLocale == null ? void 0 : defaultLocale.language}-${defaultLocale == null ? void 0 : defaultLocale.country}` : "", { ref, inView } = useInView({
    threshold: 0,
    triggerOnce: !0
  }), observerRef = (0, import_react53.useRef)(null);
  (0, import_react53.useEffect)(() => {
    ref(observerRef.current);
  }, [ref, observerRef]), (0, import_react53.useEffect)(() => {
    !inView || fetcher.data || fetcher.state === "loading" || fetcher.load("/api/countries");
  }, [inView, fetcher]);
  let closeDropdown = (0, import_react53.useCallback)(() => {
    var _a3;
    (_a3 = closeRef.current) == null || _a3.removeAttribute("open");
  }, []);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
    "section",
    {
      ref: observerRef,
      className: "grid w-full gap-4 md:max-w-xs md:ml-auto",
      onMouseLeave: closeDropdown,
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Heading, { size: "lead", className: "cursor-default", as: "h3", children: "Country" }, void 0, !1, {
          fileName: "app/components/CountrySelector.tsx",
          lineNumber: 53,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "relative", children: /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
          "details",
          {
            className: "absolute w-full border rounded border-contrast/30 dark:border-white open:round-b-none overflow-clip",
            ref: closeRef,
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("summary", { className: "flex items-center justify-between w-full px-4 py-3 cursor-pointer", children: selectedLocale.label }, void 0, !1, {
                fileName: "app/components/CountrySelector.tsx",
                lineNumber: 61,
                columnNumber: 11
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "w-full overflow-auto border-t border-contrast/30 dark:border-white bg-contrast/30 max-h-36", children: countries2 && Object.keys(countries2).map((countryPath) => {
                let countryLocale = countries2[countryPath], isSelected = countryLocale.language === selectedLocale.language && countryLocale.country === selectedLocale.country, countryUrlPath = getCountryUrlPath({
                  countryLocale,
                  defaultLocalePrefix,
                  pathWithoutLocale
                });
                return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
                  Country,
                  {
                    closeDropdown,
                    countryUrlPath,
                    isSelected,
                    countryLocale
                  },
                  countryPath,
                  !1,
                  {
                    fileName: "app/components/CountrySelector.tsx",
                    lineNumber: 79,
                    columnNumber: 19
                  },
                  this
                );
              }) }, void 0, !1, {
                fileName: "app/components/CountrySelector.tsx",
                lineNumber: 64,
                columnNumber: 11
              }, this)
            ]
          },
          void 0,
          !0,
          {
            fileName: "app/components/CountrySelector.tsx",
            lineNumber: 57,
            columnNumber: 9
          },
          this
        ) }, void 0, !1, {
          fileName: "app/components/CountrySelector.tsx",
          lineNumber: 56,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/CountrySelector.tsx",
      lineNumber: 48,
      columnNumber: 5
    },
    this
  );
}
function Country({
  closeDropdown,
  countryLocale,
  countryUrlPath,
  isSelected
}) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
    ChangeLocaleForm,
    {
      redirectTo: countryUrlPath,
      buyerIdentity: {
        countryCode: countryLocale.country
      },
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
        Button,
        {
          className: cx([
            "text-contrast dark:text-primary",
            "bg-primary dark:bg-contrast w-full p-2 transition rounded flex justify-start",
            "items-center text-left cursor-pointer py-2 px-4"
          ]),
          type: "submit",
          variant: "primary",
          onClick: closeDropdown,
          children: [
            countryLocale.label,
            isSelected ? /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("span", { className: "ml-2", children: /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(IconCheck, {}, void 0, !1, {
              fileName: "app/components/CountrySelector.tsx",
              lineNumber: 127,
              columnNumber: 13
            }, this) }, void 0, !1, {
              fileName: "app/components/CountrySelector.tsx",
              lineNumber: 126,
              columnNumber: 11
            }, this) : null
          ]
        },
        void 0,
        !0,
        {
          fileName: "app/components/CountrySelector.tsx",
          lineNumber: 114,
          columnNumber: 7
        },
        this
      )
    },
    countryLocale.country,
    !1,
    {
      fileName: "app/components/CountrySelector.tsx",
      lineNumber: 107,
      columnNumber: 5
    },
    this
  );
}
function ChangeLocaleForm({
  children,
  buyerIdentity,
  redirectTo
}) {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(fetcher.Form, { action: "/cart", method: "post", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
      "input",
      {
        type: "hidden",
        name: "cartAction",
        value: "UPDATE_BUYER_IDENTITY" /* UPDATE_BUYER_IDENTITY */
      },
      void 0,
      !1,
      {
        fileName: "app/components/CountrySelector.tsx",
        lineNumber: 148,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(
      "input",
      {
        type: "hidden",
        name: "buyerIdentity",
        value: JSON.stringify(buyerIdentity)
      },
      void 0,
      !1,
      {
        fileName: "app/components/CountrySelector.tsx",
        lineNumber: 153,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("input", { type: "hidden", name: "redirectTo", value: redirectTo }, void 0, !1, {
      fileName: "app/components/CountrySelector.tsx",
      lineNumber: 158,
      columnNumber: 7
    }, this),
    children
  ] }, void 0, !0, {
    fileName: "app/components/CountrySelector.tsx",
    lineNumber: 147,
    columnNumber: 5
  }, this);
}
function getCountryUrlPath({
  countryLocale,
  defaultLocalePrefix,
  pathWithoutLocale
}) {
  let countryPrefixPath = "", countryLocalePrefix = `${countryLocale.language}-${countryLocale.country}`;
  return countryLocalePrefix !== defaultLocalePrefix && (countryPrefixPath = `/${countryLocalePrefix.toLowerCase()}`), `${countryPrefixPath}${pathWithoutLocale}`;
}

// app/components/Cart.tsx
var import_react55 = __toESM(require_react());
var import_jsx_dev_runtime13 = __toESM(require_jsx_dev_runtime());
function Cart({
  layout: layout3,
  onClose,
  cart
}) {
  var _a2, _b;
  let linesCount = Boolean(((_b = (_a2 = cart == null ? void 0 : cart.lines) == null ? void 0 : _a2.edges) == null ? void 0 : _b.length) || 0);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(import_jsx_dev_runtime13.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartEmpty, { hidden: linesCount, onClose, layout: layout3 }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 38,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartDetails, { cart, layout: layout3 }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 39,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 37,
    columnNumber: 5
  }, this);
}
function CartDetails({
  layout: layout3,
  cart
}) {
  var _a2, _b;
  let isZeroCost = !cart || ((_b = (_a2 = cart == null ? void 0 : cart.cost) == null ? void 0 : _a2.subtotalAmount) == null ? void 0 : _b.amount) === "0.0";
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: {
    drawer: "grid grid-cols-1 h-screen-no-nav grid-rows-[1fr_auto]",
    page: "w-full pb-12 grid md:grid-cols-2 md:items-start gap-8 md:gap-8 lg:gap-12"
  }[layout3], children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartLines, { lines: cart == null ? void 0 : cart.lines, layout: layout3 }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 61,
      columnNumber: 7
    }, this),
    !isZeroCost && /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartSummary, { cost: cart.cost, layout: layout3, children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartDiscounts, { discountCodes: cart.discountCodes }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 64,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartCheckoutActions, { checkoutUrl: cart.checkoutUrl }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 65,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 63,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 60,
    columnNumber: 5
  }, this);
}
function CartDiscounts({
  discountCodes
}) {
  let codes = (discountCodes == null ? void 0 : discountCodes.map(({ code }) => code).join(", ")) || null;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(import_jsx_dev_runtime13.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("dl", { className: codes ? "grid" : "hidden", children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex items-center justify-between font-medium", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { as: "dt", children: "Discount(s)" }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 89,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(UpdateDiscountForm, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("button", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
          IconRemove,
          {
            "aria-hidden": "true",
            style: { height: 18, marginRight: 4 }
          },
          void 0,
          !1,
          {
            fileName: "app/components/Cart.tsx",
            lineNumber: 93,
            columnNumber: 17
          },
          this
        ) }, void 0, !1, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 92,
          columnNumber: 15
        }, this) }, void 0, !1, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 91,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { as: "dd", children: codes }, void 0, !1, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 99,
          columnNumber: 13
        }, this)
      ] }, void 0, !0, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 90,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 88,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 87,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(UpdateDiscountForm, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
      "div",
      {
        className: cx(
          codes ? "hidden" : "flex",
          "items-center gap-4 justify-between text-copy"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
            "input",
            {
              className: getInputStyleClasses(),
              type: "text",
              name: "discountCode",
              placeholder: "Discount code"
            },
            void 0,
            !1,
            {
              fileName: "app/components/Cart.tsx",
              lineNumber: 112,
              columnNumber: 11
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("button", { className: "flex justify-end font-medium whitespace-nowrap", children: "Apply Discount" }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 118,
            columnNumber: 11
          }, this)
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/components/Cart.tsx",
        lineNumber: 106,
        columnNumber: 9
      },
      this
    ) }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 105,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 85,
    columnNumber: 5
  }, this);
}
function UpdateDiscountForm({ children }) {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(fetcher.Form, { action: "/cart", method: "post", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
      "input",
      {
        type: "hidden",
        name: "cartAction",
        value: "UPDATE_DISCOUNT" /* UPDATE_DISCOUNT */
      },
      void 0,
      !1,
      {
        fileName: "app/components/Cart.tsx",
        lineNumber: 131,
        columnNumber: 7
      },
      this
    ),
    children
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 130,
    columnNumber: 5
  }, this);
}
function CartLines({
  layout: layout3 = "drawer",
  lines: cartLines
}) {
  let currentLines = cartLines ? flattenConnection(cartLines) : [], scrollRef = (0, import_react55.useRef)(null), { y: y4 } = useScroll_default(scrollRef), className = cx([
    y4 > 0 ? "border-t" : "",
    layout3 === "page" ? "flex-grow md:translate-y-4" : "px-6 pb-6 sm-max:pt-2 overflow-auto transition md:px-12"
  ]);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
    "section",
    {
      ref: scrollRef,
      "aria-labelledby": "cart-contents",
      className,
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("ul", { className: "grid gap-6 md:gap-10", children: currentLines.map((line) => /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartLineItem, { line }, line.id, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 167,
        columnNumber: 11
      }, this)) }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 165,
        columnNumber: 7
      }, this)
    },
    void 0,
    !1,
    {
      fileName: "app/components/Cart.tsx",
      lineNumber: 160,
      columnNumber: 5
    },
    this
  );
}
function CartCheckoutActions({ checkoutUrl }) {
  return checkoutUrl ? /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex flex-col mt-2", children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("a", { href: checkoutUrl, target: "_self", children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Button, { as: "span", width: "full", children: "Continue to Checkout" }, void 0, !1, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 180,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 179,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 178,
    columnNumber: 5
  }, this) : null;
}
function CartSummary({
  cost,
  layout: layout3,
  children = null
}) {
  var _a2;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("section", { "aria-labelledby": "summary-heading", className: {
    drawer: "grid gap-4 p-6 border-t md:px-12",
    page: "sticky top-nav grid gap-6 p-4 md:px-6 md:translate-y-4 bg-primary/5 rounded w-full"
  }[layout3], children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("h2", { id: "summary-heading", className: "sr-only", children: "Order summary" }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 205,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("dl", { className: "grid", children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex items-center justify-between font-medium", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { as: "dt", children: "Subtotal" }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 210,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { as: "dd", "data-test": "subtotal", children: (_a2 = cost == null ? void 0 : cost.subtotalAmount) != null && _a2.amount ? /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Money, { data: cost == null ? void 0 : cost.subtotalAmount }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 213,
        columnNumber: 15
      }, this) : "-" }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 211,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 209,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 208,
      columnNumber: 7
    }, this),
    children
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 204,
    columnNumber: 5
  }, this);
}
function CartLineItem({ line }) {
  var _a2, _b, _c;
  if (!(line != null && line.id))
    return null;
  let { id, quantity, merchandise } = line;
  return typeof quantity > "u" || !(merchandise != null && merchandise.product) ? null : /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("li", { className: "flex gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex-shrink", children: merchandise.image && /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
      Image,
      {
        width: 220,
        height: 220,
        data: merchandise.image,
        className: "object-cover object-center w-24 h-24 border rounded md:w-28 md:h-28",
        alt: merchandise.title
      },
      void 0,
      !1,
      {
        fileName: "app/components/Cart.tsx",
        lineNumber: 236,
        columnNumber: 11
      },
      this
    ) }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 234,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex justify-between flex-grow", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "grid gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Heading, { as: "h3", size: "copy", children: (_a2 = merchandise == null ? void 0 : merchandise.product) != null && _a2.handle ? /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Link3, { to: `/products/${merchandise.product.handle}`, children: ((_b = merchandise == null ? void 0 : merchandise.product) == null ? void 0 : _b.title) || "" }, void 0, !1, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 250,
          columnNumber: 15
        }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { children: ((_c = merchandise == null ? void 0 : merchandise.product) == null ? void 0 : _c.title) || "" }, void 0, !1, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 254,
          columnNumber: 15
        }, this) }, void 0, !1, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 248,
          columnNumber: 11
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "grid pb-2", children: ((merchandise == null ? void 0 : merchandise.selectedOptions) || []).map((option) => /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { color: "subtle", children: [
          option.name,
          ": ",
          option.value
        ] }, option.name, !0, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 260,
          columnNumber: 15
        }, this)) }, void 0, !1, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 258,
          columnNumber: 11
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex justify-start text-copy", children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartLineQuantityAdjust, { line }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 268,
            columnNumber: 15
          }, this) }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 267,
            columnNumber: 13
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(ItemRemoveButton, { lineIds: [id] }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 270,
            columnNumber: 13
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/Cart.tsx",
          lineNumber: 266,
          columnNumber: 11
        }, this)
      ] }, void 0, !0, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 247,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(CartLinePrice, { line, as: "span" }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 274,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 273,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 246,
      columnNumber: 7
    }, this)
  ] }, id, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 233,
    columnNumber: 5
  }, this);
}
function ItemRemoveButton({ lineIds }) {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(fetcher.Form, { action: "/cart", method: "post", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
      "input",
      {
        type: "hidden",
        name: "cartAction",
        value: "REMOVE_FROM_CART" /* REMOVE_FROM_CART */
      },
      void 0,
      !1,
      {
        fileName: "app/components/Cart.tsx",
        lineNumber: 286,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("input", { type: "hidden", name: "linesIds", value: JSON.stringify(lineIds) }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 291,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
      "button",
      {
        className: "flex items-center justify-center w-10 h-10 border rounded",
        type: "submit",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("span", { className: "sr-only", children: "Remove" }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 296,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(IconRemove, { "aria-hidden": "true" }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 297,
            columnNumber: 9
          }, this)
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/components/Cart.tsx",
        lineNumber: 292,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 285,
    columnNumber: 5
  }, this);
}
function CartLineQuantityAdjust({ line }) {
  if (!line || typeof (line == null ? void 0 : line.quantity) > "u")
    return null;
  let { id: lineId, quantity } = line, prevQuantity = Number(Math.max(0, quantity - 1).toFixed(0)), nextQuantity = Number((quantity + 1).toFixed(0));
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(import_jsx_dev_runtime13.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("label", { htmlFor: `quantity-${lineId}`, className: "sr-only", children: [
      "Quantity, ",
      quantity
    ] }, void 0, !0, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 311,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex items-center border rounded", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(UpdateCartButton, { lines: [{ id: lineId, quantity: prevQuantity }], children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
        "button",
        {
          name: "decrease-quantity",
          "aria-label": "Decrease quantity",
          className: "w-10 h-10 transition  hover:text-primary",
          value: prevQuantity,
          disabled: quantity <= 1,
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("span", { children: "\u2212" }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 323,
            columnNumber: 13
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/Cart.tsx",
          lineNumber: 316,
          columnNumber: 11
        },
        this
      ) }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 315,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "px-2 text-center", "data-test": "item-quantity", children: quantity }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 327,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(UpdateCartButton, { lines: [{ id: lineId, quantity: nextQuantity }], children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
        "button",
        {
          className: "w-10 h-10 transition  hover:text-primary",
          name: "increase-quantity",
          value: nextQuantity,
          "aria-label": "Increase quantity",
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("span", { children: "+" }, void 0, !1, {
            fileName: "app/components/Cart.tsx",
            lineNumber: 338,
            columnNumber: 13
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/Cart.tsx",
          lineNumber: 332,
          columnNumber: 11
        },
        this
      ) }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 331,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 314,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 310,
    columnNumber: 5
  }, this);
}
function UpdateCartButton({
  children,
  lines
}) {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(fetcher.Form, { action: "/cart", method: "post", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("input", { type: "hidden", name: "cartAction", value: "UPDATE_CART" /* UPDATE_CART */ }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 357,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("input", { type: "hidden", name: "lines", value: JSON.stringify(lines) }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 358,
      columnNumber: 7
    }, this),
    children
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 356,
    columnNumber: 5
  }, this);
}
function CartLinePrice({
  line,
  priceType = "regular",
  ...passthroughProps
}) {
  var _a2, _b;
  if (!((_a2 = line == null ? void 0 : line.cost) != null && _a2.amountPerQuantity) || !((_b = line == null ? void 0 : line.cost) != null && _b.totalAmount))
    return null;
  let moneyV2 = priceType === "regular" ? line.cost.totalAmount : line.cost.compareAtAmountPerQuantity;
  return moneyV2 == null ? null : /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Money, { withoutTrailingZeros: !0, ...passthroughProps, data: moneyV2 }, void 0, !1, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 384,
    columnNumber: 10
  }, this);
}
function CartEmpty({
  hidden: hidden2 = !1,
  layout: layout3 = "drawer",
  onClose
}) {
  let scrollRef = (0, import_react55.useRef)(null), { y: y4 } = useScroll_default(scrollRef), container = {
    drawer: cx([
      "content-start gap-4 px-6 pb-8 transition overflow-y-scroll md:gap-12 md:px-12 h-screen-no-nav md:pb-12",
      y4 > 0 ? "border-t" : ""
    ]),
    page: cx([
      hidden2 ? "" : "grid",
      "pb-12 w-full md:items-start gap-4 md:gap-8 lg:gap-12"
    ])
  };
  return /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { ref: scrollRef, className: container[layout3], hidden: hidden2, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("section", { className: "grid gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Text, { format: !0, children: "Looks like you haven\u2019t added anything yet, let\u2019s get you started!" }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 413,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Button, { onClick: onClose, children: "Continue shopping" }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 418,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/Cart.tsx",
        lineNumber: 417,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 412,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("section", { className: "grid gap-8 pt-16", children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(
      FeaturedProducts,
      {
        count: 4,
        heading: "Shop Best Sellers",
        layout: layout3,
        onClose,
        sortKey: "BEST_SELLING"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Cart.tsx",
        lineNumber: 422,
        columnNumber: 9
      },
      this
    ) }, void 0, !1, {
      fileName: "app/components/Cart.tsx",
      lineNumber: 421,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Cart.tsx",
    lineNumber: 411,
    columnNumber: 5
  }, this);
}

// app/components/CartLoading.tsx
var import_jsx_dev_runtime14 = __toESM(require_jsx_dev_runtime());
function CartLoading() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: "flex w-full h-screen-no-nav justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: 38,
      height: 38,
      viewBox: "0 0 38 38",
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("defs", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("linearGradient", { x1: "8.042%", y1: "0%", x2: "65.682%", y2: "23.865%", id: "a", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("stop", { stopColor: "#fff", stopOpacity: 0, offset: "0%" }, void 0, !1, {
            fileName: "app/components/CartLoading.tsx",
            lineNumber: 13,
            columnNumber: 13
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("stop", { stopColor: "#fff", stopOpacity: ".631", offset: "63.146%" }, void 0, !1, {
            fileName: "app/components/CartLoading.tsx",
            lineNumber: 14,
            columnNumber: 13
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("stop", { stopColor: "#fff", offset: "100%" }, void 0, !1, {
            fileName: "app/components/CartLoading.tsx",
            lineNumber: 15,
            columnNumber: 13
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/CartLoading.tsx",
          lineNumber: 12,
          columnNumber: 11
        }, this) }, void 0, !1, {
          fileName: "app/components/CartLoading.tsx",
          lineNumber: 11,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("g", { fill: "none", fillRule: "evenodd", children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("g", { transform: "translate(1 1)", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(
            "path",
            {
              d: "M36 18c0-9.94-8.06-18-18-18",
              id: "Oval-2",
              stroke: "url(#a)",
              strokeWidth: 2,
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(
                "animateTransform",
                {
                  attributeName: "transform",
                  type: "rotate",
                  from: "0 18 18",
                  to: "360 18 18",
                  dur: "0.9s",
                  repeatCount: "indefinite"
                },
                void 0,
                !1,
                {
                  fileName: "app/components/CartLoading.tsx",
                  lineNumber: 26,
                  columnNumber: 15
                },
                this
              )
            },
            void 0,
            !1,
            {
              fileName: "app/components/CartLoading.tsx",
              lineNumber: 20,
              columnNumber: 13
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("circle", { fill: "#fff", cx: 36, cy: 18, r: 1, children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(
            "animateTransform",
            {
              attributeName: "transform",
              type: "rotate",
              from: "0 18 18",
              to: "360 18 18",
              dur: "0.9s",
              repeatCount: "indefinite"
            },
            void 0,
            !1,
            {
              fileName: "app/components/CartLoading.tsx",
              lineNumber: 36,
              columnNumber: 15
            },
            this
          ) }, void 0, !1, {
            fileName: "app/components/CartLoading.tsx",
            lineNumber: 35,
            columnNumber: 13
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/CartLoading.tsx",
          lineNumber: 19,
          columnNumber: 11
        }, this) }, void 0, !1, {
          fileName: "app/components/CartLoading.tsx",
          lineNumber: 18,
          columnNumber: 9
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/CartLoading.tsx",
      lineNumber: 5,
      columnNumber: 7
    },
    this
  ) }, void 0, !1, {
    fileName: "app/components/CartLoading.tsx",
    lineNumber: 3,
    columnNumber: 5
  }, this);
}

// app/components/OrderCard.tsx
var import_jsx_dev_runtime15 = __toESM(require_jsx_dev_runtime());

// app/components/AccountDetails.tsx
var import_jsx_dev_runtime16 = __toESM(require_jsx_dev_runtime());

// app/components/AccountAddressBook.tsx
var import_jsx_dev_runtime17 = __toESM(require_jsx_dev_runtime());

// app/components/Modal.tsx
var import_jsx_dev_runtime18 = __toESM(require_jsx_dev_runtime());

// app/components/Link.tsx
var import_jsx_dev_runtime19 = __toESM(require_jsx_dev_runtime());
function Link3(props) {
  var _a2;
  let { to, className, ...resOfProps } = props, [root] = useMatches2(), selectedLocale = (_a2 = root.data) == null ? void 0 : _a2.selectedLocale, toWithLocale = to;
  return typeof to == "string" && (toWithLocale = selectedLocale ? `${selectedLocale.pathPrefix}${to}` : to), typeof className == "function" ? /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)(NavLink2, { to: toWithLocale, className, ...resOfProps }, void 0, !1, {
    fileName: "app/components/Link.tsx",
    lineNumber: 41,
    columnNumber: 7
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)(Link2, { to: toWithLocale, className, ...resOfProps }, void 0, !1, {
    fileName: "app/components/Link.tsx",
    lineNumber: 45,
    columnNumber: 10
  }, this);
}

// app/components/FeaturedCollections.tsx
var import_jsx_dev_runtime20 = __toESM(require_jsx_dev_runtime());
function FeaturedCollections({
  collections,
  title = "Collections",
  ...props
}) {
  if (!(collections && collections.length > 0))
    return null;
  let items = collections.filter((item) => item.image).length;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(Section, { ...props, heading: title, children: /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(Grid, { items, children: collections.map((collection) => collection != null && collection.image ? /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(Link3, { to: `/collections/${collection.handle}`, children: /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)("div", { className: "grid gap-4", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)("div", { className: "card-image bg-primary/5 aspect-[3/2]", children: (collection == null ? void 0 : collection.image) && /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(
      Image,
      {
        alt: `Image of ${collection.title}`,
        data: collection.image,
        height: 400,
        sizes: "(max-width: 32em) 100vw, 33vw",
        width: 600,
        widths: [400, 500, 600, 700, 800, 900],
        loaderOptions: {
          scale: 2,
          crop: "center"
        }
      },
      void 0,
      !1,
      {
        fileName: "app/components/FeaturedCollections.tsx",
        lineNumber: 32,
        columnNumber: 21
      },
      this
    ) }, void 0, !1, {
      fileName: "app/components/FeaturedCollections.tsx",
      lineNumber: 30,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime20.jsxDEV)(Heading, { size: "copy", children: collection.title }, void 0, !1, {
      fileName: "app/components/FeaturedCollections.tsx",
      lineNumber: 46,
      columnNumber: 17
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/FeaturedCollections.tsx",
    lineNumber: 29,
    columnNumber: 15
  }, this) }, collection.id, !1, {
    fileName: "app/components/FeaturedCollections.tsx",
    lineNumber: 28,
    columnNumber: 13
  }, this) : null) }, void 0, !1, {
    fileName: "app/components/FeaturedCollections.tsx",
    lineNumber: 22,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/FeaturedCollections.tsx",
    lineNumber: 21,
    columnNumber: 5
  }, this);
}

// app/components/Hero.tsx
var import_jsx_dev_runtime21 = __toESM(require_jsx_dev_runtime());

// app/components/SortFilter.tsx
var import_react57 = __toESM(require_react());
var import_jsx_dev_runtime22 = __toESM(require_jsx_dev_runtime());

// app/components/Grid.tsx
var import_jsx_dev_runtime23 = __toESM(require_jsx_dev_runtime());
function Grid({
  as: Component4 = "div",
  className,
  flow = "row",
  gap = "default",
  items = 4,
  layout: layout3 = "default",
  ...props
}) {
  let layouts = {
    default: `grid-cols-1 ${items === 2 && "md:grid-cols-2"}  ${items === 3 && "sm:grid-cols-3"} ${items > 3 && "md:grid-cols-3"} ${items >= 4 && "lg:grid-cols-4"}`,
    products: `grid-cols-2 ${items >= 3 && "md:grid-cols-3"} ${items >= 4 && "lg:grid-cols-4"}`,
    auto: "auto-cols-auto",
    blog: "grid-cols-1 md:grid-cols-2"
  }, gaps = {
    default: "grid gap-2 gap-y-6 md:gap-4 lg:gap-6",
    blog: "grid gap-6"
  }, styles = cx({
    row: "grid-flow-row",
    col: "grid-flow-col"
  }[flow], gaps[gap], layouts[layout3], className);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime23.jsxDEV)(Component4, { ...props, className: styles }, void 0, !1, {
    fileName: "app/components/Grid.tsx",
    lineNumber: 43,
    columnNumber: 10
  }, this);
}

// app/components/FeaturedProducts.tsx
var import_react58 = __toESM(require_react());
var import_jsx_dev_runtime24 = __toESM(require_jsx_dev_runtime());
function FeaturedProducts({
  count: count2 = 4,
  heading = "Shop Best Sellers",
  layout: layout3 = "drawer",
  onClose,
  query: query2,
  reverse,
  sortKey = "BEST_SELLING"
}) {
  let { load, data } = useFetcher2(), queryString = (0, import_react58.useMemo)(
    () => Object.entries({ count: count2, sortKey, query: query2, reverse }).map(([key, val]) => val ? `${key}=${val}` : null).filter(Boolean).join("&"),
    [count2, sortKey, query2, reverse]
  );
  return (0, import_react58.useEffect)(() => {
    load(`/api/products?${queryString}`);
  }, [load, queryString]), /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(import_jsx_dev_runtime24.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(Heading, { format: !0, size: "copy", className: "t-4", children: heading }, void 0, !1, {
      fileName: "app/components/FeaturedProducts.tsx",
      lineNumber: 55,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(
      "div",
      {
        className: cx([
          "grid grid-cols-2 gap-x-6 gap-y-8",
          layout3 === "page" ? "md:grid-cols-4 sm:grid-col-4" : ""
        ]),
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(
          FeatureProductsContent,
          {
            count: count2,
            onClick: onClose,
            products: data == null ? void 0 : data.products
          },
          void 0,
          !1,
          {
            fileName: "app/components/FeaturedProducts.tsx",
            lineNumber: 64,
            columnNumber: 9
          },
          this
        )
      },
      void 0,
      !1,
      {
        fileName: "app/components/FeaturedProducts.tsx",
        lineNumber: 58,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/FeaturedProducts.tsx",
    lineNumber: 54,
    columnNumber: 5
  }, this);
}
function FeatureProductsContent({
  count: count2 = 4,
  onClick: onClick2,
  products
}) {
  let id = (0, import_react58.useId)();
  return products ? (products == null ? void 0 : products.length) === 0 ? /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(Text, { format: !0, children: "No products found." }, void 0, !1, {
    fileName: "app/components/FeaturedProducts.tsx",
    lineNumber: 102,
    columnNumber: 12
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(import_jsx_dev_runtime24.Fragment, { children: products.map((product) => /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(
    ProductCard,
    {
      product,
      onClick: onClick2,
      quickAdd: !0
    },
    product.id,
    !1,
    {
      fileName: "app/components/FeaturedProducts.tsx",
      lineNumber: 108,
      columnNumber: 9
    },
    this
  )) }, void 0, !1, {
    fileName: "app/components/FeaturedProducts.tsx",
    lineNumber: 106,
    columnNumber: 5
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(import_jsx_dev_runtime24.Fragment, { children: [...new Array(count2)].map((_3, i9) => /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)("div", { className: "grid gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(Skeleton, { className: "aspect-[3/4]" }, void 0, !1, {
      fileName: "app/components/FeaturedProducts.tsx",
      lineNumber: 93,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(Skeleton, { className: "w-32 h-4" }, void 0, !1, {
      fileName: "app/components/FeaturedProducts.tsx",
      lineNumber: 94,
      columnNumber: 13
    }, this)
  ] }, `${id + i9}`, !0, {
    fileName: "app/components/FeaturedProducts.tsx",
    lineNumber: 92,
    columnNumber: 11
  }, this)) }, void 0, !1, {
    fileName: "app/components/FeaturedProducts.tsx",
    lineNumber: 90,
    columnNumber: 7
  }, this);
}

// app/components/Pagination.tsx
var import_react60 = __toESM(require_react());

// app/components/AddToCartButton.tsx
var import_jsx_dev_runtime25 = __toESM(require_jsx_dev_runtime());
function AddToCartButton({
  children,
  lines,
  className = "",
  variant = "primary",
  width = "full",
  analytics,
  ...props
}) {
  var _a2;
  let [root] = useMatches2(), selectedLocale = (_a2 = root == null ? void 0 : root.data) == null ? void 0 : _a2.selectedLocale, fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(fetcher.Form, { action: "/cart", method: "post", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("input", { type: "hidden", name: "cartAction", value: "ADD_TO_CART" /* ADD_TO_CART */ }, void 0, !1, {
      fileName: "app/components/AddToCartButton.tsx",
      lineNumber: 29,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("input", { type: "hidden", name: "lines", value: JSON.stringify(lines) }, void 0, !1, {
      fileName: "app/components/AddToCartButton.tsx",
      lineNumber: 31,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("input", { type: "hidden", name: "analytics", value: JSON.stringify(analytics) }, void 0, !1, {
      fileName: "app/components/AddToCartButton.tsx",
      lineNumber: 32,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(
      Button,
      {
        as: "button",
        type: "submit",
        width,
        variant,
        className,
        ...props,
        children
      },
      void 0,
      !1,
      {
        fileName: "app/components/AddToCartButton.tsx",
        lineNumber: 33,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/AddToCartButton.tsx",
    lineNumber: 28,
    columnNumber: 5
  }, this);
}

// app/components/Icon.tsx
var import_jsx_dev_runtime26 = __toESM(require_jsx_dev_runtime());
function Icon({
  children,
  className,
  fill = "currentColor",
  stroke,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      ...props,
      fill,
      stroke,
      className: cx("w-5 h-5", className),
      children
    },
    void 0,
    !1,
    {
      fileName: "app/components/Icon.tsx",
      lineNumber: 15,
      columnNumber: 5
    },
    this
  );
}
function IconMenu(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Icon, { ...props, stroke: props.stroke || "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Menu" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 31,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("line", { x1: "3", y1: "6.375", x2: "17", y2: "6.375", strokeWidth: "1.25" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 32,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("line", { x1: "3", y1: "10.375", x2: "17", y2: "10.375", strokeWidth: "1.25" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 33,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("line", { x1: "3", y1: "14.375", x2: "17", y2: "14.375", strokeWidth: "1.25" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 34,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/Icon.tsx",
    lineNumber: 30,
    columnNumber: 5
  }, this);
}
function IconClose(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Icon, { ...props, stroke: props.stroke || "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Close" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 42,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "line",
      {
        x1: "4.44194",
        y1: "4.30806",
        x2: "15.7556",
        y2: "15.6218",
        strokeWidth: "1.25"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 43,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "line",
      {
        y1: "-0.625",
        x2: "16",
        y2: "-0.625",
        transform: "matrix(-0.707107 0.707107 0.707107 0.707107 16 4.75)",
        strokeWidth: "1.25"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 50,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Icon.tsx",
    lineNumber: 41,
    columnNumber: 5
  }, this);
}
function IconCaret({
  direction = "down",
  stroke = "currentColor",
  ...props
}) {
  let rotate;
  switch (direction) {
    case "down":
      rotate = "rotate-0";
      break;
    case "up":
      rotate = "rotate-180";
      break;
    case "left":
      rotate = "-rotate-90";
      break;
    case "right":
      rotate = "rotate-90";
      break;
    default:
      rotate = "rotate-0";
  }
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
    Icon,
    {
      ...props,
      className: `w-5 h-5 transition ${rotate}`,
      fill: "transparent",
      stroke,
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Caret" }, void 0, !1, {
          fileName: "app/components/Icon.tsx",
          lineNumber: 120,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("path", { d: "M14 8L10 12L6 8", strokeWidth: "1.25" }, void 0, !1, {
          fileName: "app/components/Icon.tsx",
          lineNumber: 121,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/Icon.tsx",
      lineNumber: 114,
      columnNumber: 5
    },
    this
  );
}
function IconBag(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Icon, { ...props, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Bag" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 139,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "path",
      {
        fillRule: "evenodd",
        d: "M8.125 5a1.875 1.875 0 0 1 3.75 0v.375h-3.75V5Zm-1.25.375V5a3.125 3.125 0 1 1 6.25 0v.375h3.5V15A2.625 2.625 0 0 1 14 17.625H6A2.625 2.625 0 0 1 3.375 15V5.375h3.5ZM4.625 15V6.625h10.75V15c0 .76-.616 1.375-1.375 1.375H6c-.76 0-1.375-.616-1.375-1.375Z"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 140,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Icon.tsx",
    lineNumber: 138,
    columnNumber: 5
  }, this);
}
function IconAccount(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Icon, { ...props, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Account" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 151,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "path",
      {
        fillRule: "evenodd",
        d: "M9.9998 12.625c-1.9141 0-3.6628.698-5.0435 1.8611C3.895 13.2935 3.25 11.7221 3.25 10c0-3.728 3.022-6.75 6.75-6.75 3.7279 0 6.75 3.022 6.75 6.75 0 1.7222-.645 3.2937-1.7065 4.4863-1.3807-1.1632-3.1295-1.8613-5.0437-1.8613ZM10 18c-2.3556 0-4.4734-1.0181-5.9374-2.6382C2.7806 13.9431 2 12.0627 2 10c0-4.4183 3.5817-8 8-8s8 3.5817 8 8-3.5817 8-8 8Zm0-12.5c-1.567 0-2.75 1.394-2.75 3s1.183 3 2.75 3 2.75-1.394 2.75-3-1.183-3-2.75-3Z"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 152,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Icon.tsx",
    lineNumber: 150,
    columnNumber: 5
  }, this);
}
function IconSearch(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Icon, { ...props, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Search" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 172,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "path",
      {
        fillRule: "evenodd",
        d: "M13.3 8.52a4.77 4.77 0 1 1-9.55 0 4.77 4.77 0 0 1 9.55 0Zm-.98 4.68a6.02 6.02 0 1 1 .88-.88l4.3 4.3-.89.88-4.3-4.3Z"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 173,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Icon.tsx",
    lineNumber: 171,
    columnNumber: 5
  }, this);
}
function IconCheck({
  stroke = "currentColor",
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Icon, { ...props, fill: "transparent", stroke, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Check" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 187,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("circle", { cx: "10", cy: "10", r: "7.25", strokeWidth: "1.25" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 188,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "path",
      {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "1.5",
        d: "m7.04 10.37 2.42 2.41 3.5-5.56"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 189,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Icon.tsx",
    lineNumber: 186,
    columnNumber: 5
  }, this);
}
function IconRemove(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Icon, { ...props, fill: "transparent", stroke: props.stroke || "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("title", { children: "Remove" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 218,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "path",
      {
        d: "M4 6H16",
        strokeWidth: "1.25",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 219,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("path", { d: "M8.5 9V14", strokeLinecap: "round", strokeLinejoin: "round" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 225,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("path", { d: "M11.5 9V14", strokeLinecap: "round", strokeLinejoin: "round" }, void 0, !1, {
      fileName: "app/components/Icon.tsx",
      lineNumber: 226,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "path",
      {
        d: "M5.5 6L6 17H14L14.5 6",
        strokeWidth: "1.25",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 227,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      "path",
      {
        d: "M8 6L8 5C8 4 8.75 3 10 3C11.25 3 12 4 12 5V6",
        strokeWidth: "1.25"
      },
      void 0,
      !1,
      {
        fileName: "app/components/Icon.tsx",
        lineNumber: 233,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/Icon.tsx",
    lineNumber: 217,
    columnNumber: 5
  }, this);
}

// app/components/FeaturedSection.tsx
var import_react62 = __toESM(require_react());
var import_jsx_dev_runtime27 = __toESM(require_jsx_dev_runtime());
function FeaturedSection() {
  let { load, data } = useFetcher2(), path2 = usePrefixPathWithLocale("/featured-products");
  if ((0, import_react62.useEffect)(() => {
    load(path2);
  }, [load, path2]), !data)
    return null;
  let { featuredCollections, featuredProducts } = data;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(import_jsx_dev_runtime27.Fragment, { children: [
    featuredCollections.length < 2 && /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(
      FeaturedCollections,
      {
        title: "Popular Collections",
        collections: featuredCollections
      },
      void 0,
      !1,
      {
        fileName: "app/components/FeaturedSection.tsx",
        lineNumber: 28,
        columnNumber: 9
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(ProductSwimlane, { products: featuredProducts }, void 0, !1, {
      fileName: "app/components/FeaturedSection.tsx",
      lineNumber: 33,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/FeaturedSection.tsx",
    lineNumber: 26,
    columnNumber: 5
  }, this);
}

// app/components/GenericError.tsx
var import_jsx_dev_runtime28 = __toESM(require_jsx_dev_runtime());
function GenericError({
  error
}) {
  let heading = "Something\u2019s wrong here.", description = "We found an error while loading this page.";
  return error && (description += `
${error.message}`, console.error(error)), /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(import_jsx_dev_runtime28.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(PageHeader, { heading, children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(Text, { width: "narrow", as: "p", children: description }, void 0, !1, {
        fileName: "app/components/GenericError.tsx",
        lineNumber: 23,
        columnNumber: 9
      }, this),
      (error == null ? void 0 : error.stack) && /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(
        "pre",
        {
          style: {
            padding: "2rem",
            background: "hsla(10, 50%, 50%, 0.1)",
            color: "red",
            overflow: "auto",
            maxWidth: "100%"
          },
          dangerouslySetInnerHTML: {
            __html: addLinksToStackTrace(error.stack)
          }
        },
        void 0,
        !1,
        {
          fileName: "app/components/GenericError.tsx",
          lineNumber: 27,
          columnNumber: 11
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(Button, { width: "auto", variant: "secondary", to: "/", children: "Take me to the home page" }, void 0, !1, {
        fileName: "app/components/GenericError.tsx",
        lineNumber: 40,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/GenericError.tsx",
      lineNumber: 22,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(FeaturedSection, {}, void 0, !1, {
      fileName: "app/components/GenericError.tsx",
      lineNumber: 44,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/GenericError.tsx",
    lineNumber: 21,
    columnNumber: 5
  }, this);
}
function addLinksToStackTrace(stackTrace) {
  return stackTrace == null ? void 0 : stackTrace.replace(
    /^\s*at\s?.*?[(\s]((\/|\w\:).+)\)\n/gim,
    (all, m1) => all.replace(
      m1,
      `<a href="vscode://file${m1}" class="hover:underline">${m1}</a>`
    )
  );
}

// app/components/NotFound.tsx
var import_jsx_dev_runtime29 = __toESM(require_jsx_dev_runtime());
function NotFound({ type = "page" }) {
  let heading = `We\u2019ve lost this ${type}`, description = `We couldn\u2019t find the ${type} you\u2019re looking for. Try checking the URL or heading back to the home page.`;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(import_jsx_dev_runtime29.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(PageHeader, { heading, children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(Text, { width: "narrow", as: "p", children: description }, void 0, !1, {
        fileName: "app/components/NotFound.tsx",
        lineNumber: 12,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(Button, { width: "auto", variant: "secondary", to: "/", children: "Take me to the home page" }, void 0, !1, {
        fileName: "app/components/NotFound.tsx",
        lineNumber: 15,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/NotFound.tsx",
      lineNumber: 11,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(FeaturedSection, {}, void 0, !1, {
      fileName: "app/components/NotFound.tsx",
      lineNumber: 19,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/NotFound.tsx",
    lineNumber: 10,
    columnNumber: 5
  }, this);
}

// app/styles/app.css
var app_default = "/build/_assets/app-JLOYNU4R.css";

// node_modules/tiny-invariant/dist/esm/tiny-invariant.js
var isProduction = !1, prefix = "Invariant failed";
function invariant4(condition, message) {
  if (!condition) {
    if (isProduction)
      throw new Error(prefix);
    var provided = typeof message == "function" ? message() : message, value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
  }
}

// app/root.jsx
init_groq_esm();

// app/hooks/useAnalytics.tsx
var import_react65 = __toESM(require_react());
function useAnalytics(hasUserConsent, locale) {
  useShopifyCookies({ hasUserConsent });
  let location2 = useLocation(), pageAnalytics = {
    ...useDataFromMatches(
      "analytics"
    ),
    currency: locale.currency,
    acceptedLanguage: locale.language,
    hasUserConsent
  };
  (0, import_react65.useEffect)(() => {
    let payload = {
      ...getClientBrowserParameters(),
      ...pageAnalytics
    };
    sendShopifyAnalytics({
      eventName: AnalyticsEventName.PAGE_VIEW,
      payload
    });
  }, [location2]);
  let cartData = useDataFromFetchers({
    formDataKey: "cartAction",
    formDataValue: "ADD_TO_CART" /* ADD_TO_CART */,
    dataKey: "analytics"
  });
  if (cartData) {
    let addToCartPayload = {
      ...getClientBrowserParameters(),
      ...pageAnalytics,
      ...cartData
    };
    sendShopifyAnalytics({
      eventName: AnalyticsEventName.ADD_TO_CART,
      payload: addToCartPayload
    });
  }
}
function useDataFromMatches(dataKey) {
  let matches = useMatches2(), data = {};
  return matches.forEach((event2) => {
    let eventData = event2 == null ? void 0 : event2.data;
    eventData && eventData[dataKey] && Object.assign(data, eventData[dataKey]);
  }), data;
}
function useDataFromFetchers({
  formDataKey,
  formDataValue,
  dataKey
}) {
  var _a2;
  let fetchers = useFetchers2(), data = {};
  for (let fetcher of fetchers) {
    let formData = (_a2 = fetcher.submission) == null ? void 0 : _a2.formData, fetcherData = fetcher.data;
    if (formData && formData.get(formDataKey) === formDataValue && fetcherData && fetcherData[dataKey]) {
      Object.assign(data, fetcherData[dataKey]);
      try {
        if (formData.get(dataKey)) {
          let dataInForm = JSON.parse(String(formData.get(dataKey)));
          Object.assign(data, dataInForm);
        }
      } catch {
      }
    }
  }
  return Object.keys(data).length ? data : void 0;
}

// app/components/global/GlobalHeader.jsx
var import_react71 = __toESM(require_react());

// node_modules/remix-utils/browser/react/use-route-data.js
function useRouteData(routeId) {
  var _a2;
  return (_a2 = useMatches2().find((match2) => match2.id === routeId)) === null || _a2 === void 0 ? void 0 : _a2.data;
}

// app/components/global/GlobalMenuItemDesktop.jsx
var import_react68 = __toESM(require_react());

// app/components/parts/Link.jsx
var import_jsx_dev_runtime30 = __toESM(require_jsx_dev_runtime()), link = cva("w-max", {
  variants: {
    intent: {
      link: [
        "hover:text-accent focus-visible:text-accent focus:outline-none focus:border-none"
      ],
      block: ["focus:outline-none focus:border-none"],
      "button-sm": [
        "p-1 inline-block hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-base": [
        "p-2 inline-block  hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-lg": [
        "p-3 inline-block  hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-xl": [
        "px-4 py-2 inline-block hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ],
      "button-2xl": [
        "px-4 py-2 inline-block hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none"
      ]
    },
    colour: {
      light: ["text-white"],
      dark: ["text-black"],
      mono: [
        "text-white bg-black hover:text-black hover:bg-white focus-visible:text-black focus-visible:bg-white"
      ]
    }
  },
  compoundVariants: [
    {
      intent: [
        "button-sm",
        "button-base",
        "button-lg",
        "button-xl",
        "button-2xl"
      ],
      colour: "dark",
      className: "text-white bg-black"
    }
  ],
  defaultVariants: {
    intent: "link",
    colour: "dark"
  }
}), Link4 = ({ children, to, intent, colour, className }) => /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)(Link2, { to, className: link({ intent, colour, className }), children }, void 0, !1, {
  fileName: "app/components/parts/Link.jsx",
  lineNumber: 56,
  columnNumber: 5
}, this);

// app/components/parts/Text.jsx
var import_jsx_dev_runtime31 = __toESM(require_jsx_dev_runtime()), text = cva("break-words font-sans", {
  variants: {
    intent: {
      "ui-xs": ["ui-xs"],
      "ui-sm": ["ui-sm"],
      "ui-base": ["ui-base"],
      "ui-lg": ["ui-lg"],
      "ui-xl": ["ui-xl"],
      "ui-2xl": ["ui-2xl"],
      "ui-3xl": ["ui-3xl"],
      "ui-4xl": ["ui-4xl"],
      "ui-5xl": ["ui-5xl"],
      "ui-6xl": ["ui-6xl"],
      "button-sm": ["ui-sm"],
      "button-base": ["ui-base"],
      "button-lg": ["ui-lg"],
      "button-xl": ["ui-xl"],
      "button-2xl": ["ui-2xl"],
      "bl-heading-sm": ["bl-heading-sm"],
      "bl-heading-base": ["bl-heading-base"],
      "bl-heading-lg": ["bl-heading-lg"],
      "bl-heading-xl": ["bl-heading-xl"],
      "bl-heading-2xl": ["bl-heading-2xl"],
      "bl-heading-3xl": ["bl-heading-3xl"],
      "bl-body": ["bl-body"],
      "bl-body-alt": ["bl-body-alt"],
      "bl-body-lg": ["bl-body-lg"],
      "bl-quote": ["bl-quote"]
    }
  },
  defaultVariants: {
    intent: "ui-base"
  },
  compoundVariants: [
    {
      intent: ["bl-body"],
      className: "font-serif"
    }
  ]
}), Text2 = ({ tag, intent, className, children, colour }) => {
  let ElementTag = `${tag || "p"}`;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(ElementTag, { className: text({ intent, className }), style: { color: colour }, children }, void 0, !1, {
    fileName: "app/components/parts/Text.jsx",
    lineNumber: 47,
    columnNumber: 5
  }, this);
};

// app/components/global/GlobalMenuItemDesktop.jsx
var import_jsx_dev_runtime32 = __toESM(require_jsx_dev_runtime()), MenuDesktop = ({ title, children }) => {
  let navigate = useNavigate();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Rt.Group, { as: "nav", className: "hidden md:flex", children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Rt, { className: "relative", children: ({ open }) => /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(import_jsx_dev_runtime32.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(
      Rt.Button,
      {
        className: "hover:text-accent focus-visible:text-accent focus:outline-none focus:border-none antialiased",
        onClick: () => navigate(children[0].slug),
        onMouseEnter: (e5) => e5.target.click(),
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Text2, { intent: "ui-2xl", className: "font-normal", children: title }, void 0, !1, {
          fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
          lineNumber: 21,
          columnNumber: 15
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
        lineNumber: 14,
        columnNumber: 13
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Ye, { as: import_react68.Fragment, children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Rt.Panel, { className: "absolute", children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("ul", { className: "relative bg-white w-max -left-2 border-8 border-white flex flex-col gap-2", children: children.map((child) => /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("li", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Text2, { intent: "ui-2xl", className: "leading-none", children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Link4, { to: child.slug, children: child.title }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 31,
      columnNumber: 25
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 30,
      columnNumber: 23
    }, this) }, child._id, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 29,
      columnNumber: 21
    }, this)) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 27,
      columnNumber: 17
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 26,
      columnNumber: 15
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
      lineNumber: 25,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
    lineNumber: 13,
    columnNumber: 11
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
    lineNumber: 11,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemDesktop.jsx",
    lineNumber: 10,
    columnNumber: 5
  }, this);
}, GlobalMenuItemDesktop_default = MenuDesktop;

// app/components/global/GlobalMenuItemMobile.jsx
var import_jsx_dev_runtime33 = __toESM(require_jsx_dev_runtime()), MenuItemMobile = ({ title, children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("ul", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("li", { children: [
  title,
  /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("ul", { className: "ml-4", children: children.map((child) => /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("li", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(Link4, { to: child.slug, children: child.title }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemMobile.jsx",
    lineNumber: 11,
    columnNumber: 15
  }, this) }, child._id, !1, {
    fileName: "app/components/global/GlobalMenuItemMobile.jsx",
    lineNumber: 10,
    columnNumber: 13
  }, this)) }, void 0, !1, {
    fileName: "app/components/global/GlobalMenuItemMobile.jsx",
    lineNumber: 8,
    columnNumber: 9
  }, this)
] }, void 0, !0, {
  fileName: "app/components/global/GlobalMenuItemMobile.jsx",
  lineNumber: 6,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/global/GlobalMenuItemMobile.jsx",
  lineNumber: 5,
  columnNumber: 5
}, this), GlobalMenuItemMobile_default = MenuItemMobile;

// app/components/global/GlobalTitle.jsx
var import_jsx_dev_runtime34 = __toESM(require_jsx_dev_runtime()), GlobalTitle = () => {
  let { settings } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Text2, { tag: "h1", intent: "ui-3xl", children: /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Link4, { to: "/", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("span", { className: "sr-only md:not-sr-only", children: settings.title }, void 0, !1, {
      fileName: "app/components/global/GlobalTitle.jsx",
      lineNumber: 10,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("span", { "aria-hidden": !0, className: "md:hidden", children: settings.shortTitle }, void 0, !1, {
      fileName: "app/components/global/GlobalTitle.jsx",
      lineNumber: 11,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalTitle.jsx",
    lineNumber: 9,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalTitle.jsx",
    lineNumber: 8,
    columnNumber: 5
  }, this);
}, GlobalTitle_default = GlobalTitle;

// app/components/parts/Badge.jsx
var import_jsx_dev_runtime35 = __toESM(require_jsx_dev_runtime()), layout = cva(
  "absolute aspect-square bg-black text-white rounded-full flex justify-center items-center select-none z-10",
  {
    variants: {
      intent: {
        small: ["w-6 h-6 text-sm"],
        big: ["w-12 h-12 text-xl"]
      },
      location: {
        top: ["top-0 right-0 -translate-x-1/2 translate-y-full"],
        bottom: ["bottom-0 right-0 -translate-x-1/2 -translate-y-1/2"]
      }
    },
    defaultVariants: {
      intent: "small",
      location: "bottom"
    }
  }
), Badge2 = ({ intent, location: location2, children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: layout({ intent, location: location2 }), "aria-hidden": !0, children: /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("span", { className: "leading-none", children }, void 0, !1, {
  fileName: "app/components/parts/Badge.jsx",
  lineNumber: 26,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/parts/Badge.jsx",
  lineNumber: 25,
  columnNumber: 5
}, this);

// app/components/icons/Icons.jsx
var import_jsx_dev_runtime36 = __toESM(require_jsx_dev_runtime()), BasketIcon = () => /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
  "svg",
  {
    id: "a",
    xmlns: "http://www.w3.org/2000/svg",
    width: "80.11",
    height: "59.56",
    viewBox: "0 0 80.11 59.56",
    className: "w-full h-full",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "40.14",
          y1: "12.95",
          x2: "40.14",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 11,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "polygon",
        {
          points: ".86 12.88 9.75 58.85 70.75 58.85 79.26 12.88 .86 12.88",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 21,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "25.47",
          y1: "12.95",
          x2: "25.47",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 28,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "8.08",
          y1: "50.31",
          x2: "72.43",
          y2: "50.31",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 38,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "54.81",
          y1: "12.95",
          x2: "54.81",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 48,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "5.75",
          y1: "37.46",
          x2: "74.8",
          y2: "37.46",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 58,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "3.51",
          y1: "24.61",
          x2: "77.34",
          y2: "24.61",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 68,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "polyline",
        {
          points: "54.85 12.79 54.85 .71 25.46 .71 25.46 12.79",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 78,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "18.14",
          y1: "12.95",
          x2: "18.14",
          y2: "58.91",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 85,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "10.81",
          y1: "12.7",
          x2: "10.81",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 95,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "32.81",
          y1: "12.7",
          x2: "32.81",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 105,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "47.48",
          y1: "12.7",
          x2: "47.48",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 115,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "62.14",
          y1: "12.7",
          x2: "62.14",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 125,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "69.48",
          y1: "12.7",
          x2: "69.48",
          y2: "58.66",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.42"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 135,
          columnNumber: 7
        },
        this
      )
    ]
  },
  void 0,
  !0,
  {
    fileName: "app/components/icons/Icons.jsx",
    lineNumber: 3,
    columnNumber: 5
  },
  this
), BasketIconThin = () => /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
  "svg",
  {
    id: "a",
    xmlns: "http://www.w3.org/2000/svg",
    width: "219.09",
    height: "162.65",
    viewBox: "0 0 219.09 162.65",
    className: "relative w-full h-auto",
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "109.78",
          y1: "34.69",
          x2: "109.78",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 158,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "polygon",
        {
          points: ".97 34.51 25.59 161.85 194.55 161.85 218.13 34.51 .97 34.51",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 168,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "69.15",
          y1: "34.69",
          x2: "69.15",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 175,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "20.97",
          y1: "138.18",
          x2: "199.21",
          y2: "138.18",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 185,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "150.41",
          y1: "34.69",
          x2: "150.41",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 195,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "14.51",
          y1: "102.59",
          x2: "205.77",
          y2: "102.59",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 205,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "8.3",
          y1: "66.99",
          x2: "212.82",
          y2: "66.99",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 215,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "polyline",
        {
          points: "150.52 34.26 150.52 .8 69.11 .8 69.11 34.26",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 225,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "48.83",
          y1: "34.69",
          x2: "48.83",
          y2: "162",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 232,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "28.52",
          y1: "34.01",
          x2: "28.52",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 242,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "89.46",
          y1: "34.01",
          x2: "89.46",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 252,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "130.09",
          y1: "34.01",
          x2: "130.09",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 262,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "170.72",
          y1: "34.01",
          x2: "170.72",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 272,
          columnNumber: 8
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(
        "line",
        {
          x1: "191.04",
          y1: "34.01",
          x2: "191.04",
          y2: "161.32",
          fill: "none",
          stroke: "#000000",
          strokeMiterlimit: "10",
          strokeWidth: "1.6"
        },
        void 0,
        !1,
        {
          fileName: "app/components/icons/Icons.jsx",
          lineNumber: 282,
          columnNumber: 8
        },
        this
      )
    ]
  },
  void 0,
  !0,
  {
    fileName: "app/components/icons/Icons.jsx",
    lineNumber: 150,
    columnNumber: 6
  },
  this
);

// app/components/global/GlobalHeader.jsx
var import_jsx_dev_runtime37 = __toESM(require_jsx_dev_runtime()), GlobalHeader = () => {
  let { menu } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(
    Rt,
    {
      className: "fixed h-24 w-screen bg-white z-50",
      as: "header",
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)("div", { className: "relative w-full p-4 flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(GlobalTitle_default, {}, void 0, !1, {
            fileName: "app/components/global/GlobalHeader.jsx",
            lineNumber: 20,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)("div", { className: "flex items-center gap-16", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)("div", { className: "md:hidden", children: /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(
              Rt.Button,
              {
                className: " focus-visible:underline focus:border-none focus:outline-none",
                children: ({ open }) => /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)("span", { children: open ? "X" : "Menu" }, void 0, !1, {
                  fileName: "app/components/global/GlobalHeader.jsx",
                  lineNumber: 29,
                  columnNumber: 28
                }, this)
              },
              void 0,
              !1,
              {
                fileName: "app/components/global/GlobalHeader.jsx",
                lineNumber: 24,
                columnNumber: 13
              },
              this
            ) }, void 0, !1, {
              fileName: "app/components/global/GlobalHeader.jsx",
              lineNumber: 23,
              columnNumber: 11
            }, this),
            menu.map((section) => /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(
              GlobalMenuItemDesktop_default,
              {
                title: section.name,
                children: section.children
              },
              section._id,
              !1,
              {
                fileName: "app/components/global/GlobalHeader.jsx",
                lineNumber: 35,
                columnNumber: 15
              },
              this
            )),
            /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(CartButton, {}, void 0, !1, {
              fileName: "app/components/global/GlobalHeader.jsx",
              lineNumber: 42,
              columnNumber: 11
            }, this)
          ] }, void 0, !0, {
            fileName: "app/components/global/GlobalHeader.jsx",
            lineNumber: 21,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalHeader.jsx",
          lineNumber: 19,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(Ye, { as: import_react71.Fragment, children: /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(
          Rt.Panel,
          {
            focus: !0,
            className: "absolute inset-0 top-20 h-[calc(100vh-5rem)] bg-white p-4 md:hidden",
            children: menu.map((section) => /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(
              GlobalMenuItemMobile_default,
              {
                title: section.name,
                children: section.children
              },
              section._id,
              !1,
              {
                fileName: "app/components/global/GlobalHeader.jsx",
                lineNumber: 53,
                columnNumber: 15
              },
              this
            ))
          },
          void 0,
          !1,
          {
            fileName: "app/components/global/GlobalHeader.jsx",
            lineNumber: 47,
            columnNumber: 9
          },
          this
        ) }, void 0, !1, {
          fileName: "app/components/global/GlobalHeader.jsx",
          lineNumber: 46,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 15,
      columnNumber: 5
    },
    this
  );
}, GlobalHeader_default = GlobalHeader, CartButton = () => {
  let { cart } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(Link4, { to: "/cart", "aria-label": "Go to cart", children: /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)("div", { className: "h-14", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(BasketIcon, {}, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 73,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(import_react71.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(Badge2, { intent: "small", children: "0" }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 74,
      columnNumber: 29
    }, this), children: /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(Await2, { resolve: cart, children: (cart2) => /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)(Badge2, { intent: "small", children: (cart2 == null ? void 0 : cart2.totalQuantity) || 0 }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 77,
      columnNumber: 15
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 75,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/global/GlobalHeader.jsx",
      lineNumber: 74,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalHeader.jsx",
    lineNumber: 72,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/global/GlobalHeader.jsx",
    lineNumber: 71,
    columnNumber: 5
  }, this);
};

// node_modules/@portabletext/toolkit/dist/portable-text-toolkit.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i9 = 1; i9 < arguments.length; i9++) {
    var source = arguments[i9] != null ? arguments[i9] : {};
    i9 % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  return key = _toPropertyKey2(key), key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return typeof key == "symbol" ? key : String(key);
}
function _toPrimitive2(input, hint) {
  if (typeof input != "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res != "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function isPortableTextSpan(node) {
  return node._type === "span" && "text" in node && typeof node.text == "string" && (typeof node.marks > "u" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == "string"));
}
function isPortableTextBlock(node) {
  return typeof node._type == "string" && node._type[0] !== "@" && (!("markDefs" in node) || Array.isArray(node.markDefs) && node.markDefs.every((def) => typeof def._key == "string")) && "children" in node && Array.isArray(node.children) && node.children.every((child) => typeof child == "object" && "_type" in child);
}
function isPortableTextListItemBlock(block) {
  return isPortableTextBlock(block) && "listItem" in block && typeof block.listItem == "string" && (typeof block.level > "u" || typeof block.level == "number");
}
function isPortableTextToolkitList(block) {
  return block._type === "@list";
}
function isPortableTextToolkitSpan(span) {
  return span._type === "@span";
}
function isPortableTextToolkitTextNode(node) {
  return node._type === "@text";
}
var knownDecorators = ["strong", "em", "code", "underline", "strike-through"];
function sortMarksByOccurences(span, index, blockChildren) {
  if (!isPortableTextSpan(span) || !span.marks)
    return [];
  if (!span.marks.length)
    return [];
  let marks = span.marks.slice(), occurences = {};
  return marks.forEach((mark) => {
    occurences[mark] = 1;
    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {
      let sibling = blockChildren[siblingIndex];
      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1)
        occurences[mark]++;
      else
        break;
    }
  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));
}
function sortMarks(occurences, markA, markB) {
  let aOccurences = occurences[markA], bOccurences = occurences[markB];
  if (aOccurences !== bOccurences)
    return bOccurences - aOccurences;
  let aKnownPos = knownDecorators.indexOf(markA), bKnownPos = knownDecorators.indexOf(markB);
  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);
}
function buildMarksTree(block) {
  var _a2;
  let {
    children,
    markDefs = []
  } = block;
  if (!children || !children.length)
    return [];
  let sortedMarks = children.map(sortMarksByOccurences), rootNode = {
    _type: "@span",
    children: [],
    markType: "<unknown>"
  }, nodeStack = [rootNode];
  for (let i9 = 0; i9 < children.length; i9++) {
    let span = children[i9];
    if (!span)
      continue;
    let marksNeeded = sortedMarks[i9] || [], pos = 1;
    if (nodeStack.length > 1)
      for (pos; pos < nodeStack.length; pos++) {
        let mark = ((_a2 = nodeStack[pos]) == null ? void 0 : _a2.markKey) || "", index = marksNeeded.indexOf(mark);
        if (index === -1)
          break;
        marksNeeded.splice(index, 1);
      }
    nodeStack = nodeStack.slice(0, pos);
    let currentNode = nodeStack[nodeStack.length - 1];
    if (!!currentNode) {
      for (let markKey of marksNeeded) {
        let markDef = markDefs.find((def) => def._key === markKey), markType = markDef ? markDef._type : markKey, node = {
          _type: "@span",
          _key: span._key,
          children: [],
          markDef,
          markType,
          markKey
        };
        currentNode.children.push(node), nodeStack.push(node), currentNode = node;
      }
      if (isPortableTextSpan(span)) {
        let lines = span.text.split(`
`);
        for (let line = lines.length; line-- > 1; )
          lines.splice(line, 0, `
`);
        currentNode.children = currentNode.children.concat(lines.map((text2) => ({
          _type: "@text",
          text: text2
        })));
      } else
        currentNode.children = currentNode.children.concat(span);
    }
  }
  return rootNode.children;
}
function nestLists(blocks, mode) {
  let tree = [], currentList;
  for (let i9 = 0; i9 < blocks.length; i9++) {
    let block = blocks[i9];
    if (!!block) {
      if (!isPortableTextListItemBlock(block)) {
        tree.push(block), currentList = void 0;
        continue;
      }
      if (!currentList) {
        currentList = listFromBlock(block, i9, mode), tree.push(currentList);
        continue;
      }
      if (blockMatchesList(block, currentList)) {
        currentList.children.push(block);
        continue;
      }
      if ((block.level || 1) > currentList.level) {
        let newList = listFromBlock(block, i9, mode);
        if (mode === "html") {
          let lastListItem = currentList.children[currentList.children.length - 1], newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {
            children: [...lastListItem.children, newList]
          });
          currentList.children[currentList.children.length - 1] = newLastChild;
        } else
          currentList.children.push(newList);
        currentList = newList;
        continue;
      }
      if ((block.level || 1) < currentList.level) {
        let matchingBranch = tree[tree.length - 1], match2 = matchingBranch && findListMatching(matchingBranch, block);
        if (match2) {
          currentList = match2, currentList.children.push(block);
          continue;
        }
        currentList = listFromBlock(block, i9, mode), tree.push(currentList);
        continue;
      }
      if (block.listItem !== currentList.listItem) {
        let matchingBranch = tree[tree.length - 1], match2 = matchingBranch && findListMatching(matchingBranch, {
          level: block.level || 1
        });
        if (match2 && match2.listItem === block.listItem) {
          currentList = match2, currentList.children.push(block);
          continue;
        } else {
          currentList = listFromBlock(block, i9, mode), tree.push(currentList);
          continue;
        }
      }
      console.warn("Unknown state encountered for block", block), tree.push(block);
    }
  }
  return tree;
}
function blockMatchesList(block, list2) {
  return (block.level || 1) === list2.level && block.listItem === list2.listItem;
}
function listFromBlock(block, index, mode) {
  return {
    _type: "@list",
    _key: "".concat(block._key || "".concat(index), "-parent"),
    mode,
    level: block.level || 1,
    listItem: block.listItem,
    children: [block]
  };
}
function findListMatching(rootNode, matching) {
  let level = matching.level || 1, style = matching.listItem || "normal", filterOnType = typeof matching.listItem == "string";
  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || "normal") === style)
    return rootNode;
  if (!("children" in rootNode))
    return;
  let node = rootNode.children[rootNode.children.length - 1];
  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;
}
var leadingSpace = /^\s/, trailingSpace = /^\s/;
function toPlainText(block) {
  let blocks = Array.isArray(block) ? block : [block], text2 = "";
  return blocks.forEach((current, index) => {
    if (!isPortableTextBlock(current))
      return;
    let pad = !1;
    current.children.forEach((span) => {
      isPortableTextSpan(span) ? (text2 += pad && text2 && !trailingSpace.test(text2) && !leadingSpace.test(span.text) ? " " : "", text2 += span.text, pad = !1) : pad = !0;
    }), index !== blocks.length - 1 && (text2 += `

`);
  }), text2;
}
function spanToPlainText(span) {
  let text2 = "";
  return span.children.forEach((current) => {
    isPortableTextToolkitTextNode(current) ? text2 += current.text : isPortableTextToolkitSpan(current) && (text2 += spanToPlainText(current));
  }), text2;
}
var LIST_NEST_MODE_HTML = "html";

// node_modules/@portabletext/react/dist/react-portable-text.esm.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime()), import_react74 = __toESM(require_react());
function mergeComponents(parent, overrides) {
  let {
    block,
    list: list2,
    listItem,
    marks,
    types,
    ...rest
  } = overrides;
  return {
    ...parent,
    block: mergeDeeply(parent, overrides, "block"),
    list: mergeDeeply(parent, overrides, "list"),
    listItem: mergeDeeply(parent, overrides, "listItem"),
    marks: mergeDeeply(parent, overrides, "marks"),
    types: mergeDeeply(parent, overrides, "types"),
    ...rest
  };
}
function mergeDeeply(parent, overrides, key) {
  let override = overrides[key], parentVal = parent[key];
  return typeof override == "function" || override && typeof parentVal == "function" ? override : override ? {
    ...parentVal,
    ...override
  } : parentVal;
}
var link2 = (_ref) => {
  let {
    children,
    value
  } = _ref;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("a", {
    href: value == null ? void 0 : value.href,
    children
  });
}, underlineStyle = {
  textDecoration: "underline"
}, defaultMarks = {
  em: (_ref2) => {
    let {
      children
    } = _ref2;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("em", {
      children
    });
  },
  strong: (_ref3) => {
    let {
      children
    } = _ref3;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("strong", {
      children
    });
  },
  code: (_ref4) => {
    let {
      children
    } = _ref4;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("code", {
      children
    });
  },
  underline: (_ref5) => {
    let {
      children
    } = _ref5;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", {
      style: underlineStyle,
      children
    });
  },
  "strike-through": (_ref6) => {
    let {
      children
    } = _ref6;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("del", {
      children
    });
  },
  link: link2
}, defaultLists = {
  number: (_ref7) => {
    let {
      children
    } = _ref7;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("ol", {
      children
    });
  },
  bullet: (_ref8) => {
    let {
      children
    } = _ref8;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("ul", {
      children
    });
  }
}, DefaultListItem = (_ref9) => {
  let {
    children
  } = _ref9;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("li", {
    children
  });
}, getTemplate = (type, prop) => "[@portabletext/react] Unknown ".concat(type, ", specify a component for it in the `components.").concat(prop, "` prop"), unknownTypeWarning = (typeName) => getTemplate('block type "'.concat(typeName, '"'), "types"), unknownMarkWarning = (markType) => getTemplate('mark type "'.concat(markType, '"'), "marks"), unknownBlockStyleWarning = (blockStyle) => getTemplate('block style "'.concat(blockStyle, '"'), "block"), unknownListStyleWarning = (listStyle) => getTemplate('list style "'.concat(listStyle, '"'), "list"), unknownListItemStyleWarning = (listStyle) => getTemplate('list item style "'.concat(listStyle, '"'), "listItem");
function printWarning(message) {
  console.warn(message);
}
var hidden = {
  display: "none"
}, DefaultUnknownType = (_ref10) => {
  let {
    value,
    isInline
  } = _ref10, warning3 = unknownTypeWarning(value._type);
  return isInline ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", {
    style: hidden,
    children: warning3
  }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", {
    style: hidden,
    children: warning3
  });
}, DefaultUnknownMark = (_ref11) => {
  let {
    markType,
    children
  } = _ref11;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", {
    className: "unknown__pt__mark__".concat(markType),
    children
  });
}, DefaultUnknownBlockStyle = (_ref12) => {
  let {
    children
  } = _ref12;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("p", {
    children
  });
}, DefaultUnknownList = (_ref13) => {
  let {
    children
  } = _ref13;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("ul", {
    children
  });
}, DefaultUnknownListItem = (_ref14) => {
  let {
    children
  } = _ref14;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("li", {
    children
  });
}, DefaultHardBreak = () => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("br", {}), defaultBlockStyles = {
  normal: (_ref15) => {
    let {
      children
    } = _ref15;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("p", {
      children
    });
  },
  blockquote: (_ref16) => {
    let {
      children
    } = _ref16;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("blockquote", {
      children
    });
  },
  h1: (_ref17) => {
    let {
      children
    } = _ref17;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h1", {
      children
    });
  },
  h2: (_ref18) => {
    let {
      children
    } = _ref18;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h2", {
      children
    });
  },
  h3: (_ref19) => {
    let {
      children
    } = _ref19;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h3", {
      children
    });
  },
  h4: (_ref20) => {
    let {
      children
    } = _ref20;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h4", {
      children
    });
  },
  h5: (_ref21) => {
    let {
      children
    } = _ref21;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h5", {
      children
    });
  },
  h6: (_ref22) => {
    let {
      children
    } = _ref22;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h6", {
      children
    });
  }
}, defaultComponents = {
  types: {},
  block: defaultBlockStyles,
  marks: defaultMarks,
  list: defaultLists,
  listItem: DefaultListItem,
  hardBreak: DefaultHardBreak,
  unknownType: DefaultUnknownType,
  unknownMark: DefaultUnknownMark,
  unknownList: DefaultUnknownList,
  unknownListItem: DefaultUnknownListItem,
  unknownBlockStyle: DefaultUnknownBlockStyle
};
function PortableText(_ref23) {
  let {
    value: input,
    components: componentOverrides,
    listNestingMode,
    onMissingComponent: missingComponentHandler = printWarning
  } = _ref23, handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(input) ? input : [input], nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML), components2 = (0, import_react74.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]), renderNode = (0, import_react74.useMemo)(() => getNodeRenderer(components2, handleMissingComponent), [components2, handleMissingComponent]), rendered = nested.map((node, index) => renderNode({
    node,
    index,
    isInline: !1,
    renderNode
  }));
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, {
    children: rendered
  });
}
var getNodeRenderer = (components2, handleMissingComponent) => {
  function renderNode(options) {
    let {
      node,
      index,
      isInline
    } = options, key = node._key || "node-".concat(index);
    return isPortableTextToolkitList(node) ? renderList(node, index, key) : isPortableTextListItemBlock(node) ? renderListItem(node, index, key) : isPortableTextToolkitSpan(node) ? renderSpan(node, index, key) : isPortableTextBlock(node) ? renderBlock(node, index, key, isInline) : isPortableTextToolkitTextNode(node) ? renderText(node, key) : renderCustomBlock(node, index, key, isInline);
  }
  function renderListItem(node, index, key) {
    let tree = serializeBlock({
      node,
      index,
      isInline: !1,
      renderNode
    }), renderer = components2.listItem, Li = (typeof renderer == "function" ? renderer : renderer[node.listItem]) || components2.unknownListItem;
    if (Li === components2.unknownListItem) {
      let style = node.listItem || "bullet";
      handleMissingComponent(unknownListItemStyleWarning(style), {
        type: style,
        nodeType: "listItemStyle"
      });
    }
    let children = tree.children;
    if (node.style && node.style !== "normal") {
      let {
        listItem,
        ...blockNode
      } = node;
      children = renderNode({
        node: blockNode,
        index,
        isInline: !1,
        renderNode
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Li, {
      value: node,
      index,
      isInline: !1,
      renderNode,
      children
    }, key);
  }
  function renderList(node, index, key) {
    let children = node.children.map((child, childIndex) => renderNode({
      node: child._key ? child : {
        ...child,
        _key: "li-".concat(index, "-").concat(childIndex)
      },
      index,
      isInline: !1,
      renderNode
    })), component = components2.list, List = (typeof component == "function" ? component : component[node.listItem]) || components2.unknownList;
    if (List === components2.unknownList) {
      let style = node.listItem || "bullet";
      handleMissingComponent(unknownListStyleWarning(style), {
        nodeType: "listStyle",
        type: style
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(List, {
      value: node,
      index,
      isInline: !1,
      renderNode,
      children
    }, key);
  }
  function renderSpan(node, _index3, key) {
    let {
      markDef,
      markType,
      markKey
    } = node, Span = components2.marks[markType] || components2.unknownMark, children = node.children.map((child, childIndex) => renderNode({
      node: child,
      index: childIndex,
      isInline: !0,
      renderNode
    }));
    return Span === components2.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {
      nodeType: "mark",
      type: markType
    }), /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Span, {
      text: spanToPlainText(node),
      value: markDef,
      markType,
      markKey,
      renderNode,
      children
    }, key);
  }
  function renderBlock(node, index, key, isInline) {
    let {
      _key,
      ...props
    } = serializeBlock({
      node,
      index,
      isInline,
      renderNode
    }), style = props.node.style || "normal", Block = (typeof components2.block == "function" ? components2.block : components2.block[style]) || components2.unknownBlockStyle;
    return Block === components2.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {
      nodeType: "blockStyle",
      type: style
    }), /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Block, {
      ...props,
      value: props.node,
      renderNode
    }, key);
  }
  function renderText(node, key) {
    if (node.text === `
`) {
      let HardBreak = components2.hardBreak;
      return HardBreak ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(HardBreak, {}, key) : `
`;
    }
    return node.text;
  }
  function renderCustomBlock(node, index, key, isInline) {
    let Node2 = components2.types[node._type], nodeOptions = {
      value: node,
      isInline,
      index,
      renderNode
    };
    if (Node2)
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Node2, {
        ...nodeOptions
      }, key);
    handleMissingComponent(unknownTypeWarning(node._type), {
      nodeType: "block",
      type: node._type
    });
    let UnknownType = components2.unknownType;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(UnknownType, {
      ...nodeOptions
    }, key);
  }
  return renderNode;
};
function serializeBlock(options) {
  let {
    node,
    index,
    isInline,
    renderNode
  } = options, children = buildMarksTree(node).map((child, i9) => renderNode({
    node: child,
    isInline: !0,
    index: i9,
    renderNode
  }));
  return {
    _key: node._key || "block-".concat(index),
    children,
    index,
    isInline,
    node
  };
}
function noop() {
}

// app/components/parts/Layout.jsx
var import_jsx_dev_runtime38 = __toESM(require_jsx_dev_runtime()), layout2 = cva("layout", {
  variants: {
    intent: {
      page: [""],
      footer: ["p-4 lg:p-0 lg:py-4"],
      banner: [
        "w-full aspect-video p-6 flex flex-col justify-between gap-4 max-h-[calc(100vh-12rem)]"
      ],
      cart: ["p-4"],
      space: ["px-4 py-4 sm:p-8"],
      module: ["px-4 my-8"],
      "module-full": ["my-8"],
      "module-inline": ["prose my-8 break-inside-avoid-column"],
      text: ["py-8"],
      grid: ["grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3"],
      article: ["flex flex-col"],
      centre: [
        "flex",
        "justify-center",
        "items-center",
        "h-[calc(100vh-6rem)]",
        "pb-24"
      ],
      columns: ["md:columns-2 lg:columns-3 px-4"]
    }
  },
  defaultVariants: {
    intent: "page"
  }
}), Layout2 = ({ tag, className, intent, children, colour }) => {
  let ElementTag = `${tag || "section"}`;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime38.jsxDEV)(
    ElementTag,
    {
      className: layout2({ intent, className }),
      style: { background: colour },
      children
    },
    void 0,
    !1,
    {
      fileName: "app/components/parts/Layout.jsx",
      lineNumber: 37,
      columnNumber: 5
    },
    this
  );
};

// app/components/parts/PortableTextPlain.jsx
var PortableTextPlain = ({ text: text2 }) => toPlainText(text2);

// app/components/modules/CollapsibleModule.jsx
var import_jsx_dev_runtime39 = __toESM(require_jsx_dev_runtime()), CollapsibleModule = ({ content }) => {
  let { name, heading, text: text2 } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)(Layout2, { children: [
    name && /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)(Text2, { tag: "h5", intent: "bl-heading-sm", className: "!mb-0", children: name }, void 0, !1, {
      fileName: "app/components/modules/CollapsibleModule.jsx",
      lineNumber: 10,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)("details", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)("summary", { className: "flex gap-2", children: /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)(Text2, { tag: "p", intent: "bl-body-lg", className: "select-none", children: heading || "Collapsible" }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 16,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 15,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)(Text2, { tag: "p", intent: "bl-body-alt", className: "mt-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime39.jsxDEV)(PortableTextPlain, { text: text2 }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 21,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/modules/CollapsibleModule.jsx",
        lineNumber: 20,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/modules/CollapsibleModule.jsx",
      lineNumber: 14,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/modules/CollapsibleModule.jsx",
    lineNumber: 8,
    columnNumber: 5
  }, this);
};

// app/components/parts/SanityImage.jsx
var import_react76 = __toESM(require_react()), import_image_url = __toESM(require_image_url_umd());

// node_modules/@sanity/asset-utils/dist/asset-utils.esm.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o8) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(o9) {
    return o9.__proto__ || Object.getPrototypeOf(o9);
  }, _getPrototypeOf(o8);
}
function _setPrototypeOf(o8, p8) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o9, p9) {
    return o9.__proto__ = p9, o9;
  }, _setPrototypeOf(o8, p8);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function _construct(Parent, args, Class) {
  return _isNativeReflectConstruct() ? _construct = Reflect.construct.bind() : _construct = function(Parent2, args2, Class2) {
    var a9 = [null];
    a9.push.apply(a9, args2);
    var Constructor = Function.bind.apply(Parent2, a9), instance = new Constructor();
    return Class2 && _setPrototypeOf(instance, Class2.prototype), instance;
  }, _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return _wrapNativeSuper = function(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 != "function")
      throw new TypeError("Super expression must either be null or a function");
    if (typeof _cache < "u") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, Class2);
  }, _wrapNativeSuper(Class);
}
var UnresolvableError = /* @__PURE__ */ function(_Error) {
  _inheritsLoose(UnresolvableError2, _Error);
  function UnresolvableError2(inputSource, message) {
    var _this;
    return message === void 0 && (message = "Failed to resolve asset ID from source"), _this = _Error.call(this, message) || this, _this.unresolvable = !0, _this.input = inputSource, _this;
  }
  return UnresolvableError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
var cdnUrl = "https://cdn.sanity.io", fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\.[a-z0-9]+$/;
var imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\d+x\d+\.[a-z0-9]+$/;
var pathPattern = /^(images|files)\/([a-z0-9]+)\/([a-z0-9][-\w]*)\//, idPattern = /^(?:image-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\d+x\d+-[a-z0-9]+|file-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+)$/;
function isReference(ref) {
  return isObject(ref) && typeof ref._ref == "string";
}
function isAssetIdStub(stub) {
  return isObject(stub) && typeof stub._id == "string";
}
function isAssetPathStub(stub) {
  return isObject(stub) && typeof stub.path == "string";
}
function isAssetUrlStub(stub) {
  return isObject(stub) && typeof stub.url == "string";
}
function isAssetObjectStub(stub) {
  var item = stub;
  return isObject(item) && item.asset && typeof item.asset == "object";
}
function isObject(obj) {
  return obj !== null && !Array.isArray(obj) && typeof obj == "object";
}
function getUrlPath(url) {
  if (pathPattern.test(url))
    return url;
  if (!url.startsWith(cdnUrl + "/"))
    throw new UnresolvableError('Failed to resolve path from URL "' + url + '"');
  var qsPos = url.indexOf("?"), toIndex = qsPos === -1 ? void 0 : qsPos;
  return url.slice(cdnUrl.length + 1, toIndex);
}
var exampleImageId = "image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg";
function parseImageAssetId(documentId) {
  var _documentId$split2 = documentId.split("-"), assetId = _documentId$split2[1], dimensionString = _documentId$split2[2], extension = _documentId$split2[3], _split$map = (dimensionString || "").split("x").map(Number), width = _split$map[0], height = _split$map[1];
  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0))
    throw new Error("Malformed asset ID '" + documentId + `'. Expected an id like "` + exampleImageId + '".');
  return {
    type: "image",
    assetId,
    width,
    height,
    extension
  };
}
function getImageDimensions(src) {
  var imageId = getAssetDocumentId(src), _parseImageAssetId = parseImageAssetId(imageId), width = _parseImageAssetId.width, height = _parseImageAssetId.height, aspectRatio = width / height;
  return {
    width,
    height,
    aspectRatio
  };
}
function getAssetDocumentId(src) {
  var source = isAssetObjectStub(src) ? src.asset : src, id = "";
  typeof source == "string" ? id = getIdFromString(source) : isReference(source) ? id = source._ref : isAssetIdStub(source) ? id = source._id : isAssetPathStub(source) ? id = idFromUrl(cdnUrl + "/" + source.path) : isAssetUrlStub(source) && (id = idFromUrl(source.url));
  var hasId = id && idPattern.test(id);
  if (!hasId)
    throw new UnresolvableError(src);
  return id;
}
function getIdFromString(str) {
  if (idPattern.test(str))
    return str;
  if (str.indexOf(cdnUrl + "/images") === 0 || str.indexOf(cdnUrl + "/files") === 0)
    return idFromUrl(str);
  if (pathPattern.test(str))
    return idFromUrl(cdnUrl + "/" + str);
  if (isFileAssetFilename(str))
    return idFromUrl(cdnUrl + "/files/a/b/" + str);
  if (isImageAssetFilename(str))
    return idFromUrl(cdnUrl + "/images/a/b/" + str);
  throw new UnresolvableError(str);
}
function idFromUrl(url) {
  var path2 = getUrlPath(url), _path$split = path2.split("/"), type = _path$split[0], fileName = _path$split[3], prefix2 = type.replace(/s$/, "");
  return prefix2 + "-" + fileName.replace(/\./g, "-");
}
function isImageAssetFilename(filename) {
  return imageAssetFilenamePattern.test(filename);
}
function isFileAssetFilename(filename) {
  return fileAssetFilenamePattern.test(filename);
}

// app/components/parts/SanityImage.jsx
var import_jsx_dev_runtime40 = __toESM(require_jsx_dev_runtime());
function SanityImage({ value, isInline, className, alt }) {
  let { sanityProjectDetails } = useRouteData("root"), { width, height } = getImageDimensions(value);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime40.jsxDEV)(
    "img",
    {
      className: cx("not-prose h-auto w-full", className),
      src: (0, import_image_url.default)(sanityProjectDetails).image(value).width(isInline ? 100 : 800).fit("max").auto("format").url(),
      alt: alt || value.alt || "",
      loading: "lazy",
      style: {
        display: isInline ? "inline-block" : "block",
        aspectRatio: width / height
      }
    },
    void 0,
    !1,
    {
      fileName: "app/components/parts/SanityImage.jsx",
      lineNumber: 14,
      columnNumber: 5
    },
    this
  );
}

// app/components/modules/ImageModule.jsx
var import_jsx_dev_runtime41 = __toESM(require_jsx_dev_runtime()), ImageModule = ({ content }) => {
  let { caption, image, colour } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(Layout2, { intent: "module-inline", children: [
    image && /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)("div", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(SanityImage, { value: image }, void 0, !1, {
      fileName: "app/components/modules/ImageModule.jsx",
      lineNumber: 13,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/modules/ImageModule.jsx",
      lineNumber: 12,
      columnNumber: 9
    }, this),
    caption && /* @__PURE__ */ (0, import_jsx_dev_runtime41.jsxDEV)(
      Text2,
      {
        tag: "figcaption",
        intent: "bl-body-alt",
        className: "my-4",
        colour,
        children: caption
      },
      void 0,
      !1,
      {
        fileName: "app/components/modules/ImageModule.jsx",
        lineNumber: 17,
        columnNumber: 9
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/modules/ImageModule.jsx",
    lineNumber: 10,
    columnNumber: 5
  }, this);
};

// app/components/modules/ImageGridModule.jsx
var import_jsx_dev_runtime42 = __toESM(require_jsx_dev_runtime()), ImageGridModule = ({ content }) => {
  let { images } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime42.jsxDEV)(Layout2, { intent: "module-inline", children: /* @__PURE__ */ (0, import_jsx_dev_runtime42.jsxDEV)("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: images.map((image) => /* @__PURE__ */ (0, import_jsx_dev_runtime42.jsxDEV)(
    "div",
    {
      className: "w-full aspect-square",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime42.jsxDEV)(SanityImage, { value: image, className: "h-full object-cover" }, void 0, !1, {
        fileName: "app/components/modules/ImageGridModule.jsx",
        lineNumber: 16,
        columnNumber: 17
      }, this)
    },
    image._id || image._key,
    !1,
    {
      fileName: "app/components/modules/ImageGridModule.jsx",
      lineNumber: 12,
      columnNumber: 15
    },
    this
  )) }, void 0, !1, {
    fileName: "app/components/modules/ImageGridModule.jsx",
    lineNumber: 9,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/components/modules/ImageGridModule.jsx",
    lineNumber: 8,
    columnNumber: 7
  }, this);
};

// app/components/modules/CarouselModule.jsx
var import_react83 = __toESM(require_react());

// node_modules/swiper/react/swiper.js
var import_react81 = __toESM(require_react(), 1);

// node_modules/ssr-window/ssr-window.esm.js
function isObject2(obj) {
  return obj !== null && typeof obj == "object" && "constructor" in obj && obj.constructor === Object;
}
function extend(target = {}, src = {}) {
  Object.keys(src).forEach((key) => {
    typeof target[key] > "u" ? target[key] = src[key] : isObject2(src[key]) && isObject2(target[key]) && Object.keys(src[key]).length > 0 && extend(target[key], src[key]);
  });
}
var ssrDocument = {
  body: {},
  addEventListener() {
  },
  removeEventListener() {
  },
  activeElement: {
    blur() {
    },
    nodeName: ""
  },
  querySelector() {
    return null;
  },
  querySelectorAll() {
    return [];
  },
  getElementById() {
    return null;
  },
  createEvent() {
    return {
      initEvent() {
      }
    };
  },
  createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute() {
      },
      getElementsByTagName() {
        return [];
      }
    };
  },
  createElementNS() {
    return {};
  },
  importNode() {
    return null;
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: ""
  }
};
function getDocument() {
  let doc = typeof document < "u" ? document : {};
  return extend(doc, ssrDocument), doc;
}
var ssrWindow = {
  document: ssrDocument,
  navigator: {
    userAgent: ""
  },
  location: {
    hash: "",
    host: "",
    hostname: "",
    href: "",
    origin: "",
    pathname: "",
    protocol: "",
    search: ""
  },
  history: {
    replaceState() {
    },
    pushState() {
    },
    go() {
    },
    back() {
    }
  },
  CustomEvent: function() {
    return this;
  },
  addEventListener() {
  },
  removeEventListener() {
  },
  getComputedStyle() {
    return {
      getPropertyValue() {
        return "";
      }
    };
  },
  Image() {
  },
  Date() {
  },
  screen: {},
  setTimeout() {
  },
  clearTimeout() {
  },
  matchMedia() {
    return {};
  },
  requestAnimationFrame(callback) {
    return typeof setTimeout > "u" ? (callback(), null) : setTimeout(callback, 0);
  },
  cancelAnimationFrame(id) {
    typeof setTimeout > "u" || clearTimeout(id);
  }
};
function getWindow() {
  let win = typeof window < "u" ? window : {};
  return extend(win, ssrWindow), win;
}

// node_modules/swiper/shared/utils.js
function deleteProps(obj) {
  let object = obj;
  Object.keys(object).forEach((key) => {
    try {
      object[key] = null;
    } catch {
    }
    try {
      delete object[key];
    } catch {
    }
  });
}
function nextTick(callback, delay = 0) {
  return setTimeout(callback, delay);
}
function now() {
  return Date.now();
}
function getComputedStyle2(el) {
  let window2 = getWindow(), style;
  return window2.getComputedStyle && (style = window2.getComputedStyle(el, null)), !style && el.currentStyle && (style = el.currentStyle), style || (style = el.style), style;
}
function getTranslate(el, axis = "x") {
  let window2 = getWindow(), matrix, curTransform, transformMatrix, curStyle = getComputedStyle2(el, null);
  return window2.WebKitCSSMatrix ? (curTransform = curStyle.transform || curStyle.webkitTransform, curTransform.split(",").length > 6 && (curTransform = curTransform.split(", ").map((a9) => a9.replace(",", ".")).join(", ")), transformMatrix = new window2.WebKitCSSMatrix(curTransform === "none" ? "" : curTransform)) : (transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,"), matrix = transformMatrix.toString().split(",")), axis === "x" && (window2.WebKitCSSMatrix ? curTransform = transformMatrix.m41 : matrix.length === 16 ? curTransform = parseFloat(matrix[12]) : curTransform = parseFloat(matrix[4])), axis === "y" && (window2.WebKitCSSMatrix ? curTransform = transformMatrix.m42 : matrix.length === 16 ? curTransform = parseFloat(matrix[13]) : curTransform = parseFloat(matrix[5])), curTransform || 0;
}
function isObject3(o8) {
  return typeof o8 == "object" && o8 !== null && o8.constructor && Object.prototype.toString.call(o8).slice(8, -1) === "Object";
}
function isNode(node) {
  return typeof window < "u" && typeof window.HTMLElement < "u" ? node instanceof HTMLElement : node && (node.nodeType === 1 || node.nodeType === 11);
}
function extend2(...args) {
  let to = Object(args[0]), noExtend = ["__proto__", "constructor", "prototype"];
  for (let i9 = 1; i9 < args.length; i9 += 1) {
    let nextSource = args[i9];
    if (nextSource != null && !isNode(nextSource)) {
      let keysArray = Object.keys(Object(nextSource)).filter((key) => noExtend.indexOf(key) < 0);
      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        let nextKey = keysArray[nextIndex], desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        desc !== void 0 && desc.enumerable && (isObject3(to[nextKey]) && isObject3(nextSource[nextKey]) ? nextSource[nextKey].__swiper__ ? to[nextKey] = nextSource[nextKey] : extend2(to[nextKey], nextSource[nextKey]) : !isObject3(to[nextKey]) && isObject3(nextSource[nextKey]) ? (to[nextKey] = {}, nextSource[nextKey].__swiper__ ? to[nextKey] = nextSource[nextKey] : extend2(to[nextKey], nextSource[nextKey])) : to[nextKey] = nextSource[nextKey]);
      }
    }
  }
  return to;
}
function setCSSProperty(el, varName, varValue) {
  el.style.setProperty(varName, varValue);
}
function animateCSSModeScroll({
  swiper,
  targetPosition,
  side
}) {
  let window2 = getWindow(), startPosition = -swiper.translate, startTime = null, time, duration = swiper.params.speed;
  swiper.wrapperEl.style.scrollSnapType = "none", window2.cancelAnimationFrame(swiper.cssModeFrameID);
  let dir = targetPosition > startPosition ? "next" : "prev", isOutOfBound = (current, target) => dir === "next" && current >= target || dir === "prev" && current <= target, animate = () => {
    time = new Date().getTime(), startTime === null && (startTime = time);
    let progress2 = Math.max(Math.min((time - startTime) / duration, 1), 0), easeProgress = 0.5 - Math.cos(progress2 * Math.PI) / 2, currentPosition = startPosition + easeProgress * (targetPosition - startPosition);
    if (isOutOfBound(currentPosition, targetPosition) && (currentPosition = targetPosition), swiper.wrapperEl.scrollTo({
      [side]: currentPosition
    }), isOutOfBound(currentPosition, targetPosition)) {
      swiper.wrapperEl.style.overflow = "hidden", swiper.wrapperEl.style.scrollSnapType = "", setTimeout(() => {
        swiper.wrapperEl.style.overflow = "", swiper.wrapperEl.scrollTo({
          [side]: currentPosition
        });
      }), window2.cancelAnimationFrame(swiper.cssModeFrameID);
      return;
    }
    swiper.cssModeFrameID = window2.requestAnimationFrame(animate);
  };
  animate();
}
function elementChildren(element, selector = "") {
  return [...element.children].filter((el) => el.matches(selector));
}
function createElement8(tag, classes = []) {
  let el = document.createElement(tag);
  return el.classList.add(...Array.isArray(classes) ? classes : [classes]), el;
}
function elementPrevAll(el, selector) {
  let prevEls = [];
  for (; el.previousElementSibling; ) {
    let prev = el.previousElementSibling;
    selector ? prev.matches(selector) && prevEls.push(prev) : prevEls.push(prev), el = prev;
  }
  return prevEls;
}
function elementNextAll(el, selector) {
  let nextEls = [];
  for (; el.nextElementSibling; ) {
    let next = el.nextElementSibling;
    selector ? next.matches(selector) && nextEls.push(next) : nextEls.push(next), el = next;
  }
  return nextEls;
}
function elementStyle(el, prop) {
  return getWindow().getComputedStyle(el, null).getPropertyValue(prop);
}
function elementIndex(el) {
  let child = el, i9;
  if (child) {
    for (i9 = 0; (child = child.previousSibling) !== null; )
      child.nodeType === 1 && (i9 += 1);
    return i9;
  }
}
function elementParents(el, selector) {
  let parents = [], parent = el.parentElement;
  for (; parent; )
    selector ? parent.matches(selector) && parents.push(parent) : parents.push(parent), parent = parent.parentElement;
  return parents;
}
function elementOuterSize(el, size, includeMargins) {
  let window2 = getWindow();
  return includeMargins ? el[size === "width" ? "offsetWidth" : "offsetHeight"] + parseFloat(window2.getComputedStyle(el, null).getPropertyValue(size === "width" ? "margin-right" : "margin-top")) + parseFloat(window2.getComputedStyle(el, null).getPropertyValue(size === "width" ? "margin-left" : "margin-bottom")) : el.offsetWidth;
}

// node_modules/swiper/shared/get-support.js
var support;
function calcSupport() {
  let window2 = getWindow(), document2 = getDocument();
  return {
    smoothScroll: document2.documentElement && "scrollBehavior" in document2.documentElement.style,
    touch: !!("ontouchstart" in window2 || window2.DocumentTouch && document2 instanceof window2.DocumentTouch)
  };
}
function getSupport() {
  return support || (support = calcSupport()), support;
}

// node_modules/swiper/shared/get-device.js
var deviceCached;
function calcDevice({
  userAgent
} = {}) {
  let support2 = getSupport(), window2 = getWindow(), platform = window2.navigator.platform, ua = userAgent || window2.navigator.userAgent, device = {
    ios: !1,
    android: !1
  }, screenWidth = window2.screen.width, screenHeight = window2.screen.height, android = ua.match(/(Android);?[\s\/]+([\d.]+)?/), ipad = ua.match(/(iPad).*OS\s([\d_]+)/), ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/), iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/), windows = platform === "Win32", macos = platform === "MacIntel", iPadScreens = ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"];
  return !ipad && macos && support2.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0 && (ipad = ua.match(/(Version)\/([\d.]+)/), ipad || (ipad = [0, 1, "13_0_0"]), macos = !1), android && !windows && (device.os = "android", device.android = !0), (ipad || iphone || ipod) && (device.os = "ios", device.ios = !0), device;
}
function getDevice(overrides = {}) {
  return deviceCached || (deviceCached = calcDevice(overrides)), deviceCached;
}

// node_modules/swiper/shared/get-browser.js
var browser;
function calcBrowser() {
  let window2 = getWindow(), needPerspectiveFix = !1;
  function isSafari() {
    let ua = window2.navigator.userAgent.toLowerCase();
    return ua.indexOf("safari") >= 0 && ua.indexOf("chrome") < 0 && ua.indexOf("android") < 0;
  }
  if (isSafari()) {
    let ua = String(window2.navigator.userAgent);
    if (ua.includes("Version/")) {
      let [major, minor] = ua.split("Version/")[1].split(" ")[0].split(".").map((num) => Number(num));
      needPerspectiveFix = major < 16 || major === 16 && minor < 2;
    }
  }
  return {
    isSafari: needPerspectiveFix || isSafari(),
    needPerspectiveFix,
    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window2.navigator.userAgent)
  };
}
function getBrowser() {
  return browser || (browser = calcBrowser()), browser;
}

// node_modules/swiper/core/modules/resize/resize.js
function Resize({
  swiper,
  on: on2,
  emit
}) {
  let window2 = getWindow(), observer = null, animationFrame = null, resizeHandler = () => {
    !swiper || swiper.destroyed || !swiper.initialized || (emit("beforeResize"), emit("resize"));
  }, createObserver2 = () => {
    !swiper || swiper.destroyed || !swiper.initialized || (observer = new ResizeObserver((entries) => {
      animationFrame = window2.requestAnimationFrame(() => {
        let {
          width,
          height
        } = swiper, newWidth = width, newHeight = height;
        entries.forEach(({
          contentBoxSize,
          contentRect,
          target
        }) => {
          target && target !== swiper.el || (newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize, newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize);
        }), (newWidth !== width || newHeight !== height) && resizeHandler();
      });
    }), observer.observe(swiper.el));
  }, removeObserver = () => {
    animationFrame && window2.cancelAnimationFrame(animationFrame), observer && observer.unobserve && swiper.el && (observer.unobserve(swiper.el), observer = null);
  }, orientationChangeHandler = () => {
    !swiper || swiper.destroyed || !swiper.initialized || emit("orientationchange");
  };
  on2("init", () => {
    if (swiper.params.resizeObserver && typeof window2.ResizeObserver < "u") {
      createObserver2();
      return;
    }
    window2.addEventListener("resize", resizeHandler), window2.addEventListener("orientationchange", orientationChangeHandler);
  }), on2("destroy", () => {
    removeObserver(), window2.removeEventListener("resize", resizeHandler), window2.removeEventListener("orientationchange", orientationChangeHandler);
  });
}

// node_modules/swiper/core/modules/observer/observer.js
function Observer({
  swiper,
  extendParams,
  on: on2,
  emit
}) {
  let observers = [], window2 = getWindow(), attach = (target, options = {}) => {
    let ObserverFunc = window2.MutationObserver || window2.WebkitMutationObserver, observer = new ObserverFunc((mutations) => {
      if (swiper.__preventObserver__)
        return;
      if (mutations.length === 1) {
        emit("observerUpdate", mutations[0]);
        return;
      }
      let observerUpdate = function() {
        emit("observerUpdate", mutations[0]);
      };
      window2.requestAnimationFrame ? window2.requestAnimationFrame(observerUpdate) : window2.setTimeout(observerUpdate, 0);
    });
    observer.observe(target, {
      attributes: typeof options.attributes > "u" ? !0 : options.attributes,
      childList: typeof options.childList > "u" ? !0 : options.childList,
      characterData: typeof options.characterData > "u" ? !0 : options.characterData
    }), observers.push(observer);
  }, init = () => {
    if (!!swiper.params.observer) {
      if (swiper.params.observeParents) {
        let containerParents = elementParents(swiper.el);
        for (let i9 = 0; i9 < containerParents.length; i9 += 1)
          attach(containerParents[i9]);
      }
      attach(swiper.el, {
        childList: swiper.params.observeSlideChildren
      }), attach(swiper.wrapperEl, {
        attributes: !1
      });
    }
  }, destroy = () => {
    observers.forEach((observer) => {
      observer.disconnect();
    }), observers.splice(0, observers.length);
  };
  extendParams({
    observer: !1,
    observeParents: !1,
    observeSlideChildren: !1
  }), on2("init", init), on2("destroy", destroy);
}

// node_modules/swiper/core/events-emitter.js
var events_emitter_default = {
  on(events2, handler, priority) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || typeof handler != "function")
      return self2;
    let method = priority ? "unshift" : "push";
    return events2.split(" ").forEach((event2) => {
      self2.eventsListeners[event2] || (self2.eventsListeners[event2] = []), self2.eventsListeners[event2][method](handler);
    }), self2;
  },
  once(events2, handler, priority) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || typeof handler != "function")
      return self2;
    function onceHandler(...args) {
      self2.off(events2, onceHandler), onceHandler.__emitterProxy && delete onceHandler.__emitterProxy, handler.apply(self2, args);
    }
    return onceHandler.__emitterProxy = handler, self2.on(events2, onceHandler, priority);
  },
  onAny(handler, priority) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || typeof handler != "function")
      return self2;
    let method = priority ? "unshift" : "push";
    return self2.eventsAnyListeners.indexOf(handler) < 0 && self2.eventsAnyListeners[method](handler), self2;
  },
  offAny(handler) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || !self2.eventsAnyListeners)
      return self2;
    let index = self2.eventsAnyListeners.indexOf(handler);
    return index >= 0 && self2.eventsAnyListeners.splice(index, 1), self2;
  },
  off(events2, handler) {
    let self2 = this;
    return !self2.eventsListeners || self2.destroyed || !self2.eventsListeners || events2.split(" ").forEach((event2) => {
      typeof handler > "u" ? self2.eventsListeners[event2] = [] : self2.eventsListeners[event2] && self2.eventsListeners[event2].forEach((eventHandler, index) => {
        (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) && self2.eventsListeners[event2].splice(index, 1);
      });
    }), self2;
  },
  emit(...args) {
    let self2 = this;
    if (!self2.eventsListeners || self2.destroyed || !self2.eventsListeners)
      return self2;
    let events2, data, context2;
    return typeof args[0] == "string" || Array.isArray(args[0]) ? (events2 = args[0], data = args.slice(1, args.length), context2 = self2) : (events2 = args[0].events, data = args[0].data, context2 = args[0].context || self2), data.unshift(context2), (Array.isArray(events2) ? events2 : events2.split(" ")).forEach((event2) => {
      self2.eventsAnyListeners && self2.eventsAnyListeners.length && self2.eventsAnyListeners.forEach((eventHandler) => {
        eventHandler.apply(context2, [event2, ...data]);
      }), self2.eventsListeners && self2.eventsListeners[event2] && self2.eventsListeners[event2].forEach((eventHandler) => {
        eventHandler.apply(context2, data);
      });
    }), self2;
  }
};

// node_modules/swiper/core/update/updateSize.js
function updateSize() {
  let swiper = this, width, height, el = swiper.el;
  typeof swiper.params.width < "u" && swiper.params.width !== null ? width = swiper.params.width : width = el.clientWidth, typeof swiper.params.height < "u" && swiper.params.height !== null ? height = swiper.params.height : height = el.clientHeight, !(width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) && (width = width - parseInt(elementStyle(el, "padding-left") || 0, 10) - parseInt(elementStyle(el, "padding-right") || 0, 10), height = height - parseInt(elementStyle(el, "padding-top") || 0, 10) - parseInt(elementStyle(el, "padding-bottom") || 0, 10), Number.isNaN(width) && (width = 0), Number.isNaN(height) && (height = 0), Object.assign(swiper, {
    width,
    height,
    size: swiper.isHorizontal() ? width : height
  }));
}

// node_modules/swiper/core/update/updateSlides.js
function updateSlides() {
  let swiper = this;
  function getDirectionLabel(property) {
    return swiper.isHorizontal() ? property : {
      width: "height",
      "margin-top": "margin-left",
      "margin-bottom ": "margin-right",
      "margin-left": "margin-top",
      "margin-right": "margin-bottom",
      "padding-left": "padding-top",
      "padding-right": "padding-bottom",
      marginRight: "marginBottom"
    }[property];
  }
  function getDirectionPropertyValue(node, label) {
    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
  }
  let params = swiper.params, {
    wrapperEl,
    slidesEl,
    size: swiperSize,
    rtlTranslate: rtl,
    wrongRTL
  } = swiper, isVirtual = swiper.virtual && params.virtual.enabled, previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length, slides = elementChildren(slidesEl, `.${swiper.params.slideClass}, swiper-slide`), slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length, snapGrid = [], slidesGrid = [], slidesSizesGrid = [], offsetBefore = params.slidesOffsetBefore;
  typeof offsetBefore == "function" && (offsetBefore = params.slidesOffsetBefore.call(swiper));
  let offsetAfter = params.slidesOffsetAfter;
  typeof offsetAfter == "function" && (offsetAfter = params.slidesOffsetAfter.call(swiper));
  let previousSnapGridLength = swiper.snapGrid.length, previousSlidesGridLength = swiper.slidesGrid.length, spaceBetween = params.spaceBetween, slidePosition = -offsetBefore, prevSlideSize = 0, index = 0;
  if (typeof swiperSize > "u")
    return;
  typeof spaceBetween == "string" && spaceBetween.indexOf("%") >= 0 && (spaceBetween = parseFloat(spaceBetween.replace("%", "")) / 100 * swiperSize), swiper.virtualSize = -spaceBetween, slides.forEach((slideEl) => {
    rtl ? slideEl.style.marginLeft = "" : slideEl.style.marginRight = "", slideEl.style.marginBottom = "", slideEl.style.marginTop = "";
  }), params.centeredSlides && params.cssMode && (setCSSProperty(wrapperEl, "--swiper-centered-offset-before", ""), setCSSProperty(wrapperEl, "--swiper-centered-offset-after", ""));
  let gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;
  gridEnabled && swiper.grid.initSlides(slidesLength);
  let slideSize, shouldResetSlideSize = params.slidesPerView === "auto" && params.breakpoints && Object.keys(params.breakpoints).filter((key) => typeof params.breakpoints[key].slidesPerView < "u").length > 0;
  for (let i9 = 0; i9 < slidesLength; i9 += 1) {
    slideSize = 0;
    let slide;
    if (slides[i9] && (slide = slides[i9]), gridEnabled && swiper.grid.updateSlide(i9, slide, slidesLength, getDirectionLabel), !(slides[i9] && elementStyle(slide, "display") === "none")) {
      if (params.slidesPerView === "auto") {
        shouldResetSlideSize && (slides[i9].style[getDirectionLabel("width")] = "");
        let slideStyles = getComputedStyle(slide), currentTransform = slide.style.transform, currentWebKitTransform = slide.style.webkitTransform;
        if (currentTransform && (slide.style.transform = "none"), currentWebKitTransform && (slide.style.webkitTransform = "none"), params.roundLengths)
          slideSize = swiper.isHorizontal() ? elementOuterSize(slide, "width", !0) : elementOuterSize(slide, "height", !0);
        else {
          let width = getDirectionPropertyValue(slideStyles, "width"), paddingLeft = getDirectionPropertyValue(slideStyles, "padding-left"), paddingRight = getDirectionPropertyValue(slideStyles, "padding-right"), marginLeft = getDirectionPropertyValue(slideStyles, "margin-left"), marginRight = getDirectionPropertyValue(slideStyles, "margin-right"), boxSizing = slideStyles.getPropertyValue("box-sizing");
          if (boxSizing && boxSizing === "border-box")
            slideSize = width + marginLeft + marginRight;
          else {
            let {
              clientWidth,
              offsetWidth
            } = slide;
            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
          }
        }
        currentTransform && (slide.style.transform = currentTransform), currentWebKitTransform && (slide.style.webkitTransform = currentWebKitTransform), params.roundLengths && (slideSize = Math.floor(slideSize));
      } else
        slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView, params.roundLengths && (slideSize = Math.floor(slideSize)), slides[i9] && (slides[i9].style[getDirectionLabel("width")] = `${slideSize}px`);
      slides[i9] && (slides[i9].swiperSlideSize = slideSize), slidesSizesGrid.push(slideSize), params.centeredSlides ? (slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween, prevSlideSize === 0 && i9 !== 0 && (slidePosition = slidePosition - swiperSize / 2 - spaceBetween), i9 === 0 && (slidePosition = slidePosition - swiperSize / 2 - spaceBetween), Math.abs(slidePosition) < 1 / 1e3 && (slidePosition = 0), params.roundLengths && (slidePosition = Math.floor(slidePosition)), index % params.slidesPerGroup === 0 && snapGrid.push(slidePosition), slidesGrid.push(slidePosition)) : (params.roundLengths && (slidePosition = Math.floor(slidePosition)), (index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0 && snapGrid.push(slidePosition), slidesGrid.push(slidePosition), slidePosition = slidePosition + slideSize + spaceBetween), swiper.virtualSize += slideSize + spaceBetween, prevSlideSize = slideSize, index += 1;
    }
  }
  if (swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter, rtl && wrongRTL && (params.effect === "slide" || params.effect === "coverflow") && (wrapperEl.style.width = `${swiper.virtualSize + params.spaceBetween}px`), params.setWrapperSize && (wrapperEl.style[getDirectionLabel("width")] = `${swiper.virtualSize + params.spaceBetween}px`), gridEnabled && swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel), !params.centeredSlides) {
    let newSlidesGrid = [];
    for (let i9 = 0; i9 < snapGrid.length; i9 += 1) {
      let slidesGridItem = snapGrid[i9];
      params.roundLengths && (slidesGridItem = Math.floor(slidesGridItem)), snapGrid[i9] <= swiper.virtualSize - swiperSize && newSlidesGrid.push(slidesGridItem);
    }
    snapGrid = newSlidesGrid, Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1 && snapGrid.push(swiper.virtualSize - swiperSize);
  }
  if (isVirtual && params.loop) {
    let size = slidesSizesGrid[0] + spaceBetween;
    if (params.slidesPerGroup > 1) {
      let groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup), groupSize = size * params.slidesPerGroup;
      for (let i9 = 0; i9 < groups; i9 += 1)
        snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
    }
    for (let i9 = 0; i9 < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i9 += 1)
      params.slidesPerGroup === 1 && snapGrid.push(snapGrid[snapGrid.length - 1] + size), slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size), swiper.virtualSize += size;
  }
  if (snapGrid.length === 0 && (snapGrid = [0]), params.spaceBetween !== 0) {
    let key = swiper.isHorizontal() && rtl ? "marginLeft" : getDirectionLabel("marginRight");
    slides.filter((_3, slideIndex) => !params.cssMode || params.loop ? !0 : slideIndex !== slides.length - 1).forEach((slideEl) => {
      slideEl.style[key] = `${spaceBetween}px`;
    });
  }
  if (params.centeredSlides && params.centeredSlidesBounds) {
    let allSlidesSize = 0;
    slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    }), allSlidesSize -= params.spaceBetween;
    let maxSnap = allSlidesSize - swiperSize;
    snapGrid = snapGrid.map((snap) => snap < 0 ? -offsetBefore : snap > maxSnap ? maxSnap + offsetAfter : snap);
  }
  if (params.centerInsufficientSlides) {
    let allSlidesSize = 0;
    if (slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    }), allSlidesSize -= params.spaceBetween, allSlidesSize < swiperSize) {
      let allSlidesOffset = (swiperSize - allSlidesSize) / 2;
      snapGrid.forEach((snap, snapIndex) => {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      }), slidesGrid.forEach((snap, snapIndex) => {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }
  if (Object.assign(swiper, {
    slides,
    snapGrid,
    slidesGrid,
    slidesSizesGrid
  }), params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {
    setCSSProperty(wrapperEl, "--swiper-centered-offset-before", `${-snapGrid[0]}px`), setCSSProperty(wrapperEl, "--swiper-centered-offset-after", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);
    let addToSnapGrid = -swiper.snapGrid[0], addToSlidesGrid = -swiper.slidesGrid[0];
    swiper.snapGrid = swiper.snapGrid.map((v5) => v5 + addToSnapGrid), swiper.slidesGrid = swiper.slidesGrid.map((v5) => v5 + addToSlidesGrid);
  }
  if (slidesLength !== previousSlidesLength && swiper.emit("slidesLengthChange"), snapGrid.length !== previousSnapGridLength && (swiper.params.watchOverflow && swiper.checkOverflow(), swiper.emit("snapGridLengthChange")), slidesGrid.length !== previousSlidesGridLength && swiper.emit("slidesGridLengthChange"), params.watchSlidesProgress && swiper.updateSlidesOffset(), !isVirtual && !params.cssMode && (params.effect === "slide" || params.effect === "fade")) {
    let backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`, hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);
    slidesLength <= params.maxBackfaceHiddenSlides ? hasClassBackfaceClassAdded || swiper.el.classList.add(backFaceHiddenClass) : hasClassBackfaceClassAdded && swiper.el.classList.remove(backFaceHiddenClass);
  }
}

// node_modules/swiper/core/update/updateAutoHeight.js
function updateAutoHeight(speed) {
  let swiper = this, activeSlides = [], isVirtual = swiper.virtual && swiper.params.virtual.enabled, newHeight = 0, i9;
  typeof speed == "number" ? swiper.setTransition(speed) : speed === !0 && swiper.setTransition(swiper.params.speed);
  let getSlideByIndex = (index) => isVirtual ? swiper.slides.filter((el) => parseInt(el.getAttribute("data-swiper-slide-index"), 10) === index)[0] : swiper.slides[index];
  if (swiper.params.slidesPerView !== "auto" && swiper.params.slidesPerView > 1)
    if (swiper.params.centeredSlides)
      (swiper.visibleSlides || []).forEach((slide) => {
        activeSlides.push(slide);
      });
    else
      for (i9 = 0; i9 < Math.ceil(swiper.params.slidesPerView); i9 += 1) {
        let index = swiper.activeIndex + i9;
        if (index > swiper.slides.length && !isVirtual)
          break;
        activeSlides.push(getSlideByIndex(index));
      }
  else
    activeSlides.push(getSlideByIndex(swiper.activeIndex));
  for (i9 = 0; i9 < activeSlides.length; i9 += 1)
    if (typeof activeSlides[i9] < "u") {
      let height = activeSlides[i9].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  (newHeight || newHeight === 0) && (swiper.wrapperEl.style.height = `${newHeight}px`);
}

// node_modules/swiper/core/update/updateSlidesOffset.js
function updateSlidesOffset() {
  let swiper = this, slides = swiper.slides, minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;
  for (let i9 = 0; i9 < slides.length; i9 += 1)
    slides[i9].swiperSlideOffset = (swiper.isHorizontal() ? slides[i9].offsetLeft : slides[i9].offsetTop) - minusOffset;
}

// node_modules/swiper/core/update/updateSlidesProgress.js
function updateSlidesProgress(translate = this && this.translate || 0) {
  let swiper = this, params = swiper.params, {
    slides,
    rtlTranslate: rtl,
    snapGrid
  } = swiper;
  if (slides.length === 0)
    return;
  typeof slides[0].swiperSlideOffset > "u" && swiper.updateSlidesOffset();
  let offsetCenter = -translate;
  rtl && (offsetCenter = translate), slides.forEach((slideEl) => {
    slideEl.classList.remove(params.slideVisibleClass);
  }), swiper.visibleSlidesIndexes = [], swiper.visibleSlides = [];
  for (let i9 = 0; i9 < slides.length; i9 += 1) {
    let slide = slides[i9], slideOffset = slide.swiperSlideOffset;
    params.cssMode && params.centeredSlides && (slideOffset -= slides[0].swiperSlideOffset);
    let slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween), originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween), slideBefore = -(offsetCenter - slideOffset), slideAfter = slideBefore + swiper.slidesSizesGrid[i9];
    (slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size) && (swiper.visibleSlides.push(slide), swiper.visibleSlidesIndexes.push(i9), slides[i9].classList.add(params.slideVisibleClass)), slide.progress = rtl ? -slideProgress : slideProgress, slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;
  }
}

// node_modules/swiper/core/update/updateProgress.js
function updateProgress(translate) {
  let swiper = this;
  if (typeof translate > "u") {
    let multiplier = swiper.rtlTranslate ? -1 : 1;
    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
  }
  let params = swiper.params, translatesDiff = swiper.maxTranslate() - swiper.minTranslate(), {
    progress: progress2,
    isBeginning,
    isEnd,
    progressLoop
  } = swiper, wasBeginning = isBeginning, wasEnd = isEnd;
  if (translatesDiff === 0)
    progress2 = 0, isBeginning = !0, isEnd = !0;
  else {
    progress2 = (translate - swiper.minTranslate()) / translatesDiff;
    let isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1, isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;
    isBeginning = isBeginningRounded || progress2 <= 0, isEnd = isEndRounded || progress2 >= 1, isBeginningRounded && (progress2 = 0), isEndRounded && (progress2 = 1);
  }
  if (params.loop) {
    let firstSlideIndex = swiper.getSlideIndex(swiper.slides.filter((el) => el.getAttribute("data-swiper-slide-index") === "0")[0]), lastSlideIndex = swiper.getSlideIndex(swiper.slides.filter((el) => el.getAttribute("data-swiper-slide-index") * 1 === swiper.slides.length - 1)[0]), firstSlideTranslate = swiper.slidesGrid[firstSlideIndex], lastSlideTranslate = swiper.slidesGrid[lastSlideIndex], translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1], translateAbs = Math.abs(translate);
    translateAbs >= firstSlideTranslate ? progressLoop = (translateAbs - firstSlideTranslate) / translateMax : progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax, progressLoop > 1 && (progressLoop -= 1);
  }
  Object.assign(swiper, {
    progress: progress2,
    progressLoop,
    isBeginning,
    isEnd
  }), (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) && swiper.updateSlidesProgress(translate), isBeginning && !wasBeginning && swiper.emit("reachBeginning toEdge"), isEnd && !wasEnd && swiper.emit("reachEnd toEdge"), (wasBeginning && !isBeginning || wasEnd && !isEnd) && swiper.emit("fromEdge"), swiper.emit("progress", progress2);
}

// node_modules/swiper/core/update/updateSlidesClasses.js
function updateSlidesClasses() {
  let swiper = this, {
    slides,
    params,
    slidesEl,
    activeIndex
  } = swiper, isVirtual = swiper.virtual && params.virtual.enabled, getFilteredSlide = (selector) => elementChildren(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];
  slides.forEach((slideEl) => {
    slideEl.classList.remove(params.slideActiveClass, params.slideNextClass, params.slidePrevClass);
  });
  let activeSlide;
  if (isVirtual)
    if (params.loop) {
      let slideIndex = activeIndex - swiper.virtual.slidesBefore;
      slideIndex < 0 && (slideIndex = swiper.virtual.slides.length + slideIndex), slideIndex >= swiper.virtual.slides.length && (slideIndex -= swiper.virtual.slides.length), activeSlide = getFilteredSlide(`[data-swiper-slide-index="${slideIndex}"]`);
    } else
      activeSlide = getFilteredSlide(`[data-swiper-slide-index="${activeIndex}"]`);
  else
    activeSlide = slides[activeIndex];
  if (activeSlide) {
    activeSlide.classList.add(params.slideActiveClass);
    let nextSlide = elementNextAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
    params.loop && !nextSlide && (nextSlide = slides[0]), nextSlide && nextSlide.classList.add(params.slideNextClass);
    let prevSlide = elementPrevAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
    params.loop && !prevSlide === 0 && (prevSlide = slides[slides.length - 1]), prevSlide && prevSlide.classList.add(params.slidePrevClass);
  }
  swiper.emitSlidesClasses();
}

// node_modules/swiper/core/update/updateActiveIndex.js
function getActiveIndexByTranslate(swiper) {
  let {
    slidesGrid,
    params
  } = swiper, translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate, activeIndex;
  for (let i9 = 0; i9 < slidesGrid.length; i9 += 1)
    typeof slidesGrid[i9 + 1] < "u" ? translate >= slidesGrid[i9] && translate < slidesGrid[i9 + 1] - (slidesGrid[i9 + 1] - slidesGrid[i9]) / 2 ? activeIndex = i9 : translate >= slidesGrid[i9] && translate < slidesGrid[i9 + 1] && (activeIndex = i9 + 1) : translate >= slidesGrid[i9] && (activeIndex = i9);
  return params.normalizeSlideIndex && (activeIndex < 0 || typeof activeIndex > "u") && (activeIndex = 0), activeIndex;
}
function updateActiveIndex(newActiveIndex) {
  let swiper = this, translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate, {
    snapGrid,
    params,
    activeIndex: previousIndex,
    realIndex: previousRealIndex,
    snapIndex: previousSnapIndex
  } = swiper, activeIndex = newActiveIndex, snapIndex, getVirtualRealIndex = (aIndex) => {
    let realIndex2 = aIndex - swiper.virtual.slidesBefore;
    return realIndex2 < 0 && (realIndex2 = swiper.virtual.slides.length + realIndex2), realIndex2 >= swiper.virtual.slides.length && (realIndex2 -= swiper.virtual.slides.length), realIndex2;
  };
  if (typeof activeIndex > "u" && (activeIndex = getActiveIndexByTranslate(swiper)), snapGrid.indexOf(translate) >= 0)
    snapIndex = snapGrid.indexOf(translate);
  else {
    let skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }
  if (snapIndex >= snapGrid.length && (snapIndex = snapGrid.length - 1), activeIndex === previousIndex) {
    snapIndex !== previousSnapIndex && (swiper.snapIndex = snapIndex, swiper.emit("snapIndexChange")), swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled && (swiper.realIndex = getVirtualRealIndex(activeIndex));
    return;
  }
  let realIndex;
  swiper.virtual && params.virtual.enabled && params.loop ? realIndex = getVirtualRealIndex(activeIndex) : swiper.slides[activeIndex] ? realIndex = parseInt(swiper.slides[activeIndex].getAttribute("data-swiper-slide-index") || activeIndex, 10) : realIndex = activeIndex, Object.assign(swiper, {
    snapIndex,
    realIndex,
    previousIndex,
    activeIndex
  }), swiper.emit("activeIndexChange"), swiper.emit("snapIndexChange"), previousRealIndex !== realIndex && swiper.emit("realIndexChange"), (swiper.initialized || swiper.params.runCallbacksOnInit) && swiper.emit("slideChange");
}

// node_modules/swiper/core/update/updateClickedSlide.js
function updateClickedSlide(e5) {
  let swiper = this, params = swiper.params, slide = e5.closest(`.${params.slideClass}, swiper-slide`), slideFound = !1, slideIndex;
  if (slide) {
    for (let i9 = 0; i9 < swiper.slides.length; i9 += 1)
      if (swiper.slides[i9] === slide) {
        slideFound = !0, slideIndex = i9;
        break;
      }
  }
  if (slide && slideFound)
    swiper.clickedSlide = slide, swiper.virtual && swiper.params.virtual.enabled ? swiper.clickedIndex = parseInt(slide.getAttribute("data-swiper-slide-index"), 10) : swiper.clickedIndex = slideIndex;
  else {
    swiper.clickedSlide = void 0, swiper.clickedIndex = void 0;
    return;
  }
  params.slideToClickedSlide && swiper.clickedIndex !== void 0 && swiper.clickedIndex !== swiper.activeIndex && swiper.slideToClickedSlide();
}

// node_modules/swiper/core/update/index.js
var update_default = {
  updateSize,
  updateSlides,
  updateAutoHeight,
  updateSlidesOffset,
  updateSlidesProgress,
  updateProgress,
  updateSlidesClasses,
  updateActiveIndex,
  updateClickedSlide
};

// node_modules/swiper/core/translate/getTranslate.js
function getSwiperTranslate(axis = this.isHorizontal() ? "x" : "y") {
  let swiper = this, {
    params,
    rtlTranslate: rtl,
    translate,
    wrapperEl
  } = swiper;
  if (params.virtualTranslate)
    return rtl ? -translate : translate;
  if (params.cssMode)
    return translate;
  let currentTranslate = getTranslate(wrapperEl, axis);
  return rtl && (currentTranslate = -currentTranslate), currentTranslate || 0;
}

// node_modules/swiper/core/translate/setTranslate.js
function setTranslate(translate, byController) {
  let swiper = this, {
    rtlTranslate: rtl,
    params,
    wrapperEl,
    progress: progress2
  } = swiper, x5 = 0, y4 = 0, z5 = 0;
  swiper.isHorizontal() ? x5 = rtl ? -translate : translate : y4 = translate, params.roundLengths && (x5 = Math.floor(x5), y4 = Math.floor(y4)), params.cssMode ? wrapperEl[swiper.isHorizontal() ? "scrollLeft" : "scrollTop"] = swiper.isHorizontal() ? -x5 : -y4 : params.virtualTranslate || (wrapperEl.style.transform = `translate3d(${x5}px, ${y4}px, ${z5}px)`), swiper.previousTranslate = swiper.translate, swiper.translate = swiper.isHorizontal() ? x5 : y4;
  let newProgress, translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  translatesDiff === 0 ? newProgress = 0 : newProgress = (translate - swiper.minTranslate()) / translatesDiff, newProgress !== progress2 && swiper.updateProgress(translate), swiper.emit("setTranslate", swiper.translate, byController);
}

// node_modules/swiper/core/translate/minTranslate.js
function minTranslate() {
  return -this.snapGrid[0];
}

// node_modules/swiper/core/translate/maxTranslate.js
function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

// node_modules/swiper/core/translate/translateTo.js
function translateTo(translate = 0, speed = this.params.speed, runCallbacks = !0, translateBounds = !0, internal) {
  let swiper = this, {
    params,
    wrapperEl
  } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition)
    return !1;
  let minTranslate2 = swiper.minTranslate(), maxTranslate2 = swiper.maxTranslate(), newTranslate;
  if (translateBounds && translate > minTranslate2 ? newTranslate = minTranslate2 : translateBounds && translate < maxTranslate2 ? newTranslate = maxTranslate2 : newTranslate = translate, swiper.updateProgress(newTranslate), params.cssMode) {
    let isH = swiper.isHorizontal();
    if (speed === 0)
      wrapperEl[isH ? "scrollLeft" : "scrollTop"] = -newTranslate;
    else {
      if (!swiper.support.smoothScroll)
        return animateCSSModeScroll({
          swiper,
          targetPosition: -newTranslate,
          side: isH ? "left" : "top"
        }), !0;
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: -newTranslate,
        behavior: "smooth"
      });
    }
    return !0;
  }
  return speed === 0 ? (swiper.setTransition(0), swiper.setTranslate(newTranslate), runCallbacks && (swiper.emit("beforeTransitionStart", speed, internal), swiper.emit("transitionEnd"))) : (swiper.setTransition(speed), swiper.setTranslate(newTranslate), runCallbacks && (swiper.emit("beforeTransitionStart", speed, internal), swiper.emit("transitionStart")), swiper.animating || (swiper.animating = !0, swiper.onTranslateToWrapperTransitionEnd || (swiper.onTranslateToWrapperTransitionEnd = function(e5) {
    !swiper || swiper.destroyed || e5.target === this && (swiper.wrapperEl.removeEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd), swiper.onTranslateToWrapperTransitionEnd = null, delete swiper.onTranslateToWrapperTransitionEnd, runCallbacks && swiper.emit("transitionEnd"));
  }), swiper.wrapperEl.addEventListener("transitionend", swiper.onTranslateToWrapperTransitionEnd))), !0;
}

// node_modules/swiper/core/translate/index.js
var translate_default = {
  getTranslate: getSwiperTranslate,
  setTranslate,
  minTranslate,
  maxTranslate,
  translateTo
};

// node_modules/swiper/core/transition/setTransition.js
function setTransition(duration, byController) {
  let swiper = this;
  swiper.params.cssMode || (swiper.wrapperEl.style.transitionDuration = `${duration}ms`), swiper.emit("setTransition", duration, byController);
}

// node_modules/swiper/core/transition/transitionEmit.js
function transitionEmit({
  swiper,
  runCallbacks,
  direction,
  step
}) {
  let {
    activeIndex,
    previousIndex
  } = swiper, dir = direction;
  if (dir || (activeIndex > previousIndex ? dir = "next" : activeIndex < previousIndex ? dir = "prev" : dir = "reset"), swiper.emit(`transition${step}`), runCallbacks && activeIndex !== previousIndex) {
    if (dir === "reset") {
      swiper.emit(`slideResetTransition${step}`);
      return;
    }
    swiper.emit(`slideChangeTransition${step}`), dir === "next" ? swiper.emit(`slideNextTransition${step}`) : swiper.emit(`slidePrevTransition${step}`);
  }
}

// node_modules/swiper/core/transition/transitionStart.js
function transitionStart(runCallbacks = !0, direction) {
  let swiper = this, {
    params
  } = swiper;
  params.cssMode || (params.autoHeight && swiper.updateAutoHeight(), transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "Start"
  }));
}

// node_modules/swiper/core/transition/transitionEnd.js
function transitionEnd(runCallbacks = !0, direction) {
  let swiper = this, {
    params
  } = swiper;
  swiper.animating = !1, !params.cssMode && (swiper.setTransition(0), transitionEmit({
    swiper,
    runCallbacks,
    direction,
    step: "End"
  }));
}

// node_modules/swiper/core/transition/index.js
var transition_default = {
  setTransition,
  transitionStart,
  transitionEnd
};

// node_modules/swiper/core/slide/slideTo.js
function slideTo(index = 0, speed = this.params.speed, runCallbacks = !0, internal, initial) {
  typeof index == "string" && (index = parseInt(index, 10));
  let swiper = this, slideIndex = index;
  slideIndex < 0 && (slideIndex = 0);
  let {
    params,
    snapGrid,
    slidesGrid,
    previousIndex,
    activeIndex,
    rtlTranslate: rtl,
    wrapperEl,
    enabled
  } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial)
    return !1;
  let skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex), snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  snapIndex >= snapGrid.length && (snapIndex = snapGrid.length - 1);
  let translate = -snapGrid[snapIndex];
  if (params.normalizeSlideIndex)
    for (let i9 = 0; i9 < slidesGrid.length; i9 += 1) {
      let normalizedTranslate = -Math.floor(translate * 100), normalizedGrid = Math.floor(slidesGrid[i9] * 100), normalizedGridNext = Math.floor(slidesGrid[i9 + 1] * 100);
      typeof slidesGrid[i9 + 1] < "u" ? normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2 ? slideIndex = i9 : normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext && (slideIndex = i9 + 1) : normalizedTranslate >= normalizedGrid && (slideIndex = i9);
    }
  if (swiper.initialized && slideIndex !== activeIndex && (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate() || !swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate() && (activeIndex || 0) !== slideIndex))
    return !1;
  slideIndex !== (previousIndex || 0) && runCallbacks && swiper.emit("beforeSlideChangeStart"), swiper.updateProgress(translate);
  let direction;
  if (slideIndex > activeIndex ? direction = "next" : slideIndex < activeIndex ? direction = "prev" : direction = "reset", rtl && -translate === swiper.translate || !rtl && translate === swiper.translate)
    return swiper.updateActiveIndex(slideIndex), params.autoHeight && swiper.updateAutoHeight(), swiper.updateSlidesClasses(), params.effect !== "slide" && swiper.setTranslate(translate), direction !== "reset" && (swiper.transitionStart(runCallbacks, direction), swiper.transitionEnd(runCallbacks, direction)), !1;
  if (params.cssMode) {
    let isH = swiper.isHorizontal(), t13 = rtl ? translate : -translate;
    if (speed === 0) {
      let isVirtual = swiper.virtual && swiper.params.virtual.enabled;
      isVirtual && (swiper.wrapperEl.style.scrollSnapType = "none", swiper._immediateVirtual = !0), isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0 ? (swiper._cssModeVirtualInitialSet = !0, requestAnimationFrame(() => {
        wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t13;
      })) : wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t13, isVirtual && requestAnimationFrame(() => {
        swiper.wrapperEl.style.scrollSnapType = "", swiper._immediateVirtual = !1;
      });
    } else {
      if (!swiper.support.smoothScroll)
        return animateCSSModeScroll({
          swiper,
          targetPosition: t13,
          side: isH ? "left" : "top"
        }), !0;
      wrapperEl.scrollTo({
        [isH ? "left" : "top"]: t13,
        behavior: "smooth"
      });
    }
    return !0;
  }
  return swiper.setTransition(speed), swiper.setTranslate(translate), swiper.updateActiveIndex(slideIndex), swiper.updateSlidesClasses(), swiper.emit("beforeTransitionStart", speed, internal), swiper.transitionStart(runCallbacks, direction), speed === 0 ? swiper.transitionEnd(runCallbacks, direction) : swiper.animating || (swiper.animating = !0, swiper.onSlideToWrapperTransitionEnd || (swiper.onSlideToWrapperTransitionEnd = function(e5) {
    !swiper || swiper.destroyed || e5.target === this && (swiper.wrapperEl.removeEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd), swiper.onSlideToWrapperTransitionEnd = null, delete swiper.onSlideToWrapperTransitionEnd, swiper.transitionEnd(runCallbacks, direction));
  }), swiper.wrapperEl.addEventListener("transitionend", swiper.onSlideToWrapperTransitionEnd)), !0;
}

// node_modules/swiper/core/slide/slideToLoop.js
function slideToLoop(index = 0, speed = this.params.speed, runCallbacks = !0, internal) {
  typeof index == "string" && (index = parseInt(index, 10));
  let swiper = this, newIndex = index;
  return swiper.params.loop && (swiper.virtual && swiper.params.virtual.enabled ? newIndex = newIndex + swiper.virtual.slidesBefore : newIndex = swiper.getSlideIndex(swiper.slides.filter((slideEl) => slideEl.getAttribute("data-swiper-slide-index") * 1 === newIndex)[0])), swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideNext.js
function slideNext(speed = this.params.speed, runCallbacks = !0, internal) {
  let swiper = this, {
    enabled,
    params,
    animating
  } = swiper;
  if (!enabled)
    return swiper;
  let perGroup = params.slidesPerGroup;
  params.slidesPerView === "auto" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto && (perGroup = Math.max(swiper.slidesPerViewDynamic("current", !0), 1));
  let increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup, isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding)
      return !1;
    swiper.loopFix({
      direction: "next"
    }), swiper._clientLeft = swiper.wrapperEl.clientLeft;
  }
  return params.rewind && swiper.isEnd ? swiper.slideTo(0, speed, runCallbacks, internal) : swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slidePrev.js
function slidePrev(speed = this.params.speed, runCallbacks = !0, internal) {
  let swiper = this, {
    params,
    snapGrid,
    slidesGrid,
    rtlTranslate,
    enabled,
    animating
  } = swiper;
  if (!enabled)
    return swiper;
  let isVirtual = swiper.virtual && params.virtual.enabled;
  if (params.loop) {
    if (animating && !isVirtual && params.loopPreventsSliding)
      return !1;
    swiper.loopFix({
      direction: "prev"
    }), swiper._clientLeft = swiper.wrapperEl.clientLeft;
  }
  let translate = rtlTranslate ? swiper.translate : -swiper.translate;
  function normalize(val) {
    return val < 0 ? -Math.floor(Math.abs(val)) : Math.floor(val);
  }
  let normalizedTranslate = normalize(translate), normalizedSnapGrid = snapGrid.map((val) => normalize(val)), prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
  if (typeof prevSnap > "u" && params.cssMode) {
    let prevSnapIndex;
    snapGrid.forEach((snap, snapIndex) => {
      normalizedTranslate >= snap && (prevSnapIndex = snapIndex);
    }), typeof prevSnapIndex < "u" && (prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex]);
  }
  let prevIndex = 0;
  if (typeof prevSnap < "u" && (prevIndex = slidesGrid.indexOf(prevSnap), prevIndex < 0 && (prevIndex = swiper.activeIndex - 1), params.slidesPerView === "auto" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto && (prevIndex = prevIndex - swiper.slidesPerViewDynamic("previous", !0) + 1, prevIndex = Math.max(prevIndex, 0))), params.rewind && swiper.isBeginning) {
    let lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
  }
  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideReset.js
function slideReset(speed = this.params.speed, runCallbacks = !0, internal) {
  let swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideToClosest.js
function slideToClosest(speed = this.params.speed, runCallbacks = !0, internal, threshold = 0.5) {
  let swiper = this, index = swiper.activeIndex, skip = Math.min(swiper.params.slidesPerGroupSkip, index), snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup), translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  if (translate >= swiper.snapGrid[snapIndex]) {
    let currentSnap = swiper.snapGrid[snapIndex], nextSnap = swiper.snapGrid[snapIndex + 1];
    translate - currentSnap > (nextSnap - currentSnap) * threshold && (index += swiper.params.slidesPerGroup);
  } else {
    let prevSnap = swiper.snapGrid[snapIndex - 1], currentSnap = swiper.snapGrid[snapIndex];
    translate - prevSnap <= (currentSnap - prevSnap) * threshold && (index -= swiper.params.slidesPerGroup);
  }
  return index = Math.max(index, 0), index = Math.min(index, swiper.slidesGrid.length - 1), swiper.slideTo(index, speed, runCallbacks, internal);
}

// node_modules/swiper/core/slide/slideToClickedSlide.js
function slideToClickedSlide() {
  let swiper = this, {
    params,
    slidesEl
  } = swiper, slidesPerView = params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : params.slidesPerView, slideToIndex = swiper.clickedIndex, realIndex, slideSelector = swiper.isElement ? "swiper-slide" : `.${params.slideClass}`;
  if (params.loop) {
    if (swiper.animating)
      return;
    realIndex = parseInt(swiper.clickedSlide.getAttribute("data-swiper-slide-index"), 10), params.centeredSlides ? slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2 ? (swiper.loopFix(), slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]), nextTick(() => {
      swiper.slideTo(slideToIndex);
    })) : swiper.slideTo(slideToIndex) : slideToIndex > swiper.slides.length - slidesPerView ? (swiper.loopFix(), slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]), nextTick(() => {
      swiper.slideTo(slideToIndex);
    })) : swiper.slideTo(slideToIndex);
  } else
    swiper.slideTo(slideToIndex);
}

// node_modules/swiper/core/slide/index.js
var slide_default = {
  slideTo,
  slideToLoop,
  slideNext,
  slidePrev,
  slideReset,
  slideToClosest,
  slideToClickedSlide
};

// node_modules/swiper/core/loop/loopCreate.js
function loopCreate(slideRealIndex) {
  let swiper = this, {
    params,
    slidesEl
  } = swiper;
  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled)
    return;
  elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`).forEach((el, index) => {
    el.setAttribute("data-swiper-slide-index", index);
  }), swiper.loopFix({
    slideRealIndex,
    direction: params.centeredSlides ? void 0 : "next"
  });
}

// node_modules/swiper/core/loop/loopFix.js
function loopFix({
  slideRealIndex,
  slideTo: slideTo2 = !0,
  direction,
  setTranslate: setTranslate2,
  activeSlideIndex,
  byController,
  byMousewheel
} = {}) {
  let swiper = this;
  if (!swiper.params.loop)
    return;
  swiper.emit("beforeLoopFix");
  let {
    slides,
    allowSlidePrev,
    allowSlideNext,
    slidesEl,
    params
  } = swiper;
  if (swiper.allowSlidePrev = !0, swiper.allowSlideNext = !0, swiper.virtual && params.virtual.enabled) {
    slideTo2 && (!params.centeredSlides && swiper.snapIndex === 0 ? swiper.slideTo(swiper.virtual.slides.length, 0, !1, !0) : params.centeredSlides && swiper.snapIndex < params.slidesPerView ? swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, !1, !0) : swiper.snapIndex === swiper.snapGrid.length - 1 && swiper.slideTo(swiper.virtual.slidesBefore, 0, !1, !0)), swiper.allowSlidePrev = allowSlidePrev, swiper.allowSlideNext = allowSlideNext, swiper.emit("loopFix");
    return;
  }
  let slidesPerView = params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)), loopedSlides = params.loopedSlides || slidesPerView;
  loopedSlides % params.slidesPerGroup !== 0 && (loopedSlides += params.slidesPerGroup - loopedSlides % params.slidesPerGroup), swiper.loopedSlides = loopedSlides;
  let prependSlidesIndexes = [], appendSlidesIndexes = [], activeIndex = swiper.activeIndex;
  typeof activeSlideIndex > "u" ? activeSlideIndex = swiper.getSlideIndex(swiper.slides.filter((el) => el.classList.contains("swiper-slide-active"))[0]) : activeIndex = activeSlideIndex;
  let isNext = direction === "next" || !direction, isPrev = direction === "prev" || !direction, slidesPrepended = 0, slidesAppended = 0;
  if (activeSlideIndex < loopedSlides) {
    slidesPrepended = Math.max(loopedSlides - activeSlideIndex, params.slidesPerGroup);
    for (let i9 = 0; i9 < loopedSlides - activeSlideIndex; i9 += 1) {
      let index = i9 - Math.floor(i9 / slides.length) * slides.length;
      prependSlidesIndexes.push(slides.length - index - 1);
    }
  } else if (activeSlideIndex > swiper.slides.length - loopedSlides * 2) {
    slidesAppended = Math.max(activeSlideIndex - (swiper.slides.length - loopedSlides * 2), params.slidesPerGroup);
    for (let i9 = 0; i9 < slidesAppended; i9 += 1) {
      let index = i9 - Math.floor(i9 / slides.length) * slides.length;
      appendSlidesIndexes.push(index);
    }
  }
  if (isPrev && prependSlidesIndexes.forEach((index) => {
    slidesEl.prepend(swiper.slides[index]);
  }), isNext && appendSlidesIndexes.forEach((index) => {
    slidesEl.append(swiper.slides[index]);
  }), swiper.recalcSlides(), params.watchSlidesProgress && swiper.updateSlidesOffset(), slideTo2) {
    if (prependSlidesIndexes.length > 0 && isPrev)
      if (typeof slideRealIndex > "u") {
        let currentSlideTranslate = swiper.slidesGrid[activeIndex], diff2 = swiper.slidesGrid[activeIndex + slidesPrepended] - currentSlideTranslate;
        byMousewheel ? swiper.setTranslate(swiper.translate - diff2) : (swiper.slideTo(activeIndex + slidesPrepended, 0, !1, !0), setTranslate2 && (swiper.touches[swiper.isHorizontal() ? "startX" : "startY"] += diff2));
      } else
        setTranslate2 && swiper.slideToLoop(slideRealIndex, 0, !1, !0);
    else if (appendSlidesIndexes.length > 0 && isNext)
      if (typeof slideRealIndex > "u") {
        let currentSlideTranslate = swiper.slidesGrid[activeIndex], diff2 = swiper.slidesGrid[activeIndex - slidesAppended] - currentSlideTranslate;
        byMousewheel ? swiper.setTranslate(swiper.translate - diff2) : (swiper.slideTo(activeIndex - slidesAppended, 0, !1, !0), setTranslate2 && (swiper.touches[swiper.isHorizontal() ? "startX" : "startY"] += diff2));
      } else
        swiper.slideToLoop(slideRealIndex, 0, !1, !0);
  }
  if (swiper.allowSlidePrev = allowSlidePrev, swiper.allowSlideNext = allowSlideNext, swiper.controller && swiper.controller.control && !byController) {
    let loopParams = {
      slideRealIndex,
      slideTo: !1,
      direction,
      setTranslate: setTranslate2,
      activeSlideIndex,
      byController: !0
    };
    Array.isArray(swiper.controller.control) ? swiper.controller.control.forEach((c9) => {
      c9.params.loop && c9.loopFix(loopParams);
    }) : swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop && swiper.controller.control.loopFix(loopParams);
  }
  swiper.emit("loopFix");
}

// node_modules/swiper/core/loop/loopDestroy.js
function loopDestroy() {
  let swiper = this, {
    slides,
    params,
    slidesEl
  } = swiper;
  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled)
    return;
  swiper.recalcSlides();
  let newSlidesOrder = [];
  slides.forEach((slideEl) => {
    let index = typeof slideEl.swiperSlideIndex > "u" ? slideEl.getAttribute("data-swiper-slide-index") * 1 : slideEl.swiperSlideIndex;
    newSlidesOrder[index] = slideEl;
  }), slides.forEach((slideEl) => {
    slideEl.removeAttribute("data-swiper-slide-index");
  }), newSlidesOrder.forEach((slideEl) => {
    slidesEl.append(slideEl);
  }), swiper.recalcSlides(), swiper.slideTo(swiper.realIndex, 0);
}

// node_modules/swiper/core/loop/index.js
var loop_default = {
  loopCreate,
  loopFix,
  loopDestroy
};

// node_modules/swiper/core/grab-cursor/setGrabCursor.js
function setGrabCursor(moving) {
  let swiper = this;
  if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode)
    return;
  let el = swiper.params.touchEventsTarget === "container" ? swiper.el : swiper.wrapperEl;
  swiper.isElement && (swiper.__preventObserver__ = !0), el.style.cursor = "move", el.style.cursor = moving ? "grabbing" : "grab", swiper.isElement && requestAnimationFrame(() => {
    swiper.__preventObserver__ = !1;
  });
}

// node_modules/swiper/core/grab-cursor/unsetGrabCursor.js
function unsetGrabCursor() {
  let swiper = this;
  swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode || (swiper.isElement && (swiper.__preventObserver__ = !0), swiper[swiper.params.touchEventsTarget === "container" ? "el" : "wrapperEl"].style.cursor = "", swiper.isElement && requestAnimationFrame(() => {
    swiper.__preventObserver__ = !1;
  }));
}

// node_modules/swiper/core/grab-cursor/index.js
var grab_cursor_default = {
  setGrabCursor,
  unsetGrabCursor
};

// node_modules/swiper/core/events/onTouchStart.js
function closestElement(selector, base = this) {
  function __closestFrom(el) {
    if (!el || el === getDocument() || el === getWindow())
      return null;
    el.assignedSlot && (el = el.assignedSlot);
    let found = el.closest(selector);
    return !found && !el.getRootNode ? null : found || __closestFrom(el.getRootNode().host);
  }
  return __closestFrom(base);
}
function onTouchStart(event2) {
  let swiper = this, document2 = getDocument(), window2 = getWindow(), data = swiper.touchEventsData;
  data.evCache.push(event2);
  let {
    params,
    touches,
    enabled
  } = swiper;
  if (!enabled || !params.simulateTouch && event2.pointerType === "mouse" || swiper.animating && params.preventInteractionOnTransition)
    return;
  !swiper.animating && params.cssMode && params.loop && swiper.loopFix();
  let e5 = event2;
  e5.originalEvent && (e5 = e5.originalEvent);
  let targetEl = e5.target;
  if (params.touchEventsTarget === "wrapper" && !swiper.wrapperEl.contains(targetEl) || "which" in e5 && e5.which === 3 || "button" in e5 && e5.button > 0 || data.isTouched && data.isMoved)
    return;
  let swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== "", eventPath = event2.composedPath ? event2.composedPath() : event2.path;
  swipingClassHasValue && e5.target && e5.target.shadowRoot && eventPath && (targetEl = eventPath[0]);
  let noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`, isTargetShadow = !!(e5.target && e5.target.shadowRoot);
  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {
    swiper.allowClick = !0;
    return;
  }
  if (params.swipeHandler && !targetEl.closest(params.swipeHandler))
    return;
  touches.currentX = e5.pageX, touches.currentY = e5.pageY;
  let startX = touches.currentX, startY = touches.currentY, edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection, edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window2.innerWidth - edgeSwipeThreshold))
    if (edgeSwipeDetection === "prevent")
      event2.preventDefault();
    else
      return;
  Object.assign(data, {
    isTouched: !0,
    isMoved: !1,
    allowTouchCallbacks: !0,
    isScrolling: void 0,
    startMoving: void 0
  }), touches.startX = startX, touches.startY = startY, data.touchStartTime = now(), swiper.allowClick = !0, swiper.updateSize(), swiper.swipeDirection = void 0, params.threshold > 0 && (data.allowThresholdMove = !1);
  let preventDefault = !0;
  targetEl.matches(data.focusableElements) && (preventDefault = !1, targetEl.nodeName === "SELECT" && (data.isTouched = !1)), document2.activeElement && document2.activeElement.matches(data.focusableElements) && document2.activeElement !== targetEl && document2.activeElement.blur();
  let shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
  (params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable && e5.preventDefault(), swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode && swiper.freeMode.onTouchStart(), swiper.emit("touchStart", e5);
}

// node_modules/swiper/core/events/onTouchMove.js
function onTouchMove(event2) {
  let document2 = getDocument(), swiper = this, data = swiper.touchEventsData, {
    params,
    touches,
    rtlTranslate: rtl,
    enabled
  } = swiper;
  if (!enabled || !params.simulateTouch && event2.pointerType === "mouse")
    return;
  let e5 = event2;
  if (e5.originalEvent && (e5 = e5.originalEvent), !data.isTouched) {
    data.startMoving && data.isScrolling && swiper.emit("touchMoveOpposite", e5);
    return;
  }
  let pointerIndex = data.evCache.findIndex((cachedEv) => cachedEv.pointerId === e5.pointerId);
  pointerIndex >= 0 && (data.evCache[pointerIndex] = e5);
  let targetTouch = data.evCache.length > 1 ? data.evCache[0] : e5, pageX = targetTouch.pageX, pageY = targetTouch.pageY;
  if (e5.preventedByNestedSwiper) {
    touches.startX = pageX, touches.startY = pageY;
    return;
  }
  if (!swiper.allowTouchMove) {
    e5.target.matches(data.focusableElements) || (swiper.allowClick = !1), data.isTouched && (Object.assign(touches, {
      startX: pageX,
      startY: pageY,
      prevX: swiper.touches.currentX,
      prevY: swiper.touches.currentY,
      currentX: pageX,
      currentY: pageY
    }), data.touchStartTime = now());
    return;
  }
  if (params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = !1, data.isMoved = !1;
        return;
      }
    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate())
      return;
  }
  if (document2.activeElement && e5.target === document2.activeElement && e5.target.matches(data.focusableElements)) {
    data.isMoved = !0, swiper.allowClick = !1;
    return;
  }
  if (data.allowTouchCallbacks && swiper.emit("touchMove", e5), e5.targetTouches && e5.targetTouches.length > 1)
    return;
  touches.currentX = pageX, touches.currentY = pageY;
  let diffX = touches.currentX - touches.startX, diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold)
    return;
  if (typeof data.isScrolling > "u") {
    let touchAngle;
    swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX ? data.isScrolling = !1 : diffX * diffX + diffY * diffY >= 25 && (touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI, data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle);
  }
  if (data.isScrolling && swiper.emit("touchMoveOpposite", e5), typeof data.startMoving > "u" && (touches.currentX !== touches.startX || touches.currentY !== touches.startY) && (data.startMoving = !0), data.isScrolling || swiper.zoom && swiper.params.zoom && swiper.params.zoom.enabled && data.evCache.length > 1) {
    data.isTouched = !1;
    return;
  }
  if (!data.startMoving)
    return;
  swiper.allowClick = !1, !params.cssMode && e5.cancelable && e5.preventDefault(), params.touchMoveStopPropagation && !params.nested && e5.stopPropagation();
  let diff2 = swiper.isHorizontal() ? diffX : diffY, touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;
  params.oneWayMovement && (diff2 = Math.abs(diff2) * (rtl ? 1 : -1), touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1)), touches.diff = diff2, diff2 *= params.touchRatio, rtl && (diff2 = -diff2, touchesDiff = -touchesDiff);
  let prevTouchesDirection = swiper.touchesDirection;
  swiper.swipeDirection = diff2 > 0 ? "prev" : "next", swiper.touchesDirection = touchesDiff > 0 ? "prev" : "next";
  let isLoop = swiper.params.loop && !params.cssMode;
  if (!data.isMoved) {
    if (isLoop && swiper.loopFix({
      direction: swiper.swipeDirection
    }), data.startTranslate = swiper.getTranslate(), swiper.setTransition(0), swiper.animating) {
      let evt = new window.CustomEvent("transitionend", {
        bubbles: !0,
        cancelable: !0
      });
      swiper.wrapperEl.dispatchEvent(evt);
    }
    data.allowMomentumBounce = !1, params.grabCursor && (swiper.allowSlideNext === !0 || swiper.allowSlidePrev === !0) && swiper.setGrabCursor(!0), swiper.emit("sliderFirstMove", e5);
  }
  let loopFixed;
  data.isMoved && prevTouchesDirection !== swiper.touchesDirection && isLoop && Math.abs(diff2) >= 1 && (swiper.loopFix({
    direction: swiper.swipeDirection,
    setTranslate: !0
  }), loopFixed = !0), swiper.emit("sliderMove", e5), data.isMoved = !0, data.currentTranslate = diff2 + data.startTranslate;
  let disableParentSwiper = !0, resistanceRatio = params.resistanceRatio;
  if (params.touchReleaseOnEdges && (resistanceRatio = 0), diff2 > 0 ? (isLoop && !loopFixed && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.size / 2 : swiper.minTranslate()) && swiper.loopFix({
    direction: "prev",
    setTranslate: !0,
    activeSlideIndex: 0
  }), data.currentTranslate > swiper.minTranslate() && (disableParentSwiper = !1, params.resistance && (data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff2) ** resistanceRatio))) : diff2 < 0 && (isLoop && !loopFixed && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.size / 2 : swiper.maxTranslate()) && swiper.loopFix({
    direction: "next",
    setTranslate: !0,
    activeSlideIndex: swiper.slides.length - (params.slidesPerView === "auto" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))
  }), data.currentTranslate < swiper.maxTranslate() && (disableParentSwiper = !1, params.resistance && (data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff2) ** resistanceRatio))), disableParentSwiper && (e5.preventedByNestedSwiper = !0), !swiper.allowSlideNext && swiper.swipeDirection === "next" && data.currentTranslate < data.startTranslate && (data.currentTranslate = data.startTranslate), !swiper.allowSlidePrev && swiper.swipeDirection === "prev" && data.currentTranslate > data.startTranslate && (data.currentTranslate = data.startTranslate), !swiper.allowSlidePrev && !swiper.allowSlideNext && (data.currentTranslate = data.startTranslate), params.threshold > 0)
    if (Math.abs(diff2) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = !0, touches.startX = touches.currentX, touches.startY = touches.currentY, data.currentTranslate = data.startTranslate, touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  !params.followFinger || params.cssMode || ((params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) && (swiper.updateActiveIndex(), swiper.updateSlidesClasses()), swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.freeMode.onTouchMove(), swiper.updateProgress(data.currentTranslate), swiper.setTranslate(data.currentTranslate));
}

// node_modules/swiper/core/events/onTouchEnd.js
function onTouchEnd(event2) {
  let swiper = this, data = swiper.touchEventsData, pointerIndex = data.evCache.findIndex((cachedEv) => cachedEv.pointerId === event2.pointerId);
  if (pointerIndex >= 0 && data.evCache.splice(pointerIndex, 1), ["pointercancel", "pointerout", "pointerleave"].includes(event2.type) && !(event2.type === "pointercancel" && (swiper.browser.isSafari || swiper.browser.isWebView)))
    return;
  let {
    params,
    touches,
    rtlTranslate: rtl,
    slidesGrid,
    enabled
  } = swiper;
  if (!enabled || !params.simulateTouch && event2.pointerType === "mouse")
    return;
  let e5 = event2;
  if (e5.originalEvent && (e5 = e5.originalEvent), data.allowTouchCallbacks && swiper.emit("touchEnd", e5), data.allowTouchCallbacks = !1, !data.isTouched) {
    data.isMoved && params.grabCursor && swiper.setGrabCursor(!1), data.isMoved = !1, data.startMoving = !1;
    return;
  }
  params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === !0 || swiper.allowSlidePrev === !0) && swiper.setGrabCursor(!1);
  let touchEndTime = now(), timeDiff = touchEndTime - data.touchStartTime;
  if (swiper.allowClick) {
    let pathTree = e5.path || e5.composedPath && e5.composedPath();
    swiper.updateClickedSlide(pathTree && pathTree[0] || e5.target), swiper.emit("tap click", e5), timeDiff < 300 && touchEndTime - data.lastClickTime < 300 && swiper.emit("doubleTap doubleClick", e5);
  }
  if (data.lastClickTime = now(), nextTick(() => {
    swiper.destroyed || (swiper.allowClick = !0);
  }), !data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = !1, data.isMoved = !1, data.startMoving = !1;
    return;
  }
  data.isTouched = !1, data.isMoved = !1, data.startMoving = !1;
  let currentPos;
  if (params.followFinger ? currentPos = rtl ? swiper.translate : -swiper.translate : currentPos = -data.currentTranslate, params.cssMode)
    return;
  if (swiper.params.freeMode && params.freeMode.enabled) {
    swiper.freeMode.onTouchEnd({
      currentPos
    });
    return;
  }
  let stopIndex = 0, groupSize = swiper.slidesSizesGrid[0];
  for (let i9 = 0; i9 < slidesGrid.length; i9 += i9 < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
    let increment2 = i9 < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
    typeof slidesGrid[i9 + increment2] < "u" ? currentPos >= slidesGrid[i9] && currentPos < slidesGrid[i9 + increment2] && (stopIndex = i9, groupSize = slidesGrid[i9 + increment2] - slidesGrid[i9]) : currentPos >= slidesGrid[i9] && (stopIndex = i9, groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2]);
  }
  let rewindFirstIndex = null, rewindLastIndex = null;
  params.rewind && (swiper.isBeginning ? rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1 : swiper.isEnd && (rewindFirstIndex = 0));
  let ratio = (currentPos - slidesGrid[stopIndex]) / groupSize, increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
  if (timeDiff > params.longSwipesMs) {
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    swiper.swipeDirection === "next" && (ratio >= params.longSwipesRatio ? swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment) : swiper.slideTo(stopIndex)), swiper.swipeDirection === "prev" && (ratio > 1 - params.longSwipesRatio ? swiper.slideTo(stopIndex + increment) : rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio ? swiper.slideTo(rewindLastIndex) : swiper.slideTo(stopIndex));
  } else {
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    swiper.navigation && (e5.target === swiper.navigation.nextEl || e5.target === swiper.navigation.prevEl) ? e5.target === swiper.navigation.nextEl ? swiper.slideTo(stopIndex + increment) : swiper.slideTo(stopIndex) : (swiper.swipeDirection === "next" && swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment), swiper.swipeDirection === "prev" && swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex));
  }
}

// node_modules/swiper/core/events/onResize.js
var timeout;
function onResize() {
  let swiper = this, {
    params,
    el
  } = swiper;
  if (el && el.offsetWidth === 0)
    return;
  params.breakpoints && swiper.setBreakpoint();
  let {
    allowSlideNext,
    allowSlidePrev,
    snapGrid
  } = swiper, isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  swiper.allowSlideNext = !0, swiper.allowSlidePrev = !0, swiper.updateSize(), swiper.updateSlides(), swiper.updateSlidesClasses();
  let isVirtualLoop = isVirtual && params.loop;
  (params.slidesPerView === "auto" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop ? swiper.slideTo(swiper.slides.length - 1, 0, !1, !0) : swiper.params.loop && !isVirtual ? swiper.slideToLoop(swiper.realIndex, 0, !1, !0) : swiper.slideTo(swiper.activeIndex, 0, !1, !0), swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused && (clearTimeout(timeout), timeout = setTimeout(() => {
    swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused && swiper.autoplay.resume();
  }, 500)), swiper.allowSlidePrev = allowSlidePrev, swiper.allowSlideNext = allowSlideNext, swiper.params.watchOverflow && snapGrid !== swiper.snapGrid && swiper.checkOverflow();
}

// node_modules/swiper/core/events/onClick.js
function onClick(e5) {
  let swiper = this;
  !swiper.enabled || swiper.allowClick || (swiper.params.preventClicks && e5.preventDefault(), swiper.params.preventClicksPropagation && swiper.animating && (e5.stopPropagation(), e5.stopImmediatePropagation()));
}

// node_modules/swiper/core/events/onScroll.js
function onScroll() {
  let swiper = this, {
    wrapperEl,
    rtlTranslate,
    enabled
  } = swiper;
  if (!enabled)
    return;
  swiper.previousTranslate = swiper.translate, swiper.isHorizontal() ? swiper.translate = -wrapperEl.scrollLeft : swiper.translate = -wrapperEl.scrollTop, swiper.translate === 0 && (swiper.translate = 0), swiper.updateActiveIndex(), swiper.updateSlidesClasses();
  let newProgress, translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  translatesDiff === 0 ? newProgress = 0 : newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff, newProgress !== swiper.progress && swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate), swiper.emit("setTranslate", swiper.translate, !1);
}

// node_modules/swiper/shared/process-lazy-preloader.js
var processLazyPreloader = (swiper, imageEl) => {
  if (!swiper || swiper.destroyed || !swiper.params)
    return;
  let slideSelector = () => swiper.isElement ? "swiper-slide" : `.${swiper.params.slideClass}`, slideEl = imageEl.closest(slideSelector());
  if (slideEl) {
    let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);
    lazyEl && lazyEl.remove();
  }
};

// node_modules/swiper/core/events/onLoad.js
function onLoad(e5) {
  let swiper = this;
  processLazyPreloader(swiper, e5.target), swiper.update();
}

// node_modules/swiper/core/events/index.js
var dummyEventAttached = !1;
function dummyEventListener() {
}
var events = (swiper, method) => {
  let document2 = getDocument(), {
    params,
    el,
    wrapperEl,
    device
  } = swiper, capture = !!params.nested, domMethod = method === "on" ? "addEventListener" : "removeEventListener", swiperMethod = method;
  el[domMethod]("pointerdown", swiper.onTouchStart, {
    passive: !1
  }), document2[domMethod]("pointermove", swiper.onTouchMove, {
    passive: !1,
    capture
  }), document2[domMethod]("pointerup", swiper.onTouchEnd, {
    passive: !0
  }), document2[domMethod]("pointercancel", swiper.onTouchEnd, {
    passive: !0
  }), document2[domMethod]("pointerout", swiper.onTouchEnd, {
    passive: !0
  }), document2[domMethod]("pointerleave", swiper.onTouchEnd, {
    passive: !0
  }), (params.preventClicks || params.preventClicksPropagation) && el[domMethod]("click", swiper.onClick, !0), params.cssMode && wrapperEl[domMethod]("scroll", swiper.onScroll), params.updateOnWindowResize ? swiper[swiperMethod](device.ios || device.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", onResize, !0) : swiper[swiperMethod]("observerUpdate", onResize, !0), el[domMethod]("load", swiper.onLoad, {
    capture: !0
  });
};
function attachEvents() {
  let swiper = this, document2 = getDocument(), {
    params
  } = swiper;
  swiper.onTouchStart = onTouchStart.bind(swiper), swiper.onTouchMove = onTouchMove.bind(swiper), swiper.onTouchEnd = onTouchEnd.bind(swiper), params.cssMode && (swiper.onScroll = onScroll.bind(swiper)), swiper.onClick = onClick.bind(swiper), swiper.onLoad = onLoad.bind(swiper), dummyEventAttached || (document2.addEventListener("touchstart", dummyEventListener), dummyEventAttached = !0), events(swiper, "on");
}
function detachEvents() {
  events(this, "off");
}
var events_default = {
  attachEvents,
  detachEvents
};

// node_modules/swiper/core/breakpoints/setBreakpoint.js
var isGridEnabled = (swiper, params) => swiper.grid && params.grid && params.grid.rows > 1;
function setBreakpoint() {
  let swiper = this, {
    realIndex,
    initialized,
    params,
    el
  } = swiper, breakpoints = params.breakpoints;
  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0)
    return;
  let breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
  if (!breakpoint || swiper.currentBreakpoint === breakpoint)
    return;
  let breakpointParams = (breakpoint in breakpoints ? breakpoints[breakpoint] : void 0) || swiper.originalParams, wasMultiRow = isGridEnabled(swiper, params), isMultiRow = isGridEnabled(swiper, breakpointParams), wasEnabled = params.enabled;
  wasMultiRow && !isMultiRow ? (el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`), swiper.emitContainerClasses()) : !wasMultiRow && isMultiRow && (el.classList.add(`${params.containerModifierClass}grid`), (breakpointParams.grid.fill && breakpointParams.grid.fill === "column" || !breakpointParams.grid.fill && params.grid.fill === "column") && el.classList.add(`${params.containerModifierClass}grid-column`), swiper.emitContainerClasses()), ["navigation", "pagination", "scrollbar"].forEach((prop) => {
    let wasModuleEnabled = params[prop] && params[prop].enabled, isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;
    wasModuleEnabled && !isModuleEnabled && swiper[prop].disable(), !wasModuleEnabled && isModuleEnabled && swiper[prop].enable();
  });
  let directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction, needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);
  directionChanged && initialized && swiper.changeDirection(), extend2(swiper.params, breakpointParams);
  let isEnabled = swiper.params.enabled;
  Object.assign(swiper, {
    allowTouchMove: swiper.params.allowTouchMove,
    allowSlideNext: swiper.params.allowSlideNext,
    allowSlidePrev: swiper.params.allowSlidePrev
  }), wasEnabled && !isEnabled ? swiper.disable() : !wasEnabled && isEnabled && swiper.enable(), swiper.currentBreakpoint = breakpoint, swiper.emit("_beforeBreakpoint", breakpointParams), needsReLoop && initialized && (swiper.loopDestroy(), swiper.loopCreate(realIndex), swiper.updateSlides()), swiper.emit("breakpoint", breakpointParams);
}

// node_modules/swiper/core/breakpoints/getBreakpoint.js
function getBreakpoint(breakpoints, base = "window", containerEl) {
  if (!breakpoints || base === "container" && !containerEl)
    return;
  let breakpoint = !1, window2 = getWindow(), currentHeight = base === "window" ? window2.innerHeight : containerEl.clientHeight, points2 = Object.keys(breakpoints).map((point) => {
    if (typeof point == "string" && point.indexOf("@") === 0) {
      let minRatio = parseFloat(point.substr(1));
      return {
        value: currentHeight * minRatio,
        point
      };
    }
    return {
      value: point,
      point
    };
  });
  points2.sort((a9, b5) => parseInt(a9.value, 10) - parseInt(b5.value, 10));
  for (let i9 = 0; i9 < points2.length; i9 += 1) {
    let {
      point,
      value
    } = points2[i9];
    base === "window" ? window2.matchMedia(`(min-width: ${value}px)`).matches && (breakpoint = point) : value <= containerEl.clientWidth && (breakpoint = point);
  }
  return breakpoint || "max";
}

// node_modules/swiper/core/breakpoints/index.js
var breakpoints_default = {
  setBreakpoint,
  getBreakpoint
};

// node_modules/swiper/core/classes/addClasses.js
function prepareClasses(entries, prefix2) {
  let resultClasses = [];
  return entries.forEach((item) => {
    typeof item == "object" ? Object.keys(item).forEach((classNames) => {
      item[classNames] && resultClasses.push(prefix2 + classNames);
    }) : typeof item == "string" && resultClasses.push(prefix2 + item);
  }), resultClasses;
}
function addClasses() {
  let swiper = this, {
    classNames,
    params,
    rtl,
    el,
    device
  } = swiper, suffixes = prepareClasses(["initialized", params.direction, {
    "free-mode": swiper.params.freeMode && params.freeMode.enabled
  }, {
    autoheight: params.autoHeight
  }, {
    rtl
  }, {
    grid: params.grid && params.grid.rows > 1
  }, {
    "grid-column": params.grid && params.grid.rows > 1 && params.grid.fill === "column"
  }, {
    android: device.android
  }, {
    ios: device.ios
  }, {
    "css-mode": params.cssMode
  }, {
    centered: params.cssMode && params.centeredSlides
  }, {
    "watch-progress": params.watchSlidesProgress
  }], params.containerModifierClass);
  classNames.push(...suffixes), el.classList.add(...classNames), swiper.emitContainerClasses();
}

// node_modules/swiper/core/classes/removeClasses.js
function removeClasses() {
  let swiper = this, {
    el,
    classNames
  } = swiper;
  el.classList.remove(...classNames), swiper.emitContainerClasses();
}

// node_modules/swiper/core/classes/index.js
var classes_default = {
  addClasses,
  removeClasses
};

// node_modules/swiper/core/check-overflow/index.js
function checkOverflow() {
  let swiper = this, {
    isLocked: wasLocked,
    params
  } = swiper, {
    slidesOffsetBefore
  } = params;
  if (slidesOffsetBefore) {
    let lastSlideIndex = swiper.slides.length - 1, lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;
    swiper.isLocked = swiper.size > lastSlideRightEdge;
  } else
    swiper.isLocked = swiper.snapGrid.length === 1;
  params.allowSlideNext === !0 && (swiper.allowSlideNext = !swiper.isLocked), params.allowSlidePrev === !0 && (swiper.allowSlidePrev = !swiper.isLocked), wasLocked && wasLocked !== swiper.isLocked && (swiper.isEnd = !1), wasLocked !== swiper.isLocked && swiper.emit(swiper.isLocked ? "lock" : "unlock");
}
var check_overflow_default = {
  checkOverflow
};

// node_modules/swiper/core/defaults.js
var defaults_default = {
  init: !0,
  direction: "horizontal",
  oneWayMovement: !1,
  touchEventsTarget: "wrapper",
  initialSlide: 0,
  speed: 300,
  cssMode: !1,
  updateOnWindowResize: !0,
  resizeObserver: !0,
  nested: !1,
  createElements: !1,
  enabled: !0,
  focusableElements: "input, select, option, textarea, button, video, label",
  width: null,
  height: null,
  preventInteractionOnTransition: !1,
  userAgent: null,
  url: null,
  edgeSwipeDetection: !1,
  edgeSwipeThreshold: 20,
  autoHeight: !1,
  setWrapperSize: !1,
  virtualTranslate: !1,
  effect: "slide",
  breakpoints: void 0,
  breakpointsBase: "window",
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  slidesPerGroupAuto: !1,
  centeredSlides: !1,
  centeredSlidesBounds: !1,
  slidesOffsetBefore: 0,
  slidesOffsetAfter: 0,
  normalizeSlideIndex: !0,
  centerInsufficientSlides: !1,
  watchOverflow: !0,
  roundLengths: !1,
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: !0,
  shortSwipes: !0,
  longSwipes: !0,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: !0,
  allowTouchMove: !0,
  threshold: 5,
  touchMoveStopPropagation: !1,
  touchStartPreventDefault: !0,
  touchStartForcePreventDefault: !1,
  touchReleaseOnEdges: !1,
  uniqueNavElements: !0,
  resistance: !0,
  resistanceRatio: 0.85,
  watchSlidesProgress: !1,
  grabCursor: !1,
  preventClicks: !0,
  preventClicksPropagation: !0,
  slideToClickedSlide: !1,
  loop: !1,
  loopedSlides: null,
  loopPreventsSliding: !0,
  rewind: !1,
  allowSlidePrev: !0,
  allowSlideNext: !0,
  swipeHandler: null,
  noSwiping: !0,
  noSwipingClass: "swiper-no-swiping",
  noSwipingSelector: null,
  passiveListeners: !0,
  maxBackfaceHiddenSlides: 10,
  containerModifierClass: "swiper-",
  slideClass: "swiper-slide",
  slideActiveClass: "swiper-slide-active",
  slideVisibleClass: "swiper-slide-visible",
  slideNextClass: "swiper-slide-next",
  slidePrevClass: "swiper-slide-prev",
  wrapperClass: "swiper-wrapper",
  lazyPreloaderClass: "swiper-lazy-preloader",
  runCallbacksOnInit: !0,
  _emitClasses: !1
};

// node_modules/swiper/core/moduleExtendParams.js
function moduleExtendParams(params, allModulesParams) {
  return function(obj = {}) {
    let moduleParamName = Object.keys(obj)[0], moduleParams = obj[moduleParamName];
    if (typeof moduleParams != "object" || moduleParams === null) {
      extend2(allModulesParams, obj);
      return;
    }
    if (["navigation", "pagination", "scrollbar"].indexOf(moduleParamName) >= 0 && params[moduleParamName] === !0 && (params[moduleParamName] = {
      auto: !0
    }), !(moduleParamName in params && "enabled" in moduleParams)) {
      extend2(allModulesParams, obj);
      return;
    }
    params[moduleParamName] === !0 && (params[moduleParamName] = {
      enabled: !0
    }), typeof params[moduleParamName] == "object" && !("enabled" in params[moduleParamName]) && (params[moduleParamName].enabled = !0), params[moduleParamName] || (params[moduleParamName] = {
      enabled: !1
    }), extend2(allModulesParams, obj);
  };
}

// node_modules/swiper/core/core.js
var prototypes = {
  eventsEmitter: events_emitter_default,
  update: update_default,
  translate: translate_default,
  transition: transition_default,
  slide: slide_default,
  loop: loop_default,
  grabCursor: grab_cursor_default,
  events: events_default,
  breakpoints: breakpoints_default,
  checkOverflow: check_overflow_default,
  classes: classes_default
}, extendedDefaults = {}, Swiper = class {
  constructor(...args) {
    let el, params;
    args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === "Object" ? params = args[0] : [el, params] = args, params || (params = {}), params = extend2({}, params), el && !params.el && (params.el = el);
    let document2 = getDocument();
    if (params.el && typeof params.el == "string" && document2.querySelectorAll(params.el).length > 1) {
      let swipers = [];
      return document2.querySelectorAll(params.el).forEach((containerEl) => {
        let newParams = extend2({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      }), swipers;
    }
    let swiper = this;
    swiper.__swiper__ = !0, swiper.support = getSupport(), swiper.device = getDevice({
      userAgent: params.userAgent
    }), swiper.browser = getBrowser(), swiper.eventsListeners = {}, swiper.eventsAnyListeners = [], swiper.modules = [...swiper.__modules__], params.modules && Array.isArray(params.modules) && swiper.modules.push(...params.modules);
    let allModulesParams = {};
    swiper.modules.forEach((mod) => {
      mod({
        params,
        swiper,
        extendParams: moduleExtendParams(params, allModulesParams),
        on: swiper.on.bind(swiper),
        once: swiper.once.bind(swiper),
        off: swiper.off.bind(swiper),
        emit: swiper.emit.bind(swiper)
      });
    });
    let swiperParams = extend2({}, defaults_default, allModulesParams);
    return swiper.params = extend2({}, swiperParams, extendedDefaults, params), swiper.originalParams = extend2({}, swiper.params), swiper.passedParams = extend2({}, params), swiper.params && swiper.params.on && Object.keys(swiper.params.on).forEach((eventName) => {
      swiper.on(eventName, swiper.params.on[eventName]);
    }), swiper.params && swiper.params.onAny && swiper.onAny(swiper.params.onAny), Object.assign(swiper, {
      enabled: swiper.params.enabled,
      el,
      classNames: [],
      slides: [],
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      isHorizontal() {
        return swiper.params.direction === "horizontal";
      },
      isVertical() {
        return swiper.params.direction === "vertical";
      },
      activeIndex: 0,
      realIndex: 0,
      isBeginning: !0,
      isEnd: !1,
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: !1,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      touchEventsData: {
        isTouched: void 0,
        isMoved: void 0,
        allowTouchCallbacks: void 0,
        touchStartTime: void 0,
        isScrolling: void 0,
        currentTranslate: void 0,
        startTranslate: void 0,
        allowThresholdMove: void 0,
        focusableElements: swiper.params.focusableElements,
        lastClickTime: now(),
        clickTimeout: void 0,
        velocities: [],
        allowMomentumBounce: void 0,
        startMoving: void 0,
        evCache: []
      },
      allowClick: !0,
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      imagesToLoad: [],
      imagesLoaded: 0
    }), swiper.emit("_swiper"), swiper.params.init && swiper.init(), swiper;
  }
  getSlideIndex(slideEl) {
    let {
      slidesEl,
      params
    } = this, slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`), firstSlideIndex = elementIndex(slides[0]);
    return elementIndex(slideEl) - firstSlideIndex;
  }
  recalcSlides() {
    let swiper = this, {
      slidesEl,
      params
    } = swiper;
    swiper.slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
  }
  enable() {
    let swiper = this;
    swiper.enabled || (swiper.enabled = !0, swiper.params.grabCursor && swiper.setGrabCursor(), swiper.emit("enable"));
  }
  disable() {
    let swiper = this;
    !swiper.enabled || (swiper.enabled = !1, swiper.params.grabCursor && swiper.unsetGrabCursor(), swiper.emit("disable"));
  }
  setProgress(progress2, speed) {
    let swiper = this;
    progress2 = Math.min(Math.max(progress2, 0), 1);
    let min = swiper.minTranslate(), current = (swiper.maxTranslate() - min) * progress2 + min;
    swiper.translateTo(current, typeof speed > "u" ? 0 : speed), swiper.updateActiveIndex(), swiper.updateSlidesClasses();
  }
  emitContainerClasses() {
    let swiper = this;
    if (!swiper.params._emitClasses || !swiper.el)
      return;
    let cls = swiper.el.className.split(" ").filter((className) => className.indexOf("swiper") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0);
    swiper.emit("_containerClasses", cls.join(" "));
  }
  getSlideClasses(slideEl) {
    let swiper = this;
    return swiper.destroyed ? "" : slideEl.className.split(" ").filter((className) => className.indexOf("swiper-slide") === 0 || className.indexOf(swiper.params.slideClass) === 0).join(" ");
  }
  emitSlidesClasses() {
    let swiper = this;
    if (!swiper.params._emitClasses || !swiper.el)
      return;
    let updates = [];
    swiper.slides.forEach((slideEl) => {
      let classNames = swiper.getSlideClasses(slideEl);
      updates.push({
        slideEl,
        classNames
      }), swiper.emit("_slideClass", slideEl, classNames);
    }), swiper.emit("_slideClasses", updates);
  }
  slidesPerViewDynamic(view = "current", exact = !1) {
    let swiper = this, {
      params,
      slides,
      slidesGrid,
      slidesSizesGrid,
      size: swiperSize,
      activeIndex
    } = swiper, spv = 1;
    if (params.centeredSlides) {
      let slideSize = slides[activeIndex].swiperSlideSize, breakLoop;
      for (let i9 = activeIndex + 1; i9 < slides.length; i9 += 1)
        slides[i9] && !breakLoop && (slideSize += slides[i9].swiperSlideSize, spv += 1, slideSize > swiperSize && (breakLoop = !0));
      for (let i9 = activeIndex - 1; i9 >= 0; i9 -= 1)
        slides[i9] && !breakLoop && (slideSize += slides[i9].swiperSlideSize, spv += 1, slideSize > swiperSize && (breakLoop = !0));
    } else if (view === "current")
      for (let i9 = activeIndex + 1; i9 < slides.length; i9 += 1)
        (exact ? slidesGrid[i9] + slidesSizesGrid[i9] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i9] - slidesGrid[activeIndex] < swiperSize) && (spv += 1);
    else
      for (let i9 = activeIndex - 1; i9 >= 0; i9 -= 1)
        slidesGrid[activeIndex] - slidesGrid[i9] < swiperSize && (spv += 1);
    return spv;
  }
  update() {
    let swiper = this;
    if (!swiper || swiper.destroyed)
      return;
    let {
      snapGrid,
      params
    } = swiper;
    params.breakpoints && swiper.setBreakpoint(), [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach((imageEl) => {
      imageEl.complete && processLazyPreloader(swiper, imageEl);
    }), swiper.updateSize(), swiper.updateSlides(), swiper.updateProgress(), swiper.updateSlidesClasses();
    function setTranslate2() {
      let translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate, newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate), swiper.updateActiveIndex(), swiper.updateSlidesClasses();
    }
    let translated;
    swiper.params.freeMode && swiper.params.freeMode.enabled ? (setTranslate2(), swiper.params.autoHeight && swiper.updateAutoHeight()) : ((swiper.params.slidesPerView === "auto" || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides ? translated = swiper.slideTo(swiper.slides.length - 1, 0, !1, !0) : translated = swiper.slideTo(swiper.activeIndex, 0, !1, !0), translated || setTranslate2()), params.watchOverflow && snapGrid !== swiper.snapGrid && swiper.checkOverflow(), swiper.emit("update");
  }
  changeDirection(newDirection, needUpdate = !0) {
    let swiper = this, currentDirection = swiper.params.direction;
    return newDirection || (newDirection = currentDirection === "horizontal" ? "vertical" : "horizontal"), newDirection === currentDirection || newDirection !== "horizontal" && newDirection !== "vertical" || (swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`), swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`), swiper.emitContainerClasses(), swiper.params.direction = newDirection, swiper.slides.forEach((slideEl) => {
      newDirection === "vertical" ? slideEl.style.width = "" : slideEl.style.height = "";
    }), swiper.emit("changeDirection"), needUpdate && swiper.update()), swiper;
  }
  changeLanguageDirection(direction) {
    let swiper = this;
    swiper.rtl && direction === "rtl" || !swiper.rtl && direction === "ltr" || (swiper.rtl = direction === "rtl", swiper.rtlTranslate = swiper.params.direction === "horizontal" && swiper.rtl, swiper.rtl ? (swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`), swiper.el.dir = "rtl") : (swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`), swiper.el.dir = "ltr"), swiper.update());
  }
  mount(element) {
    let swiper = this;
    if (swiper.mounted)
      return !0;
    let el = element || swiper.params.el;
    if (typeof el == "string" && (el = document.querySelector(el)), !el)
      return !1;
    el.swiper = swiper, el.shadowEl && (swiper.isElement = !0);
    let getWrapperSelector = () => `.${(swiper.params.wrapperClass || "").trim().split(" ").join(".")}`, wrapperEl = (() => el && el.shadowRoot && el.shadowRoot.querySelector ? el.shadowRoot.querySelector(getWrapperSelector()) : elementChildren(el, getWrapperSelector())[0])();
    return !wrapperEl && swiper.params.createElements && (wrapperEl = createElement8("div", swiper.params.wrapperClass), el.append(wrapperEl), elementChildren(el, `.${swiper.params.slideClass}`).forEach((slideEl) => {
      wrapperEl.append(slideEl);
    })), Object.assign(swiper, {
      el,
      wrapperEl,
      slidesEl: swiper.isElement ? el : wrapperEl,
      mounted: !0,
      rtl: el.dir.toLowerCase() === "rtl" || elementStyle(el, "direction") === "rtl",
      rtlTranslate: swiper.params.direction === "horizontal" && (el.dir.toLowerCase() === "rtl" || elementStyle(el, "direction") === "rtl"),
      wrongRTL: elementStyle(wrapperEl, "display") === "-webkit-box"
    }), !0;
  }
  init(el) {
    let swiper = this;
    return swiper.initialized || swiper.mount(el) === !1 || (swiper.emit("beforeInit"), swiper.params.breakpoints && swiper.setBreakpoint(), swiper.addClasses(), swiper.updateSize(), swiper.updateSlides(), swiper.params.watchOverflow && swiper.checkOverflow(), swiper.params.grabCursor && swiper.enabled && swiper.setGrabCursor(), swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled ? swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, !1, !0) : swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, !1, !0), swiper.params.loop && swiper.loopCreate(), swiper.attachEvents(), [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach((imageEl) => {
      imageEl.complete ? processLazyPreloader(swiper, imageEl) : imageEl.addEventListener("load", (e5) => {
        processLazyPreloader(swiper, e5.target);
      });
    }), swiper.initialized = !0, swiper.emit("init"), swiper.emit("afterInit")), swiper;
  }
  destroy(deleteInstance = !0, cleanStyles = !0) {
    let swiper = this, {
      params,
      el,
      wrapperEl,
      slides
    } = swiper;
    return typeof swiper.params > "u" || swiper.destroyed || (swiper.emit("beforeDestroy"), swiper.initialized = !1, swiper.detachEvents(), params.loop && swiper.loopDestroy(), cleanStyles && (swiper.removeClasses(), el.removeAttribute("style"), wrapperEl.removeAttribute("style"), slides && slides.length && slides.forEach((slideEl) => {
      slideEl.classList.remove(params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass), slideEl.removeAttribute("style"), slideEl.removeAttribute("data-swiper-slide-index");
    })), swiper.emit("destroy"), Object.keys(swiper.eventsListeners).forEach((eventName) => {
      swiper.off(eventName);
    }), deleteInstance !== !1 && (swiper.el.swiper = null, deleteProps(swiper)), swiper.destroyed = !0), null;
  }
  static extendDefaults(newDefaults) {
    extend2(extendedDefaults, newDefaults);
  }
  static get extendedDefaults() {
    return extendedDefaults;
  }
  static get defaults() {
    return defaults_default;
  }
  static installModule(mod) {
    Swiper.prototype.__modules__ || (Swiper.prototype.__modules__ = []);
    let modules = Swiper.prototype.__modules__;
    typeof mod == "function" && modules.indexOf(mod) < 0 && modules.push(mod);
  }
  static use(module) {
    return Array.isArray(module) ? (module.forEach((m11) => Swiper.installModule(m11)), Swiper) : (Swiper.installModule(module), Swiper);
  }
};
Object.keys(prototypes).forEach((prototypeGroup) => {
  Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
  });
});
Swiper.use([Resize, Observer]);
var core_default = Swiper;

// node_modules/swiper/components-shared/utils.js
function isObject4(o8) {
  return typeof o8 == "object" && o8 !== null && o8.constructor && Object.prototype.toString.call(o8).slice(8, -1) === "Object";
}
function extend3(target, src) {
  let noExtend = ["__proto__", "constructor", "prototype"];
  Object.keys(src).filter((key) => noExtend.indexOf(key) < 0).forEach((key) => {
    typeof target[key] > "u" ? target[key] = src[key] : isObject4(src[key]) && isObject4(target[key]) && Object.keys(src[key]).length > 0 ? src[key].__swiper__ ? target[key] = src[key] : extend3(target[key], src[key]) : target[key] = src[key];
  });
}
function needsNavigation(params = {}) {
  return params.navigation && typeof params.navigation.nextEl > "u" && typeof params.navigation.prevEl > "u";
}
function needsPagination(params = {}) {
  return params.pagination && typeof params.pagination.el > "u";
}
function needsScrollbar(params = {}) {
  return params.scrollbar && typeof params.scrollbar.el > "u";
}
function uniqueClasses(classNames = "") {
  let classes = classNames.split(" ").map((c9) => c9.trim()).filter((c9) => !!c9), unique = [];
  return classes.forEach((c9) => {
    unique.indexOf(c9) < 0 && unique.push(c9);
  }), unique.join(" ");
}
function wrapperClass(className = "") {
  return className ? className.includes("swiper-wrapper") ? className : `swiper-wrapper ${className}` : "swiper-wrapper";
}

// node_modules/swiper/components-shared/params-list.js
var paramsList = [
  "modules",
  "init",
  "_direction",
  "oneWayMovement",
  "touchEventsTarget",
  "initialSlide",
  "_speed",
  "cssMode",
  "updateOnWindowResize",
  "resizeObserver",
  "nested",
  "focusableElements",
  "_enabled",
  "_width",
  "_height",
  "preventInteractionOnTransition",
  "userAgent",
  "url",
  "_edgeSwipeDetection",
  "_edgeSwipeThreshold",
  "_freeMode",
  "_autoHeight",
  "setWrapperSize",
  "virtualTranslate",
  "_effect",
  "breakpoints",
  "_spaceBetween",
  "_slidesPerView",
  "maxBackfaceHiddenSlides",
  "_grid",
  "_slidesPerGroup",
  "_slidesPerGroupSkip",
  "_slidesPerGroupAuto",
  "_centeredSlides",
  "_centeredSlidesBounds",
  "_slidesOffsetBefore",
  "_slidesOffsetAfter",
  "normalizeSlideIndex",
  "_centerInsufficientSlides",
  "_watchOverflow",
  "roundLengths",
  "touchRatio",
  "touchAngle",
  "simulateTouch",
  "_shortSwipes",
  "_longSwipes",
  "longSwipesRatio",
  "longSwipesMs",
  "_followFinger",
  "allowTouchMove",
  "_threshold",
  "touchMoveStopPropagation",
  "touchStartPreventDefault",
  "touchStartForcePreventDefault",
  "touchReleaseOnEdges",
  "uniqueNavElements",
  "_resistance",
  "_resistanceRatio",
  "_watchSlidesProgress",
  "_grabCursor",
  "preventClicks",
  "preventClicksPropagation",
  "_slideToClickedSlide",
  "_loop",
  "loopedSlides",
  "loopPreventsSliding",
  "_rewind",
  "_allowSlidePrev",
  "_allowSlideNext",
  "_swipeHandler",
  "_noSwiping",
  "noSwipingClass",
  "noSwipingSelector",
  "passiveListeners",
  "containerModifierClass",
  "slideClass",
  "slideActiveClass",
  "slideVisibleClass",
  "slideNextClass",
  "slidePrevClass",
  "wrapperClass",
  "lazyPreloaderClass",
  "runCallbacksOnInit",
  "observer",
  "observeParents",
  "observeSlideChildren",
  "a11y",
  "_autoplay",
  "_controller",
  "coverflowEffect",
  "cubeEffect",
  "fadeEffect",
  "flipEffect",
  "creativeEffect",
  "cardsEffect",
  "hashNavigation",
  "history",
  "keyboard",
  "mousewheel",
  "_navigation",
  "_pagination",
  "parallax",
  "_scrollbar",
  "_thumbs",
  "virtual",
  "zoom",
  "control",
  "injectStyles",
  "injectStylesUrls"
];

// node_modules/swiper/components-shared/get-params.js
function getParams(obj = {}, splitEvents = !0) {
  let params = {
    on: {}
  }, events2 = {}, passedParams = {};
  extend3(params, core_default.defaults), extend3(params, core_default.extendedDefaults), params._emitClasses = !0, params.init = !1;
  let rest = {}, allowedParams = paramsList.map((key) => key.replace(/_/, "")), plainObj = Object.assign({}, obj);
  return Object.keys(plainObj).forEach((key) => {
    typeof obj[key] > "u" || (allowedParams.indexOf(key) >= 0 ? isObject4(obj[key]) ? (params[key] = {}, passedParams[key] = {}, extend3(params[key], obj[key]), extend3(passedParams[key], obj[key])) : (params[key] = obj[key], passedParams[key] = obj[key]) : key.search(/on[A-Z]/) === 0 && typeof obj[key] == "function" ? splitEvents ? events2[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key] : params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key] : rest[key] = obj[key]);
  }), ["navigation", "pagination", "scrollbar"].forEach((key) => {
    params[key] === !0 && (params[key] = {}), params[key] === !1 && delete params[key];
  }), {
    params,
    passedParams,
    rest,
    events: events2
  };
}

// node_modules/swiper/components-shared/mount-swiper.js
function mountSwiper({
  el,
  nextEl,
  prevEl,
  paginationEl,
  scrollbarEl,
  swiper
}, swiperParams) {
  needsNavigation(swiperParams) && nextEl && prevEl && (swiper.params.navigation.nextEl = nextEl, swiper.originalParams.navigation.nextEl = nextEl, swiper.params.navigation.prevEl = prevEl, swiper.originalParams.navigation.prevEl = prevEl), needsPagination(swiperParams) && paginationEl && (swiper.params.pagination.el = paginationEl, swiper.originalParams.pagination.el = paginationEl), needsScrollbar(swiperParams) && scrollbarEl && (swiper.params.scrollbar.el = scrollbarEl, swiper.originalParams.scrollbar.el = scrollbarEl), swiper.init(el);
}

// node_modules/swiper/components-shared/get-changed-params.js
function getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {
  let keys = [];
  if (!oldParams)
    return keys;
  let addKey = (key) => {
    keys.indexOf(key) < 0 && keys.push(key);
  };
  if (children && oldChildren) {
    let oldChildrenKeys = oldChildren.map(getKey), childrenKeys = children.map(getKey);
    oldChildrenKeys.join("") !== childrenKeys.join("") && addKey("children"), oldChildren.length !== children.length && addKey("children");
  }
  return paramsList.filter((key) => key[0] === "_").map((key) => key.replace(/_/, "")).forEach((key) => {
    if (key in swiperParams && key in oldParams)
      if (isObject4(swiperParams[key]) && isObject4(oldParams[key])) {
        let newKeys = Object.keys(swiperParams[key]), oldKeys = Object.keys(oldParams[key]);
        newKeys.length !== oldKeys.length ? addKey(key) : (newKeys.forEach((newKey) => {
          swiperParams[key][newKey] !== oldParams[key][newKey] && addKey(key);
        }), oldKeys.forEach((oldKey) => {
          swiperParams[key][oldKey] !== oldParams[key][oldKey] && addKey(key);
        }));
      } else
        swiperParams[key] !== oldParams[key] && addKey(key);
  }), keys;
}

// node_modules/swiper/react/get-children.js
var import_react77 = __toESM(require_react(), 1);
function isChildSwiperSlide(child) {
  return child.type && child.type.displayName && child.type.displayName.includes("SwiperSlide");
}
function processChildren(c9) {
  let slides = [];
  return import_react77.default.Children.toArray(c9).forEach((child) => {
    isChildSwiperSlide(child) ? slides.push(child) : child.props && child.props.children && processChildren(child.props.children).forEach((slide) => slides.push(slide));
  }), slides;
}
function getChildren(c9) {
  let slides = [], slots = {
    "container-start": [],
    "container-end": [],
    "wrapper-start": [],
    "wrapper-end": []
  };
  return import_react77.default.Children.toArray(c9).forEach((child) => {
    if (isChildSwiperSlide(child))
      slides.push(child);
    else if (child.props && child.props.slot && slots[child.props.slot])
      slots[child.props.slot].push(child);
    else if (child.props && child.props.children) {
      let foundSlides = processChildren(child.props.children);
      foundSlides.length > 0 ? foundSlides.forEach((slide) => slides.push(slide)) : slots["container-end"].push(child);
    } else
      slots["container-end"].push(child);
  }), {
    slides,
    slots
  };
}

// node_modules/swiper/components-shared/update-swiper.js
function updateSwiper({
  swiper,
  slides,
  passedParams,
  changedParams,
  nextEl,
  prevEl,
  scrollbarEl,
  paginationEl
}) {
  let updateParams = changedParams.filter((key) => key !== "children" && key !== "direction" && key !== "wrapperClass"), {
    params: currentParams,
    pagination,
    navigation,
    scrollbar,
    virtual,
    thumbs
  } = swiper, needThumbsInit, needControllerInit, needPaginationInit, needScrollbarInit, needNavigationInit, loopNeedDestroy, loopNeedEnable, loopNeedReloop;
  changedParams.includes("thumbs") && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper && (needThumbsInit = !0), changedParams.includes("controller") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control && (needControllerInit = !0), changedParams.includes("pagination") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === !1) && pagination && !pagination.el && (needPaginationInit = !0), changedParams.includes("scrollbar") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === !1) && scrollbar && !scrollbar.el && (needScrollbarInit = !0), changedParams.includes("navigation") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === !1) && navigation && !navigation.prevEl && !navigation.nextEl && (needNavigationInit = !0);
  let destroyModule = (mod) => {
    !swiper[mod] || (swiper[mod].destroy(), mod === "navigation" ? (swiper.isElement && (swiper[mod].prevEl.remove(), swiper[mod].nextEl.remove()), currentParams[mod].prevEl = void 0, currentParams[mod].nextEl = void 0, swiper[mod].prevEl = void 0, swiper[mod].nextEl = void 0) : (swiper.isElement && swiper[mod].el.remove(), currentParams[mod].el = void 0, swiper[mod].el = void 0));
  };
  changedParams.includes("loop") && swiper.isElement && (currentParams.loop && !passedParams.loop ? loopNeedDestroy = !0 : !currentParams.loop && passedParams.loop ? loopNeedEnable = !0 : loopNeedReloop = !0), updateParams.forEach((key) => {
    if (isObject4(currentParams[key]) && isObject4(passedParams[key]))
      extend3(currentParams[key], passedParams[key]);
    else {
      let newValue = passedParams[key];
      (newValue === !0 || newValue === !1) && (key === "navigation" || key === "pagination" || key === "scrollbar") ? newValue === !1 && destroyModule(key) : currentParams[key] = passedParams[key];
    }
  }), updateParams.includes("controller") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control && (swiper.controller.control = currentParams.controller.control), changedParams.includes("children") && slides && virtual && currentParams.virtual.enabled && (virtual.slides = slides, virtual.update(!0)), changedParams.includes("children") && slides && currentParams.loop && (loopNeedReloop = !0), needThumbsInit && thumbs.init() && thumbs.update(!0), needControllerInit && (swiper.controller.control = currentParams.controller.control), needPaginationInit && (swiper.isElement && (!paginationEl || typeof paginationEl == "string") && (paginationEl = document.createElement("div"), paginationEl.classList.add("swiper-pagination"), swiper.el.shadowEl.appendChild(paginationEl)), paginationEl && (currentParams.pagination.el = paginationEl), pagination.init(), pagination.render(), pagination.update()), needScrollbarInit && (swiper.isElement && (!scrollbarEl || typeof scrollbarEl == "string") && (scrollbarEl = document.createElement("div"), scrollbarEl.classList.add("swiper-scrollbar"), swiper.el.shadowEl.appendChild(scrollbarEl)), scrollbarEl && (currentParams.scrollbar.el = scrollbarEl), scrollbar.init(), scrollbar.updateSize(), scrollbar.setTranslate()), needNavigationInit && (swiper.isElement && ((!nextEl || typeof nextEl == "string") && (nextEl = document.createElement("div"), nextEl.classList.add("swiper-button-next"), swiper.el.shadowEl.appendChild(nextEl)), (!prevEl || typeof prevEl == "string") && (prevEl = document.createElement("div"), prevEl.classList.add("swiper-button-prev"), swiper.el.shadowEl.appendChild(prevEl))), nextEl && (currentParams.navigation.nextEl = nextEl), prevEl && (currentParams.navigation.prevEl = prevEl), navigation.init(), navigation.update()), changedParams.includes("allowSlideNext") && (swiper.allowSlideNext = passedParams.allowSlideNext), changedParams.includes("allowSlidePrev") && (swiper.allowSlidePrev = passedParams.allowSlidePrev), changedParams.includes("direction") && swiper.changeDirection(passedParams.direction, !1), (loopNeedDestroy || loopNeedReloop) && swiper.loopDestroy(), (loopNeedEnable || loopNeedReloop) && swiper.loopCreate(), swiper.update();
}

// node_modules/swiper/react/virtual.js
var import_react78 = __toESM(require_react(), 1);
function renderVirtual(swiper, slides, virtualData) {
  if (!virtualData)
    return null;
  let getSlideIndex = (index) => {
    let slideIndex = index;
    return index < 0 ? slideIndex = slides.length + index : slideIndex >= slides.length && (slideIndex = slideIndex - slides.length), slideIndex;
  }, style = swiper.isHorizontal() ? {
    [swiper.rtlTranslate ? "right" : "left"]: `${virtualData.offset}px`
  } : {
    top: `${virtualData.offset}px`
  }, {
    from,
    to
  } = virtualData, loopFrom = swiper.params.loop ? -slides.length : 0, loopTo = swiper.params.loop ? slides.length * 2 : slides.length, slidesToRender = [];
  for (let i9 = loopFrom; i9 < loopTo; i9 += 1)
    i9 >= from && i9 <= to && slidesToRender.push(slides[getSlideIndex(i9)]);
  return slidesToRender.map((child) => /* @__PURE__ */ import_react78.default.cloneElement(child, {
    swiper,
    style
  }));
}

// node_modules/swiper/components-shared/update-on-virtual-data.js
var updateOnVirtualData = (swiper) => {
  !swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled || (swiper.updateSlides(), swiper.updateProgress(), swiper.updateSlidesClasses(), swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled && swiper.parallax.setTranslate());
};

// node_modules/swiper/react/use-isomorphic-layout-effect.js
var import_react79 = __toESM(require_react(), 1);
function useIsomorphicLayoutEffect(callback, deps) {
  return typeof window > "u" ? (0, import_react79.useEffect)(callback, deps) : (0, import_react79.useLayoutEffect)(callback, deps);
}

// node_modules/swiper/react/context.js
var import_react80 = __toESM(require_react(), 1), SwiperSlideContext = /* @__PURE__ */ (0, import_react80.createContext)(null);
var SwiperContext = /* @__PURE__ */ (0, import_react80.createContext)(null);

// node_modules/swiper/react/swiper.js
function _extends5() {
  return _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i9 = 1; i9 < arguments.length; i9++) {
      var source = arguments[i9];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends5.apply(this, arguments);
}
var Swiper2 = /* @__PURE__ */ (0, import_react81.forwardRef)(function(_temp, externalElRef) {
  let {
    className,
    tag: Tag = "div",
    wrapperTag: WrapperTag = "div",
    children,
    onSwiper,
    ...rest
  } = _temp === void 0 ? {} : _temp, eventsAssigned = !1, [containerClasses, setContainerClasses] = (0, import_react81.useState)("swiper"), [virtualData, setVirtualData] = (0, import_react81.useState)(null), [breakpointChanged, setBreakpointChanged] = (0, import_react81.useState)(!1), initializedRef = (0, import_react81.useRef)(!1), swiperElRef = (0, import_react81.useRef)(null), swiperRef = (0, import_react81.useRef)(null), oldPassedParamsRef = (0, import_react81.useRef)(null), oldSlides = (0, import_react81.useRef)(null), nextElRef = (0, import_react81.useRef)(null), prevElRef = (0, import_react81.useRef)(null), paginationElRef = (0, import_react81.useRef)(null), scrollbarElRef = (0, import_react81.useRef)(null), {
    params: swiperParams,
    passedParams,
    rest: restProps,
    events: events2
  } = getParams(rest), {
    slides,
    slots
  } = getChildren(children), onBeforeBreakpoint = () => {
    setBreakpointChanged(!breakpointChanged);
  };
  Object.assign(swiperParams.on, {
    _containerClasses(swiper, classes) {
      setContainerClasses(classes);
    }
  });
  let initSwiper = () => {
    Object.assign(swiperParams.on, events2), eventsAssigned = !0;
    let passParams = {
      ...swiperParams
    };
    if (delete passParams.wrapperClass, swiperRef.current = new core_default(passParams), swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {
      swiperRef.current.virtual.slides = slides;
      let extendWith = {
        cache: !1,
        slides,
        renderExternal: setVirtualData,
        renderExternalUpdate: !1
      };
      extend3(swiperRef.current.params.virtual, extendWith), extend3(swiperRef.current.originalParams.virtual, extendWith);
    }
  };
  swiperElRef.current || initSwiper(), swiperRef.current && swiperRef.current.on("_beforeBreakpoint", onBeforeBreakpoint);
  let attachEvents2 = () => {
    eventsAssigned || !events2 || !swiperRef.current || Object.keys(events2).forEach((eventName) => {
      swiperRef.current.on(eventName, events2[eventName]);
    });
  }, detachEvents2 = () => {
    !events2 || !swiperRef.current || Object.keys(events2).forEach((eventName) => {
      swiperRef.current.off(eventName, events2[eventName]);
    });
  };
  (0, import_react81.useEffect)(() => () => {
    swiperRef.current && swiperRef.current.off("_beforeBreakpoint", onBeforeBreakpoint);
  }), (0, import_react81.useEffect)(() => {
    !initializedRef.current && swiperRef.current && (swiperRef.current.emitSlidesClasses(), initializedRef.current = !0);
  }), useIsomorphicLayoutEffect(() => {
    if (externalElRef && (externalElRef.current = swiperElRef.current), !!swiperElRef.current)
      return swiperRef.current.destroyed && initSwiper(), mountSwiper({
        el: swiperElRef.current,
        nextEl: nextElRef.current,
        prevEl: prevElRef.current,
        paginationEl: paginationElRef.current,
        scrollbarEl: scrollbarElRef.current,
        swiper: swiperRef.current
      }, swiperParams), onSwiper && onSwiper(swiperRef.current), () => {
        swiperRef.current && !swiperRef.current.destroyed && swiperRef.current.destroy(!0, !1);
      };
  }, []), useIsomorphicLayoutEffect(() => {
    attachEvents2();
    let changedParams = getChangedParams(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, (c9) => c9.key);
    return oldPassedParamsRef.current = passedParams, oldSlides.current = slides, changedParams.length && swiperRef.current && !swiperRef.current.destroyed && updateSwiper({
      swiper: swiperRef.current,
      slides,
      passedParams,
      changedParams,
      nextEl: nextElRef.current,
      prevEl: prevElRef.current,
      scrollbarEl: scrollbarElRef.current,
      paginationEl: paginationElRef.current
    }), () => {
      detachEvents2();
    };
  }), useIsomorphicLayoutEffect(() => {
    updateOnVirtualData(swiperRef.current);
  }, [virtualData]);
  function renderSlides() {
    return swiperParams.virtual ? renderVirtual(swiperRef.current, slides, virtualData) : slides.map((child, index) => /* @__PURE__ */ import_react81.default.cloneElement(child, {
      swiper: swiperRef.current,
      swiperSlideIndex: index
    }));
  }
  return /* @__PURE__ */ import_react81.default.createElement(Tag, _extends5({
    ref: swiperElRef,
    className: uniqueClasses(`${containerClasses}${className ? ` ${className}` : ""}`)
  }, restProps), /* @__PURE__ */ import_react81.default.createElement(SwiperContext.Provider, {
    value: swiperRef.current
  }, slots["container-start"], /* @__PURE__ */ import_react81.default.createElement(WrapperTag, {
    className: wrapperClass(swiperParams.wrapperClass)
  }, slots["wrapper-start"], renderSlides(), slots["wrapper-end"]), needsNavigation(swiperParams) && /* @__PURE__ */ import_react81.default.createElement(import_react81.default.Fragment, null, /* @__PURE__ */ import_react81.default.createElement("div", {
    ref: prevElRef,
    className: "swiper-button-prev"
  }), /* @__PURE__ */ import_react81.default.createElement("div", {
    ref: nextElRef,
    className: "swiper-button-next"
  })), needsScrollbar(swiperParams) && /* @__PURE__ */ import_react81.default.createElement("div", {
    ref: scrollbarElRef,
    className: "swiper-scrollbar"
  }), needsPagination(swiperParams) && /* @__PURE__ */ import_react81.default.createElement("div", {
    ref: paginationElRef,
    className: "swiper-pagination"
  }), slots["container-end"]));
});
Swiper2.displayName = "Swiper";

// node_modules/swiper/react/swiper-slide.js
var import_react82 = __toESM(require_react(), 1);
function _extends6() {
  return _extends6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i9 = 1; i9 < arguments.length; i9++) {
      var source = arguments[i9];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends6.apply(this, arguments);
}
var SwiperSlide = /* @__PURE__ */ (0, import_react82.forwardRef)(function(_temp, externalRef) {
  let {
    tag: Tag = "div",
    children,
    className = "",
    swiper,
    zoom,
    lazy,
    virtualIndex,
    swiperSlideIndex,
    ...rest
  } = _temp === void 0 ? {} : _temp, slideElRef = (0, import_react82.useRef)(null), [slideClasses, setSlideClasses] = (0, import_react82.useState)("swiper-slide"), [lazyLoaded, setLazyLoaded] = (0, import_react82.useState)(!1);
  function updateClasses(_s, el, classNames) {
    el === slideElRef.current && setSlideClasses(classNames);
  }
  useIsomorphicLayoutEffect(() => {
    if (typeof swiperSlideIndex < "u" && (slideElRef.current.swiperSlideIndex = swiperSlideIndex), externalRef && (externalRef.current = slideElRef.current), !(!slideElRef.current || !swiper)) {
      if (swiper.destroyed) {
        slideClasses !== "swiper-slide" && setSlideClasses("swiper-slide");
        return;
      }
      return swiper.on("_slideClass", updateClasses), () => {
        !swiper || swiper.off("_slideClass", updateClasses);
      };
    }
  }), useIsomorphicLayoutEffect(() => {
    swiper && slideElRef.current && !swiper.destroyed && setSlideClasses(swiper.getSlideClasses(slideElRef.current));
  }, [swiper]);
  let slideData = {
    isActive: slideClasses.indexOf("swiper-slide-active") >= 0,
    isVisible: slideClasses.indexOf("swiper-slide-visible") >= 0,
    isPrev: slideClasses.indexOf("swiper-slide-prev") >= 0,
    isNext: slideClasses.indexOf("swiper-slide-next") >= 0
  }, renderChildren = () => typeof children == "function" ? children(slideData) : children, onLoad2 = () => {
    setLazyLoaded(!0);
  };
  return /* @__PURE__ */ import_react82.default.createElement(Tag, _extends6({
    ref: slideElRef,
    className: uniqueClasses(`${slideClasses}${className ? ` ${className}` : ""}`),
    "data-swiper-slide-index": virtualIndex,
    onLoad: onLoad2
  }, rest), zoom && /* @__PURE__ */ import_react82.default.createElement(SwiperSlideContext.Provider, {
    value: slideData
  }, /* @__PURE__ */ import_react82.default.createElement("div", {
    className: "swiper-zoom-container",
    "data-swiper-zoom": typeof zoom == "number" ? zoom : void 0
  }, renderChildren(), lazy && !lazyLoaded && /* @__PURE__ */ import_react82.default.createElement("div", {
    className: "swiper-lazy-preloader"
  }))), !zoom && /* @__PURE__ */ import_react82.default.createElement(SwiperSlideContext.Provider, {
    value: slideData
  }, renderChildren(), lazy && !lazyLoaded && /* @__PURE__ */ import_react82.default.createElement("div", {
    className: "swiper-lazy-preloader"
  })));
});
SwiperSlide.displayName = "SwiperSlide";

// app/components/modules/TextColumnsModule.jsx
var import_jsx_dev_runtime43 = __toESM(require_jsx_dev_runtime()), TextColumnsModule = ({ content }) => /* @__PURE__ */ (0, import_jsx_dev_runtime43.jsxDEV)(Layout2, { intent: "columns", style: { columnFill: "auto" }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime43.jsxDEV)(PortableText2, { text: content.text, intent: "column" }, void 0, !1, {
  fileName: "app/components/modules/TextColumnsModule.jsx",
  lineNumber: 7,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/modules/TextColumnsModule.jsx",
  lineNumber: 6,
  columnNumber: 5
}, this);

// app/components/modules/CarouselModule.jsx
var import_jsx_dev_runtime44 = __toESM(require_jsx_dev_runtime()), CarouselModule = ({ content }) => {
  let [swiperInstance, setSwiperInstance] = (0, import_react83.useState)(null), ref = (0, import_react83.useRef)(null);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(Layout2, { intent: "module-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(
    "div",
    {
      className: "group relative w-full aspect-video bg-slate-200",
      onClick: (e5) => {
        e5.clientX - ref.current.getBoundingClientRect().left > window.innerHeight / 2 ? swiperInstance.slideNext() : swiperInstance.slidePrev();
      },
      ref,
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(
          "div",
          {
            className: "absolute w-full h-full hidden z-50 pointer-events-none group-hover:flex justify-between items-center p-8 text-white text-6xl",
            children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)("div", { className: "w-1/4", children: "<" }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 29,
                columnNumber: 12
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)("div", { className: "w-1/4 text-right", children: ">" }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 30,
                columnNumber: 12
              }, this)
            ]
          },
          void 0,
          !0,
          {
            fileName: "app/components/modules/CarouselModule.jsx",
            lineNumber: 24,
            columnNumber: 10
          },
          this
        ),
        /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(
          Swiper2,
          {
            onSwiper: (swiper) => setSwiperInstance(swiper),
            className: "w-full h-full",
            loop: !0,
            children: content.slide.map((slide) => /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(SwiperSlide, { children: [
              slide._type === "imageObject" && /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(
                SanityImage,
                {
                  value: slide.asset,
                  className: "h-full object-cover"
                },
                void 0,
                !1,
                {
                  fileName: "app/components/modules/CarouselModule.jsx",
                  lineNumber: 41,
                  columnNumber: 20
                },
                this
              ),
              slide._type === "textObject" && /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)("div", { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime44.jsxDEV)(TextColumnsModule, { content: slide.text }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 48,
                columnNumber: 22
              }, this) }, void 0, !1, {
                fileName: "app/components/modules/CarouselModule.jsx",
                lineNumber: 47,
                columnNumber: 20
              }, this)
            ] }, slide._key, !0, {
              fileName: "app/components/modules/CarouselModule.jsx",
              lineNumber: 39,
              columnNumber: 16
            }, this))
          },
          void 0,
          !1,
          {
            fileName: "app/components/modules/CarouselModule.jsx",
            lineNumber: 32,
            columnNumber: 10
          },
          this
        )
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/modules/CarouselModule.jsx",
      lineNumber: 12,
      columnNumber: 8
    },
    this
  ) }, void 0, !1, {
    fileName: "app/components/modules/CarouselModule.jsx",
    lineNumber: 11,
    columnNumber: 6
  }, this);
};

// app/components/parts/PortableText.jsx
var import_jsx_dev_runtime45 = __toESM(require_jsx_dev_runtime()), portableText = cva(
  "[&>*:not(:last-child):not(p):not(blockquote):not(section)]:mb-[1em]",
  {
    variants: {
      intent: {
        body: ["[&>p:not(:first-of-type)]:indent-5 [&>*:not(section)]:prose "],
        column: ["[&>p:not(:first-of-type)]:mb-[1em]"],
        footer: ["[&>p:not(:last-child)]:mb-[1em]"]
      }
    },
    defaultVariants: {
      intent: "body"
    }
  }
), components = (intent) => ({
  block: {
    normal: ({ children }) => {
      switch (intent) {
        case "column":
          return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text2, { tag: "p", intent: "bl-body-lg", children }, void 0, !1, {
            fileName: "app/components/parts/PortableText.jsx",
            lineNumber: 32,
            columnNumber: 15
          }, this);
        case "footer":
          return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text2, { tag: "p", intent: "bl-body-alt", children }, void 0, !1, {
            fileName: "app/components/parts/PortableText.jsx",
            lineNumber: 38,
            columnNumber: 15
          }, this);
        default:
          return /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text2, { tag: "p", intent: "bl-body", children }, void 0, !1, {
            fileName: "app/components/parts/PortableText.jsx",
            lineNumber: 44,
            columnNumber: 15
          }, this);
      }
    },
    h3: ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(
      Text2,
      {
        tag: "h3",
        intent: "bl-heading-2xl",
        className: "break-before-column",
        children
      },
      void 0,
      !1,
      {
        fileName: "app/components/parts/PortableText.jsx",
        lineNumber: 52,
        columnNumber: 9
      },
      this
    ),
    h5: ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text2, { tag: "h4", intent: "bl-heading-lg", children }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 61,
      columnNumber: 9
    }, this),
    h6: ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(Text2, { tag: "h5", intent: "bl-heading-sm", className: "!mb-0", children }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 66,
      columnNumber: 9
    }, this),
    blockquote: ({ children, value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(
      Text2,
      {
        tag: "blockquote",
        intent: "bl-quote",
        colour: value.colour,
        className: "my-20 px-8",
        children
      },
      void 0,
      !1,
      {
        fileName: "app/components/parts/PortableText.jsx",
        lineNumber: 71,
        columnNumber: 9
      },
      this
    )
  },
  types: {
    collapsibleModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CollapsibleModule, { content: value, inline: !0 }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 83,
      columnNumber: 9
    }, this),
    imageModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(ImageModule, { content: value, inline: !0 }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 85,
      columnNumber: 33
    }, this),
    carouselModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(CarouselModule, { content: value }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 86,
      columnNumber: 36
    }, this),
    imageGridModule: ({ value }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(ImageGridModule, { content: value, inline: !0 }, void 0, !1, {
      fileName: "app/components/parts/PortableText.jsx",
      lineNumber: 87,
      columnNumber: 37
    }, this)
  }
}), PortableText2 = ({ text: text2, intent, className }) => /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)("div", { className: portableText({ intent, className }), children: /* @__PURE__ */ (0, import_jsx_dev_runtime45.jsxDEV)(PortableText, { value: text2, components: components(intent) }, void 0, !1, {
  fileName: "app/components/parts/PortableText.jsx",
  lineNumber: 95,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/parts/PortableText.jsx",
  lineNumber: 94,
  columnNumber: 5
}, this);

// app/components/global/GlobalNewsletter.jsx
var import_react87 = __toESM(require_react());

// app/components/parts/Button.jsx
var import_jsx_dev_runtime46 = __toESM(require_jsx_dev_runtime()), button = cva(
  "hover:bg-accent focus-visible:bg-accent focus:outline-none focus:border-none antialiased",
  {
    variants: {
      intent: {
        link: [
          "hover:bg-transparent focus-visible:bg-transparent hover:text-accent focus-visible:text-accent"
        ],
        sm: [""],
        base: ["p-2"],
        lg: ["p-3"],
        xl: ["px-4 py-2"]
      },
      colour: {
        light: ["bg-white", "text-black"],
        mid: ["bg-zinc-500", "text-white"],
        dark: ["bg-black", "text-white"]
      }
    },
    defaultVariants: {
      intent: "base",
      colour: "light"
    }
  }
), Button2 = ({ type, intent, colour, className, children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime46.jsxDEV)("button", { type: type || "button", className: button({ intent, colour, className }), children }, void 0, !1, {
  fileName: "app/components/parts/Button.jsx",
  lineNumber: 31,
  columnNumber: 5
}, this);

// app/components/global/GlobalNewsletter.jsx
var import_jsx_dev_runtime47 = __toESM(require_jsx_dev_runtime()), GlobalNewsletter = () => {
  var _a2;
  let actionData = useActionData2(), transition = useTransition(), state = (_a2 = actionData == null ? void 0 : actionData.res) != null && _a2.statusText ? "success" : transition.submission ? "submitting" : actionData != null && actionData.subscription ? "success" : actionData != null && actionData.error ? "error" : "idle", inputRef = (0, import_react87.useRef)(null), successRef = (0, import_react87.useRef)(null), mounted = (0, import_react87.useRef)(!1);
  return (0, import_react87.useEffect)(() => {
    var _a3, _b, _c;
    state === "error" && ((_a3 = inputRef.current) == null || _a3.focus()), state === "idle" && mounted.current && ((_b = inputRef.current) == null || _b.select()), state === "success" && ((_c = successRef.current) == null || _c.focus()), mounted.current = !0;
  }, [state]), /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(Form, { method: "post", "aria-hidden": state === "success", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)("h2", { className: "mb-[1em]", children: "Sign up to our newsletter" }, void 0, !1, {
      fileName: "app/components/global/GlobalNewsletter.jsx",
      lineNumber: 40,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)("fieldset", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)("label", { children: "email:" }, void 0, !1, {
        fileName: "app/components/global/GlobalNewsletter.jsx",
        lineNumber: 42,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)("div", { className: "flex max-w-sm", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(
          "input",
          {
            "aria-label": "Email address",
            "aria-describedby": "error-message",
            ref: inputRef,
            type: "email",
            name: "email",
            placeholder: "",
            className: "flex-1 text-white bg-black rounded-none border-b-2 py-2 placeholder-white mr-2 focus:outline-none"
          },
          void 0,
          !1,
          {
            fileName: "app/components/global/GlobalNewsletter.jsx",
            lineNumber: 44,
            columnNumber: 11
          },
          this
        ),
        /* @__PURE__ */ (0, import_jsx_dev_runtime47.jsxDEV)(Button2, { type: "submit", intent: "base", colour: "light", "aria-label": "Submit email", children: [
          state === "idle" && "Go on",
          state === "submitting" && "Subscribing...",
          state === "success" && "Subscribed!",
          state === "error" && "Error :("
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalNewsletter.jsx",
          lineNumber: 55,
          columnNumber: 11
        }, this)
      ] }, void 0, !0, {
        fileName: "app/components/global/GlobalNewsletter.jsx",
        lineNumber: 43,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/global/GlobalNewsletter.jsx",
      lineNumber: 41,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/global/GlobalNewsletter.jsx",
    lineNumber: 39,
    columnNumber: 5
  }, this);
}, GlobalNewsletter_default = GlobalNewsletter;

// app/components/global/GlobalFooter.jsx
var import_jsx_dev_runtime48 = __toESM(require_jsx_dev_runtime()), GlobalFooter = () => {
  let { footer } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)(
    Layout2,
    {
      tag: "footer",
      intent: "footer",
      className: cx(
        "bg-black text-white flex justify-between flex-col gap-8",
        "md:flex-row md:gap-0"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)("div", { className: cx("w-1/3 order-first flex flex-col", "lg:px-4"), children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)(Text2, { className: "text-white mb-[1em]", children: "Pages" }, void 0, !1, {
            fileName: "app/components/global/GlobalFooter.jsx",
            lineNumber: 21,
            columnNumber: 9
          }, this),
          footer.footerLinks.map((link3) => /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)(
            Link4,
            {
              to: link3.slug,
              colour: "light",
              className: "w-max",
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)(Text2, { children: link3.title }, void 0, !1, {
                fileName: "app/components/global/GlobalFooter.jsx",
                lineNumber: 30,
                columnNumber: 15
              }, this)
            },
            link3._id,
            !1,
            {
              fileName: "app/components/global/GlobalFooter.jsx",
              lineNumber: 24,
              columnNumber: 13
            },
            this
          ))
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalFooter.jsx",
          lineNumber: 20,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)("div", { className: cx("flex-1 flex gap-8 flex-col", "lg:flex-row lg:gap-0"), children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)(
            "div",
            {
              className: cx(
                "max-w-prose flex-1 order-last",
                "lg:order-first lg:pr-4 lg:w-1/2"
              ),
              children: /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)(PortableText2, { text: footer.footerText, intent: "footer" }, void 0, !1, {
                fileName: "app/components/global/GlobalFooter.jsx",
                lineNumber: 42,
                columnNumber: 11
              }, this)
            },
            void 0,
            !1,
            {
              fileName: "app/components/global/GlobalFooter.jsx",
              lineNumber: 36,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)("div", { className: cx("flex-1 order-first", "lg:order-last lg:pr-4"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime48.jsxDEV)(GlobalNewsletter_default, {}, void 0, !1, {
            fileName: "app/components/global/GlobalFooter.jsx",
            lineNumber: 45,
            columnNumber: 11
          }, this) }, void 0, !1, {
            fileName: "app/components/global/GlobalFooter.jsx",
            lineNumber: 44,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/global/GlobalFooter.jsx",
          lineNumber: 35,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/global/GlobalFooter.jsx",
      lineNumber: 12,
      columnNumber: 5
    },
    this
  );
}, GlobalFooter_default = GlobalFooter;

// app/lib/queries.js
init_groq_esm();

// app/lib/fragments.js
init_groq_esm();
var blockFragment = groq`_type == 'block' => {..., "colour": coalesce(*[_id == ^.^.^._id][0].colour->colourDark, "#000000")}`, headingModuleFragment = groq`_type == 'headingModule' => @`, collapsibleModuleFragment = groq`_type == 'collapsibleModule' => @`, shopModuleFragment = groq`_type == 'shopModule' => @`, articlePreviewFragment = groq`{
    _id,
    headline,
    "slug": slug.fullUrl,
    "colour":colour->colourLight,
    author-> {name},
    media,
    image {
      alt,
      asset->{_id}
    },
    topic -> {
        topic,
        image {
          asset-> {_id}
        }
    },
}`, articlesModuleFragment = groq`_type == 'articlesModule' => {..., "articles": *[_type == "article"] [0..100]|order(date desc)${articlePreviewFragment}}`, carouselModuleFragment = groq`
    _type == 'carouselModule' => {
        _key,
        _type,
        slide[] {
            _type == "imageObject" => {
                ...,
                asset -> {_id}
            },
            _type == "textObject" => {
                ...
            }
        }
    }`, imageModuleFragment = groq`
    _type == 'imageModule' => {
        _key,
        _type,
        caption,
        image {
            ...,
            asset -> {_id}
        },
        "colour": coalesce(*[_id == ^.^._id][0].colour->colourDark, *[_id == ^.^.^.^._id][0].colour->colourDark, "#000000")
    }`, imageGridModuleFragment = groq`
    _type == 'imageGridModule' => {
        _key,
        _type,
        images[] {
            ...,
            asset -> {_id}
        },
    }`, textColumnsModuleFragment = groq`_type == 'textColumnsModule' => {
    ...,
    text[] {
        ${blockFragment},
        ${collapsibleModuleFragment},
        ${carouselModuleFragment},
        ${imageModuleFragment},
    }
}`, textBlockModuleFragment = groq`_type == 'textBlockModule' => {
    ...,
    text[] {
        ${blockFragment},
        ${collapsibleModuleFragment},
        ${carouselModuleFragment},
        ${imageModuleFragment},
        ${imageGridModuleFragment}
    }
}`, contentFragment = groq`
    content[] {
        ${textBlockModuleFragment},
        ${headingModuleFragment},
        ${collapsibleModuleFragment},
        ${textColumnsModuleFragment},
        ${carouselModuleFragment},
        ${imageModuleFragment},
        ${imageGridModuleFragment},
        ${articlesModuleFragment},
        ${shopModuleFragment},
    }`;

// app/lib/queries.js
var articleDataQuery = groq`*[_type == "article" && slug.current == $slug][0]{
        _id,
  		headline,
		date,
  		"slug": slug.fullUrl,
  		intro,
  		"colour":colour->colourLight,
  		author-> {name},
  		media[],
  		image {
  			alt,
  			asset->
  		},
		topic -> {
        topic,
			image {
			asset-> {_id}
			}
      	},
		"seoTitle": coalesce(seoTitle, headline),
		"seoDescription": coalesce(seoDescription, pt::text(intro)),
        ${contentFragment}
    }`, shopLinkQuery = groq`*[_type == "settings"][0] {
  shop->{slug{fullUrl}}
}`, pageDataQuery = groq`*[_type == "page" && slug.current == $slug][0]{
        _id,
		"seoTitle": coalesce(seoTitle, title),
		"seoDescription": seoDescription,
        ${contentFragment}
    }`;

// app/root.jsx
var import_jsx_dev_runtime49 = __toESM(require_jsx_dev_runtime()), seo = ({ data: { settings }, pathname }) => ({
  title: settings.seoTitle,
  titleTemplate: `%s | ${settings.shortTitle}`,
  description: settings.seoDescription,
  handle: settings.seoTwitter,
  url: `${settings.seoDomain}${pathname}`
}), handle = {
  seo
}, links = () => [
  { rel: "stylesheet", href: app_default },
  { rel: "preconnect", href: "https://cdn.shopify.com" },
  { rel: "preconnect", href: "https://shop.app" }
], meta = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
async function loader({ context: context2 }) {
  let [cartId, shop, allProducts, settings, menu, footer, shopLink] = await Promise.all(
    [
      context2.session.get("cartId"),
      getShopData(context2),
      getAllProductsData(context2),
      getSettingsData(context2),
      getMenuData(context2),
      getFooterData(context2),
      getShopPage(context2)
    ]
  );
  return defer3({
    settings,
    menu,
    footer,
    cart: cartId ? getCart(context2, cartId) : void 0,
    allProducts,
    analytics: {
      shopifySalesChannel: ShopifySalesChannel.hydrogen,
      shopId: shop.shop.id
    },
    sanityProjectDetails: context2.sanityProjectDetails,
    shop: shopLink
  });
}
var badRequest = (data) => json3(data, { status: 400 });
async function action({ request, context: context2 }) {
  await new Promise((res) => setTimeout(res, 1e3));
  let formData = await request.formData(), apiKey = context2.mailerLiteApi, email = formData.get("email"), subscribedAt = new Date().toLocaleString("sv-SE"), subscriber = {
    email,
    subscribed_at: subscribedAt
  };
  if (!email)
    return console.log("no email"), badRequest({
      formError: "Please provide an email."
    });
  try {
    let res = await fetch("https://connect.mailerlite.com/api/subscribers", {
      method: "post",
      body: JSON.stringify(subscriber),
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: ` Bearer ${apiKey}`
      }
    });
    return json3({ res });
  } catch {
    return badRequest({
      formError: "Sorry. We could not create an account with this email. User might already exist."
    });
  }
}
function App() {
  return useAnalytics(!0, {
    label: "United Kingdom (GBP \xA3)",
    language: "EN",
    country: "GB",
    currency: "GBP"
  }), /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("html", { lang: "en", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(It, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 180,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 181,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 182,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 179,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("body", { className: "selection:bg-accent/20", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(GlobalHeader_default, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 185,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("main", { className: "min-h-screen flex flex-col pt-24", children: /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Outlet, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 187,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 186,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(GlobalFooter_default, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 189,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(ScrollRestoration2, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 190,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 191,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 184,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.jsx",
    lineNumber: 178,
    columnNumber: 5
  }, this);
}
function CatchBoundary() {
  var _a2, _b, _c;
  let [root] = useMatches2(), caught = useCatch(), isNotFound = caught.status === 404, locale = ((_a2 = root.data) == null ? void 0 : _a2.selectedLocale) ?? DEFAULT_LOCALE;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("html", { lang: locale.language, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("title", { children: isNotFound ? "Not found" : "Error" }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 206,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 207,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 208,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 205,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(
        Layout,
        {
          layout: (_b = root == null ? void 0 : root.data) == null ? void 0 : _b.layout,
          children: isNotFound ? /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(NotFound, { type: (_c = caught.data) == null ? void 0 : _c.pageType }, void 0, !1, {
            fileName: "app/root.jsx",
            lineNumber: 216,
            columnNumber: 13
          }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(
            GenericError,
            {
              error: { message: `${caught.status} ${caught.data}` }
            },
            void 0,
            !1,
            {
              fileName: "app/root.jsx",
              lineNumber: 218,
              columnNumber: 13
            },
            this
          )
        },
        `${locale.language}-${locale.country}`,
        !1,
        {
          fileName: "app/root.jsx",
          lineNumber: 211,
          columnNumber: 9
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 223,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 210,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.jsx",
    lineNumber: 204,
    columnNumber: 5
  }, this);
}
function ErrorBoundary({ error }) {
  var _a2, _b;
  let [root] = useMatches2(), locale = ((_a2 = root == null ? void 0 : root.data) == null ? void 0 : _a2.selectedLocale) ?? DEFAULT_LOCALE;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("html", { lang: locale.language, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("title", { children: "Error" }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 236,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 237,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 238,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 235,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Layout, { layout: (_b = root == null ? void 0 : root.data) == null ? void 0 : _b.layout, children: /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(GenericError, { error }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 242,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 241,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime49.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 244,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 240,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.jsx",
    lineNumber: 234,
    columnNumber: 5
  }, this);
}
async function getShopData({ storefront }) {
  let query2 = `#graphql
  {
    shop {
      id
    }
  }
  `, shop = await storefront.query(query2);
  return invariant4(shop, "No data returned from Shopify API"), shop;
}
async function getSettingsData({ sanityClient }) {
  let query2 = groq`*[_type == "settings"][0]`;
  return await sanityClient.fetch(query2);
}
async function getMenuData({ sanityClient }) {
  let query2 = groq`*[_type == 'section'] | order(orderRank asc) {
		_id,
		name,
		"children": *[_type == "page" && !(_id in path('drafts.**')) && references(^._id)] | order(orderRank asc) {
			_id,
    		title,
    		"slug":slug.current
		}
	}	
`;
  return await sanityClient.fetch(query2);
}
async function getFooterData({ sanityClient }) {
  let query2 = groq`*[_type == "settings"][0] {
  footerLinks[] -> {
    _id,
    title,
    "slug": slug.fullUrl
  },
  footerText
}
`;
  return await sanityClient.fetch(query2);
}
var CART_QUERY = `#graphql
  query CartQuery($cartId: ID!, $country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    cart(id: $cartId) {
      ...CartFragment
    }
  }

  fragment CartFragment on Cart {
    id
    checkoutUrl
    totalQuantity
    buyerIdentity {
      countryCode
      customer {
        id
        email
        firstName
        lastName
        displayName
      }
      email
      phone
    }
    lines(first: 100) {
      edges {
        node {
          id
          quantity
          attributes {
            key
            value
          }
          cost {
            totalAmount {
              amount
              currencyCode
            }
            amountPerQuantity {
              amount
              currencyCode
            }
            compareAtAmountPerQuantity {
              amount
              currencyCode
            }
          }
          merchandise {
            ... on ProductVariant {
              id
              availableForSale
              compareAtPrice {
                ...MoneyFragment
              }
              price {
                ...MoneyFragment
              }
              requiresShipping
              title
              image {
                ...ImageFragment
              }
              product {
                handle
                title
                id
              }
              selectedOptions {
                name
                value
              }
            }
          }
        }
      }
    }
    cost {
      subtotalAmount {
        ...MoneyFragment
      }
      totalAmount {
        ...MoneyFragment
      }
      totalDutyAmount {
        ...MoneyFragment
      }
      totalTaxAmount {
        ...MoneyFragment
      }
    }
    note
    attributes {
      key
      value
    }
    discountCodes {
      code
    }
  }

  fragment MoneyFragment on MoneyV2 {
    currencyCode
    amount
  }

  fragment ImageFragment on Image {
    id
    url
    altText
    width
    height
  }
`;
async function getCart({ storefront }, cartId) {
  invariant4(storefront, "missing storefront client in cart query");
  let { cart } = await storefront.query(CART_QUERY, {
    variables: {
      cartId
    },
    cache: storefront.CacheNone()
  });
  return cart;
}
var ALL_PRODUCTS_QUERY = `#graphql
  query AllProducts(
    $country: CountryCode
    $language: LanguageCode
  ) @inContext(country: $country, language: $language) {
      products(first: 100) {
        nodes {
          id
          title
          publishedAt
          handle 
          featuredImage {
            url
            altText
            width
            height
          }
          variants(first: 5) {
            nodes {
              id
              price {
                amount
                currencyCode
              }
              compareAtPrice {
                amount
                currencyCode
              }
              selectedOptions {
                name
                value
              }
              product {
                handle
                title
              }
            }
          }
        }
      }
    }
  
`;
async function getAllProductsData({ storefront }) {
  invariant4(storefront, "missing storefront client in all products query");
  let { products } = await storefront.query(ALL_PRODUCTS_QUERY, {
    variables: {
      country: storefront.i18n.country,
      language: storefront.i18n.language
    }
  });
  return products;
}
async function getShopPage({ sanityClient }) {
  return await sanityClient.fetch(shopLinkQuery);
}

// app/routes/resource/preview.jsx
var preview_exports = {};
__export(preview_exports, {
  action: () => action2,
  loader: () => loader2
});

// app/sessions.jsx
var encoder = new TextEncoder(), sign = async (value, secret) => {
  let data = encoder.encode(value), key = await createKey2(secret, ["sign"]), signature = await crypto.subtle.sign("HMAC", key, data), hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(
    /=+$/,
    ""
  );
  return value + "." + hash;
}, unsign = async (cookie, secret) => {
  let value = cookie.slice(0, cookie.lastIndexOf(".")), hash = cookie.slice(cookie.lastIndexOf(".") + 1), data = encoder.encode(value), key = await createKey2(secret, ["verify"]), signature = byteStringToUint8Array(atob(hash));
  return await crypto.subtle.verify("HMAC", key, signature, data) ? value : !1;
};
async function createKey2(secret, usages) {
  return await crypto.subtle.importKey(
    "raw",
    encoder.encode(secret),
    { name: "HMAC", hash: "SHA-256" },
    !1,
    usages
  );
}
function byteStringToUint8Array(byteString) {
  let array2 = new Uint8Array(byteString.length);
  for (let i9 = 0; i9 < byteString.length; i9++)
    array2[i9] = byteString.charCodeAt(i9);
  return array2;
}
var createCookie = createCookieFactory({ sign, unsign }), createCookieSessionStorage = createCookieSessionStorageFactory(createCookie), { getSession, commitSession, destroySession } = createCookieSessionStorage({
  cookie: {
    name: "__session",
    sameSite: "lax",
    secrets: []
  }
});

// app/routes/resource/preview.jsx
var action2 = async ({ request }) => {
  if (request.method !== "POST")
    return json3({ message: "Method not allowed" }, 405);
  let session = await getSession(request.headers.get("Cookie"));
  return redirect3("/", {
    headers: {
      "Set-Cookie": await destroySession(session)
    }
  });
}, loader2 = async ({ request }) => {
  let session = await getSession(request.headers.get("Cookie"));
  return session.set("preview", "a-random-string"), redirect3("/", {
    headers: {
      "Set-Cookie": await commitSession(session)
    }
  });
};

// app/routes/articles/$slug.jsx
var slug_exports = {};
__export(slug_exports, {
  default: () => ArticleRoute,
  handle: () => handle2,
  links: () => links2,
  loader: () => loader3
});
var import_react107 = __toESM(require_react());

// node_modules/swiper/swiper.min.css
var swiper_min_default = "/build/_assets/swiper.min-L7NXCLXG.css";

// app/components/article/Article.jsx
var import_react102 = __toESM(require_react());

// app/components/parts/Banner.jsx
var import_react89 = __toESM(require_react()), import_jsx_dev_runtime50 = __toESM(require_jsx_dev_runtime()), Banner = ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime50.jsxDEV)("div", { className: "w-full p-3 bg-white", children }, void 0, !1, {
  fileName: "app/components/parts/Banner.jsx",
  lineNumber: 4,
  columnNumber: 10
}, this);

// app/components/article/ArticleBlockBanner.jsx
var import_react91 = __toESM(require_react());

// app/components/parts/Topic.jsx
var import_react90 = __toESM(require_react());
var import_jsx_dev_runtime51 = __toESM(require_jsx_dev_runtime()), Topic = ({ topic }) => /* @__PURE__ */ (0, import_jsx_dev_runtime51.jsxDEV)("span", { className: "float inline-block h-[1em] mr-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime51.jsxDEV)(
  SanityImage,
  {
    value: topic.image,
    alt: `Topic: ${topic.topic}`,
    className: "h-full"
  },
  void 0,
  !1,
  {
    fileName: "app/components/parts/Topic.jsx",
    lineNumber: 7,
    columnNumber: 7
  },
  this
) }, void 0, !1, {
  fileName: "app/components/parts/Topic.jsx",
  lineNumber: 6,
  columnNumber: 5
}, this);

// app/components/article/ArticleBlockBanner.jsx
var import_jsx_dev_runtime52 = __toESM(require_jsx_dev_runtime()), ArticleBlockBanner = ({ article, link: link3 }) => {
  let { headline, intro, colour, author, category, topic } = article;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(Layout2, { tag: "article", intent: "banner", colour: colour || "#e3e8ef", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(
      Layout2,
      {
        intent: "grid",
        tag: "div",
        className: cx("gap-4 flex-1", "md:gap-8"),
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(Text2, { tag: "h2", intent: "bl-heading-3xl", children: [
            topic && /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(Topic, { topic }, void 0, !1, {
              fileName: "app/components/article/ArticleBlockBanner.jsx",
              lineNumber: 20,
              columnNumber: 23
            }, this),
            headline || "Untitled article"
          ] }, void 0, !0, {
            fileName: "app/components/article/ArticleBlockBanner.jsx",
            lineNumber: 19,
            columnNumber: 11
          }, this) }, void 0, !1, {
            fileName: "app/components/article/ArticleBlockBanner.jsx",
            lineNumber: 18,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(
            "div",
            {
              className: cx(
                "col-span-1 columns-1 gap-8 col-fill-auto",
                "lg:col-span-2 lg:columns-2 "
              ),
              children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(Text2, { tag: "h3", intent: "bl-heading-xl", children: intro ? /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(PortableTextPlain, { text: intro }, void 0, !1, {
                  fileName: "app/components/article/ArticleBlockBanner.jsx",
                  lineNumber: 31,
                  columnNumber: 22
                }, this) : "Intro text" }, void 0, !1, {
                  fileName: "app/components/article/ArticleBlockBanner.jsx",
                  lineNumber: 30,
                  columnNumber: 11
                }, this),
                link3 && /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(
                  Link4,
                  {
                    className: "mt-[1em]",
                    intent: "button-xl",
                    colour: "mono",
                    to: link3,
                    children: /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(Text2, { tag: "p", intent: "ui-3xl", children: "Read on" }, void 0, !1, {
                      fileName: "app/components/article/ArticleBlockBanner.jsx",
                      lineNumber: 40,
                      columnNumber: 15
                    }, this)
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/components/article/ArticleBlockBanner.jsx",
                    lineNumber: 34,
                    columnNumber: 13
                  },
                  this
                )
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/components/article/ArticleBlockBanner.jsx",
              lineNumber: 24,
              columnNumber: 9
            },
            this
          )
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/components/article/ArticleBlockBanner.jsx",
        lineNumber: 13,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)("div", { className: "flex justify-between", children: [
      author.name && /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(
        Text2,
        {
          tag: "address",
          intent: "bl-heading-base",
          className: "not-italic",
          children: [
            "By ",
            author.name
          ]
        },
        void 0,
        !0,
        {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 49,
          columnNumber: 11
        },
        this
      ),
      category && category.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)("div", { className: "flex", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)("span", { children: "(" }, void 0, !1, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 59,
          columnNumber: 13
        }, this),
        category.map((cat, index) => /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)(Text2, { tag: "p", intent: "bl-heading-base", children: [
          cat.category,
          category.length > 0 && index + 1 !== category.length && /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)("span", { children: ",\xA0" }, void 0, !1, {
            fileName: "app/components/article/ArticleBlockBanner.jsx",
            lineNumber: 66,
            columnNumber: 23
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 63,
          columnNumber: 19
        }, this) }, cat._id, !1, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 62,
          columnNumber: 17
        }, this)),
        /* @__PURE__ */ (0, import_jsx_dev_runtime52.jsxDEV)("span", { children: ")" }, void 0, !1, {
          fileName: "app/components/article/ArticleBlockBanner.jsx",
          lineNumber: 72,
          columnNumber: 13
        }, this)
      ] }, void 0, !0, {
        fileName: "app/components/article/ArticleBlockBanner.jsx",
        lineNumber: 58,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/article/ArticleBlockBanner.jsx",
      lineNumber: 47,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/article/ArticleBlockBanner.jsx",
    lineNumber: 12,
    columnNumber: 5
  }, this);
};

// app/components/modules/ArticlesModule.jsx
var import_react94 = __toESM(require_react());

// app/components/article/ArticleBlock.jsx
var import_react92 = __toESM(require_react());
var import_jsx_dev_runtime53 = __toESM(require_jsx_dev_runtime()), ArticleBlock = ({ article }) => {
  let { headline, colour, author, category, image, topic } = article;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)(
    "article",
    {
      className: "group relative w-full h-full aspect-square p-6 flex flex-col justify-between gap-6 ",
      style: { background: colour || "var(--accent-colour)" },
      children: [
        (image == null ? void 0 : image.asset) && /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)(
          "div",
          {
            className: "absolute w-full h-full inset-0 overflow-hidden hidden group-hover:block group-focus:hidden",
            style: { background: colour || "#dfdfdf" },
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)(
              SanityImage,
              {
                value: image.asset,
                className: "h-full mix-blend-overlay rendering-pixelated object-cover"
              },
              void 0,
              !1,
              {
                fileName: "app/components/article/ArticleBlock.jsx",
                lineNumber: 22,
                columnNumber: 11
              },
              this
            )
          },
          void 0,
          !1,
          {
            fileName: "app/components/article/ArticleBlock.jsx",
            lineNumber: 16,
            columnNumber: 9
          },
          this
        ),
        /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)("div", { className: "filter group-focus-visible:invert", children: /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)(Text2, { tag: "h2", intent: "bl-heading-2xl", children: [
          topic && /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)(Topic, { topic }, void 0, !1, {
            fileName: "app/components/article/ArticleBlock.jsx",
            lineNumber: 32,
            columnNumber: 21
          }, this),
          headline || "Untitled article"
        ] }, void 0, !0, {
          fileName: "app/components/article/ArticleBlock.jsx",
          lineNumber: 31,
          columnNumber: 9
        }, this) }, void 0, !1, {
          fileName: "app/components/article/ArticleBlock.jsx",
          lineNumber: 30,
          columnNumber: 7
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)("div", { className: "flex justify-between filter group-focus-visible:invert", children: [
          author.name && /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)(
            Text2,
            {
              tag: "address",
              intent: "bl-heading-base",
              className: "not-italic",
              children: [
                "By ",
                author.name
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 38,
              columnNumber: 11
            },
            this
          ),
          category && category.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)("div", { className: "flex", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)("span", { children: "(" }, void 0, !1, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 48,
              columnNumber: 13
            }, this),
            category.map((cat, index) => /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)(Text2, { tag: "p", intent: "bl-heading-base", children: [
              cat.category,
              category.length > 0 && index + 1 !== category.length && /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)("span", { children: ",\xA0" }, void 0, !1, {
                fileName: "app/components/article/ArticleBlock.jsx",
                lineNumber: 55,
                columnNumber: 23
              }, this)
            ] }, void 0, !0, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 52,
              columnNumber: 19
            }, this) }, cat._id, !1, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 51,
              columnNumber: 17
            }, this)),
            /* @__PURE__ */ (0, import_jsx_dev_runtime53.jsxDEV)("span", { children: ")" }, void 0, !1, {
              fileName: "app/components/article/ArticleBlock.jsx",
              lineNumber: 61,
              columnNumber: 13
            }, this)
          ] }, void 0, !0, {
            fileName: "app/components/article/ArticleBlock.jsx",
            lineNumber: 47,
            columnNumber: 11
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/article/ArticleBlock.jsx",
          lineNumber: 36,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/article/ArticleBlock.jsx",
      lineNumber: 9,
      columnNumber: 5
    },
    this
  );
};

// app/components/modules/ArticlesModule.jsx
var import_jsx_dev_runtime54 = __toESM(require_jsx_dev_runtime()), ArticlesModule = ({ content }) => /* @__PURE__ */ (0, import_jsx_dev_runtime54.jsxDEV)(Layout2, { tag: "ul", intent: "grid", className: "grid-layout", children: content.articles.map((article) => /* @__PURE__ */ (0, import_jsx_dev_runtime54.jsxDEV)("li", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime54.jsxDEV)(Link2, { to: article.slug, children: /* @__PURE__ */ (0, import_jsx_dev_runtime54.jsxDEV)(ArticleBlock, { article }, void 0, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 13,
  columnNumber: 15
}, this) }, void 0, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 12,
  columnNumber: 13
}, this) }, article._id, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 11,
  columnNumber: 11
}, this)) }, void 0, !1, {
  fileName: "app/components/modules/ArticlesModule.jsx",
  lineNumber: 8,
  columnNumber: 5
}, this);

// app/components/modules/HeadingModule.jsx
var import_react95 = __toESM(require_react());
var import_jsx_dev_runtime55 = __toESM(require_jsx_dev_runtime()), HeadingModule = ({ content }) => /* @__PURE__ */ (0, import_jsx_dev_runtime55.jsxDEV)(Layout2, { intent: "module", children: /* @__PURE__ */ (0, import_jsx_dev_runtime55.jsxDEV)(Text2, { tag: "h3", intent: "bl-heading-2xl", children: content.heading }, void 0, !1, {
  fileName: "app/components/modules/HeadingModule.jsx",
  lineNumber: 8,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/modules/HeadingModule.jsx",
  lineNumber: 7,
  columnNumber: 5
}, this);

// app/components/modules/TextBlockModule.jsx
var import_react96 = __toESM(require_react());
var import_jsx_dev_runtime56 = __toESM(require_jsx_dev_runtime()), TextBlockModule = ({ content }) => {
  let { text: text2 } = content;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime56.jsxDEV)(Layout2, { intent: "text", children: /* @__PURE__ */ (0, import_jsx_dev_runtime56.jsxDEV)(PortableText2, { text: text2 }, void 0, !1, {
    fileName: "app/components/modules/TextBlockModule.jsx",
    lineNumber: 9,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/modules/TextBlockModule.jsx",
    lineNumber: 8,
    columnNumber: 5
  }, this);
};

// app/components/modules/ShopModule.jsx
var import_react101 = __toESM(require_react());

// app/components/parts/AddToCart.jsx
var import_react98 = __toESM(require_react());
var import_jsx_dev_runtime57 = __toESM(require_jsx_dev_runtime()), AddToCart = ({ lines, analytics }) => {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime57.jsxDEV)(fetcher.Form, { method: "post", action: "/cart", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime57.jsxDEV)("input", { type: "hidden", name: "cartAction", value: "ADD_TO_CART" }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 10,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime57.jsxDEV)("input", { type: "hidden", name: "lines", value: JSON.stringify(lines) }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 12,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime57.jsxDEV)("input", { type: "hidden", name: "analytics", value: JSON.stringify(analytics) }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 13,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime57.jsxDEV)(Button2, { type: "submit", colour: "mid", intent: "base", children: /* @__PURE__ */ (0, import_jsx_dev_runtime57.jsxDEV)(Text2, { intent: "button-base", children: "Add to Cart" }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 15,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/components/parts/AddToCart.jsx",
      lineNumber: 14,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/parts/AddToCart.jsx",
    lineNumber: 9,
    columnNumber: 5
  }, this);
};

// app/components/parts/CartPreview.jsx
var import_react100 = __toESM(require_react());
var import_jsx_dev_runtime58 = __toESM(require_jsx_dev_runtime()), CartPreview = ({ text: text2, link: link3 }) => {
  let { cart } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)("div", { className: "w-full h-max max-w-sm mx-auto", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)("div", { className: "w-full relative", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(
        import_react100.Suspense,
        {
          fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(Badge2, { intent: "big", location: "top", children: "0" }, void 0, !1, {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 16,
            columnNumber: 13
          }, this),
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(Await2, { resolve: cart, children: (cart2) => /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(Badge2, { intent: "big", location: "top", children: (cart2 == null ? void 0 : cart2.totalQuantity) || 0 }, void 0, !1, {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 23,
            columnNumber: 15
          }, this) }, void 0, !1, {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 21,
            columnNumber: 11
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/parts/CartPreview.jsx",
          lineNumber: 14,
          columnNumber: 9
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(BasketIconThin, {}, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 29,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)("div", { className: "absolute w-full h-full inset-0 -z-10 flex items-end", children: /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)("div", { className: "relative w-full  h-[79%]", children: /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(import_react100.Suspense, { fallback: null, children: /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(Await2, { resolve: cart, children: (cart2) => cart2.lines.edges.map(({ node }) => {
        let rotation = Math.floor(Math.random() * 50) - 25, x5 = Math.floor(Math.random() * 75) + 1, y4 = Math.floor(Math.random() * 50) + 1;
        return /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(
          "img",
          {
            role: "presentation",
            src: node.merchandise.image.url,
            className: "absolute h-1/2",
            style: {
              transform: `rotate(${rotation}deg)`,
              left: `${x5}%`,
              top: `${y4}%`
            }
          },
          node.id,
          !1,
          {
            fileName: "app/components/parts/CartPreview.jsx",
            lineNumber: 40,
            columnNumber: 23
          },
          this
        );
      }) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 33,
        columnNumber: 15
      }, this) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 32,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 31,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/components/parts/CartPreview.jsx",
        lineNumber: 30,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 13,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)("div", { className: "flex justify-center mt-8", children: /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(Link4, { to: link3 || "/cart", intent: "button-2xl", colour: "dark", children: /* @__PURE__ */ (0, import_jsx_dev_runtime58.jsxDEV)(Text2, { intent: "button-2xl", children: text2 || "View Basket" }, void 0, !1, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 61,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 60,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/components/parts/CartPreview.jsx",
      lineNumber: 59,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/components/parts/CartPreview.jsx",
    lineNumber: 12,
    columnNumber: 5
  }, this);
};

// app/components/modules/ShopModule.jsx
var import_jsx_dev_runtime59 = __toESM(require_jsx_dev_runtime()), ShopModule = () => {
  let { allProducts } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(Layout2, { intent: "space", children: /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(
    "div",
    {
      className: cx("grid grid-cols-1 gap-8", "sm:grid-cols-3", "md:gap-16"),
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)("div", { className: cx("col-span-1", "sm:col-span-2"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(
          "div",
          {
            className: cx(
              "grid grid-cols-1 gap-16 px-0",
              "sm:grid-cols-2 sm:gap-8 sm:px-0",
              "md:grid-cols-2",
              "lg:grid-cols-3 lg:gap-16"
            ),
            children: allProducts.nodes.map((product) => /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(Product, { product }, product.id, !1, {
              fileName: "app/components/modules/ShopModule.jsx",
              lineNumber: 27,
              columnNumber: 15
            }, this))
          },
          void 0,
          !1,
          {
            fileName: "app/components/modules/ShopModule.jsx",
            lineNumber: 18,
            columnNumber: 11
          },
          this
        ) }, void 0, !1, {
          fileName: "app/components/modules/ShopModule.jsx",
          lineNumber: 17,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)("div", { className: "sticky top-24 h-max hidden sm:block", children: /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(CartPreview, {}, void 0, !1, {
          fileName: "app/components/modules/ShopModule.jsx",
          lineNumber: 32,
          columnNumber: 11
        }, this) }, void 0, !1, {
          fileName: "app/components/modules/ShopModule.jsx",
          lineNumber: 31,
          columnNumber: 9
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 14,
      columnNumber: 7
    },
    this
  ) }, void 0, !1, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 13,
    columnNumber: 5
  }, this);
}, Product = ({ product }) => /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)("div", { className: "h-max max-w-xs mx-auto", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(
    "img",
    {
      src: product.featuredImage.url,
      alt: product.featuredImage.altText,
      className: "w-full h-full object-cover"
    },
    void 0,
    !1,
    {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 42,
      columnNumber: 7
    },
    this
  ),
  /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(Text2, { tag: "h4", intent: "ui-base", className: cx("my-4", "sm:my-8"), children: product.title }, void 0, !1, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 47,
    columnNumber: 7
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)("div", { className: "flex flex-col gap-4", children: product.variants.nodes.map((variant) => /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(
    ProductVariant,
    {
      variant,
      product
    },
    variant.id,
    !1,
    {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 52,
      columnNumber: 11
    },
    this
  )) }, void 0, !1, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 50,
    columnNumber: 7
  }, this)
] }, void 0, !0, {
  fileName: "app/components/modules/ShopModule.jsx",
  lineNumber: 41,
  columnNumber: 5
}, this), ProductVariant = ({ variant, product }) => {
  let { id, selectedOptions, title, price } = variant, productAnalytics = {
    productGid: product.id,
    variantGid: id,
    name: product.title,
    variantName: title,
    brand: product.vendor,
    price: price.amount,
    quantity: 1
  };
  return /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)("div", { className: cx("flex justify-between gap-2 flex-col", "sm:flex-row"), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(Text2, { tag: "p", intent: "ui-base", children: selectedOptions[0].value }, void 0, !1, {
        fileName: "app/components/modules/ShopModule.jsx",
        lineNumber: 79,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(Money, { withoutTrailingZeros: !0, data: price, className: "ui-base" }, void 0, !1, {
        fileName: "app/components/modules/ShopModule.jsx",
        lineNumber: 82,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/components/modules/ShopModule.jsx",
      lineNumber: 78,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime59.jsxDEV)(
      AddToCart,
      {
        lines: [
          {
            quantity: 1,
            merchandiseId: id
          }
        ],
        analytics: {
          products: [productAnalytics],
          totalValue: parseFloat(productAnalytics.price)
        }
      },
      void 0,
      !1,
      {
        fileName: "app/components/modules/ShopModule.jsx",
        lineNumber: 84,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/modules/ShopModule.jsx",
    lineNumber: 77,
    columnNumber: 5
  }, this);
};

// app/components/content/Content.jsx
var import_jsx_dev_runtime60 = __toESM(require_jsx_dev_runtime()), Content = ({ content }) => {
  switch (content._type) {
    case "textBlockModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(TextBlockModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 13,
        columnNumber: 14
      }, this);
    case "headingModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(HeadingModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 15,
        columnNumber: 14
      }, this);
    case "collapsibleModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(CollapsibleModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 17,
        columnNumber: 14
      }, this);
    case "imageModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(ImageModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 19,
        columnNumber: 14
      }, this);
    case "imageGridModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(ImageGridModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 21,
        columnNumber: 14
      }, this);
    case "textColumnsModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(TextColumnsModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 23,
        columnNumber: 14
      }, this);
    case "articlesModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(ArticlesModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 25,
        columnNumber: 14
      }, this);
    case "carouselModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(CarouselModule, { content }, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 27,
        columnNumber: 14
      }, this);
    case "shopModule":
      return /* @__PURE__ */ (0, import_jsx_dev_runtime60.jsxDEV)(ShopModule, {}, void 0, !1, {
        fileName: "app/components/content/Content.jsx",
        lineNumber: 29,
        columnNumber: 14
      }, this);
    default:
      return null;
  }
};

// app/components/article/Article.jsx
var import_jsx_dev_runtime61 = __toESM(require_jsx_dev_runtime()), Article = ({ article }) => /* @__PURE__ */ (0, import_jsx_dev_runtime61.jsxDEV)(Layout2, { intent: "article", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime61.jsxDEV)(ArticleBlockBanner, { article }, void 0, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 12,
    columnNumber: 7
  }, this),
  article.date && /* @__PURE__ */ (0, import_jsx_dev_runtime61.jsxDEV)(Banner, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime61.jsxDEV)("time", { children: new Date(article.date).toLocaleDateString("en-UK", {
    year: "numeric",
    month: "long",
    day: "2-digit"
  }) }, void 0, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 15,
    columnNumber: 11
  }, this) }, void 0, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 14,
    columnNumber: 9
  }, this),
  article.content.map((content) => /* @__PURE__ */ (0, import_jsx_dev_runtime61.jsxDEV)(Content, { content }, content._id || content._key, !1, {
    fileName: "app/components/article/Article.jsx",
    lineNumber: 25,
    columnNumber: 16
  }, this))
] }, void 0, !0, {
  fileName: "app/components/article/Article.jsx",
  lineNumber: 11,
  columnNumber: 5
}, this);

// node_modules/@sanity/preview-kit/dist/index.js
var import_react103 = __toESM(require_react(), 1);

// node_modules/suspend-react/dist/index.js
var globalCache = [];
function shallowEqualArrays(arrA, arrB, equal = (a9, b5) => a9 === b5) {
  if (arrA === arrB)
    return !0;
  if (!arrA || !arrB)
    return !1;
  let len = arrA.length;
  if (arrB.length !== len)
    return !1;
  for (let i9 = 0; i9 < len; i9++)
    if (!equal(arrA[i9], arrB[i9]))
      return !1;
  return !0;
}
function query(fn, keys, preload = !1, config2 = {}) {
  for (let entry3 of globalCache)
    if (shallowEqualArrays(keys, entry3.keys, entry3.equal)) {
      if (preload)
        return;
      if (Object.prototype.hasOwnProperty.call(entry3, "error"))
        throw entry3.error;
      if (Object.prototype.hasOwnProperty.call(entry3, "response"))
        return entry3.response;
      if (!preload)
        throw entry3.promise;
    }
  let entry2 = {
    keys,
    equal: config2.equal,
    promise: fn(...keys).then((response) => entry2.response = response).then(() => {
      config2.lifespan && config2.lifespan > 0 && setTimeout(() => {
        let index = globalCache.indexOf(entry2);
        index !== -1 && globalCache.splice(index, 1);
      }, config2.lifespan);
    }).catch((error) => entry2.error = error)
  };
  if (globalCache.push(entry2), !preload)
    throw entry2.promise;
}
var suspend = (fn, keys, config2) => query(fn, keys, !1, config2);

// node_modules/@sanity/preview-kit/dist/index.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1), _checkAuth = async (projectId2, token) => {
  let headers = token ? {
    Authorization: "Bearer ".concat(token)
  } : void 0, json4 = await (await fetch("https://".concat(projectId2, ".api.sanity.io/v1/users/me"), {
    credentials: "include",
    headers
  })).json();
  return Boolean(json4 == null ? void 0 : json4.id);
}, _lazyGroqStore = async () => {
  let pkg = await Promise.resolve().then(() => (init_index_browser(), index_browser_exports)), {
    groqStore: groqStore2
  } = "default" in pkg ? pkg.default : pkg;
  return groqStore2;
}, _lazyEventSourcePolyfill = async () => {
  let pkg = await Promise.resolve().then(() => __toESM(require_eventsource(), 1)), {
    EventSourcePolyfill
  } = "default" in pkg ? pkg.default : pkg;
  return EventSourcePolyfill;
};
function useParams2(params) {
  let stringifiedParams = (0, import_react103.useMemo)(() => JSON.stringify(params || {}), [params]);
  return (0, import_react103.useMemo)(() => JSON.parse(stringifiedParams), [stringifiedParams]);
}
var _definePreview = (_ref) => {
  let {
    projectId: projectId2,
    dataset: dataset2,
    documentLimit = 3e3,
    subscriptionThrottleMs = 10,
    overlayDrafts = !0,
    importEventSourcePolyfill,
    importGroqStore,
    preload,
    onPublicAccessOnly,
    checkAuth,
    includeTypes
  } = _ref;
  if (!projectId2)
    return console.warn("No projectId set for createPreviewHook, returning dummy hook"), function() {
      return console.warn("The hook returned by createPreviewHook is a dummy as there is no projectId set, returning null"), null;
    };
  let store;
  return function(token, query2, _params, _serverSnapshot) {
    if (typeof document > "u")
      throw new Error("Calling usePreview outside a browser environment isn't supported. Ensure the component using the hook is only rendering on the client. For example by wrapping it in PreviewSuspense.");
    if (!token && token !== null)
      throw new Error("No `token` given to usePreview hook, if this is intentional then set it to `null`");
    let [serverSnapshot] = (0, import_react103.useState)(() => _serverSnapshot), params = useParams2(_params);
    store || (onPublicAccessOnly && (checkAuth(projectId2, token) || onPublicAccessOnly()), store = importGroqStore()({
      projectId: projectId2,
      dataset: dataset2,
      documentLimit,
      subscriptionThrottleMs,
      includeTypes,
      token: token === null ? void 0 : token,
      EventSource: token === null ? void 0 : importEventSourcePolyfill(),
      listen: !0,
      overlayDrafts
    }));
    let initial = serverSnapshot ?? preload(store, query2, params), syncStore = (0, import_react103.useMemo)(() => {
      let snapshot = initial;
      return {
        getServerSnapshot: serverSnapshot === void 0 ? void 0 : () => serverSnapshot,
        getSnapshot: () => snapshot,
        subscribe: (onStoreChange) => {
          let subscription = store.subscribe(query2, typeof params > "u" ? {} : params, (err, result) => {
            if (err)
              throw console.error("Error thrown in the usePreviewHook subscription", err), err;
            snapshot = result, onStoreChange();
          });
          return () => subscription.unsubscribe();
        }
      };
    }, [initial, params, query2, serverSnapshot]);
    return (0, import_react103.useEffect)(() => {
      let callback = () => {
        store.close();
      };
      return window.addEventListener("beforeunload", callback), () => window.removeEventListener("beforeunload", callback);
    }, []), (0, import_react103.useSyncExternalStore)(syncStore.subscribe, syncStore.getSnapshot, syncStore.getServerSnapshot);
  };
}, _preloadQuery = (store, query2, params) => store.query(query2, params), definePreview = (config2) => _definePreview({
  ...config2,
  importEventSourcePolyfill: () => suspend(() => _lazyEventSourcePolyfill(), ["@sanity/preview-kit", "event-source-polyfill"]),
  importGroqStore: () => suspend(() => _lazyGroqStore(), ["@sanity/preview-kit", "@sanity/groq-store"]),
  preload: (store, query2, params) => suspend(() => _preloadQuery(store, query2, params), ["@sanity/preview-kit", "preload", query2, JSON.stringify(params ?? {})]),
  checkAuth: (projectId2, token) => suspend(() => _checkAuth(projectId2, token), ["@sanity/preview-kit", "checkAuth", projectId2, token])
});
function PreviewSuspense(_ref2) {
  let {
    children,
    fallback
  } = _ref2, [mounted, mount] = (0, import_react103.useReducer)(() => !0, !1);
  return (0, import_react103.useEffect)(mount, [mount]), /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react103.Suspense, {
    fallback,
    children: mounted ? children : fallback
  });
}

// app/components/preview/ArticlePreview.jsx
var import_react105 = __toESM(require_react());

// app/components/preview/ExitPreview.jsx
var import_react104 = __toESM(require_react()), import_jsx_dev_runtime62 = __toESM(require_jsx_dev_runtime());

// app/components/preview/ArticlePreview.jsx
var import_jsx_dev_runtime63 = __toESM(require_jsx_dev_runtime()), ArticlePreview = ({ query: query2, params }) => {
  let article = definePreview({
    projectId: "yt08sdph",
    dataset: "production"
  })(
    null,
    query2,
    params
  );
  return /* @__PURE__ */ (0, import_jsx_dev_runtime63.jsxDEV)(import_jsx_dev_runtime63.Fragment, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime63.jsxDEV)(Article, { article }, void 0, !1, {
    fileName: "app/components/preview/ArticlePreview.jsx",
    lineNumber: 18,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/preview/ArticlePreview.jsx",
    lineNumber: 17,
    columnNumber: 5
  }, this);
};

// app/routes/articles/$slug.jsx
var import_jsx_dev_runtime64 = __toESM(require_jsx_dev_runtime()), seo2 = ({ data }) => ({
  title: data.article.seoTitle,
  description: data.article.seoDescription.length > 155 ? data.article.seoDescription.substring(0, 154) + "\u2026" : data.article.seoDescription
}), handle2 = {
  seo: seo2
}, links2 = () => [{ rel: "stylesheet", href: swiper_min_default }];
async function loader3({ context: context2, params, request }) {
  let { sanityClient, usePreview } = context2;
  if ((await getSession(request.headers.get("Cookie"))).get("preview"))
    return { preview: !0, query: articleDataQuery, params };
  let article = await sanityClient.fetch(articleDataQuery, params);
  return json3({
    article,
    usePreview
  });
}
function ArticleRoute() {
  let { preview, article, query: query2, params, usePreview } = useLoaderData2();
  return preview ? /* @__PURE__ */ (0, import_jsx_dev_runtime64.jsxDEV)(PreviewSuspense, { fallback: "Loading...", children: /* @__PURE__ */ (0, import_jsx_dev_runtime64.jsxDEV)(ArticlePreview, { query: query2, params, usePreview }, void 0, !1, {
    fileName: "app/routes/articles/$slug.jsx",
    lineNumber: 47,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/routes/articles/$slug.jsx",
    lineNumber: 46,
    columnNumber: 5
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime64.jsxDEV)(Article, { article }, void 0, !1, {
    fileName: "app/routes/articles/$slug.jsx",
    lineNumber: 50,
    columnNumber: 5
  }, this);
}

// app/routes/[sitemap.xml].tsx
var sitemap_xml_exports = {};
__export(sitemap_xml_exports, {
  loader: () => loader4
});
var MAX_URLS = 250;
async function loader4({ request, context: { storefront } }) {
  let data = await storefront.query(SITEMAP_QUERY, {
    variables: {
      urlLimits: MAX_URLS,
      language: storefront.i18n.language
    }
  });
  return invariant4(data, "Sitemap data is missing"), new Response(
    shopSitemap({ data, baseUrl: new URL(request.url).origin }),
    {
      headers: {
        "content-type": "application/xml",
        "cache-control": `max-age=${60 * 60 * 24}`
      }
    }
  );
}
function shopSitemap({
  data,
  baseUrl
}) {
  let productsData = flattenConnection(data.products).filter((product) => product.onlineStoreUrl).map((product) => {
    var _a2;
    let finalObject = {
      url: `${baseUrl}/products/${product.handle}`,
      lastMod: product.updatedAt,
      changeFreq: "daily"
    };
    return (_a2 = product.featuredImage) != null && _a2.url && (finalObject.image = {
      url: product.featuredImage.url
    }, product.title && (finalObject.image.title = product.title), product.featuredImage.altText && (finalObject.image.caption = product.featuredImage.altText)), finalObject;
  }), collectionsData = flattenConnection(data.collections).filter((collection) => collection.onlineStoreUrl).map((collection) => ({
    url: `${baseUrl}/collections/${collection.handle}`,
    lastMod: collection.updatedAt,
    changeFreq: "daily"
  })), pagesData = flattenConnection(data.pages).filter((page) => page.onlineStoreUrl).map((page) => ({
    url: `${baseUrl}/pages/${page.handle}`,
    lastMod: page.updatedAt,
    changeFreq: "weekly"
  }));
  return `
    <urlset
      xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
      xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"
    >
      ${[...productsData, ...collectionsData, ...pagesData].map((url) => renderUrlTag(url)).join("")}
    </urlset>`;
}
function renderUrlTag({
  url,
  lastMod,
  changeFreq,
  image
}) {
  return `
    <url>
      <loc>${url}</loc>
      <lastmod>${lastMod}</lastmod>
      <changefreq>${changeFreq}</changefreq>
      ${image ? `
        <image:image>
          <image:loc>${image.url}</image:loc>
          <image:title>${image.title ?? ""}</image:title>
          <image:caption>${image.caption ?? ""}</image:caption>
        </image:image>` : ""}

    </url>
  `;
}
var SITEMAP_QUERY = `#graphql
  query sitemaps($urlLimits: Int, $language: LanguageCode)
  @inContext(language: $language) {
    products(
      first: $urlLimits
      query: "published_status:'online_store:visible'"
    ) {
      nodes {
        updatedAt
        handle
        onlineStoreUrl
        title
        featuredImage {
          url
          altText
        }
      }
    }
    collections(
      first: $urlLimits
      query: "published_status:'online_store:visible'"
    ) {
      nodes {
        updatedAt
        handle
        onlineStoreUrl
      }
    }
    pages(first: $urlLimits, query: "published_status:'published'") {
      nodes {
        updatedAt
        handle
        onlineStoreUrl
      }
    }
  }
`;

// app/routes/api/countries.tsx
var countries_exports = {};
__export(countries_exports, {
  default: () => CountriesApiRoute,
  loader: () => loader5
});
async function loader5({ context: { storefront } }) {
  return json3(
    {
      ...countries
    },
    {
      headers: {
        "cache-control": storefront.generateCacheControlHeader(
          storefront.CacheLong()
        )
      }
    }
  );
}
function CountriesApiRoute() {
  return null;
}

// app/routes/[robots.txt].tsx
var robots_txt_exports = {};
__export(robots_txt_exports, {
  loader: () => loader6
});
var loader6 = ({ request }) => {
  let url = new URL(request.url);
  return new Response(robotsTxtData({ url: url.origin }), {
    status: 200,
    headers: {
      "content-type": "text/plain",
      "cache-control": `max-age=${60 * 60 * 24}`
    }
  });
};
function robotsTxtData({ url }) {
  let sitemapUrl = url ? `${url}/sitemap.xml` : void 0;
  return `
User-agent: *
Disallow: /admin
Disallow: /cart
Disallow: /orders
Disallow: /checkouts/
Disallow: /checkout
Disallow: /carts
Disallow: /account
${sitemapUrl ? `Sitemap: ${sitemapUrl}` : ""}

# Google adsbot ignores robots.txt unless specifically named!
User-agent: adsbot-google
Disallow: /checkouts/
Disallow: /checkout
Disallow: /carts
Disallow: /orders

User-agent: Pinterest
Crawl-delay: 1
`.trim();
}

// app/routes/api/products.tsx
var products_exports = {};
__export(products_exports, {
  default: () => ProductsApiRoute,
  loader: () => loader7
});

// app/data/fragments.ts
var PRODUCT_CARD_FRAGMENT = `#graphql
  fragment ProductCard on Product {
    id
    title
    publishedAt
    handle 
    variants(first: 1) {
      nodes {
        id
        image {
          url
          altText
          width
          height
        }
        price {
          amount
          currencyCode
        }
        compareAtPrice {
          amount
          currencyCode
        }
        selectedOptions {
          name
          value
        }
        product {
          handle
          title
        }
      }
    }
  }
`;

// app/routes/api/products.tsx
async function loader7({ request, context: { storefront } }) {
  let url = new URL(request.url), searchParams = new URLSearchParams(url.search), sortKey = searchParams.get("sortKey") ?? "BEST_SELLING", query2 = searchParams.get("query") ?? "", reverse = !1;
  try {
    searchParams.get("reverse") === "true" && (reverse = !0);
  } catch {
  }
  let count2 = 4;
  try {
    let _count = searchParams.get("count");
    typeof _count == "string" && (count2 = parseInt(_count));
  } catch {
  }
  let { products } = await storefront.query(PRODUCTS_QUERY, {
    variables: {
      count: count2,
      query: query2,
      reverse,
      sortKey,
      country: storefront.i18n.country,
      language: storefront.i18n.language
    },
    cache: storefront.CacheLong()
  });
  return invariant4(products, "No data returned from top products query"), json3({
    products: flattenConnection(products)
  });
}
var PRODUCTS_QUERY = `#graphql
  ${PRODUCT_CARD_FRAGMENT}
  query (
    $query: String
    $count: Int
    $reverse: Boolean
    $country: CountryCode
    $language: LanguageCode
    $sortKey: ProductSortKeys
  ) @inContext(country: $country, language: $language) {
    products(first: $count, sortKey: $sortKey, reverse: $reverse, query: $query) {
      nodes {
        ...ProductCard
      }
    }
  }
`;
function ProductsApiRoute() {
  return null;
}

// app/routes/$slug.jsx
var slug_exports2 = {};
__export(slug_exports2, {
  default: () => PageRoute,
  handle: () => handle3,
  links: () => links3,
  loader: () => loader8
});
var import_react110 = __toESM(require_react());

// app/components/page/Page.jsx
var import_react108 = __toESM(require_react());
var import_jsx_dev_runtime65 = __toESM(require_jsx_dev_runtime()), Page = ({ page }) => /* @__PURE__ */ (0, import_jsx_dev_runtime65.jsxDEV)(Layout2, { intent: "page", children: page.content.map((content) => /* @__PURE__ */ (0, import_jsx_dev_runtime65.jsxDEV)(Content, { content }, content._id || content._key, !1, {
  fileName: "app/components/page/Page.jsx",
  lineNumber: 9,
  columnNumber: 16
}, this)) }, void 0, !1, {
  fileName: "app/components/page/Page.jsx",
  lineNumber: 7,
  columnNumber: 5
}, this);

// app/routes/$slug.jsx
var import_jsx_dev_runtime66 = __toESM(require_jsx_dev_runtime()), seo3 = ({ data }) => {
  var _a2;
  return {
    title: data.page.seoTitle,
    description: (_a2 = data.page) != null && _a2.seoDescription ? data.page.seoDescription.length > 155 ? data.page.seoDescription.substring(0, 154) + "\u2026" : data.page.seoDescription : ""
  };
}, handle3 = {
  seo: seo3
}, links3 = () => [{ rel: "stylesheet", href: swiper_min_default }];
async function loader8({ context: context2, params, request }) {
  let { sanityClient, usePreview } = context2;
  if ((await getSession(request.headers.get("Cookie"))).get("preview"))
    return { preview: !0, query: pageDataQuery, params };
  let page = await sanityClient.fetch(pageDataQuery, params);
  return json3({
    page,
    usePreview
  });
}
function PageRoute() {
  let { page } = useLoaderData2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime66.jsxDEV)(Page, { page }, void 0, !1, {
    fileName: "app/routes/$slug.jsx",
    lineNumber: 43,
    columnNumber: 10
  }, this);
}

// app/routes/index.jsx
var routes_exports = {};
__export(routes_exports, {
  default: () => Index,
  handle: () => handle4,
  loader: () => loader9,
  meta: () => meta2
});
init_groq_esm();
init_dist();

// app/components/home/Hero.jsx
var import_react111 = __toESM(require_react());
var import_jsx_dev_runtime67 = __toESM(require_jsx_dev_runtime()), Hero2 = ({ hero }) => {
  let { store, colour } = hero;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)(Layout2, { tag: "article", intent: "banner", colour: colour || "#e3e8ef", children: /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)("div", { className: "relative w-full h-full", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)("div", { className: cx("relative w-full h-full flex flex-col gap-4 z-10"), children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)(Text2, { intent: "ui-6xl", children: store.title }, void 0, !1, {
        fileName: "app/components/home/Hero.jsx",
        lineNumber: 13,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)(
        Link4,
        {
          intent: "button-2xl",
          colour: "mono",
          className: "flex-grow-0",
          to: store.slug.shop.slug.fullUrl,
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)(Text2, { intent: "ui-3xl", children: "Buy" }, void 0, !1, {
            fileName: "app/components/home/Hero.jsx",
            lineNumber: 20,
            columnNumber: 13
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "app/components/home/Hero.jsx",
          lineNumber: 14,
          columnNumber: 11
        },
        this
      )
    ] }, void 0, !0, {
      fileName: "app/components/home/Hero.jsx",
      lineNumber: 12,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)(
      "div",
      {
        className: "absolute w-full h-full inset-0 flex justify-center items-center p-8",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime67.jsxDEV)(
          "img",
          {
            src: store.image,
            alt: store.title,
            className: "w-full h-full object-contain"
          },
          void 0,
          !1,
          {
            fileName: "app/components/home/Hero.jsx",
            lineNumber: 28,
            columnNumber: 11
          },
          this
        )
      },
      void 0,
      !1,
      {
        fileName: "app/components/home/Hero.jsx",
        lineNumber: 23,
        columnNumber: 9
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/home/Hero.jsx",
    lineNumber: 11,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/components/home/Hero.jsx",
    lineNumber: 10,
    columnNumber: 5
  }, this);
}, Hero_default = Hero2;

// app/routes/index.jsx
var import_jsx_dev_runtime68 = __toESM(require_jsx_dev_runtime()), handle4 = {
  seo: {
    title: "Home"
  }
}, meta2 = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
async function loader9({ context: context2 }) {
  let [homepage] = await Promise.all([getHomepageData(context2)]);
  return json3({
    homepage
  });
}
function Index() {
  let { homepage } = useLoaderData();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(Banner, { children: homepage.heroBanner ? homepage.heroBanner : "Currently\u2026" }, void 0, !1, {
      fileName: "app/routes/index.jsx",
      lineNumber: 36,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(Hero_default, { hero: homepage.hero }, void 0, !1, {
      fileName: "app/routes/index.jsx",
      lineNumber: 39,
      columnNumber: 7
    }, this),
    homepage.featured ? /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(import_jsx_dev_runtime68.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(Banner, { children: homepage.featuredBanner ? homepage.featuredBanner : "Featured articles" }, void 0, !1, {
        fileName: "app/routes/index.jsx",
        lineNumber: 42,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(Layout2, { intent: "grid", tag: "ul", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)("li", { className: "col-span-full w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(
          ArticleBlockBanner,
          {
            article: homepage.featured[0],
            link: homepage.featured[0].slug
          },
          void 0,
          !1,
          {
            fileName: "app/routes/index.jsx",
            lineNumber: 49,
            columnNumber: 17
          },
          this
        ) }, void 0, !1, {
          fileName: "app/routes/index.jsx",
          lineNumber: 48,
          columnNumber: 13
        }, this),
        homepage.featured.map((article, index) => {
          if (index !== 0)
            return /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)("li", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(Link4, { to: article.slug, intent: "block", className: "group", children: /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(ArticleBlock, { article }, void 0, !1, {
              fileName: "app/routes/index.jsx",
              lineNumber: 61,
              columnNumber: 21
            }, this) }, void 0, !1, {
              fileName: "app/routes/index.jsx",
              lineNumber: 60,
              columnNumber: 19
            }, this) }, article._id, !1, {
              fileName: "app/routes/index.jsx",
              lineNumber: 59,
              columnNumber: 17
            }, this);
        })
      ] }, void 0, !0, {
        fileName: "app/routes/index.jsx",
        lineNumber: 47,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/index.jsx",
      lineNumber: 41,
      columnNumber: 9
    }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime68.jsxDEV)(Banner, { children: "No featured articles" }, void 0, !1, {
      fileName: "app/routes/index.jsx",
      lineNumber: 69,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/index.jsx",
    lineNumber: 35,
    columnNumber: 5
  }, this);
}
async function getHomepageData({ sanityClient }) {
  let query2 = groq`*[_type == "home"][0] {
		"heroBanner": heroBanner,
    "hero": hero -> {colour, store {
      title,
      "image": previewImageUrl,
      "slug": ${shopLinkQuery},
    }},
		"featuredBanner": featuredBanner,
		"featured": featured[0...3] -> {
			_id,
			headline,
			"slug": slug.fullUrl,
			intro,
			"colour":colour->colourLight,
			author-> {name},
      topic -> {
        topic,
        image {
          asset-> {_id}
        }
      },
			category[] -> {_id, category},
			image {
          		alt,
            	asset->{_id}
          	}
		}}`;
  return await sanityClient.fetch(query2);
}

// app/routes/cart.jsx
var cart_exports = {};
__export(cart_exports, {
  action: () => action3,
  cartAdd: () => cartAdd,
  cartCreate: () => cartCreate,
  cartDiscountCodesUpdate: () => cartDiscountCodesUpdate,
  cartRemove: () => cartRemove,
  cartUpdate: () => cartUpdate,
  cartUpdateBuyerIdentity: () => cartUpdateBuyerIdentity,
  default: () => CartPage,
  handle: () => handle5,
  meta: () => meta3
});
var import_react116 = __toESM(require_react());

// app/components/loaders/CartLoader.jsx
var import_react113 = __toESM(require_react());

// app/components/parts/Spinner.jsx
var import_react112 = __toESM(require_react()), import_jsx_dev_runtime69 = __toESM(require_jsx_dev_runtime()), points = 5, radius = 10, Spinner = () => /* @__PURE__ */ (0, import_jsx_dev_runtime69.jsxDEV)("div", { className: "relative w-8 h-8 animate-spin", children: Array(points).fill().map((v5, index) => {
  let x5 = radius * Math.cos(2 * Math.PI * index / points), y4 = radius * Math.sin(2 * Math.PI * index / points);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime69.jsxDEV)(
    "span",
    {
      className: "absolute w-1 h-1 rounded-full bg-black left-[calc(50%-2px)] top-[calc(50%-2px)]",
      style: { transform: `translate(${x5}px, ${y4}px)` }
    },
    index,
    !1,
    {
      fileName: "app/components/parts/Spinner.jsx",
      lineNumber: 15,
      columnNumber: 15
    },
    this
  );
}) }, void 0, !1, {
  fileName: "app/components/parts/Spinner.jsx",
  lineNumber: 8,
  columnNumber: 7
}, this), Spinner_default = Spinner;

// app/components/loaders/CartLoader.jsx
var import_jsx_dev_runtime70 = __toESM(require_jsx_dev_runtime()), CartLoader = () => /* @__PURE__ */ (0, import_jsx_dev_runtime70.jsxDEV)("div", { className: "w-full h-[calc(100vh-6rem)] flex justify-center items-center", children: /* @__PURE__ */ (0, import_jsx_dev_runtime70.jsxDEV)("div", { className: "flex items-center justify-center gap-1", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime70.jsxDEV)("h2", { className: "mb-[1px] text-2xl", children: "Loading Cart" }, void 0, !1, {
    fileName: "app/components/loaders/CartLoader.jsx",
    lineNumber: 8,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime70.jsxDEV)(Spinner_default, {}, void 0, !1, {
    fileName: "app/components/loaders/CartLoader.jsx",
    lineNumber: 9,
    columnNumber: 9
  }, this)
] }, void 0, !0, {
  fileName: "app/components/loaders/CartLoader.jsx",
  lineNumber: 7,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/components/loaders/CartLoader.jsx",
  lineNumber: 6,
  columnNumber: 5
}, this), CartLoader_default = CartLoader;

// app/components/parts/Dash.jsx
var import_react114 = __toESM(require_react()), import_jsx_dev_runtime71 = __toESM(require_jsx_dev_runtime()), Dash = ({ className }) => /* @__PURE__ */ (0, import_jsx_dev_runtime71.jsxDEV)(
  "div",
  {
    className: cx("w-full border-b-2 border-dotted border-black select-none", className),
    "aria-hidden": "true"
  },
  void 0,
  !1,
  {
    fileName: "app/components/parts/Dash.jsx",
    lineNumber: 6,
    columnNumber: 5
  },
  this
);

// app/routes/cart.jsx
var import_jsx_dev_runtime72 = __toESM(require_jsx_dev_runtime()), handle5 = {
  seo: {
    title: "Cart"
  }
}, meta3 = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
async function action3({ request, context: context2 }) {
  let { session, storefront } = context2, headers = new Headers(), [formData, storedCartId, customerAccessToken] = await Promise.all([
    request.formData(),
    session.get("cartId"),
    session.get("customerAccessToken")
  ]), cartId = storedCartId, cartAction = formData.get("cartAction");
  invariant4(cartAction, "No cartAction defined");
  let countryCode = formData.get("countryCode") ? formData.get("countryCode") : null, status = 200, result;
  switch (cartAction) {
    case "ADD_TO_CART":
      let lines = formData.get("lines") ? JSON.parse(String(formData.get("lines"))) : [];
      invariant4(lines.length, "No lines to add"), cartId ? result = await cartAdd({
        cartId,
        lines,
        storefront
      }) : result = await cartCreate({
        input: countryCode ? { lines, buyerIdentity: { countryCode } } : { lines },
        storefront
      }), cartId = result.cart.id;
      break;
    case "REMOVE_FROM_CART":
      let lineIds = formData.get("linesIds") ? JSON.parse(String(formData.get("linesIds"))) : [];
      invariant4(lineIds.length, "No lines to remove"), result = await cartRemove({
        cartId,
        lineIds,
        storefront
      }), cartId = result.cart.id;
      break;
    case "UPDATE_CART":
      let updateLines = formData.get("lines") ? JSON.parse(String(formData.get("lines"))) : [];
      invariant4(updateLines.length, "No lines to update"), result = await cartUpdate({
        cartId,
        lines: updateLines,
        storefront
      }), cartId = result.cart.id;
      break;
    case "UPDATE_DISCOUNT":
      invariant4(cartId, "Missing cartId");
      let discountCodes = [formData.get("discountCode")];
      result = await cartDiscountCodesUpdate({
        cartId,
        discountCodes,
        storefront
      }), cartId = result.cart.id;
      break;
    case "UPDATE_BUYER_IDENTITY":
      let buyerIdentity = formData.get("buyerIdentity") ? JSON.parse(String(formData.get("buyerIdentity"))) : {};
      result = cartId ? await cartUpdateBuyerIdentity({
        cartId,
        buyerIdentity: {
          ...buyerIdentity,
          customerAccessToken
        },
        storefront
      }) : await cartCreate({
        input: {
          buyerIdentity: {
            ...buyerIdentity,
            customerAccessToken
          }
        },
        storefront
      }), cartId = result.cart.id;
      break;
    default:
      invariant4(!1, `${cartAction} cart action is not defined`);
  }
  session.set("cartId", cartId), headers.set("Set-Cookie", await session.commit());
  let redirectTo = formData.get("redirectTo") ?? null;
  typeof redirectTo == "string" && isLocalPath(redirectTo) && (status = 303, headers.set("Location", redirectTo));
  let { cart, errors } = result;
  return json3(
    {
      cart,
      errors,
      analytics: {
        cartId
      }
    },
    { status, headers }
  );
}
function CartPage() {
  let { cart, shop } = useRouteData("root");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(import_react116.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartLoader_default, {}, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 179,
    columnNumber: 27
  }, this), children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Await2, { resolve: cart, children: (cart2) => /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Cart2, { cart: cart2, shop }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 180,
    columnNumber: 42
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 180,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 179,
    columnNumber: 7
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 178,
    columnNumber: 5
  }, this);
}
var Cart2 = ({ cart, shop }) => {
  var _a2, _b;
  let cartHasItems = Boolean(((_b = (_a2 = cart == null ? void 0 : cart.lines) == null ? void 0 : _a2.edges) == null ? void 0 : _b.length) || 0);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(import_jsx_dev_runtime72.Fragment, { children: cartHasItems ? /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartDetails2, { cart, shop }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 190,
    columnNumber: 23
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(EmptyCart, {}, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 190,
    columnNumber: 65
  }, this) }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 189,
    columnNumber: 5
  }, this);
}, CartDetails2 = ({ cart, shop }) => {
  let { lines, cost, checkoutUrl } = cart;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Layout2, { intent: "cart", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Text2, { tag: "h2", intent: "ui-3xl", children: "Basket contents" }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 199,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(
      "div",
      {
        className: cx(
          "mt-8 grid grid-cols-1 gap-8",
          "md:grid-cols-3 md:gap-16"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(
            "div",
            {
              className: cx(
                "order-last col-span-2 flex flex-col",
                "md:order-first"
              ),
              children: [
                lines.edges.map(({ node }) => /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartLine, { line: node }, node.id, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 215,
                  columnNumber: 13
                }, this)),
                /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartTotal, { cost }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 217,
                  columnNumber: 11
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)("a", { href: checkoutUrl, target: "_self", className: "ml-auto mr-20 mt-8", children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Button2, { tag: "div", intent: "xl", colour: "dark", children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Text2, { intent: "button-2xl", children: "Checkout" }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 220,
                  columnNumber: 15
                }, this) }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 219,
                  columnNumber: 13
                }, this) }, void 0, !1, {
                  fileName: "app/routes/cart.jsx",
                  lineNumber: 218,
                  columnNumber: 11
                }, this)
              ]
            },
            void 0,
            !0,
            {
              fileName: "app/routes/cart.jsx",
              lineNumber: 208,
              columnNumber: 9
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartPreview, { text: "Back to shop", link: shop.shop.slug.fullUrl }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 224,
            columnNumber: 9
          }, this)
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/routes/cart.jsx",
        lineNumber: 202,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 198,
    columnNumber: 5
  }, this);
}, EmptyCart = () => /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Layout2, { intent: "centre", children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Text2, { tag: "h2", intent: "ui-2xl", children: "Basket is empty" }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 233,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 232,
  columnNumber: 5
}, this), CartLineWrapper = ({ children }) => /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)("div", { className: "w-full h-max grid grid-cols-[1fr_64px] gap-2", children }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 242,
  columnNumber: 5
}, this), CartLine = ({ line }) => {
  let { id, merchandise } = line;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartLineWrapper, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(
      "div",
      {
        className: "flex gap-2 items-baseline justify-self-stretch",
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Text2, { tag: "h4", intent: "ui-xl", children: merchandise.product.title }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 255,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Text2, { tag: "h5", intent: "ui-xl", className: "text-center", children: merchandise.title }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 258,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Dash, { className: "flex-1" }, void 0, !1, {
            fileName: "app/routes/cart.jsx",
            lineNumber: 261,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(
            Money,
            {
              withoutTrailingZeros: !0,
              data: merchandise.price,
              className: "text-right ui-xl"
            },
            void 0,
            !1,
            {
              fileName: "app/routes/cart.jsx",
              lineNumber: 262,
              columnNumber: 11
            },
            this
          )
        ]
      },
      void 0,
      !0,
      {
        fileName: "app/routes/cart.jsx",
        lineNumber: 252,
        columnNumber: 9
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)("div", { className: "justify-self-end w-16 text-right", children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartRemove, { id }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 269,
      columnNumber: 11
    }, this) }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 268,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 251,
    columnNumber: 5
  }, this);
}, CartRemove = ({ id }) => {
  let fetcher = useFetcher2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(fetcher.Form, { action: "/cart", method: "post", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)("input", { type: "hidden", name: "cartAction", value: "REMOVE_FROM_CART" }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 280,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)("input", { type: "hidden", name: "linesIds", value: JSON.stringify(id) }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 281,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Button2, { type: "submit", colour: "light", intent: "link", children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Text2, { intent: "button-xl", children: "remove" }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 283,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/routes/cart.jsx",
      lineNumber: 282,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 279,
    columnNumber: 5
  }, this);
}, CartTotal = ({ cost }) => /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(CartLineWrapper, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)("div", { className: "flex gap-2 items-baseline justify-self-stretch mt-8", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Text2, { tag: "h4", intent: "ui-xl", children: "Total" }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 293,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(Dash, { className: "flex-1" }, void 0, !1, {
    fileName: "app/routes/cart.jsx",
    lineNumber: 296,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime72.jsxDEV)(
    Money,
    {
      withoutTrailingZeros: !0,
      data: cost.totalAmount,
      className: "text-right ui-xl"
    },
    void 0,
    !1,
    {
      fileName: "app/routes/cart.jsx",
      lineNumber: 297,
      columnNumber: 9
    },
    this
  )
] }, void 0, !0, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 292,
  columnNumber: 7
}, this) }, void 0, !1, {
  fileName: "app/routes/cart.jsx",
  lineNumber: 291,
  columnNumber: 5
}, this), USER_ERROR_FRAGMENT = `#graphql
  fragment ErrorFragment on CartUserError {
    message
    field
    code
  }
`, LINES_CART_FRAGMENT = `#graphql
  fragment CartLinesFragment on Cart {
    id
    totalQuantity
  }
`, CREATE_CART_MUTATION = `#graphql
  mutation ($input: CartInput!, $country: CountryCode = ZZ, $language: LanguageCode)
  @inContext(country: $country, language: $language) {
    cartCreate(input: $input) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
`;
async function cartCreate({ input, storefront }) {
  let { cartCreate: cartCreate2 } = await storefront.mutate(CREATE_CART_MUTATION, {
    variables: { input }
  });
  return invariant4(cartCreate2, "No data returned from cartCreate mutation"), cartCreate2;
}
var ADD_LINES_MUTATION = `#graphql
  mutation ($cartId: ID!, $lines: [CartLineInput!]!, $country: CountryCode = ZZ, $language: LanguageCode)
  @inContext(country: $country, language: $language) {
    cartLinesAdd(cartId: $cartId, lines: $lines) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
`;
async function cartAdd({ cartId, lines, storefront }) {
  let { cartLinesAdd } = await storefront.mutate(ADD_LINES_MUTATION, {
    variables: { cartId, lines }
  });
  return invariant4(cartLinesAdd, "No data returned from cartLinesAdd mutation"), cartLinesAdd;
}
var REMOVE_LINE_ITEMS_MUTATION = `#graphql
  mutation ($cartId: ID!, $lineIds: [ID!]!, $language: LanguageCode, $country: CountryCode)
  @inContext(country: $country, language: $language) {
    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {
      cart {
        id
        totalQuantity
        lines(first: 100) {
          edges {
            node {
              id
              quantity
              merchandise {
                ...on ProductVariant {
                  id
                }
              }
            }
          }
        }
      }
      errors: userErrors {
        message
        field
        code
      }
    }
  }
`;
async function cartRemove({ cartId, lineIds, storefront }) {
  let { cartLinesRemove } = await storefront.mutate(
    REMOVE_LINE_ITEMS_MUTATION,
    {
      variables: {
        cartId,
        lineIds
      }
    }
  );
  return invariant4(cartLinesRemove, "No data returned from remove lines mutation"), cartLinesRemove;
}
var LINES_UPDATE_MUTATION = `#graphql
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
  mutation ($cartId: ID!, $lines: [CartLineUpdateInput!]!, $language: LanguageCode, $country: CountryCode)
  @inContext(country: $country, language: $language) {
    cartLinesUpdate(cartId: $cartId, lines: $lines) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
`;
async function cartUpdate({ cartId, lines, storefront }) {
  let { cartLinesUpdate } = await storefront.mutate(LINES_UPDATE_MUTATION, {
    variables: { cartId, lines }
  });
  return invariant4(
    cartLinesUpdate,
    "No data returned from update lines items mutation"
  ), cartLinesUpdate;
}
var UPDATE_CART_BUYER_COUNTRY = `#graphql
 mutation(
   $cartId: ID!
   $buyerIdentity: CartBuyerIdentityInput!
   $country: CountryCode = ZZ
   $language: LanguageCode
 ) @inContext(country: $country, language: $language) {
   cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {
     cart {
       id
       buyerIdentity {
         email
         phone
         countryCode
       }
     }
     errors: userErrors {
       message
       field
       code
     }
   }
 }
`;
async function cartUpdateBuyerIdentity({
  cartId,
  buyerIdentity,
  storefront
}) {
  let { cartBuyerIdentityUpdate } = await storefront.mutate(
    UPDATE_CART_BUYER_COUNTRY,
    {
      variables: {
        cartId,
        buyerIdentity
      }
    }
  );
  return invariant4(
    cartBuyerIdentityUpdate,
    "No data returned from cart buyer identity update mutation"
  ), cartBuyerIdentityUpdate;
}
var DISCOUNT_CODES_UPDATE = `#graphql
  mutation cartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!], $country: CountryCode = ZZ)
    @inContext(country: $country) {
    cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {
      cart {
        id
        discountCodes {
          code
        }
      }
      errors: userErrors {
        field
        message
      }
    }
  }
`;
async function cartDiscountCodesUpdate({
  cartId,
  discountCodes,
  storefront
}) {
  let { cartDiscountCodesUpdate: cartDiscountCodesUpdate2 } = await storefront.mutate(
    DISCOUNT_CODES_UPDATE,
    {
      variables: {
        cartId,
        discountCodes
      }
    }
  );
  return invariant4(
    cartDiscountCodesUpdate2,
    "No data returned from the cartDiscountCodesUpdate mutation"
  ), cartDiscountCodesUpdate2;
}

// app/routes/$.tsx
var __exports = {};
__export(__exports, {
  default: () => Component3,
  loader: () => loader10
});
async function loader10() {
  throw new Response("Not found", { status: 404 });
}
function Component3() {
  return null;
}

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/routes/graphiql.jsx
var graphiql_exports = {};
__export(graphiql_exports, {
  loader: () => loader11
});
var loader11 = it;

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx
var virtual_root_exports = {};
__export(virtual_root_exports, {
  default: () => App2,
  links: () => links4,
  meta: () => meta4
});

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/assets/styles.css
var styles_default = "/build/_assets/styles-O7MQZLJO.css";

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/assets/favicon.svg
var favicon_default = "/build/_assets/favicon-5FIZBM2K.svg";

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/components/Layout.jsx
var import_jsx_dev_runtime73 = __toESM(require_jsx_dev_runtime(), 1);
function Layout3(props) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime73.jsxDEV)("div", { className: "hydrogen-virtual-route", children: props.children }, void 0, !1, {
    fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/components/Layout.jsx",
    lineNumber: 2,
    columnNumber: 10
  }, this);
}

// node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx
var import_jsx_dev_runtime74 = __toESM(require_jsx_dev_runtime(), 1), links4 = () => [
  { rel: "stylesheet", href: styles_default },
  { rel: "icon", type: "image/svg+xml", href: favicon_default }
], meta4 = () => ({
  charset: "utf-8",
  viewport: "width=device-width,initial-scale=1"
});
function App2() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)("html", { lang: "en", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)(Meta, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 24,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)(Links, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 25,
        columnNumber: 7
      }, this)
    ] }, void 0, !0, {
      fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
      lineNumber: 23,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)(Layout3, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)(Outlet, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 28,
        columnNumber: 15
      }, this) }, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 28,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)(ScrollRestoration2, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 29,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime74.jsxDEV)(Scripts, {}, void 0, !1, {
        fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
        lineNumber: 30,
        columnNumber: 7
      }, this)
    ] }, void 0, !0, {
      fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
      lineNumber: 27,
      columnNumber: 5
    }, this)
  ] }, void 0, !0, {
    fileName: "node_modules/@shopify/cli-hydrogen/dist/virtual-routes/virtual-root.jsx",
    lineNumber: 22,
    columnNumber: 10
  }, this);
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { version: "e67f2cf1", entry: { module: "/build/entry.client-33JENY5O.js", imports: ["/build/_shared/chunk-XG4TC2HA.js", "/build/_shared/chunk-IJQIRI3H.js", "/build/_shared/chunk-XSBDACHI.js", "/build/_shared/chunk-5KL4PAQL.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-2LKLEY5R.js", imports: ["/build/_shared/chunk-CD5JQ3JV.js", "/build/_shared/chunk-SMGWK4UQ.js", "/build/_shared/chunk-6PSZP2HE.js", "/build/_shared/chunk-EZPXYWN2.js", "/build/_shared/chunk-V65A42ED.js", "/build/_shared/chunk-S5V3YEQA.js", "/build/_shared/chunk-AUYLHJJM.js", "/build/_shared/chunk-EB3GVTND.js", "/build/_shared/chunk-LEGTGKT4.js", "/build/_shared/chunk-BWK6FPRY.js", "/build/_shared/chunk-TKX6R6MJ.js"], hasAction: !0, hasLoader: !0, hasCatchBoundary: !0, hasErrorBoundary: !0 }, "routes/$": { id: "routes/$", parentId: "root", path: "*", index: void 0, caseSensitive: void 0, module: "/build/routes/$-UTJQRW44.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/$slug": { id: "routes/$slug", parentId: "root", path: ":slug", index: void 0, caseSensitive: void 0, module: "/build/routes/$slug-QKSMLF2U.js", imports: ["/build/_shared/chunk-IEQ73DG4.js", "/build/_shared/chunk-TKNRQEBU.js", "/build/_shared/chunk-TVWDAQXN.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/[robots.txt]": { id: "routes/[robots.txt]", parentId: "root", path: "robots.txt", index: void 0, caseSensitive: void 0, module: "/build/routes/[robots.txt]-VQ27HJRM.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/[sitemap.xml]": { id: "routes/[sitemap.xml]", parentId: "root", path: "sitemap.xml", index: void 0, caseSensitive: void 0, module: "/build/routes/[sitemap.xml]-LMNECGY7.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/api/countries": { id: "routes/api/countries", parentId: "root", path: "api/countries", index: void 0, caseSensitive: void 0, module: "/build/routes/api/countries-3YBAH436.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/api/products": { id: "routes/api/products", parentId: "root", path: "api/products", index: void 0, caseSensitive: void 0, module: "/build/routes/api/products-D5PZ4SFG.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/articles/$slug": { id: "routes/articles/$slug", parentId: "root", path: "articles/:slug", index: void 0, caseSensitive: void 0, module: "/build/routes/articles/$slug-TLJN34P3.js", imports: ["/build/_shared/chunk-IEQ73DG4.js", "/build/_shared/chunk-WHKUUPWA.js", "/build/_shared/chunk-TKNRQEBU.js", "/build/_shared/chunk-TVWDAQXN.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/cart": { id: "routes/cart", parentId: "root", path: "cart", index: void 0, caseSensitive: void 0, module: "/build/routes/cart-6FVCOXTH.js", imports: ["/build/_shared/chunk-TVWDAQXN.js"], hasAction: !0, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/index": { id: "routes/index", parentId: "root", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/index-ZXWOVYWI.js", imports: ["/build/_shared/chunk-WHKUUPWA.js", "/build/_shared/chunk-TKNRQEBU.js"], hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/resource/preview": { id: "routes/resource/preview", parentId: "root", path: "resource/preview", index: void 0, caseSensitive: void 0, module: "/build/routes/resource/preview-YVVN57HZ.js", imports: void 0, hasAction: !0, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "virtual-routes/routes/graphiql": { id: "virtual-routes/routes/graphiql", parentId: "virtual-routes/virtual-root", path: "graphiql", index: void 0, caseSensitive: void 0, module: "/build/virtual-routes/routes/graphiql-GPDYRMZP.js", imports: void 0, hasAction: !1, hasLoader: !0, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "virtual-routes/virtual-root": { id: "virtual-routes/virtual-root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/virtual-routes/virtual-root-HB6MAEA3.js", imports: void 0, hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 } }, cssBundleHref: void 0, url: "/build/manifest-E67F2CF1.js" };

// server-entry-module:@remix-run/dev/server-build
var assetsBuildDirectory = "dist/client/build", future = { unstable_cssModules: !1, unstable_cssSideEffectImports: !1, unstable_dev: !1, unstable_vanillaExtract: !1, v2_errorBoundary: !1, v2_meta: !1, v2_routeConvention: !1 }, publicPath = "/build/", entry = { module: entry_server_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/resource/preview": {
    id: "routes/resource/preview",
    parentId: "root",
    path: "resource/preview",
    index: void 0,
    caseSensitive: void 0,
    module: preview_exports
  },
  "routes/articles/$slug": {
    id: "routes/articles/$slug",
    parentId: "root",
    path: "articles/:slug",
    index: void 0,
    caseSensitive: void 0,
    module: slug_exports
  },
  "routes/[sitemap.xml]": {
    id: "routes/[sitemap.xml]",
    parentId: "root",
    path: "sitemap.xml",
    index: void 0,
    caseSensitive: void 0,
    module: sitemap_xml_exports
  },
  "routes/api/countries": {
    id: "routes/api/countries",
    parentId: "root",
    path: "api/countries",
    index: void 0,
    caseSensitive: void 0,
    module: countries_exports
  },
  "routes/[robots.txt]": {
    id: "routes/[robots.txt]",
    parentId: "root",
    path: "robots.txt",
    index: void 0,
    caseSensitive: void 0,
    module: robots_txt_exports
  },
  "routes/api/products": {
    id: "routes/api/products",
    parentId: "root",
    path: "api/products",
    index: void 0,
    caseSensitive: void 0,
    module: products_exports
  },
  "routes/$slug": {
    id: "routes/$slug",
    parentId: "root",
    path: ":slug",
    index: void 0,
    caseSensitive: void 0,
    module: slug_exports2
  },
  "routes/index": {
    id: "routes/index",
    parentId: "root",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: routes_exports
  },
  "routes/cart": {
    id: "routes/cart",
    parentId: "root",
    path: "cart",
    index: void 0,
    caseSensitive: void 0,
    module: cart_exports
  },
  "routes/$": {
    id: "routes/$",
    parentId: "root",
    path: "*",
    index: void 0,
    caseSensitive: void 0,
    module: __exports
  },
  "virtual-routes/routes/graphiql": {
    id: "virtual-routes/routes/graphiql",
    parentId: "virtual-routes/virtual-root",
    path: "graphiql",
    index: void 0,
    caseSensitive: void 0,
    module: graphiql_exports
  },
  "virtual-routes/virtual-root": {
    id: "virtual-routes/virtual-root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: virtual_root_exports
  }
};

// app/lib/session.server.ts
var encoder2 = new TextEncoder(), sign2 = async (value, secret) => {
  let data = encoder2.encode(value), key = await createKey3(secret, ["sign"]), signature = await crypto.subtle.sign("HMAC", key, data), hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(
    /=+$/,
    ""
  );
  return value + "." + hash;
}, unsign2 = async (cookie, secret) => {
  let value = cookie.slice(0, cookie.lastIndexOf(".")), hash = cookie.slice(cookie.lastIndexOf(".") + 1), data = encoder2.encode(value), key = await createKey3(secret, ["verify"]), signature = byteStringToUint8Array2(atob(hash));
  return await crypto.subtle.verify("HMAC", key, signature, data) ? value : !1;
};
async function createKey3(secret, usages) {
  return await crypto.subtle.importKey(
    "raw",
    encoder2.encode(secret),
    { name: "HMAC", hash: "SHA-256" },
    !1,
    usages
  );
}
function byteStringToUint8Array2(byteString) {
  let array2 = new Uint8Array(byteString.length);
  for (let i9 = 0; i9 < byteString.length; i9++)
    array2[i9] = byteString.charCodeAt(i9);
  return array2;
}
var HydrogenSession = class {
  constructor(sessionStorage2, session) {
    this.sessionStorage = sessionStorage2;
    this.session = session;
  }
  static async init(request, secrets) {
    let createCookie2 = createCookieFactory({ sign: sign2, unsign: unsign2 }), storage = createCookieSessionStorageFactory(createCookie2)({
      cookie: {
        name: "session",
        httpOnly: !0,
        path: "/",
        sameSite: "lax",
        secrets
      }
    }), session = await storage.getSession(request.headers.get("Cookie"));
    return new this(storage, session);
  }
  get(key) {
    return this.session.get(key);
  }
  destroy() {
    return this.sessionStorage.destroySession(this.session);
  }
  flash(key, value) {
    this.session.flash(key, value);
  }
  unset(key) {
    this.session.unset(key);
  }
  set(key, value) {
    this.session.set(key, value);
  }
  commit() {
    return this.sessionStorage.commitSession(this.session);
  }
};

// node_modules/get-it/dist/_chunks/defaultOptionsValidator-4ba94809.js
var isReactNative = typeof navigator > "u" ? !1 : navigator.product === "ReactNative", defaultOptions = {
  timeout: isReactNative ? 6e4 : 12e4
};
function processOptions(opts) {
  let options = typeof opts == "string" ? Object.assign({
    url: opts
  }, defaultOptions) : Object.assign({}, defaultOptions, opts), url = new URL(options.url, "http://localhost");
  if (options.timeout = normalizeTimeout(options.timeout), options.query) {
    for (let [key, value] of Object.entries(options.query))
      if (value !== void 0)
        if (Array.isArray(value))
          for (let v5 of value)
            url.searchParams.append(key, v5);
        else
          url.searchParams.append(key, value);
  }
  return options.method = options.body && !options.method ? "POST" : (options.method || "GET").toUpperCase(), options.url = url.origin === "http://localhost" ? "".concat(url.pathname, "?").concat(url.searchParams) : url.toString(), options;
}
function normalizeTimeout(time) {
  if (time === !1 || time === 0)
    return !1;
  if (time.connect || time.socket)
    return time;
  let delay = Number(time);
  return isNaN(delay) ? normalizeTimeout(defaultOptions.timeout) : {
    connect: delay,
    socket: delay
  };
}
var validUrl = /^https?:\/\//i;
function validateOptions(options) {
  if (!validUrl.test(options.url))
    throw new Error('"'.concat(options.url, '" is not a valid URL'));
}

// node_modules/get-it/dist/index.browser.js
var import_parse_headers = __toESM(require_parse_headers(), 1), middlewareReducer = (middleware) => function(hook, defaultValue) {
  let bailEarly = hook === "onError", value = defaultValue;
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)
    args[_key - 2] = arguments[_key];
  for (let i9 = 0; i9 < middleware[hook].length; i9++) {
    let handler = middleware[hook][i9];
    if (value = handler(value, ...args), bailEarly && !value)
      break;
  }
  return value;
};
function createPubSub() {
  let subscribers = /* @__PURE__ */ Object.create(null), nextId = 0;
  function subscribe(subscriber) {
    let id = nextId++;
    return subscribers[id] = subscriber, function() {
      delete subscribers[id];
    };
  }
  function publish(event2) {
    for (let id in subscribers)
      subscribers[id](event2);
  }
  return {
    publish,
    subscribe
  };
}
var channelNames = ["request", "response", "progress", "error", "abort"], middlehooks = ["processOptions", "validateOptions", "interceptRequest", "finalizeOptions", "onRequest", "onResponse", "onError", "onReturn", "onHeaders"];
function createRequester(initMiddleware, httpRequest2) {
  let loadedMiddleware = [], middleware = middlehooks.reduce((ware, name) => (ware[name] = ware[name] || [], ware), {
    processOptions: [processOptions],
    validateOptions: [validateOptions]
  });
  function request(opts) {
    let channels = channelNames.reduce((target, name) => (target[name] = createPubSub(), target), {}), applyMiddleware = middlewareReducer(middleware), options = applyMiddleware("processOptions", opts);
    applyMiddleware("validateOptions", options);
    let context2 = {
      options,
      channels,
      applyMiddleware
    }, ongoingRequest = null, unsubscribe = channels.request.subscribe((ctx) => {
      ongoingRequest = httpRequest2(ctx, (err, res) => onResponse(err, res, ctx));
    });
    channels.abort.subscribe(() => {
      unsubscribe(), ongoingRequest && ongoingRequest.abort();
    });
    let returnValue = applyMiddleware("onReturn", channels, context2);
    return returnValue === channels && channels.request.publish(context2), returnValue;
    function onResponse(reqErr, res, ctx) {
      let error = reqErr, response = res;
      if (!error)
        try {
          response = applyMiddleware("onResponse", res, ctx);
        } catch (err) {
          response = null, error = err;
        }
      error = error && applyMiddleware("onError", error, ctx), error ? channels.error.publish(error) : response && channels.response.publish(response);
    }
  }
  return request.use = function(newMiddleware) {
    if (!newMiddleware)
      throw new Error("Tried to add middleware that resolved to falsey value");
    if (typeof newMiddleware == "function")
      throw new Error("Tried to add middleware that was a function. It probably expects you to pass options to it.");
    if (newMiddleware.onReturn && middleware.onReturn.length > 0)
      throw new Error("Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event");
    return middlehooks.forEach((key) => {
      newMiddleware[key] && middleware[key].push(newMiddleware[key]);
    }), loadedMiddleware.push(newMiddleware), request;
  }, request.clone = function() {
    return createRequester(loadedMiddleware, httpRequest2);
  }, initMiddleware.forEach(request.use), request;
}
var __accessCheck2 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet2 = (obj, member, getter) => (__accessCheck2(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd2 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet2 = (obj, member, value, setter) => (__accessCheck2(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _method, _url, _resHeaders, _headers, _controller, FetchXhr = class {
  constructor() {
    this.readyState = 0, __privateAdd2(this, _method, void 0), __privateAdd2(this, _url, void 0), __privateAdd2(this, _resHeaders, void 0), __privateAdd2(this, _headers, {}), __privateAdd2(this, _controller, void 0);
  }
  open(method, url, _async) {
    __privateSet2(this, _method, method), __privateSet2(this, _url, url), __privateSet2(this, _resHeaders, ""), this.readyState = 1, this.onreadystatechange(), __privateSet2(this, _controller, void 0);
  }
  abort() {
    __privateGet2(this, _controller) && __privateGet2(this, _controller).abort();
  }
  getAllResponseHeaders() {
    return __privateGet2(this, _resHeaders);
  }
  setRequestHeader(name, value) {
    __privateGet2(this, _headers)[name] = value;
  }
  send(body) {
    let textBody = this.responseType !== "arraybuffer", options = {
      method: __privateGet2(this, _method),
      headers: __privateGet2(this, _headers),
      signal: null,
      body
    };
    typeof AbortController == "function" && (__privateSet2(this, _controller, new AbortController()), options.signal = __privateGet2(this, _controller).signal), typeof document < "u" && (options.credentials = this.withCredentials ? "include" : "omit"), fetch(__privateGet2(this, _url), options).then((res) => (res.headers.forEach((value, key) => {
      __privateSet2(this, _resHeaders, __privateGet2(this, _resHeaders) + "".concat(key, ": ").concat(value, `\r
`));
    }), this.status = res.status, this.statusText = res.statusText, this.readyState = 3, textBody ? res.text() : res.arrayBuffer())).then((resBody) => {
      typeof resBody == "string" ? this.responseText = resBody : this.response = resBody, this.readyState = 4, this.onreadystatechange();
    }).catch((err) => {
      var _a2;
      if (err.name === "AbortError") {
        this.onabort();
        return;
      }
      (_a2 = this.onerror) == null || _a2.call(this, err);
    });
  }
};
_method = /* @__PURE__ */ new WeakMap();
_url = /* @__PURE__ */ new WeakMap();
_resHeaders = /* @__PURE__ */ new WeakMap();
_headers = /* @__PURE__ */ new WeakMap();
_controller = /* @__PURE__ */ new WeakMap();
var adapter = typeof XMLHttpRequest == "function" ? "xhr" : "fetch", XmlHttpRequest = adapter === "xhr" ? XMLHttpRequest : FetchXhr, httpRequester = (context2, callback) => {
  let opts = context2.options, options = context2.applyMiddleware("finalizeOptions", opts), timers = {}, injectedResponse = context2.applyMiddleware("interceptRequest", void 0, {
    adapter,
    context: context2
  });
  if (injectedResponse) {
    let cbTimer = setTimeout(callback, 0, null, injectedResponse);
    return {
      abort: () => clearTimeout(cbTimer)
    };
  }
  let xhr = new XmlHttpRequest(), headers = options.headers, delays = options.timeout, aborted = !1, loaded = !1, timedOut = !1;
  if (xhr.onerror = onError, xhr.ontimeout = onError, xhr.onabort = () => {
    stopTimers(!0), aborted = !0;
  }, xhr.onreadystatechange = () => {
    resetTimers(), !(aborted || xhr.readyState !== 4) && xhr.status !== 0 && onLoad2();
  }, xhr.open(
    options.method,
    options.url,
    !0
  ), xhr.withCredentials = !!options.withCredentials, headers && xhr.setRequestHeader)
    for (let key in headers)
      headers.hasOwnProperty(key) && xhr.setRequestHeader(key, headers[key]);
  return options.rawBody && (xhr.responseType = "arraybuffer"), context2.applyMiddleware("onRequest", {
    options,
    adapter,
    request: xhr,
    context: context2
  }), xhr.send(options.body || null), delays && (timers.connect = setTimeout(() => timeoutRequest("ETIMEDOUT"), delays.connect)), {
    abort
  };
  function abort() {
    aborted = !0, xhr && xhr.abort();
  }
  function timeoutRequest(code) {
    timedOut = !0, xhr.abort();
    let error = new Error(code === "ESOCKETTIMEDOUT" ? "Socket timed out on request to ".concat(options.url) : "Connection timed out on request to ".concat(options.url));
    error.code = code, context2.channels.error.publish(error);
  }
  function resetTimers() {
    !delays || (stopTimers(), timers.socket = setTimeout(() => timeoutRequest("ESOCKETTIMEDOUT"), delays.socket));
  }
  function stopTimers(force) {
    (force || aborted || xhr.readyState >= 2 && timers.connect) && clearTimeout(timers.connect), timers.socket && clearTimeout(timers.socket);
  }
  function onError(error) {
    if (loaded)
      return;
    stopTimers(!0), loaded = !0, xhr = null;
    let err = error || new Error("Network error while attempting to reach ".concat(options.url));
    err.isNetworkError = !0, err.request = options, callback(err);
  }
  function reduceResponse() {
    return {
      body: xhr.response || xhr.responseText,
      url: options.url,
      method: options.method,
      headers: (0, import_parse_headers.default)(xhr.getAllResponseHeaders()),
      statusCode: xhr.status,
      statusMessage: xhr.statusText
    };
  }
  function onLoad2() {
    if (!(aborted || loaded || timedOut)) {
      if (xhr.status === 0) {
        onError(new Error("Unknown XHR error"));
        return;
      }
      stopTimers(), loaded = !0, callback(null, reduceResponse());
    }
  }
}, getIt = function() {
  let initMiddleware = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], httpRequest2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : httpRequester;
  return createRequester(initMiddleware, httpRequest2);
};

// node_modules/get-it/dist/middleware.browser.js
var import_debug = __toESM(require_browser(), 1);

// node_modules/is-plain-object/dist/is-plain-object.mjs
function isObject5(o8) {
  return Object.prototype.toString.call(o8) === "[object Object]";
}
function isPlainObject(o8) {
  var ctor, prot;
  return isObject5(o8) === !1 ? !1 : (ctor = o8.constructor, ctor === void 0 ? !0 : (prot = ctor.prototype, !(isObject5(prot) === !1 || prot.hasOwnProperty("isPrototypeOf") === !1)));
}

// node_modules/get-it/dist/middleware.browser.js
var isBuffer = typeof Buffer > "u" ? () => !1 : (obj) => Buffer.isBuffer(obj), serializeTypes = ["boolean", "string", "number"];
function jsonRequest() {
  return {
    processOptions: (options) => {
      let body = options.body;
      return !body || !(!(typeof body.pipe == "function") && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))) ? options : Object.assign({}, options, {
        body: JSON.stringify(options.body),
        headers: Object.assign({}, options.headers, {
          "Content-Type": "application/json"
        })
      });
    }
  };
}
function jsonResponse(opts) {
  return {
    onResponse: (response) => {
      let contentType = response.headers["content-type"] || "", shouldDecode = opts && opts.force || contentType.indexOf("application/json") !== -1;
      return !response.body || !contentType || !shouldDecode ? response : Object.assign({}, response, {
        body: tryParse(response.body)
      });
    },
    processOptions: (options) => Object.assign({}, options, {
      headers: Object.assign({
        Accept: "application/json"
      }, options.headers)
    })
  };
  function tryParse(body) {
    try {
      return JSON.parse(body);
    } catch (err) {
      throw err.message = "Failed to parsed response body as JSON: ".concat(err.message), err;
    }
  }
}
var actualGlobal;
typeof globalThis < "u" ? actualGlobal = globalThis : typeof window < "u" ? actualGlobal = window : typeof globalThis < "u" ? actualGlobal = globalThis : typeof self < "u" ? actualGlobal = self : actualGlobal = {};
var global$1 = actualGlobal;
function observable() {
  let Observable2 = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}).implementation || global$1.Observable;
  if (!Observable2)
    throw new Error("`Observable` is not available in global scope, and no implementation was passed");
  return {
    onReturn: (channels, context2) => new Observable2((observer) => (channels.error.subscribe((err) => observer.error(err)), channels.progress.subscribe((event2) => observer.next(Object.assign({
      type: "progress"
    }, event2))), channels.response.subscribe((response) => {
      observer.next(Object.assign({
        type: "response"
      }, response)), observer.complete();
    }), channels.request.publish(context2), () => channels.abort.publish()))
  };
}
function progress() {
  return {
    onRequest: (evt) => {
      if (evt.adapter !== "xhr")
        return;
      let xhr = evt.request, context2 = evt.context;
      "upload" in xhr && "onprogress" in xhr.upload && (xhr.upload.onprogress = handleProgress("upload")), "onprogress" in xhr && (xhr.onprogress = handleProgress("download"));
      function handleProgress(stage) {
        return (event2) => {
          let percent = event2.lengthComputable ? event2.loaded / event2.total * 100 : -1;
          context2.channels.progress.publish({
            stage,
            percent,
            total: event2.total,
            loaded: event2.loaded,
            lengthComputable: event2.lengthComputable
          });
        };
      }
    }
  };
}
var promise = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, PromiseImplementation = options.implementation || Promise;
  if (!PromiseImplementation)
    throw new Error("`Promise` is not available in global scope, and no implementation was passed");
  return {
    onReturn: (channels, context2) => new PromiseImplementation((resolve, reject) => {
      let cancel = context2.options.cancelToken;
      cancel && cancel.promise.then((reason) => {
        channels.abort.publish(reason), reject(reason);
      }), channels.error.subscribe(reject), channels.response.subscribe((response) => {
        resolve(options.onlyBody ? response.body : response);
      }), setTimeout(() => {
        try {
          channels.request.publish(context2);
        } catch (err) {
          reject(err);
        }
      }, 0);
    })
  };
}, Cancel = class {
  constructor(message) {
    this.__CANCEL__ = !0, this.message = message;
  }
  toString() {
    return "Cancel".concat(this.message ? ": ".concat(this.message) : "");
  }
}, _CancelToken = class {
  constructor(executor) {
    if (typeof executor != "function")
      throw new TypeError("executor must be a function.");
    let resolvePromise = null;
    this.promise = new Promise((resolve) => {
      resolvePromise = resolve;
    }), executor((message) => {
      this.reason || (this.reason = new Cancel(message), resolvePromise(this.reason));
    });
  }
}, CancelToken = _CancelToken;
CancelToken.source = () => {
  let cancel;
  return {
    token: new _CancelToken((can) => {
      cancel = can;
    }),
    cancel
  };
};
var isCancel = (value) => !!(value && value.__CANCEL__);
promise.Cancel = Cancel;
promise.CancelToken = CancelToken;
promise.isCancel = isCancel;
var defaultShouldRetry = (err, attempt, options) => options.method !== "GET" && options.method !== "HEAD" ? !1 : err.isNetworkError || !1, isStream = (stream) => stream !== null && typeof stream == "object" && typeof stream.pipe == "function", sharedRetry = (opts) => {
  let maxRetries = opts.maxRetries || 5, retryDelay = opts.retryDelay || getRetryDelay, allowRetry = opts.shouldRetry;
  return {
    onError: (err, context2) => {
      let options = context2.options, max = options.maxRetries || maxRetries, shouldRetry = options.shouldRetry || allowRetry, attemptNumber = options.attemptNumber || 0;
      if (isStream(options.body) || !shouldRetry(err, attemptNumber, options) || attemptNumber >= max)
        return err;
      let newContext = Object.assign({}, context2, {
        options: Object.assign({}, options, {
          attemptNumber: attemptNumber + 1
        })
      });
      return setTimeout(() => context2.channels.request.publish(newContext), retryDelay(attemptNumber)), null;
    }
  };
};
function getRetryDelay(attemptNum) {
  return 100 * Math.pow(2, attemptNum) + Math.random() * 100;
}
var retry = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return sharedRetry({
    shouldRetry: defaultShouldRetry,
    ...opts
  });
};
retry.shouldRetry = defaultShouldRetry;

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
  return typeof value == "function";
}

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance), instance.stack = new Error().stack;
  }, ctorFunc = createImpl(_super);
  return ctorFunc.prototype = Object.create(Error.prototype), ctorFunc.prototype.constructor = ctorFunc, ctorFunc;
}

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function(errors) {
    _super(this), this.message = errors ? errors.length + ` errors occurred during unsubscription:
` + errors.map(function(err, i9) {
      return i9 + 1 + ") " + err.toString();
    }).join(`
  `) : "", this.name = "UnsubscriptionError", this.errors = errors;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown, this.closed = !1, this._parentage = null, this._finalizers = null;
  }
  return Subscription2.prototype.unsubscribe = function() {
    var e_1, _a2, e_2, _b, errors;
    if (!this.closed) {
      this.closed = !0;
      var _parentage = this._parentage;
      if (_parentage)
        if (this._parentage = null, Array.isArray(_parentage))
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              _parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return) && _a2.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        else
          _parentage.remove(this);
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer))
        try {
          initialFinalizer();
        } catch (e5) {
          errors = e5 instanceof UnsubscriptionError ? e5.errors : [e5];
        }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors ?? [], err instanceof UnsubscriptionError ? errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors)) : errors.push(err);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            _finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return) && _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors)
        throw new UnsubscriptionError(errors);
    }
  }, Subscription2.prototype.add = function(teardown) {
    var _a2;
    if (teardown && teardown !== this)
      if (this.closed)
        execFinalizer(teardown);
      else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this))
            return;
          teardown._addParent(this);
        }
        (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
      }
  }, Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  }, Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  }, Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    _parentage === parent ? this._parentage = null : Array.isArray(_parentage) && arrRemove(_parentage, parent);
  }, Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown), teardown instanceof Subscription2 && teardown._removeParent(this);
  }, Subscription2.EMPTY = function() {
    var empty = new Subscription2();
    return empty.closed = !0, empty;
  }(), Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  isFunction(finalizer) ? finalizer() : finalizer.unsubscribe();
}

// node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: !1,
  useDeprecatedNextContext: !1
};

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    for (var args = [], _i = 2; _i < arguments.length; _i++)
      args[_i - 2] = arguments[_i];
    var delegate = timeoutProvider.delegate;
    return delegate != null && delegate.setTimeout ? delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args))) : setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle6) {
    var delegate = timeoutProvider.delegate;
    return ((delegate == null ? void 0 : delegate.clearTimeout) || clearTimeout)(handle6);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError)
      onUnhandledError(err);
    else
      throw err;
  });
}

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop3() {
}

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot && (context = { errorThrown: !1, error: null }), cb(), isRoot) {
      var _a2 = context, errorThrown = _a2.errorThrown, error = _a2.error;
      if (context = null, errorThrown)
        throw error;
    }
  } else
    cb();
}
function captureError(err) {
  config.useDeprecatedSynchronousErrorHandling && context && (context.errorThrown = !0, context.error = err);
}

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    return _this.isStopped = !1, destination ? (_this.destination = destination, isSubscription(destination) && destination.add(_this)) : _this.destination = EMPTY_OBSERVER, _this;
  }
  return Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  }, Subscriber2.prototype.next = function(value) {
    this.isStopped ? handleStoppedNotification(nextNotification(value), this) : this._next(value);
  }, Subscriber2.prototype.error = function(err) {
    this.isStopped ? handleStoppedNotification(errorNotification(err), this) : (this.isStopped = !0, this._error(err));
  }, Subscriber2.prototype.complete = function() {
    this.isStopped ? handleStoppedNotification(COMPLETE_NOTIFICATION, this) : (this.isStopped = !0, this._complete());
  }, Subscriber2.prototype.unsubscribe = function() {
    this.closed || (this.isStopped = !0, _super.prototype.unsubscribe.call(this), this.destination = null);
  }, Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  }, Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  }, Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }, Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  return ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next)
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
  }, ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error)
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    else
      handleUnhandledError(err);
  }, ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete)
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
  }, ConsumerObserver2;
}(), SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this, partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext)
      partialObserver = {
        next: observerOrNext ?? void 0,
        error: error ?? void 0,
        complete: complete ?? void 0
      };
    else {
      var context_1;
      _this && config.useDeprecatedNextContext ? (context_1 = Object.create(observerOrNext), context_1.unsubscribe = function() {
        return _this.unsubscribe();
      }, partialObserver = {
        next: observerOrNext.next && bind(observerOrNext.next, context_1),
        error: observerOrNext.error && bind(observerOrNext.error, context_1),
        complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
      }) : partialObserver = observerOrNext;
    }
    return _this.destination = new ConsumerObserver(partialObserver), _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  config.useDeprecatedSynchronousErrorHandling ? captureError(error) : reportUnhandledError(error);
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: !0,
  next: noop3,
  error: defaultErrorHandler,
  complete: noop3
};

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable2 = function() {
  return typeof Symbol == "function" && Symbol.observable || "@@observable";
}();

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity2(x5) {
  return x5;
}

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  return fns.length === 0 ? identity2 : fns.length === 1 ? fns[0] : function(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    subscribe && (this._subscribe = subscribe);
  }
  return Observable2.prototype.lift = function(operator) {
    var observable3 = new Observable2();
    return observable3.source = this, observable3.operator = operator, observable3;
  }, Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this, subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    return errorContext(function() {
      var _a2 = _this, operator = _a2.operator, source = _a2.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    }), subscriber;
  }, Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  }, Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    return promiseCtor = getPromiseCtor(promiseCtor), new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err), subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  }, Observable2.prototype._subscribe = function(subscriber) {
    var _a2;
    return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
  }, Observable2.prototype[observable2] = function() {
    return this;
  }, Observable2.prototype.pipe = function() {
    for (var operations = [], _i = 0; _i < arguments.length; _i++)
      operations[_i] = arguments[_i];
    return pipeFromArray(operations)(this);
  }, Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    return promiseCtor = getPromiseCtor(promiseCtor), new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x5) {
        return value = x5;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  }, Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  }, Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a2;
  return (_a2 = promiseCtor ?? config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction(source == null ? void 0 : source.lift);
}
function operate(init) {
  return function(source) {
    if (hasLift(source))
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    return _this.onFinalize = onFinalize, _this.shouldUnsubscribe = shouldUnsubscribe, _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next, _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error, _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete, _this;
  }
  return OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a2;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this), !closed_1 && ((_a2 = this.onFinalize) === null || _a2 === void 0 || _a2.call(this));
    }
  }, OperatorSubscriber2;
}(Subscriber);

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var EmptyError = createErrorClass(function(_super) {
  return function() {
    _super(this), this.name = "EmptyError", this.message = "no elements in sequence";
  };
});

// node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
function lastValueFrom(source, config2) {
  var hasConfig = typeof config2 == "object";
  return new Promise(function(resolve, reject) {
    var _hasValue = !1, _value;
    source.subscribe({
      next: function(value) {
        _value = value, _hasValue = !0;
      },
      error: reject,
      complete: function() {
        _hasValue ? resolve(_value) : hasConfig ? resolve(config2.defaultValue) : reject(new EmptyError());
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/map.js
function map2(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}

// node_modules/@sanity/client/dist/index.browser.js
var import_eventsource = __toESM(require_browser2(), 1), envMiddleware = [], ClientError = class extends Error {
  constructor(res) {
    let props = extractErrorProps(res);
    super(props.message), this.statusCode = 400, Object.assign(this, props);
  }
}, ServerError = class extends Error {
  constructor(res) {
    let props = extractErrorProps(res);
    super(props.message), this.statusCode = 500, Object.assign(this, props);
  }
};
function extractErrorProps(res) {
  let body = res.body, props = {
    response: res,
    statusCode: res.statusCode,
    responseBody: stringifyBody(body, res),
    message: "",
    details: void 0
  };
  return body.error && body.message ? (props.message = "".concat(body.error, " - ").concat(body.message), props) : body.error && body.error.description ? (props.message = body.error.description, props.details = body.error, props) : (props.message = body.error || body.message || httpErrorMessage(res), props);
}
function httpErrorMessage(res) {
  let statusMessage2 = res.statusMessage ? " ".concat(res.statusMessage) : "";
  return "".concat(res.method, "-request to ").concat(res.url, " resulted in HTTP ").concat(res.statusCode).concat(statusMessage2);
}
function stringifyBody(body, res) {
  return (res.headers["content-type"] || "").toLowerCase().indexOf("application/json") !== -1 ? JSON.stringify(body, null, 2) : body;
}
var httpError = {
  onResponse: (res) => {
    if (res.statusCode >= 500)
      throw new ServerError(res);
    if (res.statusCode >= 400)
      throw new ClientError(res);
    return res;
  }
}, printWarnings = {
  onResponse: (res) => {
    let warn = res.headers["x-sanity-warning"];
    return (Array.isArray(warn) ? warn : [warn]).filter(Boolean).forEach((msg) => console.warn(msg)), res;
  }
};
function defineHttpRequest(envMiddleware2) {
  let request = getIt([...envMiddleware2, printWarnings, jsonRequest(), jsonResponse(), progress(), httpError, observable({
    implementation: Observable
  })]);
  function httpRequest2(options) {
    return (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : request)({
      maxRedirects: 0,
      ...options
    });
  }
  return httpRequest2.defaultRequester = request, httpRequest2;
}
var projectHeader = "X-Sanity-Project-ID";
function requestOptions(config2) {
  let overrides = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, headers = {}, token = overrides.token || config2.token;
  token && (headers.Authorization = "Bearer ".concat(token)), !overrides.useGlobalApi && !config2.useProjectHostname && config2.projectId && (headers[projectHeader] = config2.projectId);
  let withCredentials = Boolean(typeof overrides.withCredentials > "u" ? config2.token || config2.withCredentials : overrides.withCredentials), timeout2 = typeof overrides.timeout > "u" ? config2.timeout : overrides.timeout;
  return Object.assign({}, overrides, {
    headers: Object.assign({}, headers, overrides.headers || {}),
    timeout: typeof timeout2 > "u" ? 5 * 60 * 1e3 : timeout2,
    proxy: overrides.proxy || config2.proxy,
    json: !0,
    withCredentials
  });
}
function getSelection(sel) {
  if (typeof sel == "string" || Array.isArray(sel))
    return {
      id: sel
    };
  if (typeof sel == "object" && sel !== null && "query" in sel && typeof sel.query == "string")
    return "params" in sel && typeof sel.params == "object" && sel.params !== null ? {
      query: sel.query,
      params: sel.params
    } : {
      query: sel.query
    };
  let selectionOpts = ["* Document ID (<docId>)", "* Array of document IDs", "* Object containing `query`"].join(`
`);
  throw new Error(`Unknown selection - must be one of:

`.concat(selectionOpts));
}
var VALID_ASSET_TYPES = ["image", "file"], VALID_INSERT_LOCATIONS = ["before", "after", "replace"], dataset = (name) => {
  if (!/^(~[a-z0-9]{1}[-\w]{0,63}|[a-z0-9]{1}[-\w]{0,63})$/.test(name))
    throw new Error("Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters");
}, projectId = (id) => {
  if (!/^[-a-z0-9]+$/i.test(id))
    throw new Error("`projectId` can only contain only a-z, 0-9 and dashes");
}, validateAssetType = (type) => {
  if (VALID_ASSET_TYPES.indexOf(type) === -1)
    throw new Error("Invalid asset type: ".concat(type, ". Must be one of ").concat(VALID_ASSET_TYPES.join(", ")));
}, validateObject = (op, val) => {
  if (val === null || typeof val != "object" || Array.isArray(val))
    throw new Error("".concat(op, "() takes an object of properties"));
}, validateDocumentId = (op, id) => {
  if (typeof id != "string" || !/^[a-z0-9_.-]+$/i.test(id))
    throw new Error("".concat(op, '(): "').concat(id, '" is not a valid document ID'));
}, requireDocumentId = (op, doc) => {
  if (!doc._id)
    throw new Error("".concat(op, '() requires that the document contains an ID ("_id" property)'));
  validateDocumentId(op, doc._id);
}, validateInsert = (at2, selector, items) => {
  let signature = "insert(at, selector, items)";
  if (VALID_INSERT_LOCATIONS.indexOf(at2) === -1) {
    let valid = VALID_INSERT_LOCATIONS.map((loc) => '"'.concat(loc, '"')).join(", ");
    throw new Error("".concat(signature, ' takes an "at"-argument which is one of: ').concat(valid));
  }
  if (typeof selector != "string")
    throw new Error("".concat(signature, ' takes a "selector"-argument which must be a string'));
  if (!Array.isArray(items))
    throw new Error("".concat(signature, ' takes an "items"-argument which must be an array'));
}, hasDataset = (config2) => {
  if (!config2.dataset)
    throw new Error("`dataset` must be provided to perform queries");
  return config2.dataset || "";
}, requestTag = (tag) => {
  if (typeof tag != "string" || !/^[a-z0-9._-]{1,75}$/i.test(tag))
    throw new Error("Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.");
  return tag;
}, encodeQueryString = (_ref) => {
  let {
    query: query2,
    params = {},
    options = {}
  } = _ref, searchParams = new URLSearchParams(), {
    tag,
    ...opts
  } = options;
  tag && searchParams.set("tag", tag), searchParams.set("query", query2);
  for (let [key, value] of Object.entries(params))
    searchParams.set("$".concat(key), JSON.stringify(value));
  for (let [key, value] of Object.entries(opts))
    value && searchParams.set(key, "".concat(value));
  return "?".concat(searchParams);
}, __accessCheck$6 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$6 = (obj, member, getter) => (__accessCheck$6(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$6 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$6 = (obj, member, value, setter) => (__accessCheck$6(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$5, _client2$5, BasePatch = class {
  constructor(selection) {
    let operations = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.selection = selection, this.operations = operations;
  }
  set(attrs) {
    return this._assign("set", attrs);
  }
  setIfMissing(attrs) {
    return this._assign("setIfMissing", attrs);
  }
  diffMatchPatch(attrs) {
    return validateObject("diffMatchPatch", attrs), this._assign("diffMatchPatch", attrs);
  }
  unset(attrs) {
    if (!Array.isArray(attrs))
      throw new Error("unset(attrs) takes an array of attributes to unset, non-array given");
    return this.operations = Object.assign({}, this.operations, {
      unset: attrs
    }), this;
  }
  inc(attrs) {
    return this._assign("inc", attrs);
  }
  dec(attrs) {
    return this._assign("dec", attrs);
  }
  insert(at2, selector, items) {
    return validateInsert(at2, selector, items), this._assign("insert", {
      [at2]: selector,
      items
    });
  }
  append(selector, items) {
    return this.insert("after", "".concat(selector, "[-1]"), items);
  }
  prepend(selector, items) {
    return this.insert("before", "".concat(selector, "[0]"), items);
  }
  splice(selector, start, deleteCount, items) {
    let delAll = typeof deleteCount > "u" || deleteCount === -1, startIndex = start < 0 ? start - 1 : start, delCount = delAll ? -1 : Math.max(0, start + deleteCount), delRange = startIndex < 0 && delCount >= 0 ? "" : delCount, rangeSelector = "".concat(selector, "[").concat(startIndex, ":").concat(delRange, "]");
    return this.insert("replace", rangeSelector, items || []);
  }
  ifRevisionId(rev) {
    return this.operations.ifRevisionID = rev, this;
  }
  serialize() {
    return {
      ...getSelection(this.selection),
      ...this.operations
    };
  }
  toJSON() {
    return this.serialize();
  }
  reset() {
    return this.operations = {}, this;
  }
  _assign(op, props) {
    let merge = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    return validateObject(op, props), this.operations = Object.assign({}, this.operations, {
      [op]: Object.assign({}, merge && this.operations[op] || {}, props)
    }), this;
  }
  _set(op, props) {
    return this._assign(op, props, !1);
  }
}, _ObservablePatch = class extends BasePatch {
  constructor(selection, operations, client) {
    super(selection, operations), __privateAdd$6(this, _client$5, void 0), __privateSet$6(this, _client$5, client);
  }
  clone() {
    return new _ObservablePatch(this.selection, {
      ...this.operations
    }, __privateGet$6(this, _client$5));
  }
  commit(options) {
    if (!__privateGet$6(this, _client$5))
      throw new Error("No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method");
    let returnFirst = typeof this.selection == "string", opts = Object.assign({
      returnFirst,
      returnDocuments: !0
    }, options);
    return __privateGet$6(this, _client$5).mutate({
      patch: this.serialize()
    }, opts);
  }
}, ObservablePatch = _ObservablePatch;
_client$5 = /* @__PURE__ */ new WeakMap();
var _Patch = class extends BasePatch {
  constructor(selection, operations, client) {
    super(selection, operations), __privateAdd$6(this, _client2$5, void 0), __privateSet$6(this, _client2$5, client);
  }
  clone() {
    return new _Patch(this.selection, {
      ...this.operations
    }, __privateGet$6(this, _client2$5));
  }
  commit(options) {
    if (!__privateGet$6(this, _client2$5))
      throw new Error("No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method");
    let returnFirst = typeof this.selection == "string", opts = Object.assign({
      returnFirst,
      returnDocuments: !0
    }, options);
    return __privateGet$6(this, _client2$5).mutate({
      patch: this.serialize()
    }, opts);
  }
}, Patch = _Patch;
_client2$5 = /* @__PURE__ */ new WeakMap();
var __accessCheck$5 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$5 = (obj, member, getter) => (__accessCheck$5(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$5 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$5 = (obj, member, value, setter) => (__accessCheck$5(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$4, _client2$4, defaultMutateOptions = {
  returnDocuments: !1
}, BaseTransaction = class {
  constructor() {
    let operations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], transactionId = arguments.length > 1 ? arguments[1] : void 0;
    this.operations = operations, this.trxId = transactionId;
  }
  create(doc) {
    return validateObject("create", doc), this._add({
      create: doc
    });
  }
  createIfNotExists(doc) {
    let op = "createIfNotExists";
    return validateObject(op, doc), requireDocumentId(op, doc), this._add({
      [op]: doc
    });
  }
  createOrReplace(doc) {
    let op = "createOrReplace";
    return validateObject(op, doc), requireDocumentId(op, doc), this._add({
      [op]: doc
    });
  }
  delete(documentId) {
    return validateDocumentId("delete", documentId), this._add({
      delete: {
        id: documentId
      }
    });
  }
  transactionId(id) {
    return id ? (this.trxId = id, this) : this.trxId;
  }
  serialize() {
    return [...this.operations];
  }
  toJSON() {
    return this.serialize();
  }
  reset() {
    return this.operations = [], this;
  }
  _add(mut) {
    return this.operations.push(mut), this;
  }
}, _Transaction = class extends BaseTransaction {
  constructor(operations, client, transactionId) {
    super(operations, transactionId), __privateAdd$5(this, _client$4, void 0), __privateSet$5(this, _client$4, client);
  }
  clone() {
    return new _Transaction([...this.operations], __privateGet$5(this, _client$4), this.trxId);
  }
  commit(options) {
    if (!__privateGet$5(this, _client$4))
      throw new Error("No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method");
    return __privateGet$5(this, _client$4).mutate(this.serialize(), Object.assign({
      transactionId: this.trxId
    }, defaultMutateOptions, options || {}));
  }
  patch(patchOrDocumentId, patchOps) {
    let isBuilder = typeof patchOps == "function";
    if (typeof patchOrDocumentId != "string" && patchOrDocumentId instanceof Patch)
      return this._add({
        patch: patchOrDocumentId.serialize()
      });
    if (isBuilder) {
      let patch = patchOps(new Patch(patchOrDocumentId, {}, __privateGet$5(this, _client$4)));
      if (!(patch instanceof Patch))
        throw new Error("function passed to `patch()` must return the patch");
      return this._add({
        patch: patch.serialize()
      });
    }
    return this._add({
      patch: {
        id: patchOrDocumentId,
        ...patchOps
      }
    });
  }
}, Transaction = _Transaction;
_client$4 = /* @__PURE__ */ new WeakMap();
var _ObservableTransaction = class extends BaseTransaction {
  constructor(operations, client, transactionId) {
    super(operations, transactionId), __privateAdd$5(this, _client2$4, void 0), __privateSet$5(this, _client2$4, client);
  }
  clone() {
    return new _ObservableTransaction([...this.operations], __privateGet$5(this, _client2$4), this.trxId);
  }
  commit(options) {
    if (!__privateGet$5(this, _client2$4))
      throw new Error("No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method");
    return __privateGet$5(this, _client2$4).mutate(this.serialize(), Object.assign({
      transactionId: this.trxId
    }, defaultMutateOptions, options || {}));
  }
  patch(patchOrDocumentId, patchOps) {
    let isBuilder = typeof patchOps == "function";
    if (typeof patchOrDocumentId != "string" && patchOrDocumentId instanceof ObservablePatch)
      return this._add({
        patch: patchOrDocumentId.serialize()
      });
    if (isBuilder) {
      let patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, __privateGet$5(this, _client2$4)));
      if (!(patch instanceof ObservablePatch))
        throw new Error("function passed to `patch()` must return the patch");
      return this._add({
        patch: patch.serialize()
      });
    }
    return this._add({
      patch: {
        id: patchOrDocumentId,
        ...patchOps
      }
    });
  }
}, ObservableTransaction = _ObservableTransaction;
_client2$4 = /* @__PURE__ */ new WeakMap();
var excludeFalsey = (param, defValue) => param === !1 ? void 0 : typeof param > "u" ? defValue : param, getMutationQuery = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    dryRun: options.dryRun,
    returnIds: !0,
    returnDocuments: excludeFalsey(options.returnDocuments, !0),
    visibility: options.visibility || "sync",
    autoGenerateArrayKeys: options.autoGenerateArrayKeys,
    skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation
  };
}, isResponse3 = (event2) => event2.type === "response", getBody = (event2) => event2.body, indexBy = (docs, attr) => docs.reduce((indexed, doc) => (indexed[attr(doc)] = doc, indexed), /* @__PURE__ */ Object.create(null)), getQuerySizeLimit = 11264;
function _fetch(client, httpRequest2, query2, params) {
  let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, mapResponse = options.filterResponse === !1 ? (res) => res : (res) => res.result;
  return _dataRequest(client, httpRequest2, "query", {
    query: query2,
    params
  }, options).pipe(map2(mapResponse));
}
function _getDocument(client, httpRequest2, id) {
  let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, options = {
    uri: _getDataUrl(client, "doc", id),
    json: !0,
    tag: opts.tag
  };
  return _requestObservable(client, httpRequest2, options).pipe(filter(isResponse3), map2((event2) => event2.body.documents && event2.body.documents[0]));
}
function _getDocuments(client, httpRequest2, ids) {
  let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, options = {
    uri: _getDataUrl(client, "doc", ids.join(",")),
    json: !0,
    tag: opts.tag
  };
  return _requestObservable(client, httpRequest2, options).pipe(filter(isResponse3), map2((event2) => {
    let indexed = indexBy(event2.body.documents || [], (doc) => doc._id);
    return ids.map((id) => indexed[id] || null);
  }));
}
function _createIfNotExists(client, httpRequest2, doc, options) {
  return requireDocumentId("createIfNotExists", doc), _create(client, httpRequest2, doc, "createIfNotExists", options);
}
function _createOrReplace(client, httpRequest2, doc, options) {
  return requireDocumentId("createOrReplace", doc), _create(client, httpRequest2, doc, "createOrReplace", options);
}
function _delete(client, httpRequest2, selection, options) {
  return _dataRequest(client, httpRequest2, "mutate", {
    mutations: [{
      delete: getSelection(selection)
    }]
  }, options);
}
function _mutate(client, httpRequest2, mutations, options) {
  let mut = mutations instanceof Patch || mutations instanceof ObservablePatch || mutations instanceof Transaction || mutations instanceof ObservableTransaction ? mutations.serialize() : mutations, muts = Array.isArray(mut) ? mut : [mut], transactionId = options && options.transactionId;
  return _dataRequest(client, httpRequest2, "mutate", {
    mutations: muts,
    transactionId
  }, options);
}
function _dataRequest(client, httpRequest2, endpoint, body) {
  let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, isMutation = endpoint === "mutate", isQuery = endpoint === "query", strQuery = isMutation ? "" : encodeQueryString(body), useGet = !isMutation && strQuery.length < getQuerySizeLimit, stringQuery = useGet ? strQuery : "", returnFirst = options.returnFirst, {
    timeout: timeout2,
    token,
    tag,
    headers
  } = options, uri = _getDataUrl(client, endpoint, stringQuery), reqOptions = {
    method: useGet ? "GET" : "POST",
    uri,
    json: !0,
    body: useGet ? void 0 : body,
    query: isMutation && getMutationQuery(options),
    timeout: timeout2,
    headers,
    token,
    tag,
    canUseCdn: isQuery,
    signal: options.signal
  };
  return _requestObservable(client, httpRequest2, reqOptions).pipe(filter(isResponse3), map2(getBody), map2((res) => {
    if (!isMutation)
      return res;
    let results = res.results || [];
    if (options.returnDocuments)
      return returnFirst ? results[0] && results[0].document : results.map((mut) => mut.document);
    let key = returnFirst ? "documentId" : "documentIds", ids = returnFirst ? results[0] && results[0].id : results.map((mut) => mut.id);
    return {
      transactionId: res.transactionId,
      results,
      [key]: ids
    };
  }));
}
function _create(client, httpRequest2, doc, op) {
  let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, mutation = {
    [op]: doc
  }, opts = Object.assign({
    returnFirst: !0,
    returnDocuments: !0
  }, options);
  return _dataRequest(client, httpRequest2, "mutate", {
    mutations: [mutation]
  }, opts);
}
function _requestObservable(client, httpRequest2, options) {
  let uri = options.url || options.uri, config2 = client.config(), canUseCdn = typeof options.canUseCdn > "u" ? ["GET", "HEAD"].indexOf(options.method || "GET") >= 0 && uri.indexOf("/data/") === 0 : options.canUseCdn, useCdn = config2.useCdn && canUseCdn, tag = options.tag && config2.requestTagPrefix ? [config2.requestTagPrefix, options.tag].join(".") : options.tag || config2.requestTagPrefix;
  tag && (options.query = {
    tag: requestTag(tag),
    ...options.query
  });
  let reqOptions = requestOptions(config2, Object.assign({}, options, {
    url: _getUrl(client, uri, useCdn)
  })), request = new Observable((subscriber) => httpRequest2(reqOptions, config2.requester).subscribe(subscriber));
  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;
}
function _request(client, httpRequest2, options) {
  return _requestObservable(client, httpRequest2, options).pipe(filter((event2) => event2.type === "response"), map2((event2) => event2.body));
}
function _getDataUrl(client, operation, path2) {
  let config2 = client.config(), catalog = hasDataset(config2), baseUri = "/".concat(operation, "/").concat(catalog), uri = path2 ? "".concat(baseUri, "/").concat(path2) : baseUri;
  return "/data".concat(uri).replace(/\/($|\?)/, "$1");
}
function _getUrl(client, uri) {
  let canUseCdn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, {
    url,
    cdnUrl: cdnUrl2
  } = client.config(), base = canUseCdn ? cdnUrl2 : url;
  return "".concat(base, "/").concat(uri.replace(/^\//, ""));
}
function _withAbortSignal(signal) {
  return (input) => new Observable((observer) => {
    let abort = () => observer.error(_createAbortError(signal));
    if (signal && signal.aborted) {
      abort();
      return;
    }
    let subscription = input.subscribe(observer);
    return signal.addEventListener("abort", abort), () => {
      signal.removeEventListener("abort", abort), subscription.unsubscribe();
    };
  });
}
var isDomExceptionSupported = Boolean(globalThis.DOMException);
function _createAbortError(signal) {
  var _a2, _b;
  if (isDomExceptionSupported)
    return new DOMException((_a2 = signal == null ? void 0 : signal.reason) != null ? _a2 : "The operation was aborted.", "AbortError");
  let error = new Error((_b = signal == null ? void 0 : signal.reason) != null ? _b : "The operation was aborted.");
  return error.name = "AbortError", error;
}
var __accessCheck$4 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$4 = (obj, member, getter) => (__accessCheck$4(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$4 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$4 = (obj, member, value, setter) => (__accessCheck$4(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$3, _httpRequest$4, _client2$3, _httpRequest2$4, ObservableAssetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$4(this, _client$3, void 0), __privateAdd$4(this, _httpRequest$4, void 0), __privateSet$4(this, _client$3, client), __privateSet$4(this, _httpRequest$4, httpRequest2);
  }
  upload(assetType, body, options) {
    return _upload(__privateGet$4(this, _client$3), __privateGet$4(this, _httpRequest$4), assetType, body, options);
  }
};
_client$3 = /* @__PURE__ */ new WeakMap();
_httpRequest$4 = /* @__PURE__ */ new WeakMap();
var AssetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$4(this, _client2$3, void 0), __privateAdd$4(this, _httpRequest2$4, void 0), __privateSet$4(this, _client2$3, client), __privateSet$4(this, _httpRequest2$4, httpRequest2);
  }
  upload(assetType, body, options) {
    let observable3 = _upload(__privateGet$4(this, _client2$3), __privateGet$4(this, _httpRequest2$4), assetType, body, options);
    return lastValueFrom(observable3.pipe(filter((event2) => event2.type === "response"), map2((event2) => event2.body.document)));
  }
};
_client2$3 = /* @__PURE__ */ new WeakMap();
_httpRequest2$4 = /* @__PURE__ */ new WeakMap();
function _upload(client, httpRequest2, assetType, body) {
  let opts = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
  validateAssetType(assetType);
  let meta5 = opts.extract || void 0;
  meta5 && !meta5.length && (meta5 = ["none"]);
  let dataset2 = hasDataset(client.config()), assetEndpoint = assetType === "image" ? "images" : "files", options = optionsFromFile(opts, body), {
    tag,
    label,
    title,
    description,
    creditLine,
    filename,
    source
  } = options, query2 = {
    label,
    title,
    description,
    filename,
    meta: meta5,
    creditLine
  };
  return source && (query2.sourceId = source.id, query2.sourceName = source.name, query2.sourceUrl = source.url), _requestObservable(client, httpRequest2, {
    tag,
    method: "POST",
    timeout: options.timeout || 0,
    uri: "/assets/".concat(assetEndpoint, "/").concat(dataset2),
    headers: options.contentType ? {
      "Content-Type": options.contentType
    } : {},
    query: query2,
    body
  });
}
function optionsFromFile(opts, file) {
  return typeof window > "u" || !(file instanceof window.File) ? opts : Object.assign({
    filename: opts.preserveFilename === !1 ? void 0 : file.name,
    contentType: file.type
  }, opts);
}
var BASE_URL = "https://www.sanity.io/help/";
function generateHelpUrl(slug) {
  return BASE_URL + slug;
}
function once(fn) {
  let didCall = !1, returnValue;
  return function() {
    return didCall || (returnValue = fn(...arguments), didCall = !0), returnValue;
  };
}
var createWarningPrinter = (message) => once(function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
    args[_key] = arguments[_key];
  return console.warn(message.join(" "), ...args);
}), printCdnWarning = createWarningPrinter(["You are not using the Sanity CDN. That means your data is always fresh, but the CDN is faster and", "cheaper. Think about it! For more info, see ".concat(generateHelpUrl("js-client-cdn-configuration"), " "), "To hide this warning, please set the `useCdn` option to either `true` or `false` when creating", "the client."]), printBrowserTokenWarning = createWarningPrinter(["You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.", "See ".concat(generateHelpUrl("js-client-browser-token"), " for more information and how to hide this warning.")]), printNoApiVersionSpecifiedWarning = createWarningPrinter(["Using the Sanity client without specifying an API version is deprecated.", "See ".concat(generateHelpUrl("js-client-api-version"))]), printNoDefaultExport = createWarningPrinter(["The default export of @sanity/client has been deprecated. Use the named export `createClient` instead"]), defaultCdnHost = "apicdn.sanity.io", defaultConfig = {
  apiHost: "https://api.sanity.io",
  apiVersion: "1",
  useProjectHostname: !0
}, LOCALHOSTS = ["localhost", "127.0.0.1", "0.0.0.0"], isLocal = (host) => LOCALHOSTS.indexOf(host) !== -1, validateApiVersion = function(apiVersion) {
  if (apiVersion === "1" || apiVersion === "X")
    return;
  let apiDate = new Date(apiVersion);
  if (!(/^\d{4}-\d{2}-\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0))
    throw new Error("Invalid API version string, expected `1` or date in format `YYYY-MM-DD`");
}, initConfig = (config2, prevConfig) => {
  let specifiedConfig = Object.assign({}, prevConfig, config2);
  specifiedConfig.apiVersion || printNoApiVersionSpecifiedWarning();
  let newConfig = Object.assign({}, defaultConfig, specifiedConfig), projectBased = newConfig.useProjectHostname;
  if (typeof Promise > "u") {
    let helpUrl = generateHelpUrl("js-client-promise-polyfill");
    throw new Error("No native Promise-implementation found, polyfill needed - see ".concat(helpUrl));
  }
  if (projectBased && !newConfig.projectId)
    throw new Error("Configuration must contain `projectId`");
  let isBrowser4 = typeof window < "u" && window.location && window.location.hostname, isLocalhost = isBrowser4 && isLocal(window.location.hostname);
  isBrowser4 && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== !0 ? printBrowserTokenWarning() : typeof newConfig.useCdn > "u" && printCdnWarning(), projectBased && projectId(newConfig.projectId), newConfig.dataset && dataset(newConfig.dataset), "requestTagPrefix" in newConfig && (newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\.+$/, "") : void 0), newConfig.apiVersion = "".concat(newConfig.apiVersion).replace(/^v/, ""), newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost, newConfig.useCdn = Boolean(newConfig.useCdn) && !newConfig.withCredentials, validateApiVersion(newConfig.apiVersion);
  let hostParts = newConfig.apiHost.split("://", 2), protocol = hostParts[0], host = hostParts[1], cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;
  return newConfig.useProjectHostname ? (newConfig.url = "".concat(protocol, "://").concat(newConfig.projectId, ".").concat(host, "/v").concat(newConfig.apiVersion), newConfig.cdnUrl = "".concat(protocol, "://").concat(newConfig.projectId, ".").concat(cdnHost, "/v").concat(newConfig.apiVersion)) : (newConfig.url = "".concat(newConfig.apiHost, "/v").concat(newConfig.apiVersion), newConfig.cdnUrl = newConfig.url), newConfig;
}, defaults = (obj, defaults2) => Object.keys(defaults2).concat(Object.keys(obj)).reduce((target, prop) => (target[prop] = typeof obj[prop] > "u" ? defaults2[prop] : obj[prop], target), {}), pick = (obj, props) => props.reduce((selection, prop) => (typeof obj[prop] > "u" || (selection[prop] = obj[prop]), selection), {}), MAX_URL_LENGTH = 16e3 - 1200, EventSource = import_eventsource.default, possibleOptions = ["includePreviousRevision", "includeResult", "visibility", "effectFormat", "tag"], defaultOptions2 = {
  includeResult: !0
};
function _listen(query2, params) {
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, {
    url,
    token,
    withCredentials,
    requestTagPrefix
  } = this.config(), tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join(".") : opts.tag, options = {
    ...defaults(opts, defaultOptions2),
    tag
  }, listenOpts = pick(options, possibleOptions), qs = encodeQueryString({
    query: query2,
    params,
    options: {
      tag,
      ...listenOpts
    }
  }), uri = "".concat(url).concat(_getDataUrl(this, "listen", qs));
  if (uri.length > MAX_URL_LENGTH)
    return new Observable((observer) => observer.error(new Error("Query too large for listener")));
  let listenFor = options.events ? options.events : ["mutation"], shouldEmitReconnect = listenFor.indexOf("reconnect") !== -1, esOptions = {};
  return (token || withCredentials) && (esOptions.withCredentials = !0), token && (esOptions.headers = {
    Authorization: "Bearer ".concat(token)
  }), new Observable((observer) => {
    let es = getEventSource(), reconnectTimer, stopped = !1;
    function onError() {
      stopped || (emitReconnect(), !stopped && es.readyState === EventSource.CLOSED && (unsubscribe(), clearTimeout(reconnectTimer), reconnectTimer = setTimeout(open, 100)));
    }
    function onChannelError(err) {
      observer.error(cooerceError(err));
    }
    function onMessage(evt) {
      let event2 = parseEvent(evt);
      return event2 instanceof Error ? observer.error(event2) : observer.next(event2);
    }
    function onDisconnect() {
      stopped = !0, unsubscribe(), observer.complete();
    }
    function unsubscribe() {
      es.removeEventListener("error", onError, !1), es.removeEventListener("channelError", onChannelError, !1), es.removeEventListener("disconnect", onDisconnect, !1), listenFor.forEach((type) => es.removeEventListener(type, onMessage, !1)), es.close();
    }
    function emitReconnect() {
      shouldEmitReconnect && observer.next({
        type: "reconnect"
      });
    }
    function getEventSource() {
      let evs = new EventSource(uri, esOptions);
      return evs.addEventListener("error", onError, !1), evs.addEventListener("channelError", onChannelError, !1), evs.addEventListener("disconnect", onDisconnect, !1), listenFor.forEach((type) => evs.addEventListener(type, onMessage, !1)), evs;
    }
    function open() {
      es = getEventSource();
    }
    function stop() {
      stopped = !0, unsubscribe();
    }
    return stop;
  });
}
function parseEvent(event2) {
  try {
    let data = event2.data && JSON.parse(event2.data) || {};
    return Object.assign({
      type: event2.type
    }, data);
  } catch (err) {
    return err;
  }
}
function cooerceError(err) {
  if (err instanceof Error)
    return err;
  let evt = parseEvent(err);
  return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));
}
function extractErrorMessage(err) {
  return err.error ? err.error.description ? err.error.description : typeof err.error == "string" ? err.error : JSON.stringify(err.error, null, 2) : err.message || "Unknown listener error";
}
var __accessCheck$3 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$3 = (obj, member, getter) => (__accessCheck$3(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$3 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$3 = (obj, member, value, setter) => (__accessCheck$3(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$2, _httpRequest$3, _client2$2, _httpRequest2$3, ObservableDatasetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$3(this, _client$2, void 0), __privateAdd$3(this, _httpRequest$3, void 0), __privateSet$3(this, _client$2, client), __privateSet$3(this, _httpRequest$3, httpRequest2);
  }
  create(name, options) {
    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), "PUT", name, options);
  }
  edit(name, options) {
    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), "PATCH", name, options);
  }
  delete(name) {
    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), "DELETE", name);
  }
  list() {
    return _request(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), {
      uri: "/datasets"
    });
  }
};
_client$2 = /* @__PURE__ */ new WeakMap();
_httpRequest$3 = /* @__PURE__ */ new WeakMap();
var DatasetsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$3(this, _client2$2, void 0), __privateAdd$3(this, _httpRequest2$3, void 0), __privateSet$3(this, _client2$2, client), __privateSet$3(this, _httpRequest2$3, httpRequest2);
  }
  create(name, options) {
    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), "PUT", name, options));
  }
  edit(name, options) {
    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), "PATCH", name, options));
  }
  delete(name) {
    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), "DELETE", name));
  }
  list() {
    return lastValueFrom(_request(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), {
      uri: "/datasets"
    }));
  }
};
_client2$2 = /* @__PURE__ */ new WeakMap();
_httpRequest2$3 = /* @__PURE__ */ new WeakMap();
function _modify(client, httpRequest2, method, name, options) {
  return dataset(name), _request(client, httpRequest2, {
    method,
    uri: "/datasets/".concat(name),
    body: options
  });
}
var __accessCheck$2 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$2 = (obj, member, getter) => (__accessCheck$2(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$2 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$2 = (obj, member, value, setter) => (__accessCheck$2(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client$1, _httpRequest$2, _client2$1, _httpRequest2$2, ObservableProjectsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$2(this, _client$1, void 0), __privateAdd$2(this, _httpRequest$2, void 0), __privateSet$2(this, _client$1, client), __privateSet$2(this, _httpRequest$2, httpRequest2);
  }
  list() {
    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {
      uri: "/projects"
    });
  }
  getById(projectId2) {
    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {
      uri: "/projects/".concat(projectId2)
    });
  }
};
_client$1 = /* @__PURE__ */ new WeakMap();
_httpRequest$2 = /* @__PURE__ */ new WeakMap();
var ProjectsClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$2(this, _client2$1, void 0), __privateAdd$2(this, _httpRequest2$2, void 0), __privateSet$2(this, _client2$1, client), __privateSet$2(this, _httpRequest2$2, httpRequest2);
  }
  list() {
    return lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {
      uri: "/projects"
    }));
  }
  getById(projectId2) {
    return lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {
      uri: "/projects/".concat(projectId2)
    }));
  }
};
_client2$1 = /* @__PURE__ */ new WeakMap();
_httpRequest2$2 = /* @__PURE__ */ new WeakMap();
var __accessCheck$1 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet$1 = (obj, member, getter) => (__accessCheck$1(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd$1 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet$1 = (obj, member, value, setter) => (__accessCheck$1(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _client, _httpRequest$1, _client2, _httpRequest2$1, ObservableUsersClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$1(this, _client, void 0), __privateAdd$1(this, _httpRequest$1, void 0), __privateSet$1(this, _client, client), __privateSet$1(this, _httpRequest$1, httpRequest2);
  }
  getById(id) {
    return _request(__privateGet$1(this, _client), __privateGet$1(this, _httpRequest$1), {
      uri: "/users/".concat(id)
    });
  }
};
_client = /* @__PURE__ */ new WeakMap();
_httpRequest$1 = /* @__PURE__ */ new WeakMap();
var UsersClient = class {
  constructor(client, httpRequest2) {
    __privateAdd$1(this, _client2, void 0), __privateAdd$1(this, _httpRequest2$1, void 0), __privateSet$1(this, _client2, client), __privateSet$1(this, _httpRequest2$1, httpRequest2);
  }
  getById(id) {
    return lastValueFrom(_request(__privateGet$1(this, _client2), __privateGet$1(this, _httpRequest2$1), {
      uri: "/users/".concat(id)
    }));
  }
};
_client2 = /* @__PURE__ */ new WeakMap();
_httpRequest2$1 = /* @__PURE__ */ new WeakMap();
var __accessCheck3 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
}, __privateGet3 = (obj, member, getter) => (__accessCheck3(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), __privateAdd3 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
}, __privateSet3 = (obj, member, value, setter) => (__accessCheck3(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), _clientConfig, _httpRequest, _clientConfig2, _httpRequest2, _ObservableSanityClient = class {
  constructor(httpRequest2) {
    let config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultConfig;
    __privateAdd3(this, _clientConfig, void 0), __privateAdd3(this, _httpRequest, void 0), this.listen = _listen, this.config(config2), __privateSet3(this, _httpRequest, httpRequest2), this.assets = new ObservableAssetsClient(this, __privateGet3(this, _httpRequest)), this.datasets = new ObservableDatasetsClient(this, __privateGet3(this, _httpRequest)), this.projects = new ObservableProjectsClient(this, __privateGet3(this, _httpRequest)), this.users = new ObservableUsersClient(this, __privateGet3(this, _httpRequest));
  }
  clone() {
    return new _ObservableSanityClient(__privateGet3(this, _httpRequest), this.config());
  }
  config(newConfig) {
    if (newConfig === void 0)
      return {
        ...__privateGet3(this, _clientConfig)
      };
    if (__privateGet3(this, _clientConfig) && __privateGet3(this, _clientConfig).allowReconfigure === !1)
      throw new Error("Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client");
    return __privateSet3(this, _clientConfig, initConfig(newConfig, __privateGet3(this, _clientConfig) || {})), this;
  }
  withConfig(newConfig) {
    return new _ObservableSanityClient(__privateGet3(this, _httpRequest), {
      ...this.config(),
      ...newConfig
    });
  }
  fetch(query2, params) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return _fetch(this, __privateGet3(this, _httpRequest), query2, params, options);
  }
  getDocument(id, options) {
    return _getDocument(this, __privateGet3(this, _httpRequest), id, options);
  }
  getDocuments(ids, options) {
    return _getDocuments(this, __privateGet3(this, _httpRequest), ids, options);
  }
  create(document2, options) {
    return _create(this, __privateGet3(this, _httpRequest), document2, "create", options);
  }
  createIfNotExists(document2, options) {
    return _createIfNotExists(this, __privateGet3(this, _httpRequest), document2, options);
  }
  createOrReplace(document2, options) {
    return _createOrReplace(this, __privateGet3(this, _httpRequest), document2, options);
  }
  delete(selection, options) {
    return _delete(this, __privateGet3(this, _httpRequest), selection, options);
  }
  mutate(operations, options) {
    return _mutate(this, __privateGet3(this, _httpRequest), operations, options);
  }
  patch(documentId, operations) {
    return new ObservablePatch(documentId, operations, this);
  }
  transaction(operations) {
    return new ObservableTransaction(operations, this);
  }
  request(options) {
    return _request(this, __privateGet3(this, _httpRequest), options);
  }
  getUrl(uri, canUseCdn) {
    return _getUrl(this, uri, canUseCdn);
  }
  getDataUrl(operation, path2) {
    return _getDataUrl(this, operation, path2);
  }
}, ObservableSanityClient = _ObservableSanityClient;
_clientConfig = /* @__PURE__ */ new WeakMap();
_httpRequest = /* @__PURE__ */ new WeakMap();
var _SanityClient = class {
  constructor(httpRequest2) {
    let config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultConfig;
    __privateAdd3(this, _clientConfig2, void 0), __privateAdd3(this, _httpRequest2, void 0), this.listen = _listen, this.config(config2), __privateSet3(this, _httpRequest2, httpRequest2), this.assets = new AssetsClient(this, __privateGet3(this, _httpRequest2)), this.datasets = new DatasetsClient(this, __privateGet3(this, _httpRequest2)), this.projects = new ProjectsClient(this, __privateGet3(this, _httpRequest2)), this.users = new UsersClient(this, __privateGet3(this, _httpRequest2)), this.observable = new ObservableSanityClient(httpRequest2, config2);
  }
  clone() {
    return new _SanityClient(__privateGet3(this, _httpRequest2), this.config());
  }
  config(newConfig) {
    if (newConfig === void 0)
      return {
        ...__privateGet3(this, _clientConfig2)
      };
    if (__privateGet3(this, _clientConfig2) && __privateGet3(this, _clientConfig2).allowReconfigure === !1)
      throw new Error("Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client");
    return this.observable && this.observable.config(newConfig), __privateSet3(this, _clientConfig2, initConfig(newConfig, __privateGet3(this, _clientConfig2) || {})), this;
  }
  withConfig(newConfig) {
    return new _SanityClient(__privateGet3(this, _httpRequest2), {
      ...this.config(),
      ...newConfig
    });
  }
  fetch(query2, params) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return lastValueFrom(_fetch(this, __privateGet3(this, _httpRequest2), query2, params, options));
  }
  getDocument(id, options) {
    return lastValueFrom(_getDocument(this, __privateGet3(this, _httpRequest2), id, options));
  }
  getDocuments(ids, options) {
    return lastValueFrom(_getDocuments(this, __privateGet3(this, _httpRequest2), ids, options));
  }
  create(document2, options) {
    return lastValueFrom(_create(this, __privateGet3(this, _httpRequest2), document2, "create", options));
  }
  createIfNotExists(document2, options) {
    return lastValueFrom(_createIfNotExists(this, __privateGet3(this, _httpRequest2), document2, options));
  }
  createOrReplace(document2, options) {
    return lastValueFrom(_createOrReplace(this, __privateGet3(this, _httpRequest2), document2, options));
  }
  delete(selection, options) {
    return lastValueFrom(_delete(this, __privateGet3(this, _httpRequest2), selection, options));
  }
  mutate(operations, options) {
    return lastValueFrom(_mutate(this, __privateGet3(this, _httpRequest2), operations, options));
  }
  patch(documentId, operations) {
    return new Patch(documentId, operations, this);
  }
  transaction(operations) {
    return new Transaction(operations, this);
  }
  request(options) {
    return lastValueFrom(_request(this, __privateGet3(this, _httpRequest2), options));
  }
  dataRequest(endpoint, body, options) {
    return lastValueFrom(_dataRequest(this, __privateGet3(this, _httpRequest2), endpoint, body, options));
  }
  getUrl(uri, canUseCdn) {
    return _getUrl(this, uri, canUseCdn);
  }
  getDataUrl(operation, path2) {
    return _getDataUrl(this, operation, path2);
  }
}, SanityClient = _SanityClient;
_clientConfig2 = /* @__PURE__ */ new WeakMap();
_httpRequest2 = /* @__PURE__ */ new WeakMap();
var httpRequest = defineHttpRequest(envMiddleware), requester = httpRequest.defaultRequester, createClient = (config2) => new SanityClient(httpRequest, config2);

// server-dev.ts
var server_dev_default = {
  async fetch(request, env, executionContext) {
    try {
      if (!(env != null && env.SESSION_SECRET))
        throw new Error("SESSION_SECRET environment variable is not set");
      let waitUntil = (p8) => executionContext.waitUntil(p8), [cache, session] = await Promise.all([
        caches.open("hydrogen"),
        HydrogenSession.init(request, [env.SESSION_SECRET])
      ]), { storefront } = rr({
        cache,
        waitUntil,
        buyerIp: A(request),
        i18n: getLocaleFromRequest(request),
        publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,
        privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,
        storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,
        storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || "2023-01",
        requestGroupId: request.headers.get("request-id")
      }), projectId2 = env.SANITY_PUBLIC_PROJECT_ID, dataset2 = env.SANITY_PUBLIC_DATASET, apiVersion = env.SANITY_PUBLIC_API_VERSION, sanityClient = createClient({
        projectId: projectId2,
        dataset: dataset2,
        apiVersion,
        useCdn: !0
      }), usePreview = definePreview({ projectId: projectId2, dataset: dataset2 }), sanityProjectDetails = {
        projectId: env.SANITY_PUBLIC_PROJECT_ID,
        dataset: env.SANITY_PUBLIC_DATASET,
        apiVersion: env.SANITY_PUBLIC_API_VERSION
      }, mailerLiteApi = env.MAILERLITE_API_KEY, response = await H({
        build: server_build_exports,
        mode: "development",
        getLoadContext: () => ({
          cache,
          session,
          waitUntil,
          storefront,
          env,
          sanityClient,
          usePreview,
          sanityProjectDetails,
          mailerLiteApi
        })
      })(request);
      return response.status === 404 ? ot({ request, response, storefront }) : response;
    } catch (error) {
      return console.error(error), new Response("An unexpected error occurred", { status: 500 });
    }
  }
};
export {
  server_dev_default as default
};
//# sourceMappingURL=index.js.map

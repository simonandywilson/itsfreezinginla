{
  "version": 3,
  "sources": ["../../../../app/routes/($lang)/account.tsx", "../../../../app/routes/($lang)/featured-products.tsx"],
  "sourcesContent": ["import {\n  Await,\n  Form,\n  Outlet,\n  useLoaderData,\n  useMatches,\n  useOutlet,\n} from '@remix-run/react';\nimport type {\n  Collection,\n  Customer,\n  MailingAddress,\n  Order,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {Suspense} from 'react';\nimport {\n  Button,\n  OrderCard,\n  PageHeader,\n  Text,\n  AccountDetails,\n  AccountAddressBook,\n  Modal,\n  ProductSwimlane,\n} from '~/components';\nimport {FeaturedCollections} from '~/components/FeaturedCollections';\nimport {\n  json,\n  defer,\n  redirect,\n  type LoaderArgs,\n  type AppLoadContext,\n} from '@shopify/remix-oxygen';\nimport {flattenConnection} from '@shopify/hydrogen';\nimport {getFeaturedData} from './featured-products';\nimport {doLogout} from './account/__private/logout';\nimport {usePrefixPathWithLocale} from '~/lib/utils';\n\n// Combining json + Response + defer in a loader breaks the\n// types returned by useLoaderData. This is a temporary fix.\ntype TmpRemixFix = ReturnType<typeof defer<{isAuthenticated: false}>>;\n\nexport async function loader({request, context, params}: LoaderArgs) {\n  const {pathname} = new URL(request.url);\n  const lang = params.lang;\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  const isAuthenticated = Boolean(customerAccessToken);\n  const loginPath = lang ? `/${lang}/account/login` : '/account/login';\n\n  if (!isAuthenticated) {\n    if (/\\/account\\/login$/.test(pathname)) {\n      return json({isAuthenticated}) as unknown as TmpRemixFix;\n    }\n\n    return redirect(loginPath) as unknown as TmpRemixFix;\n  }\n\n  const customer = await getCustomer(context, customerAccessToken);\n\n  const heading = customer\n    ? customer.firstName\n      ? `Welcome, ${customer.firstName}.`\n      : `Welcome to your account.`\n    : 'Account Details';\n\n  const orders = flattenConnection(customer.orders) as Order[];\n\n  return defer({\n    isAuthenticated,\n    customer,\n    heading,\n    orders,\n    addresses: flattenConnection(customer.addresses) as MailingAddress[],\n    featuredData: getFeaturedData(context.storefront),\n  });\n}\n\nexport default function Authenticated() {\n  const data = useLoaderData<typeof loader>();\n  const outlet = useOutlet();\n  const matches = useMatches();\n\n  // routes that export handle { renderInModal: true }\n  const renderOutletInModal = matches.some((match) => {\n    return match?.handle?.renderInModal;\n  });\n\n  // Public routes\n  if (!data.isAuthenticated) {\n    return <Outlet />;\n  }\n\n  // Authenticated routes\n  if (outlet) {\n    if (renderOutletInModal) {\n      return (\n        <>\n          <Modal cancelLink=\"/account\">\n            <Outlet context={{customer: data.customer}} />\n          </Modal>\n          <Account {...(data as Account)} />\n        </>\n      );\n    } else {\n      return <Outlet context={{customer: data.customer}} />;\n    }\n  }\n\n  return <Account {...(data as Account)} />;\n}\n\ninterface Account {\n  customer: Customer;\n  orders: Order[];\n  heading: string;\n  addresses: MailingAddress[];\n  featuredData: any; // @todo: help please\n}\n\nfunction Account({\n  customer,\n  orders,\n  heading,\n  addresses,\n  featuredData,\n}: Account) {\n  return (\n    <>\n      <PageHeader heading={heading}>\n        <Form method=\"post\" action={usePrefixPathWithLocale('/account/logout')}>\n          <button type=\"submit\" className=\"text-primary/50\">\n            Sign out\n          </button>\n        </Form>\n      </PageHeader>\n      {orders && <AccountOrderHistory orders={orders as Order[]} />}\n      <AccountDetails customer={customer as Customer} />\n      <AccountAddressBook\n        addresses={addresses as MailingAddress[]}\n        customer={customer as Customer}\n      />\n      {!orders.length && (\n        <Suspense>\n          <Await\n            resolve={featuredData}\n            errorElement=\"There was a problem loading featured products.\"\n          >\n            {(data) => (\n              <>\n                <FeaturedCollections\n                  title=\"Popular Collections\"\n                  collections={data.featuredCollections as Collection[]}\n                />\n                <ProductSwimlane products={data.featuredProducts} />\n              </>\n            )}\n          </Await>\n        </Suspense>\n      )}\n    </>\n  );\n}\n\nfunction AccountOrderHistory({orders}: {orders: Order[]}) {\n  return (\n    <div className=\"mt-6\">\n      <div className=\"grid w-full gap-4 p-4 py-6 md:gap-8 md:p-8 lg:p-12\">\n        <h2 className=\"font-bold text-lead\">Order History</h2>\n        {orders?.length ? <Orders orders={orders} /> : <EmptyOrders />}\n      </div>\n    </div>\n  );\n}\n\nfunction EmptyOrders() {\n  return (\n    <div>\n      <Text className=\"mb-1\" size=\"fine\" width=\"narrow\" as=\"p\">\n        You haven&apos;t placed any orders yet.\n      </Text>\n      <div className=\"w-48\">\n        <Button\n          className=\"w-full mt-2 text-sm\"\n          variant=\"secondary\"\n          to={usePrefixPathWithLocale('/')}\n        >\n          Start Shopping\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction Orders({orders}: {orders: Order[]}) {\n  return (\n    <ul className=\"grid grid-flow-row grid-cols-1 gap-2 gap-y-6 md:gap-4 lg:gap-6 false sm:grid-cols-3\">\n      {orders.map((order) => (\n        <OrderCard order={order} key={order.id} />\n      ))}\n    </ul>\n  );\n}\n\nconst CUSTOMER_QUERY = `#graphql\n  query CustomerDetails(\n    $customerAccessToken: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customer(customerAccessToken: $customerAccessToken) {\n      firstName\n      lastName\n      phone\n      email\n      defaultAddress {\n        id\n        formatted\n        firstName\n        lastName\n        company\n        address1\n        address2\n        country\n        province\n        city\n        zip\n        phone\n      }\n      addresses(first: 6) {\n        edges {\n          node {\n            id\n            formatted\n            firstName\n            lastName\n            company\n            address1\n            address2\n            country\n            province\n            city\n            zip\n            phone\n          }\n        }\n      }\n      orders(first: 250, sortKey: PROCESSED_AT, reverse: true) {\n        edges {\n          node {\n            id\n            orderNumber\n            processedAt\n            financialStatus\n            fulfillmentStatus\n            currentTotalPrice {\n              amount\n              currencyCode\n            }\n            lineItems(first: 2) {\n              edges {\n                node {\n                  variant {\n                    image {\n                      url\n                      altText\n                      height\n                      width\n                    }\n                  }\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport async function getCustomer(\n  context: AppLoadContext,\n  customerAccessToken: string,\n) {\n  const {storefront} = context;\n\n  const data = await storefront.query<{\n    customer: Customer;\n  }>(CUSTOMER_QUERY, {\n    variables: {\n      customerAccessToken,\n      country: context.storefront.i18n.country,\n      language: context.storefront.i18n.language,\n    },\n  });\n\n  /**\n   * If the customer failed to load, we assume their access token is invalid.\n   */\n  if (!data || !data.customer) {\n    throw await doLogout(context);\n  }\n\n  return data.customer;\n}\n", "import {json, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {flattenConnection} from '@shopify/hydrogen';\nimport type {\n  CollectionConnection,\n  ProductConnection,\n} from '@shopify/hydrogen/storefront-api-types';\nimport invariant from 'tiny-invariant';\nimport {PRODUCT_CARD_FRAGMENT} from '~/data/fragments';\n\nexport async function loader({context: {storefront}}: LoaderArgs) {\n  return json(await getFeaturedData(storefront));\n}\n\nexport async function getFeaturedData(\n  storefront: LoaderArgs['context']['storefront'],\n) {\n  const data = await storefront.query<{\n    featuredCollections: CollectionConnection;\n    featuredProducts: ProductConnection;\n  }>(FEATURED_QUERY, {\n    variables: {\n      country: storefront.i18n.country,\n      language: storefront.i18n.language,\n    },\n  });\n\n  invariant(data, 'No data returned from Shopify API');\n\n  return {\n    featuredCollections: flattenConnection(data.featuredCollections),\n    featuredProducts: flattenConnection(data.featuredProducts),\n  };\n}\n\nconst FEATURED_QUERY = `#graphql\n  ${PRODUCT_CARD_FRAGMENT}\n  query homepage($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    featuredCollections: collections(first: 3, sortKey: UPDATED_AT) {\n      nodes {\n        id\n        title\n        handle\n        image {\n          altText\n          width\n          height\n          url\n        }\n      }\n    }\n    featuredProducts: products(first: 12) {\n      nodes {\n        ...ProductCard\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": ["import_react"]
}

{
  "version": 3,
  "sources": ["../../../../../app/routes/($lang)/search.tsx"],
  "sourcesContent": ["import {defer, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {flattenConnection} from '@shopify/hydrogen';\nimport {Await, Form, useLoaderData} from '@remix-run/react';\nimport type {\n  Collection,\n  CollectionConnection,\n  Product,\n  ProductConnection,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {Suspense} from 'react';\nimport invariant from 'tiny-invariant';\nimport {\n  Heading,\n  Input,\n  PageHeader,\n  ProductGrid,\n  ProductSwimlane,\n  FeaturedCollections,\n  Section,\n  Text,\n} from '~/components';\nimport {PRODUCT_CARD_FRAGMENT} from '~/data/fragments';\nimport {PAGINATION_SIZE} from '~/lib/const';\n\nexport default function () {\n  const {searchTerm, products, noResultRecommendations} =\n    useLoaderData<typeof loader>();\n  const noResults = products?.nodes?.length === 0;\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" size=\"copy\">\n          Search\n        </Heading>\n        <Form method=\"get\" className=\"relative flex w-full text-heading\">\n          <Input\n            defaultValue={searchTerm}\n            placeholder=\"Search\u2026\"\n            type=\"search\"\n            variant=\"search\"\n            name=\"q\"\n          />\n          <button className=\"absolute right-0 py-2\" type=\"submit\">\n            Go\n          </button>\n        </Form>\n      </PageHeader>\n      {!searchTerm || noResults ? (\n        <>\n          {noResults && (\n            <Section padding=\"x\">\n              <Text className=\"opacity-50\">\n                No results, try something else.\n              </Text>\n            </Section>\n          )}\n          <Suspense>\n            <Await\n              errorElement=\"There was a problem loading related products\"\n              resolve={noResultRecommendations}\n            >\n              {(data) => (\n                <>\n                  <FeaturedCollections\n                    title=\"Trending Collections\"\n                    collections={data!.featuredCollections as Array<Collection>}\n                  />\n                  <ProductSwimlane\n                    title=\"Trending Products\"\n                    products={data!.featuredProducts as Array<Product>}\n                  />\n                </>\n              )}\n            </Await>\n          </Suspense>\n        </>\n      ) : (\n        <Section>\n          <ProductGrid\n            key=\"search\"\n            url={`/search?q=${searchTerm}`}\n            collection={{products} as Collection}\n          />\n        </Section>\n      )}\n    </>\n  );\n}\n\nexport async function loader({request, context: {storefront}}: LoaderArgs) {\n  const searchParams = new URL(request.url).searchParams;\n  const cursor = searchParams.get('cursor')!;\n  const searchTerm = searchParams.get('q')!;\n\n  const data = await storefront.query<{\n    products: ProductConnection;\n  }>(SEARCH_QUERY, {\n    variables: {\n      pageBy: PAGINATION_SIZE,\n      searchTerm,\n      cursor,\n      country: storefront.i18n.country,\n      language: storefront.i18n.language,\n    },\n  });\n\n  invariant(data, 'No data returned from Shopify API');\n  const {products} = data;\n\n  const getRecommendations = !searchTerm || products?.nodes?.length === 0;\n\n  return defer({\n    searchTerm,\n    products,\n    noResultRecommendations: getRecommendations\n      ? getNoResultRecommendations(storefront)\n      : Promise.resolve(null),\n  });\n}\n\nconst SEARCH_QUERY = `#graphql\n  ${PRODUCT_CARD_FRAGMENT}\n  query search(\n    $searchTerm: String\n    $country: CountryCode\n    $language: LanguageCode\n    $pageBy: Int!\n    $after: String\n  ) @inContext(country: $country, language: $language) {\n    products(\n      first: $pageBy\n      sortKey: RELEVANCE\n      query: $searchTerm\n      after: $after\n    ) {\n      nodes {\n        ...ProductCard\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n`;\n\nexport async function getNoResultRecommendations(\n  storefront: LoaderArgs['context']['storefront'],\n) {\n  const data = await storefront.query<{\n    featuredCollections: CollectionConnection;\n    featuredProducts: ProductConnection;\n  }>(SEARCH_NO_RESULTS_QUERY, {\n    variables: {\n      pageBy: PAGINATION_SIZE,\n      country: storefront.i18n.country,\n      language: storefront.i18n.language,\n    },\n  });\n\n  invariant(data, 'No data returned from Shopify API');\n\n  return {\n    featuredCollections: flattenConnection(data.featuredCollections),\n    featuredProducts: flattenConnection(data.featuredProducts),\n  };\n}\n\nconst SEARCH_NO_RESULTS_QUERY = `#graphql\n  ${PRODUCT_CARD_FRAGMENT}\n  query searchNoResult(\n    $country: CountryCode\n    $language: LanguageCode\n    $pageBy: Int!\n  ) @inContext(country: $country, language: $language) {\n    featuredCollections: collections(first: 3, sortKey: UPDATED_AT) {\n      nodes {\n        id\n        title\n        handle\n        image {\n          altText\n          width\n          height\n          url\n        }\n      }\n    }\n    featuredProducts: products(first: $pageBy) {\n      nodes {\n        ...ProductCard\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAAA,gBAAuB;AAuBf;AARO,SAAR,iBAAoB;AACzB,QAAM,EAAC,YAAY,UAAU,wBAAuB,IAClD,cAA6B;AAC/B,QAAM,YAAY,UAAU,OAAO,WAAW;AAE9C,SACE,sFACE;AAAA,uDAAC,cACC;AAAA,yDAAC,WAAQ,IAAG,MAAK,MAAK,QAAO,sBAA7B;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,QAAK,QAAO,OAAM,WAAU,qCAC3B;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,cAAc;AAAA,YACd,aAAY;AAAA,YACZ,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,MAAK;AAAA;AAAA,UALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA;AAAA,QACA,mDAAC,YAAO,WAAU,yBAAwB,MAAK,UAAS,kBAAxD;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAVF;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,SAfF;AAAA;AAAA;AAAA;AAAA,WAgBA;AAAA,IACC,CAAC,cAAc,YACd,sFACG;AAAA,mBACC,mDAAC,WAAQ,SAAQ,KACf,6DAAC,QAAK,WAAU,cAAa,+CAA7B;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAEF,mDAAC,0BACC;AAAA,QAAC;AAAA;AAAA,UACC,cAAa;AAAA,UACb,SAAS;AAAA,UAER,WAAC,SACA,sFACE;AAAA;AAAA,cAAC;AAAA;AAAA,gBACC,OAAM;AAAA,gBACN,aAAa,KAAM;AAAA;AAAA,cAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAGA;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACC,OAAM;AAAA,gBACN,UAAU,KAAM;AAAA;AAAA,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAGA;AAAA,eARF;AAAA;AAAA;AAAA;AAAA,iBASA;AAAA;AAAA,QAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgBA,KAjBF;AAAA;AAAA;AAAA;AAAA,aAkBA;AAAA,SA1BF;AAAA;AAAA;AAAA;AAAA,WA2BA,IAEA,mDAAC,WACC;AAAA,MAAC;AAAA;AAAA,QAEC,KAAK,aAAa;AAAA,QAClB,YAAY,EAAC,SAAQ;AAAA;AAAA,MAFjB;AAAA,MADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAIA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,OAtDJ;AAAA;AAAA;AAAA;AAAA,SAwDA;AAEJ;AAiCA,IAAM,eAAe;AAAA,IACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiDJ,IAAM,0BAA0B;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": ["import_react"]
}

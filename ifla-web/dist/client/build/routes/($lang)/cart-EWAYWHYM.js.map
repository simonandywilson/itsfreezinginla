{
  "version": 3,
  "sources": ["../../../../../app/routes/($lang)/cart.tsx"],
  "sourcesContent": ["import {CartLoading, Cart} from '~/components';\nimport {Await, useMatches} from '@remix-run/react';\nimport {Suspense} from 'react';\nimport invariant from 'tiny-invariant';\nimport {\n  json,\n  type ActionArgs,\n  type AppLoadContext,\n} from '@shopify/remix-oxygen';\nimport type {\n  Cart as CartType,\n  CartInput,\n  CartLineInput,\n  CartLineUpdateInput,\n  CartUserError,\n  UserError,\n  CartBuyerIdentityInput,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {isLocalPath} from '~/lib/utils';\nimport {CartAction, type CartActions} from '~/lib/type';\n\nexport async function action({request, context}: ActionArgs) {\n  const {session, storefront} = context;\n  const headers = new Headers();\n\n  const [formData, storedCartId, customerAccessToken] = await Promise.all([\n    request.formData(),\n    session.get('cartId'),\n    session.get('customerAccessToken'),\n  ]);\n\n  let cartId = storedCartId;\n\n  const cartAction = formData.get('cartAction') as CartActions;\n  invariant(cartAction, 'No cartAction defined');\n\n  const countryCode = formData.get('countryCode')\n    ? (formData.get('countryCode') as CartBuyerIdentityInput['countryCode'])\n    : null;\n\n  let status = 200;\n  let result: {\n    cart: CartType;\n    errors?: CartUserError[] | UserError[];\n  };\n\n  switch (cartAction) {\n    case CartAction.ADD_TO_CART:\n      const lines = formData.get('lines')\n        ? (JSON.parse(String(formData.get('lines'))) as CartLineInput[])\n        : ([] as CartLineInput[]);\n      invariant(lines.length, 'No lines to add');\n\n      /**\n       * If no previous cart exists, create one with the lines.\n       */\n      if (!cartId) {\n        result = await cartCreate({\n          input: countryCode ? {lines, buyerIdentity: {countryCode}} : {lines},\n          storefront,\n        });\n      } else {\n        result = await cartAdd({\n          cartId,\n          lines,\n          storefront,\n        });\n      }\n\n      cartId = result.cart.id;\n\n      break;\n    case CartAction.REMOVE_FROM_CART:\n      const lineIds = formData.get('linesIds')\n        ? (JSON.parse(String(formData.get('linesIds'))) as CartType['id'][])\n        : ([] as CartType['id'][]);\n      invariant(lineIds.length, 'No lines to remove');\n\n      result = await cartRemove({\n        cartId,\n        lineIds,\n        storefront,\n      });\n\n      cartId = result.cart.id;\n\n      break;\n    case CartAction.UPDATE_CART:\n      const updateLines = formData.get('lines')\n        ? (JSON.parse(String(formData.get('lines'))) as CartLineUpdateInput[])\n        : ([] as CartLineUpdateInput[]);\n      invariant(updateLines.length, 'No lines to update');\n\n      result = await cartUpdate({\n        cartId,\n        lines: updateLines,\n        storefront,\n      });\n\n      cartId = result.cart.id;\n\n      break;\n    case CartAction.UPDATE_DISCOUNT:\n      invariant(cartId, 'Missing cartId');\n\n      const formDiscountCode = formData.get('discountCode');\n      const discountCodes = ([formDiscountCode] || ['']) as string[];\n\n      result = await cartDiscountCodesUpdate({\n        cartId,\n        discountCodes,\n        storefront,\n      });\n\n      cartId = result.cart.id;\n\n      break;\n    case CartAction.UPDATE_BUYER_IDENTITY:\n      const buyerIdentity = formData.get('buyerIdentity')\n        ? (JSON.parse(\n            String(formData.get('buyerIdentity')),\n          ) as CartBuyerIdentityInput)\n        : ({} as CartBuyerIdentityInput);\n\n      result = cartId\n        ? await cartUpdateBuyerIdentity({\n            cartId,\n            buyerIdentity: {\n              ...buyerIdentity,\n              customerAccessToken,\n            },\n            storefront,\n          })\n        : await cartCreate({\n            input: {\n              buyerIdentity: {\n                ...buyerIdentity,\n                customerAccessToken,\n              },\n            },\n            storefront,\n          });\n\n      cartId = result.cart.id;\n\n      break;\n    default:\n      invariant(false, `${cartAction} cart action is not defined`);\n  }\n\n  /**\n   * The Cart ID may change after each mutation. We need to update it each time in the session.\n   */\n  session.set('cartId', cartId);\n  headers.set('Set-Cookie', await session.commit());\n\n  const redirectTo = formData.get('redirectTo') ?? null;\n  if (typeof redirectTo === 'string' && isLocalPath(redirectTo)) {\n    status = 303;\n    headers.set('Location', redirectTo);\n  }\n\n  const {cart, errors} = result;\n  return json(\n    {\n      cart,\n      errors,\n      analytics: {\n        cartId,\n      },\n    },\n    {status, headers},\n  );\n}\n\nexport default function CartRoute() {\n  const [root] = useMatches();\n  // @todo: finish on a separate PR\n  return (\n    <div className=\"grid w-full gap-8 p-6 py-8 md:p-8 lg:p-12 justify-items-start\">\n      <Suspense fallback={<CartLoading />}>\n        <Await resolve={root.data?.cart}>\n          {(cart) => <Cart layout=\"page\" cart={cart} />}\n        </Await>\n      </Suspense>\n    </div>\n  );\n}\n\n/*\n  Cart Queries\n*/\n\nconst USER_ERROR_FRAGMENT = `#graphql\n  fragment ErrorFragment on CartUserError {\n    message\n    field\n    code\n  }\n`;\n\nconst LINES_CART_FRAGMENT = `#graphql\n  fragment CartLinesFragment on Cart {\n    id\n    totalQuantity\n  }\n`;\n\n//! @see: https://shopify.dev/api/storefront/2022-01/mutations/cartcreate\nconst CREATE_CART_MUTATION = `#graphql\n  mutation ($input: CartInput!, $country: CountryCode = ZZ, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    cartCreate(input: $input) {\n      cart {\n        ...CartLinesFragment\n      }\n      errors: userErrors {\n        ...ErrorFragment\n      }\n    }\n  }\n  ${LINES_CART_FRAGMENT}\n  ${USER_ERROR_FRAGMENT}\n`;\n\n/**\n * Create a cart with line(s) mutation\n * @param input CartInput https://shopify.dev/api/storefront/2022-01/input-objects/CartInput\n * @see https://shopify.dev/api/storefront/2022-01/mutations/cartcreate\n * @returns result {cart, errors}\n * @preserve\n */\nexport async function cartCreate({\n  input,\n  storefront,\n}: {\n  input: CartInput;\n  storefront: AppLoadContext['storefront'];\n}) {\n  const {cartCreate} = await storefront.mutate<{\n    cartCreate: {\n      cart: CartType;\n      errors: CartUserError[];\n    };\n    errors: UserError[];\n  }>(CREATE_CART_MUTATION, {\n    variables: {input},\n  });\n\n  invariant(cartCreate, 'No data returned from cartCreate mutation');\n\n  return cartCreate;\n}\n\nconst ADD_LINES_MUTATION = `#graphql\n  mutation ($cartId: ID!, $lines: [CartLineInput!]!, $country: CountryCode = ZZ, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        ...CartLinesFragment\n      }\n      errors: userErrors {\n        ...ErrorFragment\n      }\n    }\n  }\n  ${LINES_CART_FRAGMENT}\n  ${USER_ERROR_FRAGMENT}\n`;\n\n/**\n * Storefront API cartLinesAdd mutation\n * @param cartId\n * @param lines [CartLineInput!]! https://shopify.dev/api/storefront/2022-01/input-objects/CartLineInput\n * @see https://shopify.dev/api/storefront/2022-01/mutations/cartLinesAdd\n * @returns result {cart, errors}\n * @preserve\n */\nexport async function cartAdd({\n  cartId,\n  lines,\n  storefront,\n}: {\n  cartId: string;\n  lines: CartLineInput[];\n  storefront: AppLoadContext['storefront'];\n}) {\n  const {cartLinesAdd} = await storefront.mutate<{\n    cartLinesAdd: {\n      cart: CartType;\n      errors: CartUserError[];\n    };\n  }>(ADD_LINES_MUTATION, {\n    variables: {cartId, lines},\n  });\n\n  invariant(cartLinesAdd, 'No data returned from cartLinesAdd mutation');\n\n  return cartLinesAdd;\n}\n\nconst REMOVE_LINE_ITEMS_MUTATION = `#graphql\n  mutation ($cartId: ID!, $lineIds: [ID!]!, $language: LanguageCode, $country: CountryCode)\n  @inContext(country: $country, language: $language) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n        totalQuantity\n        lines(first: 100) {\n          edges {\n            node {\n              id\n              quantity\n              merchandise {\n                ...on ProductVariant {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      errors: userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\n`;\n\n/**\n * Create a cart with line(s) mutation\n * @param cartId the current cart id\n * @param lineIds [ID!]! an array of cart line ids to remove\n * @see https://shopify.dev/api/storefront/2022-07/mutations/cartlinesremove\n * @returns mutated cart\n * @preserve\n */\nexport async function cartRemove({\n  cartId,\n  lineIds,\n  storefront,\n}: {\n  cartId: string;\n  lineIds: CartType['id'][];\n  storefront: AppLoadContext['storefront'];\n}) {\n  const {cartLinesRemove} = await storefront.mutate<{\n    cartLinesRemove: {cart: CartType; errors: UserError[]};\n  }>(REMOVE_LINE_ITEMS_MUTATION, {\n    variables: {\n      cartId,\n      lineIds,\n    },\n  });\n\n  invariant(cartLinesRemove, 'No data returned from remove lines mutation');\n  return cartLinesRemove;\n}\n\nconst LINES_UPDATE_MUTATION = `#graphql\n  ${LINES_CART_FRAGMENT}\n  ${USER_ERROR_FRAGMENT}\n  mutation ($cartId: ID!, $lines: [CartLineUpdateInput!]!, $language: LanguageCode, $country: CountryCode)\n  @inContext(country: $country, language: $language) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        ...CartLinesFragment\n      }\n      errors: userErrors {\n        ...ErrorFragment\n      }\n    }\n  }\n`;\n\n/**\n * Update cart line(s) mutation\n * @param cartId the current cart id\n * @param lineIds [ID!]! an array of cart line ids to remove\n * @see https://shopify.dev/api/storefront/2022-07/mutations/cartlinesremove\n * @returns mutated cart\n * @preserve\n */\nexport async function cartUpdate({\n  cartId,\n  lines,\n  storefront,\n}: {\n  cartId: string;\n  lines: CartLineUpdateInput[];\n  storefront: AppLoadContext['storefront'];\n}) {\n  const {cartLinesUpdate} = await storefront.mutate<{\n    cartLinesUpdate: {cart: CartType; errors: UserError[]};\n  }>(LINES_UPDATE_MUTATION, {\n    variables: {cartId, lines},\n  });\n\n  invariant(\n    cartLinesUpdate,\n    'No data returned from update lines items mutation',\n  );\n  return cartLinesUpdate;\n}\n\n/**\n * @see https://shopify.dev/api/storefront/2022-10/mutations/cartBuyerIdentityUpdate\n * @preserve\n */\nconst UPDATE_CART_BUYER_COUNTRY = `#graphql\n mutation(\n   $cartId: ID!\n   $buyerIdentity: CartBuyerIdentityInput!\n   $country: CountryCode = ZZ\n   $language: LanguageCode\n ) @inContext(country: $country, language: $language) {\n   cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {\n     cart {\n       id\n       buyerIdentity {\n         email\n         phone\n         countryCode\n       }\n     }\n     errors: userErrors {\n       message\n       field\n       code\n     }\n   }\n }\n`;\n\n/**\n * Mutation to update a cart buyerIdentity\n * @param cartId  Cart['id']\n * @param buyerIdentity CartBuyerIdentityInput\n * @returns {cart: Cart; errors: UserError[]}\n * @see API https://shopify.dev/api/storefront/2022-10/mutations/cartBuyerIdentityUpdate\n * @preserve\n */\nexport async function cartUpdateBuyerIdentity({\n  cartId,\n  buyerIdentity,\n  storefront,\n}: {\n  cartId: string;\n  buyerIdentity: CartBuyerIdentityInput;\n  storefront: AppLoadContext['storefront'];\n}) {\n  const {cartBuyerIdentityUpdate} = await storefront.mutate<{\n    cartBuyerIdentityUpdate: {cart: CartType; errors: UserError[]};\n  }>(UPDATE_CART_BUYER_COUNTRY, {\n    variables: {\n      cartId,\n      buyerIdentity,\n    },\n  });\n\n  invariant(\n    cartBuyerIdentityUpdate,\n    'No data returned from cart buyer identity update mutation',\n  );\n\n  return cartBuyerIdentityUpdate;\n}\n\nconst DISCOUNT_CODES_UPDATE = `#graphql\n  mutation cartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!], $country: CountryCode = ZZ)\n    @inContext(country: $country) {\n    cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {\n      cart {\n        id\n        discountCodes {\n          code\n        }\n      }\n      errors: userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * Mutation that updates the cart discounts\n * @param discountCodes Array of discount codes\n * @returns mutated cart\n * @preserve\n */\nexport async function cartDiscountCodesUpdate({\n  cartId,\n  discountCodes,\n  storefront,\n}: {\n  cartId: string;\n  discountCodes: string[];\n  storefront: AppLoadContext['storefront'];\n}) {\n  const {cartDiscountCodesUpdate} = await storefront.mutate<{\n    cartDiscountCodesUpdate: {cart: CartType; errors: UserError[]};\n  }>(DISCOUNT_CODES_UPDATE, {\n    variables: {\n      cartId,\n      discountCodes,\n    },\n  });\n\n  invariant(\n    cartDiscountCodesUpdate,\n    'No data returned from the cartDiscountCodesUpdate mutation',\n  );\n\n  return cartDiscountCodesUpdate;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAAA,gBAAuB;AAkLG;AALX,SAAR,YAA6B;AAClC,QAAM,CAAC,IAAI,IAAI,WAAW;AAE1B,SACE,mDAAC,SAAI,WAAU,iEACb,6DAAC,0BAAS,UAAU,mDAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,SAAa,GAC/B,6DAAC,SAAM,SAAS,KAAK,MAAM,MACxB,WAAC,SAAS,mDAAC,QAAK,QAAO,QAAO,QAApB;AAAA;AAAA;AAAA;AAAA,SAAgC,KAD7C;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA,KALF;AAAA;AAAA;AAAA;AAAA,SAMA;AAEJ;AAMA,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ5B,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ5B,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYzB;AAAA,IACA;AAAA;AAgCJ,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYvB;AAAA,IACA;AAAA;AA8FJ,IAAM,wBAAwB;AAAA,IAC1B;AAAA,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": ["import_react"]
}

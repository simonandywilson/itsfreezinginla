{
  "version": 3,
  "sources": ["../../../../../app/routes/($lang)/index.tsx"],
  "sourcesContent": ["import {defer, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {Suspense} from 'react';\nimport {Await, useLoaderData} from '@remix-run/react';\nimport {ProductSwimlane, FeaturedCollections, Hero} from '~/components';\nimport {MEDIA_FRAGMENT, PRODUCT_CARD_FRAGMENT} from '~/data/fragments';\nimport {getHeroPlaceholder} from '~/lib/placeholders';\nimport type {\n  CollectionConnection,\n  Metafield,\n  ProductConnection,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {AnalyticsPageType} from '@shopify/hydrogen';\n\ninterface HomeSeoData {\n  shop: {\n    name: string;\n    description: string;\n  };\n}\n\nexport interface CollectionHero {\n  byline: Metafield;\n  cta: Metafield;\n  handle: string;\n  heading: Metafield;\n  height?: 'full';\n  loading?: 'eager' | 'lazy';\n  spread: Metafield;\n  spreadSecondary: Metafield;\n  top?: boolean;\n}\n\nexport async function loader({params, context}: LoaderArgs) {\n  const {language, country} = context.storefront.i18n;\n\n  if (\n    params.lang &&\n    params.lang.toLowerCase() !== `${language}-${country}`.toLowerCase()\n  ) {\n    // If the lang URL param is defined, yet we still are on `EN-US`\n    // the the lang param must be invalid, send to the 404 page\n    throw new Response(null, {status: 404});\n  }\n\n  const {shop, hero} = await context.storefront.query<{\n    hero: CollectionHero;\n    shop: HomeSeoData;\n  }>(HOMEPAGE_SEO_QUERY, {\n    variables: {handle: 'freestyle'},\n  });\n\n  return defer({\n    shop,\n    primaryHero: hero,\n    // These different queries are separated to illustrate how 3rd party content\n    // fetching can be optimized for both above and below the fold.\n    featuredProducts: context.storefront.query<{\n      products: ProductConnection;\n    }>(HOMEPAGE_FEATURED_PRODUCTS_QUERY, {\n      variables: {\n        /**\n         * Country and language properties are automatically injected\n         * into all queries. Passing them is unnecessary unless you\n         * want to override them from the following default:\n         */\n        country,\n        language,\n      },\n    }),\n    secondaryHero: context.storefront.query<{hero: CollectionHero}>(\n      COLLECTION_HERO_QUERY,\n      {\n        variables: {\n          handle: 'backcountry',\n          country,\n          language,\n        },\n      },\n    ),\n    featuredCollections: context.storefront.query<{\n      collections: CollectionConnection;\n    }>(FEATURED_COLLECTIONS_QUERY, {\n      variables: {\n        country,\n        language,\n      },\n    }),\n    tertiaryHero: context.storefront.query<{hero: CollectionHero}>(\n      COLLECTION_HERO_QUERY,\n      {\n        variables: {\n          handle: 'winter-2022',\n          country,\n          language,\n        },\n      },\n    ),\n    analytics: {\n      pageType: AnalyticsPageType.home,\n    },\n  });\n}\n\nexport default function Homepage() {\n  const {\n    primaryHero,\n    secondaryHero,\n    tertiaryHero,\n    featuredCollections,\n    featuredProducts,\n  } = useLoaderData<typeof loader>();\n\n  // TODO: skeletons vs placeholders\n  const skeletons = getHeroPlaceholder([{}, {}, {}]);\n\n  // TODO: analytics\n  // useServerAnalytics({\n  //   shopify: {\n  //     pageType: ShopifyAnalyticsConstants.pageType.home,\n  //   },\n  // });\n\n  return (\n    <>\n      {primaryHero && (\n        <Hero {...primaryHero} height=\"full\" top loading=\"eager\" />\n      )}\n\n      {featuredProducts && (\n        <Suspense>\n          <Await resolve={featuredProducts}>\n            {({products}) => {\n              if (!products?.nodes) return <></>;\n              return (\n                <ProductSwimlane\n                  products={products.nodes}\n                  title=\"Featured Products\"\n                  count={4}\n                />\n              );\n            }}\n          </Await>\n        </Suspense>\n      )}\n\n      {secondaryHero && (\n        <Suspense fallback={<Hero {...skeletons[1]} />}>\n          <Await resolve={secondaryHero}>\n            {({hero}) => {\n              if (!hero) return <></>;\n              return <Hero {...hero} />;\n            }}\n          </Await>\n        </Suspense>\n      )}\n\n      {featuredCollections && (\n        <Suspense>\n          <Await resolve={featuredCollections}>\n            {({collections}) => {\n              if (!collections?.nodes) return <></>;\n              return (\n                <FeaturedCollections\n                  collections={collections.nodes}\n                  title=\"Collections\"\n                />\n              );\n            }}\n          </Await>\n        </Suspense>\n      )}\n\n      {tertiaryHero && (\n        <Suspense fallback={<Hero {...skeletons[2]} />}>\n          <Await resolve={tertiaryHero}>\n            {({hero}) => {\n              if (!hero) return <></>;\n              return <Hero {...hero} />;\n            }}\n          </Await>\n        </Suspense>\n      )}\n    </>\n  );\n}\n\nconst COLLECTION_CONTENT_FRAGMENT = `#graphql\n  ${MEDIA_FRAGMENT}\n  fragment CollectionContent on Collection {\n    id\n    handle\n    title\n    descriptionHtml\n    heading: metafield(namespace: \"hero\", key: \"title\") {\n      value\n    }\n    byline: metafield(namespace: \"hero\", key: \"byline\") {\n      value\n    }\n    cta: metafield(namespace: \"hero\", key: \"cta\") {\n      value\n    }\n    spread: metafield(namespace: \"hero\", key: \"spread\") {\n      reference {\n        ...Media\n      }\n    }\n    spreadSecondary: metafield(namespace: \"hero\", key: \"spread_secondary\") {\n      reference {\n        ...Media\n      }\n    }\n  }\n`;\n\nconst HOMEPAGE_SEO_QUERY = `#graphql\n  ${COLLECTION_CONTENT_FRAGMENT}\n  query collectionContent($handle: String, $country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    hero: collection(handle: $handle) {\n      ...CollectionContent\n    }\n    shop {\n      name\n      description\n    }\n  }\n`;\n\nconst COLLECTION_HERO_QUERY = `#graphql\n  ${COLLECTION_CONTENT_FRAGMENT}\n  query collectionContent($handle: String, $country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    hero: collection(handle: $handle) {\n      ...CollectionContent\n    }\n  }\n`;\n\n// @see: https://shopify.dev/api/storefront/latest/queries/products\nexport const HOMEPAGE_FEATURED_PRODUCTS_QUERY = `#graphql\n  ${PRODUCT_CARD_FRAGMENT}\n  query homepageFeaturedProducts($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    products(first: 8) {\n      nodes {\n        ...ProductCard\n      }\n    }\n  }\n`;\n\n// @see: https://shopify.dev/api/storefront/latest/queries/collections\nexport const FEATURED_COLLECTIONS_QUERY = `#graphql\n  query homepageFeaturedCollections($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    collections(\n      first: 4,\n      sortKey: UPDATED_AT\n    ) {\n      nodes {\n        id\n        title\n        handle\n        image {\n          altText\n          width\n          height\n          url\n        }\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,mBAAuB;AA4Hf;AAtBO,SAAR,WAA4B;AACjC,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,cAA6B;AAGjC,QAAM,YAAY,mBAAmB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AASjD,SACE,sFACG;AAAA,mBACC,mDAAC,QAAM,GAAG,aAAa,QAAO,QAAO,KAAG,MAAC,SAAQ,WAAjD;AAAA;AAAA;AAAA;AAAA,WAAyD;AAAA,IAG1D,oBACC,mDAAC,yBACC,6DAAC,SAAM,SAAS,kBACb,WAAC,EAAC,SAAQ,MAAM;AACf,UAAI,CAAC,UAAU;AAAO,eAAO;AAAA;AAAA;AAAA;AAAA,eAAE;AAC/B,aACE;AAAA,QAAC;AAAA;AAAA,UACC,UAAU,SAAS;AAAA,UACnB,OAAM;AAAA,UACN,OAAO;AAAA;AAAA,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,IAEJ,KAVF;AAAA;AAAA;AAAA;AAAA,WAWA,KAZF;AAAA;AAAA;AAAA;AAAA,WAaA;AAAA,IAGD,iBACC,mDAAC,yBAAS,UAAU,mDAAC,QAAM,GAAG,UAAU,MAApB;AAAA;AAAA;AAAA;AAAA,WAAwB,GAC1C,6DAAC,SAAM,SAAS,eACb,WAAC,EAAC,KAAI,MAAM;AACX,UAAI,CAAC;AAAM,eAAO;AAAA;AAAA;AAAA;AAAA,eAAE;AACpB,aAAO,mDAAC,QAAM,GAAG,QAAV;AAAA;AAAA;AAAA;AAAA,aAAgB;AAAA,IACzB,KAJF;AAAA;AAAA;AAAA;AAAA,WAKA,KANF;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,IAGD,uBACC,mDAAC,yBACC,6DAAC,SAAM,SAAS,qBACb,WAAC,EAAC,YAAW,MAAM;AAClB,UAAI,CAAC,aAAa;AAAO,eAAO;AAAA;AAAA;AAAA;AAAA,eAAE;AAClC,aACE;AAAA,QAAC;AAAA;AAAA,UACC,aAAa,YAAY;AAAA,UACzB,OAAM;AAAA;AAAA,QAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGA;AAAA,IAEJ,KATF;AAAA;AAAA;AAAA;AAAA,WAUA,KAXF;AAAA;AAAA;AAAA;AAAA,WAYA;AAAA,IAGD,gBACC,mDAAC,yBAAS,UAAU,mDAAC,QAAM,GAAG,UAAU,MAApB;AAAA;AAAA;AAAA;AAAA,WAAwB,GAC1C,6DAAC,SAAM,SAAS,cACb,WAAC,EAAC,KAAI,MAAM;AACX,UAAI,CAAC;AAAM,eAAO;AAAA;AAAA;AAAA;AAAA,eAAE;AACpB,aAAO,mDAAC,QAAM,GAAG,QAAV;AAAA;AAAA;AAAA;AAAA,aAAgB;AAAA,IACzB,KAJF;AAAA;AAAA;AAAA;AAAA,WAKA,KANF;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OAzDJ;AAAA;AAAA;AAAA;AAAA,SA2DA;AAEJ;AAEA,IAAM,8BAA8B;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BJ,IAAM,qBAAqB;AAAA,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaJ,IAAM,wBAAwB;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUG,IAAM,mCAAmC;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}

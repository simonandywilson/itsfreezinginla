{
  "version": 3,
  "sources": ["../../../../../../app/routes/($lang)/journal/index.tsx"],
  "sourcesContent": ["import {json, type MetaFunction, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {useLoaderData} from '@remix-run/react';\nimport {flattenConnection, Image} from '@shopify/hydrogen';\nimport type {Article, Blog} from '@shopify/hydrogen/storefront-api-types';\nimport {Grid, PageHeader, Section, Link} from '~/components';\nimport {getImageLoadingPriority, PAGINATION_SIZE} from '~/lib/const';\n\nconst BLOG_HANDLE = 'Journal';\n\nexport const handle = {\n  seo: {\n    title: 'Journal',\n  },\n};\n\nexport const loader = async ({context: {storefront}}: LoaderArgs) => {\n  const {language, country} = storefront.i18n;\n  const {blog} = await storefront.query<{\n    blog: Blog;\n  }>(BLOGS_QUERY, {\n    variables: {\n      blogHandle: BLOG_HANDLE,\n      pageBy: PAGINATION_SIZE,\n      language,\n    },\n  });\n\n  if (!blog?.articles) {\n    throw new Response('Not found', {status: 404});\n  }\n\n  const articles = flattenConnection(blog.articles).map((article: Article) => {\n    const {publishedAt} = article;\n    return {\n      ...article,\n      publishedAt: new Intl.DateTimeFormat(`${language}-${country}`, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      }).format(new Date(publishedAt!)),\n    };\n  });\n\n  return json(\n    {articles},\n    {\n      headers: {\n        // TODO cacheLong()\n      },\n    },\n  );\n};\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'All Journals',\n  };\n};\n\nexport default function Journals() {\n  const {articles} = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <PageHeader heading={BLOG_HANDLE} />\n      <Section>\n        <Grid as=\"ol\" layout=\"blog\">\n          {articles.map((article, i) => (\n            <ArticleCard\n              blogHandle={BLOG_HANDLE.toLowerCase()}\n              article={article as Article}\n              key={article.id}\n              loading={getImageLoadingPriority(i, 2)}\n            />\n          ))}\n        </Grid>\n      </Section>\n    </>\n  );\n}\n\nfunction ArticleCard({\n  blogHandle,\n  article,\n  loading,\n}: {\n  blogHandle: string;\n  article: Article;\n  loading?: HTMLImageElement['loading'];\n}) {\n  return (\n    <li key={article.id}>\n      <Link to={`/${blogHandle}/${article.handle}`}>\n        {article.image && (\n          <div className=\"card-image aspect-[3/2]\">\n            <Image\n              alt={article.image.altText || article.title}\n              className=\"object-cover w-full\"\n              data={article.image}\n              height={400}\n              loading={loading}\n              sizes=\"(min-width: 768px) 50vw, 100vw\"\n              width={600}\n              loaderOptions={{\n                scale: 2,\n                crop: 'center',\n              }}\n            />\n          </div>\n        )}\n        <h2 className=\"mt-4 font-medium\">{article.title}</h2>\n        <span className=\"block mt-1\">{article.publishedAt}</span>\n      </Link>\n    </li>\n  );\n}\n\nconst BLOGS_QUERY = `#graphql\nquery Blog(\n  $language: LanguageCode\n  $blogHandle: String!\n  $pageBy: Int!\n  $cursor: String\n) @inContext(language: $language) {\n  blog(handle: $blogHandle) {\n    articles(first: $pageBy, after: $cursor) {\n      edges {\n        node {\n          author: authorV2 {\n            name\n          }\n          contentHtml\n          handle\n          id\n          image {\n            id\n            altText\n            url\n            width\n            height\n          }\n          publishedAt\n          title\n        }\n      }\n    }\n  }\n}\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AA+DI;AAxDJ,IAAM,cAAc;AAEb,IAAM,SAAS;AAAA,EACpB,KAAK;AAAA,IACH,OAAO;AAAA,EACT;AACF;AAwCO,IAAM,OAAqB,MAAM;AACtC,SAAO;AAAA,IACL,OAAO;AAAA,EACT;AACF;AAEe,SAAR,WAA4B;AACjC,QAAM,EAAC,SAAQ,IAAI,cAA6B;AAEhD,SACE,sFACE;AAAA,uDAAC,cAAW,SAAS,eAArB;AAAA;AAAA;AAAA;AAAA,WAAkC;AAAA,IAClC,mDAAC,WACC,6DAAC,QAAK,IAAG,MAAK,QAAO,QAClB,mBAAS,IAAI,CAAC,SAAS,MACtB;AAAA,MAAC;AAAA;AAAA,QACC,YAAY,YAAY,YAAY;AAAA,QACpC;AAAA,QAEA,SAAS,wBAAwB,GAAG,CAAC;AAAA;AAAA,MADhC,QAAQ;AAAA,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CACD,KARH;AAAA;AAAA;AAAA;AAAA,WASA,KAVF;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,OAbF;AAAA;AAAA;AAAA;AAAA,SAcA;AAEJ;AAEA,SAAS,YAAY;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,SACE,mDAAC,QACC,6DAAC,QAAK,IAAI,IAAI,cAAc,QAAQ,UACjC;AAAA,YAAQ,SACP,mDAAC,SAAI,WAAU,2BACb;AAAA,MAAC;AAAA;AAAA,QACC,KAAK,QAAQ,MAAM,WAAW,QAAQ;AAAA,QACtC,WAAU;AAAA,QACV,MAAM,QAAQ;AAAA,QACd,QAAQ;AAAA,QACR;AAAA,QACA,OAAM;AAAA,QACN,OAAO;AAAA,QACP,eAAe;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,QACR;AAAA;AAAA,MAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,KAbF;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,IAEF,mDAAC,QAAG,WAAU,oBAAoB,kBAAQ,SAA1C;AAAA;AAAA;AAAA;AAAA,WAAgD;AAAA,IAChD,mDAAC,UAAK,WAAU,cAAc,kBAAQ,eAAtC;AAAA;AAAA;AAAA;AAAA,WAAkD;AAAA,OAnBpD;AAAA;AAAA;AAAA;AAAA,SAoBA,KArBO,QAAQ,IAAjB;AAAA;AAAA;AAAA;AAAA,SAsBA;AAEJ;",
  "names": []
}

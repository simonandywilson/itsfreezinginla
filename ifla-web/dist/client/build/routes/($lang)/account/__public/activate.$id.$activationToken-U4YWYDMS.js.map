{
  "version": 3,
  "sources": ["../../../../../../../app/routes/($lang)/account/__public/activate.$id.$activationToken.tsx"],
  "sourcesContent": ["import {\n  json,\n  redirect,\n  type MetaFunction,\n  type ActionFunction,\n} from '@shopify/remix-oxygen';\nimport {Form, useActionData} from '@remix-run/react';\nimport {useRef, useState} from 'react';\nimport {getInputStyleClasses} from '~/lib/utils';\nimport type {CustomerActivatePayload} from '@shopify/hydrogen/storefront-api-types';\n\ntype ActionData = {\n  formError?: string;\n};\n\nconst badRequest = (data: ActionData) => json(data, {status: 400});\n\nexport const handle = {\n  isPublic: true,\n};\n\nexport const action: ActionFunction = async ({\n  request,\n  context,\n  params: {lang, id, activationToken},\n}) => {\n  if (\n    !id ||\n    !activationToken ||\n    typeof id !== 'string' ||\n    typeof activationToken !== 'string'\n  ) {\n    return badRequest({\n      formError: 'Wrong token. The link you followed might be wrong.',\n    });\n  }\n\n  const formData = await request.formData();\n\n  const password = formData.get('password');\n  const passwordConfirm = formData.get('passwordConfirm');\n\n  if (\n    !password ||\n    !passwordConfirm ||\n    typeof password !== 'string' ||\n    typeof passwordConfirm !== 'string' ||\n    password !== passwordConfirm\n  ) {\n    return badRequest({\n      formError: 'Please provide matching passwords',\n    });\n  }\n\n  const {session, storefront} = context;\n\n  try {\n    const data = await storefront.mutate<{\n      customerActivate: CustomerActivatePayload;\n    }>(CUSTOMER_ACTIVATE_MUTATION, {\n      variables: {\n        id: `gid://shopify/Customer/${id}`,\n        input: {\n          password,\n          activationToken,\n        },\n      },\n    });\n\n    const {accessToken} = data?.customerActivate?.customerAccessToken ?? {};\n\n    if (!accessToken) {\n      /**\n       * Something is wrong with the user's input.\n       */\n      throw new Error(data?.customerActivate?.customerUserErrors.join(', '));\n    }\n\n    session.set('customerAccessToken', accessToken);\n\n    return redirect(lang ? `${lang}/account` : '/account', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error: any) {\n    if (storefront.isApiError(error)) {\n      return badRequest({\n        formError: 'Something went wrong. Please try again later.',\n      });\n    }\n\n    /**\n     * The user did something wrong, but the raw error from the API is not super friendly.\n     * Let's make one up.\n     */\n    return badRequest({\n      formError: 'Sorry. We could not activate your account.',\n    });\n  }\n};\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Activate Account',\n  };\n};\n\nexport default function Activate() {\n  const actionData = useActionData<ActionData>();\n  const [nativePasswordError, setNativePasswordError] = useState<null | string>(\n    null,\n  );\n  const [nativePasswordConfirmError, setNativePasswordConfirmError] = useState<\n    null | string\n  >(null);\n\n  const passwordInput = useRef<HTMLInputElement>(null);\n  const passwordConfirmInput = useRef<HTMLInputElement>(null);\n\n  const validatePasswordConfirm = () => {\n    if (!passwordConfirmInput.current) return;\n\n    if (\n      passwordConfirmInput.current.value.length &&\n      passwordConfirmInput.current.value !== passwordInput.current?.value\n    ) {\n      setNativePasswordConfirmError('The two passwords entered did not match.');\n    } else if (\n      passwordConfirmInput.current.validity.valid ||\n      !passwordConfirmInput.current.value.length\n    ) {\n      setNativePasswordConfirmError(null);\n    } else {\n      setNativePasswordConfirmError(\n        passwordConfirmInput.current.validity.valueMissing\n          ? 'Please re-enter the password'\n          : 'Passwords must be at least 8 characters',\n      );\n    }\n  };\n\n  return (\n    <div className=\"flex justify-center my-24 px-4\">\n      <div className=\"max-w-md w-full\">\n        <h1 className=\"text-4xl\">Activate Account.</h1>\n        <p className=\"mt-4\">Create your password to activate your account.</p>\n        {/* TODO: Add onSubmit to validate _before_ submission with native? */}\n        <Form\n          method=\"post\"\n          noValidate\n          className=\"pt-6 pb-8 mt-4 mb-4 space-y-3\"\n        >\n          {actionData?.formError && (\n            <div className=\"flex items-center justify-center mb-6 bg-zinc-500\">\n              <p className=\"m-4 text-s text-contrast\">{actionData.formError}</p>\n            </div>\n          )}\n          <div className=\"mb-3\">\n            <input\n              ref={passwordInput}\n              className={`mb-1 ${getInputStyleClasses(nativePasswordError)}`}\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n              minLength={8}\n              required\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus\n              onBlur={(event) => {\n                if (\n                  event.currentTarget.validity.valid ||\n                  !event.currentTarget.value.length\n                ) {\n                  setNativePasswordError(null);\n                  validatePasswordConfirm();\n                } else {\n                  setNativePasswordError(\n                    event.currentTarget.validity.valueMissing\n                      ? 'Please enter a password'\n                      : 'Passwords must be at least 8 characters',\n                  );\n                }\n              }}\n            />\n            {nativePasswordError && (\n              <p className=\"text-red-500 text-xs\">\n                {' '}\n                {nativePasswordError} &nbsp;\n              </p>\n            )}\n          </div>\n          <div className=\"mb-3\">\n            <input\n              ref={passwordConfirmInput}\n              className={`mb-1 ${getInputStyleClasses(\n                nativePasswordConfirmError,\n              )}`}\n              id=\"passwordConfirm\"\n              name=\"passwordConfirm\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              placeholder=\"Re-enter password\"\n              aria-label=\"Re-enter password\"\n              minLength={8}\n              required\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus\n              onBlur={validatePasswordConfirm}\n            />\n            {nativePasswordConfirmError && (\n              <p className=\"text-red-500 text-xs\">\n                {' '}\n                {nativePasswordConfirmError} &nbsp;\n              </p>\n            )}\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <button\n              className=\"bg-primary text-contrast rounded py-2 px-4 focus:shadow-outline block w-full\"\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nconst CUSTOMER_ACTIVATE_MUTATION = `#graphql\n  mutation customerActivate($id: ID!, $input: CustomerActivateInput!) {\n    customerActivate(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": ["import_react"]
}

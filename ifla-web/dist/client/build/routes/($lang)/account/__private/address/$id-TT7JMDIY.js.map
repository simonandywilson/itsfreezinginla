{
  "version": 3,
  "sources": ["../../../../../../../../app/routes/($lang)/account/__private/address/$id.tsx"],
  "sourcesContent": ["import {json, redirect, type ActionFunction} from '@shopify/remix-oxygen';\nimport {\n  Form,\n  useActionData,\n  useOutletContext,\n  useParams,\n  useTransition,\n} from '@remix-run/react';\nimport {flattenConnection} from '@shopify/hydrogen';\nimport type {\n  MailingAddressInput,\n  CustomerAddressUpdatePayload,\n  CustomerAddressDeletePayload,\n  CustomerDefaultAddressUpdatePayload,\n  CustomerAddressCreatePayload,\n} from '@shopify/hydrogen/storefront-api-types';\nimport invariant from 'tiny-invariant';\nimport {Button, Text} from '~/components';\nimport {assertApiErrors, getInputStyleClasses} from '~/lib/utils';\nimport type {AccountOutletContext} from '../edit';\n\ninterface ActionData {\n  formError?: string;\n}\n\nconst badRequest = (data: ActionData) => json(data, {status: 400});\n\nexport const handle = {\n  renderInModal: true,\n};\n\nexport const action: ActionFunction = async ({request, context, params}) => {\n  const {storefront, session} = context;\n  const formData = await request.formData();\n\n  const customerAccessToken = await session.get('customerAccessToken');\n  invariant(customerAccessToken, 'You must be logged in to edit your account.');\n\n  const addressId = formData.get('addressId');\n  invariant(typeof addressId === 'string', 'You must provide an address id.');\n\n  if (request.method === 'DELETE') {\n    try {\n      const data = await storefront.mutate<{\n        customerAddressDelete: CustomerAddressDeletePayload;\n      }>(DELETE_ADDRESS_MUTATION, {\n        variables: {customerAccessToken, id: addressId},\n      });\n\n      assertApiErrors(data.customerAddressDelete);\n\n      return redirect(params.lang ? `${params.lang}/account` : '/account');\n    } catch (error: any) {\n      return badRequest({formError: error.message});\n    }\n  }\n\n  const address: MailingAddressInput = {};\n\n  const keys: (keyof MailingAddressInput)[] = [\n    'lastName',\n    'firstName',\n    'address1',\n    'address2',\n    'city',\n    'province',\n    'country',\n    'zip',\n    'phone',\n    'company',\n  ];\n\n  for (const key of keys) {\n    const value = formData.get(key);\n    if (typeof value === 'string') {\n      address[key] = value;\n    }\n  }\n\n  const defaultAddress = formData.get('defaultAddress');\n\n  if (addressId === 'add') {\n    try {\n      const data = await storefront.mutate<{\n        customerAddressCreate: CustomerAddressCreatePayload;\n      }>(CREATE_ADDRESS_MUTATION, {\n        variables: {customerAccessToken, address},\n      });\n\n      assertApiErrors(data.customerAddressCreate);\n\n      const newId = data.customerAddressCreate?.customerAddress?.id;\n      invariant(newId, 'Expected customer address to be created');\n\n      if (defaultAddress) {\n        const data = await storefront.mutate<{\n          customerDefaultAddressUpdate: CustomerDefaultAddressUpdatePayload;\n        }>(UPDATE_DEFAULT_ADDRESS_MUTATION, {\n          variables: {customerAccessToken, addressId: newId},\n        });\n\n        assertApiErrors(data.customerDefaultAddressUpdate);\n      }\n\n      return redirect(params.lang ? `${params.lang}/account` : '/account');\n    } catch (error: any) {\n      return badRequest({formError: error.message});\n    }\n  } else {\n    try {\n      const data = await storefront.mutate<{\n        customerAddressUpdate: CustomerAddressUpdatePayload;\n      }>(UPDATE_ADDRESS_MUTATION, {\n        variables: {\n          address,\n          customerAccessToken,\n          id: decodeURIComponent(addressId),\n        },\n      });\n\n      assertApiErrors(data.customerAddressUpdate);\n\n      if (defaultAddress) {\n        const data = await storefront.mutate<{\n          customerDefaultAddressUpdate: CustomerDefaultAddressUpdatePayload;\n        }>(UPDATE_DEFAULT_ADDRESS_MUTATION, {\n          variables: {\n            customerAccessToken,\n            addressId: decodeURIComponent(addressId),\n          },\n        });\n\n        assertApiErrors(data.customerDefaultAddressUpdate);\n      }\n\n      return redirect(params.lang ? `${params.lang}/account` : '/account');\n    } catch (error: any) {\n      return badRequest({formError: error.message});\n    }\n  }\n};\n\nexport default function EditAddress() {\n  const {id: addressId} = useParams();\n  const isNewAddress = addressId === 'add';\n  const actionData = useActionData<ActionData>();\n  const transition = useTransition();\n  const {customer} = useOutletContext<AccountOutletContext>();\n  const addresses = flattenConnection(customer.addresses);\n  const defaultAddress = customer.defaultAddress;\n  /**\n   * When a refresh happens (or a user visits this link directly), the URL\n   * is actually stale because it contains a special token. This means the data\n   * loaded by the parent and passed to the outlet contains a newer, fresher token,\n   * and we don't find a match. We update the `find` logic to just perform a match\n   * on the first (permanent) part of the ID.\n   */\n  const normalizedAddress = decodeURIComponent(addressId ?? '').split('?')[0];\n  const address = addresses.find((address) =>\n    address.id!.startsWith(normalizedAddress),\n  );\n\n  return (\n    <>\n      <Text className=\"mt-4 mb-6\" as=\"h3\" size=\"lead\">\n        {isNewAddress ? 'Add address' : 'Edit address'}\n      </Text>\n      <div className=\"max-w-lg\">\n        <Form method=\"post\">\n          <input\n            type=\"hidden\"\n            name=\"addressId\"\n            value={address?.id ?? addressId}\n          />\n          {actionData?.formError && (\n            <div className=\"flex items-center justify-center mb-6 bg-red-100 rounded\">\n              <p className=\"m-4 text-sm text-red-900\">{actionData.formError}</p>\n            </div>\n          )}\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"firstName\"\n              name=\"firstName\"\n              required\n              type=\"text\"\n              autoComplete=\"given-name\"\n              placeholder=\"First name\"\n              aria-label=\"First name\"\n              defaultValue={address?.firstName ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"lastName\"\n              name=\"lastName\"\n              required\n              type=\"text\"\n              autoComplete=\"family-name\"\n              placeholder=\"Last name\"\n              aria-label=\"Last name\"\n              defaultValue={address?.lastName ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"company\"\n              name=\"company\"\n              type=\"text\"\n              autoComplete=\"organization\"\n              placeholder=\"Company\"\n              aria-label=\"Company\"\n              defaultValue={address?.company ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"address1\"\n              name=\"address1\"\n              type=\"text\"\n              autoComplete=\"address-line1\"\n              placeholder=\"Address line 1*\"\n              required\n              aria-label=\"Address line 1\"\n              defaultValue={address?.address1 ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"address2\"\n              name=\"address2\"\n              type=\"text\"\n              autoComplete=\"address-line2\"\n              placeholder=\"Address line 2\"\n              aria-label=\"Address line 2\"\n              defaultValue={address?.address2 ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"city\"\n              name=\"city\"\n              type=\"text\"\n              required\n              autoComplete=\"address-level2\"\n              placeholder=\"City\"\n              aria-label=\"City\"\n              defaultValue={address?.city ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"province\"\n              name=\"province\"\n              type=\"text\"\n              autoComplete=\"address-level1\"\n              placeholder=\"State / Province\"\n              required\n              aria-label=\"State\"\n              defaultValue={address?.province ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"zip\"\n              name=\"zip\"\n              type=\"text\"\n              autoComplete=\"postal-code\"\n              placeholder=\"Zip / Postal Code\"\n              required\n              aria-label=\"Zip\"\n              defaultValue={address?.zip ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"country\"\n              name=\"country\"\n              type=\"text\"\n              autoComplete=\"country-name\"\n              placeholder=\"Country\"\n              required\n              aria-label=\"Country\"\n              defaultValue={address?.country ?? ''}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <input\n              className={getInputStyleClasses()}\n              id=\"phone\"\n              name=\"phone\"\n              type=\"tel\"\n              autoComplete=\"tel\"\n              placeholder=\"Phone\"\n              aria-label=\"Phone\"\n              defaultValue={address?.phone ?? ''}\n            />\n          </div>\n          <div className=\"mt-4\">\n            <input\n              type=\"checkbox\"\n              name=\"defaultAddress\"\n              id=\"defaultAddress\"\n              defaultChecked={defaultAddress?.id === address?.id}\n              className=\"border-gray-500 rounded-sm cursor-pointer border-1\"\n            />\n            <label\n              className=\"inline-block ml-2 text-sm cursor-pointer\"\n              htmlFor=\"defaultAddress\"\n            >\n              Set as default address\n            </label>\n          </div>\n          <div className=\"mt-8\">\n            <Button\n              className=\"w-full rounded focus:shadow-outline\"\n              type=\"submit\"\n              variant=\"primary\"\n              disabled={transition.state !== 'idle'}\n            >\n              {transition.state !== 'idle' ? 'Saving' : 'Save'}\n            </Button>\n          </div>\n          <div>\n            <Button\n              to=\"..\"\n              className=\"w-full mt-2 rounded focus:shadow-outline\"\n              variant=\"secondary\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </>\n  );\n}\n\nconst UPDATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressUpdate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $id: ID!\n  ) {\n    customerAddressUpdate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n      id: $id\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\nconst DELETE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n`;\n\nconst UPDATE_DEFAULT_ADDRESS_MUTATION = `#graphql\n  mutation customerDefaultAddressUpdate(\n    $addressId: ID!\n    $customerAccessToken: String!\n  ) {\n    customerDefaultAddressUpdate(\n      addressId: $addressId\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\nconst CREATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressCreate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n  ) {\n    customerAddressCreate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": ["address"]
}

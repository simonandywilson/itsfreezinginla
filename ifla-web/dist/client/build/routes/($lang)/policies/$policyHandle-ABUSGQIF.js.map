{
  "version": 3,
  "sources": ["../../../../../../app/routes/($lang)/policies/$policyHandle.tsx"],
  "sourcesContent": ["import {json, type MetaFunction, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {useLoaderData} from '@remix-run/react';\n\nimport {PageHeader, Section, Button} from '~/components';\nimport invariant from 'tiny-invariant';\nimport {ShopPolicy} from '@shopify/hydrogen/storefront-api-types';\n\nexport async function loader({request, params, context}: LoaderArgs) {\n  invariant(params.policyHandle, 'Missing policy handle');\n  const handle = params.policyHandle;\n\n  const policyName = handle.replace(/-([a-z])/g, (_: unknown, m1: string) =>\n    m1.toUpperCase(),\n  );\n\n  const data = await context.storefront.query<{\n    shop: Record<string, ShopPolicy>;\n  }>(POLICY_CONTENT_QUERY, {\n    variables: {\n      privacyPolicy: false,\n      shippingPolicy: false,\n      termsOfService: false,\n      refundPolicy: false,\n      [policyName]: true,\n      language: context.storefront.i18n.language,\n    },\n  });\n\n  invariant(data, 'No data returned from Shopify API');\n  const policy = data.shop?.[policyName];\n\n  if (!policy) {\n    throw new Response(null, {status: 404});\n  }\n\n  return json(\n    {policy},\n    {\n      headers: {\n        // TODO cacheLong()\n      },\n    },\n  );\n}\n\nexport const meta: MetaFunction<typeof loader> = ({data}) => {\n  return {\n    title: data?.policy?.title ?? 'Policies',\n  };\n};\n\nexport default function Policies() {\n  const {policy} = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <Section\n        padding=\"all\"\n        display=\"flex\"\n        className=\"flex-col items-baseline w-full gap-8 md:flex-row\"\n      >\n        <PageHeader\n          heading={policy.title}\n          className=\"grid items-start flex-grow gap-4 md:sticky top-36 md:w-5/12\"\n        >\n          <Button\n            className=\"justify-self-start\"\n            variant=\"inline\"\n            to={'/policies'}\n          >\n            &larr; Back to Policies\n          </Button>\n        </PageHeader>\n        <div className=\"flex-grow w-full md:w-7/12\">\n          <div\n            dangerouslySetInnerHTML={{__html: policy.body}}\n            className=\"prose dark:prose-invert\"\n          />\n        </div>\n      </Section>\n    </>\n  );\n}\n\nconst POLICY_CONTENT_QUERY = `#graphql\n  fragment Policy on ShopPolicy {\n    body\n    handle\n    id\n    title\n    url\n  }\n\n  query PoliciesQuery(\n    $language: LanguageCode\n    $privacyPolicy: Boolean!\n    $shippingPolicy: Boolean!\n    $termsOfService: Boolean!\n    $refundPolicy: Boolean!\n  ) @inContext(language: $language) {\n    shop {\n      privacyPolicy @include(if: $privacyPolicy) {\n        ...Policy\n      }\n      shippingPolicy @include(if: $shippingPolicy) {\n        ...Policy\n      }\n      termsOfService @include(if: $termsOfService) {\n        ...Policy\n      }\n      refundPolicy @include(if: $refundPolicy) {\n        ...Policy\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAuDI;AAVG,IAAM,OAAoC,CAAC,EAAC,KAAI,MAAM;AAC3D,SAAO;AAAA,IACL,OAAO,MAAM,QAAQ,SAAS;AAAA,EAChC;AACF;AAEe,SAAR,WAA4B;AACjC,QAAM,EAAC,OAAM,IAAI,cAA6B;AAE9C,SACE,sFACE;AAAA,IAAC;AAAA;AAAA,MACC,SAAQ;AAAA,MACR,SAAQ;AAAA,MACR,WAAU;AAAA,MAEV;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,OAAO;AAAA,YAChB,WAAU;AAAA,YAEV;AAAA,cAAC;AAAA;AAAA,gBACC,WAAU;AAAA,gBACV,SAAQ;AAAA,gBACR,IAAI;AAAA,gBACL;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMA;AAAA;AAAA,UAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWA;AAAA,QACA,mDAAC,SAAI,WAAU,8BACb;AAAA,UAAC;AAAA;AAAA,YACC,yBAAyB,EAAC,QAAQ,OAAO,KAAI;AAAA,YAC7C,WAAU;AAAA;AAAA,UAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAGA,KAJF;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA;AAAA;AAAA,IAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,KAxBF;AAAA;AAAA;AAAA;AAAA,SAyBA;AAEJ;",
  "names": []
}

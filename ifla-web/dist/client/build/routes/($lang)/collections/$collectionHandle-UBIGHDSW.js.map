{
  "version": 3,
  "sources": ["../../../../../../app/routes/($lang)/collections/$collectionHandle.tsx"],
  "sourcesContent": ["import {json, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {useLoaderData} from '@remix-run/react';\nimport type {\n  Collection as CollectionType,\n  CollectionConnection,\n  Filter,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {\n  flattenConnection,\n  AnalyticsPageType,\n  type SeoHandleFunction,\n} from '@shopify/hydrogen';\nimport invariant from 'tiny-invariant';\nimport {PageHeader, Section, Text, SortFilter} from '~/components';\nimport {ProductGrid} from '~/components/ProductGrid';\nimport {PRODUCT_CARD_FRAGMENT} from '~/data/fragments';\n\nconst seo: SeoHandleFunction<typeof loader> = ({data}) => ({\n  title: data?.collection?.seo?.title,\n  description: data?.collection?.seo?.description,\n  titleTemplate: '%s | Collection',\n  media: {\n    type: 'image',\n    url: data?.collection?.image?.url,\n    height: data?.collection?.image?.height,\n    width: data?.collection?.image?.width,\n    altText: data?.collection?.image?.altText,\n  },\n});\n\nexport const handle = {\n  seo,\n};\n\nconst PAGINATION_SIZE = 48;\n\ntype VariantFilterParam = Record<string, string | boolean>;\ntype PriceFiltersQueryParam = Record<'price', {max?: number; min?: number}>;\ntype VariantOptionFiltersQueryParam = Record<\n  'variantOption',\n  {name: string; value: string}\n>;\n\nexport type AppliedFilter = {\n  label: string;\n  urlParam: {\n    key: string;\n    value: string;\n  };\n};\n\ntype FiltersQueryParams = Array<\n  VariantFilterParam | PriceFiltersQueryParam | VariantOptionFiltersQueryParam\n>;\n\nexport type SortParam =\n  | 'price-low-high'\n  | 'price-high-low'\n  | 'best-selling'\n  | 'newest'\n  | 'featured';\n\nexport async function loader({params, request, context}: LoaderArgs) {\n  const {collectionHandle} = params;\n\n  invariant(collectionHandle, 'Missing collectionHandle param');\n\n  const searchParams = new URL(request.url).searchParams;\n  const knownFilters = ['productVendor', 'productType'];\n  const available = 'available';\n  const variantOption = 'variantOption';\n  const {sortKey, reverse} = getSortValuesFromParam(\n    searchParams.get('sort') as SortParam,\n  );\n  const cursor = searchParams.get('cursor');\n  const filters: FiltersQueryParams = [];\n  const appliedFilters: AppliedFilter[] = [];\n\n  for (const [key, value] of searchParams.entries()) {\n    if (available === key) {\n      filters.push({available: value === 'true'});\n      appliedFilters.push({\n        label: value === 'true' ? 'In stock' : 'Out of stock',\n        urlParam: {\n          key: available,\n          value,\n        },\n      });\n    } else if (knownFilters.includes(key)) {\n      filters.push({[key]: value});\n      appliedFilters.push({label: value, urlParam: {key, value}});\n    } else if (key.includes(variantOption)) {\n      const [name, val] = value.split(':');\n      filters.push({variantOption: {name, value: val}});\n      appliedFilters.push({label: val, urlParam: {key, value}});\n    }\n  }\n\n  // Builds min and max price filter since we can't stack them separately into\n  // the filters array. See price filters limitations:\n  // https://shopify.dev/custom-storefronts/products-collections/filter-products#limitations\n  if (searchParams.has('minPrice') || searchParams.has('maxPrice')) {\n    const price: {min?: number; max?: number} = {};\n    if (searchParams.has('minPrice')) {\n      price.min = Number(searchParams.get('minPrice')) || 0;\n      appliedFilters.push({\n        label: `Min: $${price.min}`,\n        urlParam: {key: 'minPrice', value: searchParams.get('minPrice')!},\n      });\n    }\n    if (searchParams.has('maxPrice')) {\n      price.max = Number(searchParams.get('maxPrice')) || 0;\n      appliedFilters.push({\n        label: `Max: $${price.max}`,\n        urlParam: {key: 'maxPrice', value: searchParams.get('maxPrice')!},\n      });\n    }\n    filters.push({\n      price,\n    });\n  }\n\n  const {collection, collections} = await context.storefront.query<{\n    collection: CollectionType;\n    collections: CollectionConnection;\n  }>(COLLECTION_QUERY, {\n    variables: {\n      handle: collectionHandle,\n      pageBy: PAGINATION_SIZE,\n      cursor,\n      filters,\n      sortKey,\n      reverse,\n      country: context.storefront.i18n.country,\n      language: context.storefront.i18n.language,\n    },\n  });\n\n  if (!collection) {\n    throw new Response(null, {status: 404});\n  }\n\n  const collectionNodes = flattenConnection(collections);\n\n  return json({\n    collection,\n    appliedFilters,\n    collections: collectionNodes,\n    analytics: {\n      pageType: AnalyticsPageType.collection,\n      collectionHandle,\n      resourceId: collection.id,\n    },\n  });\n}\n\nexport default function Collection() {\n  const {collection, collections, appliedFilters} =\n    useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <PageHeader heading={collection.title}>\n        {collection?.description && (\n          <div className=\"flex items-baseline justify-between w-full\">\n            <div>\n              <Text format width=\"narrow\" as=\"p\" className=\"inline-block\">\n                {collection.description}\n              </Text>\n            </div>\n          </div>\n        )}\n      </PageHeader>\n      <Section>\n        <SortFilter\n          filters={collection.products.filters as Filter[]}\n          appliedFilters={appliedFilters}\n          collections={collections as CollectionType[]}\n        >\n          <ProductGrid\n            key={collection.id}\n            collection={collection as CollectionType}\n            url={`/collections/${collection.handle}`}\n            data-test=\"product-grid\"\n          />\n        </SortFilter>\n      </Section>\n    </>\n  );\n}\n\nconst COLLECTION_QUERY = `#graphql\n  ${PRODUCT_CARD_FRAGMENT}\n  query CollectionDetails(\n    $handle: String!\n    $country: CountryCode\n    $language: LanguageCode\n    $pageBy: Int!\n    $cursor: String\n    $filters: [ProductFilter!]\n    $sortKey: ProductCollectionSortKeys!\n    $reverse: Boolean\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      id\n      handle\n      title\n      description\n      seo {\n        description\n        title\n      }\n      image {\n        id\n        url\n        width\n        height\n        altText\n      }\n      products(\n        first: $pageBy,\n        after: $cursor,\n        filters: $filters,\n        sortKey: $sortKey,\n        reverse: $reverse\n      ) {\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n        nodes {\n          ...ProductCard\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n    collections(first: 100) {\n      edges {\n        node {\n          title\n          handle\n        }\n      }\n    }\n  }\n`;\n\nfunction getSortValuesFromParam(sortParam: SortParam | null) {\n  switch (sortParam) {\n    case 'price-high-low':\n      return {\n        sortKey: 'PRICE',\n        reverse: true,\n      };\n    case 'price-low-high':\n      return {\n        sortKey: 'PRICE',\n        reverse: false,\n      };\n    case 'best-selling':\n      return {\n        sortKey: 'BEST_SELLING',\n        reverse: false,\n      };\n    case 'newest':\n      return {\n        sortKey: 'CREATED',\n        reverse: true,\n      };\n    case 'featured':\n      return {\n        sortKey: 'MANUAL',\n        reverse: false,\n      };\n    default:\n      return {\n        sortKey: 'RELEVANCE',\n        reverse: false,\n      };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAiKI;AAhJJ,IAAM,MAAwC,CAAC,EAAC,KAAI,OAAO;AAAA,EACzD,OAAO,MAAM,YAAY,KAAK;AAAA,EAC9B,aAAa,MAAM,YAAY,KAAK;AAAA,EACpC,eAAe;AAAA,EACf,OAAO;AAAA,IACL,MAAM;AAAA,IACN,KAAK,MAAM,YAAY,OAAO;AAAA,IAC9B,QAAQ,MAAM,YAAY,OAAO;AAAA,IACjC,OAAO,MAAM,YAAY,OAAO;AAAA,IAChC,SAAS,MAAM,YAAY,OAAO;AAAA,EACpC;AACF;AAEO,IAAM,SAAS;AAAA,EACpB;AACF;AA4He,SAAR,aAA8B;AACnC,QAAM,EAAC,YAAY,aAAa,eAAc,IAC5C,cAA6B;AAE/B,SACE,sFACE;AAAA,uDAAC,cAAW,SAAS,WAAW,OAC7B,sBAAY,eACX,mDAAC,SAAI,WAAU,8CACb,6DAAC,SACC,6DAAC,QAAK,QAAM,MAAC,OAAM,UAAS,IAAG,KAAI,WAAU,gBAC1C,qBAAW,eADd;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA,KARJ;AAAA;AAAA;AAAA;AAAA,WAUA;AAAA,IACA,mDAAC,WACC;AAAA,MAAC;AAAA;AAAA,QACC,SAAS,WAAW,SAAS;AAAA,QAC7B;AAAA,QACA;AAAA,QAEA;AAAA,UAAC;AAAA;AAAA,YAEC;AAAA,YACA,KAAK,gBAAgB,WAAW;AAAA,YAChC,aAAU;AAAA;AAAA,UAHL,WAAW;AAAA,UADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA;AAAA,MAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,KAZF;AAAA;AAAA;AAAA;AAAA,WAaA;AAAA,OAzBF;AAAA;AAAA;AAAA;AAAA,SA0BA;AAEJ;AAEA,IAAM,mBAAmB;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}

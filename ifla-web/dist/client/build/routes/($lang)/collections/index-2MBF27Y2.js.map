{
  "version": 3,
  "sources": ["../../../../../../app/routes/($lang)/collections/index.tsx"],
  "sourcesContent": ["import {json, type MetaFunction, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {useLoaderData} from '@remix-run/react';\nimport type {\n  Collection,\n  CollectionConnection,\n} from '@shopify/hydrogen/storefront-api-types';\nimport {\n  Grid,\n  Heading,\n  PageHeader,\n  Section,\n  Link,\n  Pagination,\n  getPaginationVariables,\n  Button,\n} from '~/components';\nimport {getImageLoadingPriority} from '~/lib/const';\n\nconst PAGINATION_SIZE = 8;\n\nexport const handle = {\n  seo: {\n    title: 'All Collections',\n  },\n};\n\nexport const loader = async ({request, context: {storefront}}: LoaderArgs) => {\n  const variables = getPaginationVariables(request, PAGINATION_SIZE);\n  const {collections} = await storefront.query<{\n    collections: CollectionConnection;\n  }>(COLLECTIONS_QUERY, {\n    variables: {\n      ...variables,\n      country: storefront.i18n.country,\n      language: storefront.i18n.language,\n    },\n  });\n\n  return json({collections});\n};\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'All Collections',\n  };\n};\n\nexport default function Collections() {\n  const {collections} = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <PageHeader heading=\"Collections\" />\n      <Section>\n        <Pagination connection={collections}>\n          {({\n            endCursor,\n            hasNextPage,\n            hasPreviousPage,\n            nextPageUrl,\n            nodes,\n            prevPageUrl,\n            startCursor,\n            nextLinkRef,\n            isLoading,\n          }) => (\n            <>\n              {hasPreviousPage && (\n                <div className=\"flex items-center justify-center mt-6\">\n                  <Button\n                    to={prevPageUrl}\n                    variant=\"secondary\"\n                    width=\"full\"\n                    prefetch=\"intent\"\n                    disabled={!isLoading}\n                    state={{\n                      pageInfo: {\n                        endCursor,\n                        hasNextPage,\n                        startCursor,\n                      },\n                      nodes,\n                    }}\n                  >\n                    {isLoading ? 'Loading...' : 'Previous products'}\n                  </Button>\n                </div>\n              )}\n              <Grid\n                items={nodes.length === 3 ? 3 : 2}\n                data-test=\"collection-grid\"\n              >\n                {nodes.map((collection, i) => (\n                  <CollectionCard\n                    collection={collection as Collection}\n                    key={collection.id}\n                    loading={getImageLoadingPriority(i, 2)}\n                  />\n                ))}\n              </Grid>\n              {hasNextPage && (\n                <div className=\"flex items-center justify-center mt-6\">\n                  <Button\n                    ref={nextLinkRef}\n                    to={nextPageUrl}\n                    variant=\"secondary\"\n                    width=\"full\"\n                    prefetch=\"intent\"\n                    disabled={!isLoading}\n                    state={{\n                      pageInfo: {\n                        endCursor,\n                        hasPreviousPage,\n                        startCursor,\n                      },\n                      nodes,\n                    }}\n                  >\n                    {isLoading ? 'Loading...' : 'Next products'}\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </Pagination>\n      </Section>\n    </>\n  );\n}\n\nfunction CollectionCard({\n  collection,\n  loading,\n}: {\n  collection: Collection;\n  loading?: HTMLImageElement['loading'];\n}) {\n  return (\n    <Link to={`/collections/${collection.handle}`} className=\"grid gap-4\">\n      <div className=\"card-image bg-primary/5 aspect-[3/2]\">\n        {collection?.image && (\n          <img\n            alt={collection.title}\n            src={collection.image.url}\n            height={400}\n            sizes=\"(max-width: 32em) 100vw, 33vw\"\n            width={600}\n            loading={loading}\n          />\n        )}\n      </div>\n      <Heading as=\"h3\" size=\"copy\">\n        {collection.title}\n      </Heading>\n    </Link>\n  );\n}\n\nconst COLLECTIONS_QUERY = `#graphql\n  query Collections(\n    $country: CountryCode\n    $language: LanguageCode\n    $first: Int\n    $last: Int\n    $startCursor: String\n    $endCursor: String\n  ) @inContext(country: $country, language: $language) {\n    collections(first: $first, last: $last, before: $startCursor, after: $endCursor) {\n      nodes {\n        id\n        title\n        description\n        handle\n        seo {\n          description\n          title\n        }\n        image {\n          id\n          url\n          width\n          height\n          altText\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": []
}

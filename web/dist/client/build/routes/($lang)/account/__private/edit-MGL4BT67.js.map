{
  "version": 3,
  "sources": ["../../../../../../../app/routes/($lang)/account/__private/edit.tsx"],
  "sourcesContent": ["import {json, redirect, type ActionFunction} from '@shopify/remix-oxygen';\nimport {\n  useActionData,\n  Form,\n  useOutletContext,\n  useTransition,\n} from '@remix-run/react';\nimport type {\n  Customer,\n  CustomerUpdateInput,\n  CustomerUpdatePayload,\n} from '@shopify/hydrogen/storefront-api-types';\nimport clsx from 'clsx';\nimport invariant from 'tiny-invariant';\nimport {Button, Text} from '~/components';\nimport {getInputStyleClasses, assertApiErrors} from '~/lib/utils';\nimport {getCustomer} from '../../account';\n\nexport interface AccountOutletContext {\n  customer: Customer;\n}\n\nexport interface ActionData {\n  success?: boolean;\n  formError?: string;\n  fieldErrors?: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    phone?: string;\n    currentPassword?: string;\n    newPassword?: string;\n    newPassword2?: string;\n  };\n}\n\nconst badRequest = (data: ActionData) => json(data, {status: 400});\n\nconst formDataHas = (formData: FormData, key: string) => {\n  if (!formData.has(key)) return false;\n\n  const value = formData.get(key);\n  return typeof value === 'string' && value.length > 0;\n};\n\nexport const handle = {\n  renderInModal: true,\n};\n\nexport const action: ActionFunction = async ({request, context, params}) => {\n  const formData = await request.formData();\n\n  const customerAccessToken = await context.session.get('customerAccessToken');\n\n  invariant(\n    customerAccessToken,\n    'You must be logged in to update your account details.',\n  );\n\n  // Double-check current user is logged in.\n  // Will throw a logout redirect if not.\n  await getCustomer(context, customerAccessToken);\n\n  if (\n    formDataHas(formData, 'newPassword') &&\n    !formDataHas(formData, 'currentPassword')\n  ) {\n    return badRequest({\n      fieldErrors: {\n        currentPassword:\n          'Please enter your current password before entering a new password.',\n      },\n    });\n  }\n\n  if (\n    formData.has('newPassword') &&\n    formData.get('newPassword') !== formData.get('newPassword2')\n  ) {\n    return badRequest({\n      fieldErrors: {\n        newPassword2: 'New passwords must match.',\n      },\n    });\n  }\n\n  try {\n    const customer: CustomerUpdateInput = {};\n\n    formDataHas(formData, 'firstName') &&\n      (customer.firstName = formData.get('firstName') as string);\n    formDataHas(formData, 'lastName') &&\n      (customer.lastName = formData.get('lastName') as string);\n    formDataHas(formData, 'email') &&\n      (customer.email = formData.get('email') as string);\n    formDataHas(formData, 'phone') &&\n      (customer.phone = formData.get('phone') as string);\n    formDataHas(formData, 'newPassword') &&\n      (customer.password = formData.get('newPassword') as string);\n\n    const data = await context.storefront.mutate<{\n      customerUpdate: CustomerUpdatePayload;\n    }>(CUSTOMER_UPDATE_MUTATION, {\n      variables: {\n        customerAccessToken,\n        customer,\n      },\n    });\n\n    assertApiErrors(data.customerUpdate);\n\n    return redirect(params?.lang ? `${params.lang}/account` : '/account');\n  } catch (error: any) {\n    return badRequest({formError: error.message});\n  }\n};\n\n/**\n * Since this component is nested in `accounts/`, it is rendered in a modal via `<Outlet>` in `account.tsx`.\n *\n * This allows us to:\n * - preserve URL state (`/accounts/edit` when the modal is open)\n * - co-locate the edit action with the edit form (rather than grouped in account.tsx)\n * - use the `useOutletContext` hook to access the customer data from the parent route (no additional data loading)\n * - return a simple `redirect()` from this action to close the modal :mindblown: (no useState/useEffect)\n * - use the presence of outlet data (in `account.tsx`) to open/close the modal (no useState)\n */\nexport default function AccountDetailsEdit() {\n  const actionData = useActionData<ActionData>();\n  const {customer} = useOutletContext<AccountOutletContext>();\n  const transition = useTransition();\n\n  return (\n    <>\n      <Text className=\"mt-4 mb-6\" as=\"h3\" size=\"lead\">\n        Update your profile\n      </Text>\n      <Form method=\"post\">\n        {actionData?.formError && (\n          <div className=\"flex items-center justify-center mb-6 bg-red-100 rounded\">\n            <p className=\"m-4 text-sm text-red-900\">{actionData.formError}</p>\n          </div>\n        )}\n        <div className=\"mt-3\">\n          <input\n            className={getInputStyleClasses()}\n            id=\"firstName\"\n            name=\"firstName\"\n            type=\"text\"\n            autoComplete=\"given-name\"\n            placeholder=\"First name\"\n            aria-label=\"First name\"\n            defaultValue={customer.firstName ?? ''}\n          />\n        </div>\n        <div className=\"mt-3\">\n          <input\n            className={getInputStyleClasses()}\n            id=\"lastName\"\n            name=\"lastName\"\n            type=\"text\"\n            autoComplete=\"family-name\"\n            placeholder=\"Last name\"\n            aria-label=\"Last name\"\n            defaultValue={customer.lastName ?? ''}\n          />\n        </div>\n        <div className=\"mt-3\">\n          <input\n            className={getInputStyleClasses()}\n            id=\"phone\"\n            name=\"phone\"\n            type=\"tel\"\n            autoComplete=\"tel\"\n            placeholder=\"Mobile\"\n            aria-label=\"Mobile\"\n            defaultValue={customer.phone ?? ''}\n          />\n        </div>\n        <div className=\"mt-3\">\n          <input\n            className={getInputStyleClasses(actionData?.fieldErrors?.email)}\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            defaultValue={customer.email ?? ''}\n          />\n          {actionData?.fieldErrors?.email && (\n            <p className=\"text-red-500 text-xs\">\n              {actionData.fieldErrors.email} &nbsp;\n            </p>\n          )}\n        </div>\n        <Text className=\"mb-6 mt-6\" as=\"h3\" size=\"lead\">\n          Change your password\n        </Text>\n        <Password\n          name=\"currentPassword\"\n          label=\"Current password\"\n          passwordError={actionData?.fieldErrors?.currentPassword}\n        />\n        {actionData?.fieldErrors?.currentPassword && (\n          <Text size=\"fine\" className=\"mt-1 text-red-500\">\n            {actionData.fieldErrors.currentPassword} &nbsp;\n          </Text>\n        )}\n        <Password\n          name=\"newPassword\"\n          label=\"New password\"\n          passwordError={actionData?.fieldErrors?.newPassword}\n        />\n        <Password\n          name=\"newPassword2\"\n          label=\"Re-enter new password\"\n          passwordError={actionData?.fieldErrors?.newPassword2}\n        />\n        <Text\n          size=\"fine\"\n          color=\"subtle\"\n          className={clsx(\n            'mt-1',\n            actionData?.fieldErrors?.newPassword && 'text-red-500',\n          )}\n        >\n          Passwords must be at least 8 characters.\n        </Text>\n        {actionData?.fieldErrors?.newPassword2 ? <br /> : null}\n        {actionData?.fieldErrors?.newPassword2 && (\n          <Text size=\"fine\" className=\"mt-1 text-red-500\">\n            {actionData.fieldErrors.newPassword2} &nbsp;\n          </Text>\n        )}\n        <div className=\"mt-6\">\n          <Button\n            className=\"text-sm mb-2\"\n            variant=\"primary\"\n            width=\"full\"\n            type=\"submit\"\n            disabled={transition.state !== 'idle'}\n          >\n            {transition.state !== 'idle' ? 'Saving' : 'Save'}\n          </Button>\n        </div>\n        <div className=\"mb-4\">\n          <Button to=\"..\" className=\"text-sm\" variant=\"secondary\" width=\"full\">\n            Cancel\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n}\n\nfunction Password({\n  name,\n  passwordError,\n  label,\n}: {\n  name: string;\n  passwordError?: string;\n  label: string;\n}) {\n  return (\n    <div className=\"mt-3\">\n      <input\n        className={getInputStyleClasses(passwordError)}\n        id={name}\n        name={name}\n        type=\"password\"\n        autoComplete={\n          name === 'currentPassword' ? 'current-password' : undefined\n        }\n        placeholder={label}\n        aria-label={label}\n        minLength={8}\n      />\n    </div>\n  );\n}\n\nconst CUSTOMER_UPDATE_MUTATION = `#graphql\n  mutation customerUpdate($customerAccessToken: String!, $customer: CustomerUpdateInput!) {\n    customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n  `;\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../../../../app/routes/($lang)/api/products.tsx"],
  "sourcesContent": ["import {json, type LoaderArgs} from '@shopify/remix-oxygen';\nimport {flattenConnection} from '@shopify/hydrogen';\nimport {ProductConnection} from '@shopify/hydrogen/storefront-api-types';\nimport invariant from 'tiny-invariant';\nimport {PRODUCT_CARD_FRAGMENT} from '~/data/fragments';\n\n/**\n * Fetch a given set of products from the storefront API\n * @param count\n * @param query\n * @param reverse\n * @param sortKey\n * @returns Product[]\n * @see https://shopify.dev/api/storefront/2023-01/queries/products\n */\nexport async function loader({request, context: {storefront}}: LoaderArgs) {\n  const url = new URL(request.url);\n  const searchParams = new URLSearchParams(url.search);\n\n  const sortKey = searchParams.get('sortKey') ?? 'BEST_SELLING';\n  const query = searchParams.get('query') ?? '';\n\n  let reverse = false;\n  try {\n    const _reverse = searchParams.get('reverse');\n    if (_reverse === 'true') {\n      reverse = true;\n    }\n  } catch (_) {\n    // noop\n  }\n\n  let count = 4;\n  try {\n    const _count = searchParams.get('count');\n    if (typeof _count === 'string') {\n      count = parseInt(_count);\n    }\n  } catch (_) {\n    // noop\n  }\n\n  const {products} = await storefront.query<{\n    products: ProductConnection;\n  }>(PRODUCTS_QUERY, {\n    variables: {\n      count,\n      query,\n      reverse,\n      sortKey,\n      country: storefront.i18n.country,\n      language: storefront.i18n.language,\n    },\n    cache: storefront.CacheLong(),\n  });\n\n  invariant(products, 'No data returned from top products query');\n\n  return json({\n    products: flattenConnection(products),\n  });\n}\n\nconst PRODUCTS_QUERY = `#graphql\n  ${PRODUCT_CARD_FRAGMENT}\n  query (\n    $query: String\n    $count: Int\n    $reverse: Boolean\n    $country: CountryCode\n    $language: LanguageCode\n    $sortKey: ProductSortKeys\n  ) @inContext(country: $country, language: $language) {\n    products(first: $count, sortKey: $sortKey, reverse: $reverse, query: $query) {\n      nodes {\n        ...ProductCard\n      }\n    }\n  }\n`;\n\n// no-op\nexport default function ProductsApiRoute() {\n  return null;\n}\n"],
  "mappings": ";;;;;;;;;;AA+DA,IAAM,iBAAiB;AAAA,IACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBW,SAAR,mBAAoC;AACzC,SAAO;AACT;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../../../../app/routes/($lang)/products/index.tsx"],
  "sourcesContent": ["import {type LoaderArgs} from '@shopify/remix-oxygen';\nimport {useLoaderData} from '@remix-run/react';\nimport type {ProductConnection} from '@shopify/hydrogen/storefront-api-types';\nimport invariant from 'tiny-invariant';\nimport {\n  PageHeader,\n  Section,\n  ProductCard,\n  Grid,\n  Pagination,\n  getPaginationVariables,\n  Button,\n} from '~/components';\nimport {PRODUCT_CARD_FRAGMENT} from '~/data/fragments';\nimport {getImageLoadingPriority} from '~/lib/const';\n\nconst PAGE_BY = 8;\n\nexport async function loader({request, context: {storefront}}: LoaderArgs) {\n  const variables = getPaginationVariables(request, PAGE_BY);\n\n  const data = await storefront.query<{\n    products: ProductConnection;\n  }>(ALL_PRODUCTS_QUERY, {\n    variables: {\n      ...variables,\n      country: storefront.i18n.country,\n      language: storefront.i18n.language,\n    },\n  });\n\n  invariant(data, 'No data returned from Shopify API');\n\n  return data.products;\n}\n\nexport const handle = {\n  seo: {\n    title: 'Products',\n  },\n};\nexport default function AllProducts() {\n  const products = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      <PageHeader heading=\"All Products\" variant=\"allCollections\" />\n      <Section>\n        <Pagination connection={products}>\n          {({\n            endCursor,\n            hasNextPage,\n            hasPreviousPage,\n            nextPageUrl,\n            nodes,\n            prevPageUrl,\n            startCursor,\n            nextLinkRef,\n            isLoading,\n          }) => {\n            const itemsMarkup = nodes.map((product, i) => (\n              <ProductCard\n                key={product.id}\n                product={product}\n                loading={getImageLoadingPriority(i)}\n              />\n            ));\n\n            return (\n              <>\n                {hasPreviousPage && (\n                  <div className=\"flex items-center justify-center mt-6\">\n                    <Button\n                      to={prevPageUrl}\n                      variant=\"secondary\"\n                      prefetch=\"intent\"\n                      width=\"full\"\n                      disabled={!isLoading}\n                      state={{\n                        pageInfo: {\n                          endCursor,\n                          hasNextPage,\n                          startCursor,\n                        },\n                        nodes,\n                      }}\n                    >\n                      {isLoading ? 'Loading...' : 'Previous'}\n                    </Button>\n                  </div>\n                )}\n                <Grid data-test=\"product-grid\">{itemsMarkup}</Grid>\n                {hasNextPage && (\n                  <div className=\"flex items-center justify-center mt-6\">\n                    <Button\n                      ref={nextLinkRef}\n                      to={nextPageUrl}\n                      variant=\"secondary\"\n                      prefetch=\"intent\"\n                      width=\"full\"\n                      disabled={!isLoading}\n                      state={{\n                        pageInfo: {\n                          endCursor,\n                          hasPreviousPage,\n                          startCursor,\n                        },\n                        nodes,\n                      }}\n                    >\n                      {isLoading ? 'Loading...' : 'Next'}\n                    </Button>\n                  </div>\n                )}\n              </>\n            );\n          }}\n        </Pagination>\n      </Section>\n    </>\n  );\n}\n\nconst ALL_PRODUCTS_QUERY = `#graphql\n  ${PRODUCT_CARD_FRAGMENT}\n  query AllProducts(\n    $country: CountryCode\n    $language: LanguageCode\n    $first: Int\n    $last: Int\n    $startCursor: String\n    $endCursor: String\n  ) @inContext(country: $country, language: $language) {\n    products(first: $first, last: $last, before: $startCursor, after: $endCursor) {\n      nodes {\n        ...ProductCard\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CM;AAVC,IAAM,SAAS;AAAA,EACpB,KAAK;AAAA,IACH,OAAO;AAAA,EACT;AACF;AACe,SAAR,cAA+B;AACpC,QAAM,WAAW,cAA6B;AAE9C,SACE,sFACE;AAAA,uDAAC,cAAW,SAAQ,gBAAe,SAAQ,oBAA3C;AAAA;AAAA;AAAA;AAAA,WAA4D;AAAA,IAC5D,mDAAC,WACC,6DAAC,cAAW,YAAY,UACrB,WAAC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,MAAM;AACJ,YAAM,cAAc,MAAM,IAAI,CAAC,SAAS,MACtC;AAAA,QAAC;AAAA;AAAA,UAEC;AAAA,UACA,SAAS,wBAAwB,CAAC;AAAA;AAAA,QAF7B,QAAQ;AAAA,QADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA,CACD;AAED,aACE,sFACG;AAAA,2BACC,mDAAC,SAAI,WAAU,yCACb;AAAA,UAAC;AAAA;AAAA,YACC,IAAI;AAAA,YACJ,SAAQ;AAAA,YACR,UAAS;AAAA,YACT,OAAM;AAAA,YACN,UAAU,CAAC;AAAA,YACX,OAAO;AAAA,cACL,UAAU;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA;AAAA,YACF;AAAA,YAEC,sBAAY,eAAe;AAAA;AAAA,UAf9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAgBA,KAjBF;AAAA;AAAA;AAAA;AAAA,eAkBA;AAAA,QAEF,mDAAC,QAAK,aAAU,gBAAgB,yBAAhC;AAAA;AAAA;AAAA;AAAA,eAA4C;AAAA,QAC3C,eACC,mDAAC,SAAI,WAAU,yCACb;AAAA,UAAC;AAAA;AAAA,YACC,KAAK;AAAA,YACL,IAAI;AAAA,YACJ,SAAQ;AAAA,YACR,UAAS;AAAA,YACT,OAAM;AAAA,YACN,UAAU,CAAC;AAAA,YACX,OAAO;AAAA,cACL,UAAU;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA;AAAA,YACF;AAAA,YAEC,sBAAY,eAAe;AAAA;AAAA,UAhB9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAiBA,KAlBF;AAAA;AAAA;AAAA;AAAA,eAmBA;AAAA,WA3CJ;AAAA;AAAA;AAAA;AAAA,aA6CA;AAAA,IAEJ,KApEF;AAAA;AAAA;AAAA;AAAA,WAqEA,KAtEF;AAAA;AAAA;AAAA;AAAA,WAuEA;AAAA,OAzEF;AAAA;AAAA;AAAA;AAAA,SA0EA;AAEJ;AAEA,IAAM,qBAAqB;AAAA,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}

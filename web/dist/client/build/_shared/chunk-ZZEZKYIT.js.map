{
  "version": 3,
  "sources": ["../../../../app/routes/($lang)/account/__public/login.tsx"],
  "sourcesContent": ["import {\n  json,\n  redirect,\n  type MetaFunction,\n  type ActionFunction,\n  type AppLoadContext,\n  type LoaderArgs,\n} from '@shopify/remix-oxygen';\nimport {Form, useActionData, useLoaderData} from '@remix-run/react';\nimport {useState} from 'react';\nimport {getInputStyleClasses} from '~/lib/utils';\nimport {Link} from '~/components';\nimport type {CustomerAccessTokenCreatePayload} from '@shopify/hydrogen/storefront-api-types';\n\nexport const handle = {\n  isPublic: true,\n};\n\nexport async function loader({context, params}: LoaderArgs) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n\n  if (customerAccessToken) {\n    return redirect(params.lang ? `${params.lang}/account` : '/account');\n  }\n\n  // TODO: Query for this?\n  return json({shopName: 'Hydrogen'});\n}\n\ntype ActionData = {\n  formError?: string;\n};\n\nconst badRequest = (data: ActionData) => json(data, {status: 400});\n\nexport const action: ActionFunction = async ({request, context, params}) => {\n  const formData = await request.formData();\n\n  const email = formData.get('email');\n  const password = formData.get('password');\n\n  if (\n    !email ||\n    !password ||\n    typeof email !== 'string' ||\n    typeof password !== 'string'\n  ) {\n    return badRequest({\n      formError: 'Please provide both an email and a password.',\n    });\n  }\n\n  const {session, storefront} = context;\n\n  try {\n    const customerAccessToken = await doLogin(context, {email, password});\n    session.set('customerAccessToken', customerAccessToken);\n\n    return redirect(params.lang ? `/${params.lang}/account` : '/account', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error: any) {\n    if (storefront.isApiError(error)) {\n      return badRequest({\n        formError: 'Something went wrong. Please try again later.',\n      });\n    }\n\n    /**\n     * The user did something wrong, but the raw error from the API is not super friendly.\n     * Let's make one up.\n     */\n    return badRequest({\n      formError:\n        'Sorry. We did not recognize either your email or password. Please try to sign in again or create a new account.',\n    });\n  }\n};\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Login',\n  };\n};\n\nexport default function Login() {\n  const {shopName} = useLoaderData<typeof loader>();\n  const actionData = useActionData<ActionData>();\n  const [nativeEmailError, setNativeEmailError] = useState<null | string>(null);\n  const [nativePasswordError, setNativePasswordError] = useState<null | string>(\n    null,\n  );\n\n  return (\n    <div className=\"flex justify-center my-24 px-4\">\n      <div className=\"max-w-md w-full\">\n        <h1 className=\"text-4xl\">Sign in.</h1>\n        {/* TODO: Add onSubmit to validate _before_ submission with native? */}\n        <Form\n          method=\"post\"\n          noValidate\n          className=\"pt-6 pb-8 mt-4 mb-4 space-y-3\"\n        >\n          {actionData?.formError && (\n            <div className=\"flex items-center justify-center mb-6 bg-zinc-500\">\n              <p className=\"m-4 text-s text-contrast\">{actionData.formError}</p>\n            </div>\n          )}\n          <div>\n            <input\n              className={`mb-1 ${getInputStyleClasses(nativeEmailError)}`}\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              placeholder=\"Email address\"\n              aria-label=\"Email address\"\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus\n              onBlur={(event) => {\n                setNativeEmailError(\n                  event.currentTarget.value.length &&\n                    !event.currentTarget.validity.valid\n                    ? 'Invalid email address'\n                    : null,\n                );\n              }}\n            />\n            {nativeEmailError && (\n              <p className=\"text-red-500 text-xs\">{nativeEmailError} &nbsp;</p>\n            )}\n          </div>\n\n          <div>\n            <input\n              className={`mb-1 ${getInputStyleClasses(nativePasswordError)}`}\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n              minLength={8}\n              required\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus\n              onBlur={(event) => {\n                if (\n                  event.currentTarget.validity.valid ||\n                  !event.currentTarget.value.length\n                ) {\n                  setNativePasswordError(null);\n                } else {\n                  setNativePasswordError(\n                    event.currentTarget.validity.valueMissing\n                      ? 'Please enter a password'\n                      : 'Passwords must be at least 8 characters',\n                  );\n                }\n              }}\n            />\n            {nativePasswordError && (\n              <p className=\"text-red-500 text-xs\">\n                {' '}\n                {nativePasswordError} &nbsp;\n              </p>\n            )}\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <button\n              className=\"bg-primary text-contrast rounded py-2 px-4 focus:shadow-outline block w-full\"\n              type=\"submit\"\n            >\n              Sign in\n            </button>\n          </div>\n          <div className=\"flex justify-between items-center mt-8 border-t border-gray-300\">\n            <p className=\"align-baseline text-sm mt-6\">\n              New to {shopName}? &nbsp;\n              <Link className=\"inline underline\" to=\"/account/register\">\n                Create an account\n              </Link>\n            </p>\n            <Link\n              className=\"mt-6 inline-block align-baseline text-sm text-primary/50\"\n              to=\"/account/recover\"\n            >\n              Forgot password\n            </Link>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nconst LOGIN_MUTATION = `#graphql\n  mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n\nexport async function doLogin(\n  {storefront}: AppLoadContext,\n  {\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  },\n) {\n  const data = await storefront.mutate<{\n    customerAccessTokenCreate: CustomerAccessTokenCreatePayload;\n  }>(LOGIN_MUTATION, {\n    variables: {\n      input: {\n        email,\n        password,\n      },\n    },\n  });\n\n  if (data?.customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n    return data.customerAccessTokenCreate.customerAccessToken.accessToken;\n  }\n\n  /**\n   * Something is wrong with the user's input.\n   */\n  throw new Error(\n    data?.customerAccessTokenCreate?.customerUserErrors.join(', '),\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react"]
}
